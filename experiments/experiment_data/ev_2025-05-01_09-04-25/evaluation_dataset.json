[
  {
    "resource": "https://sparql.swisslipids.org/.well-known/sparql-examples/16",
    "natural_language_question": "For a given lipid (SWISSLIPID:000399814, Ceramide), return a list of all enzymes in UniProtKB/Swiss-Prot annotated to catalyze reactions involving that lipid.\nThis query does not consider the hierarchy: it looks for reactions and enzymes only for the specified lipid.",
    "ground_truth_query": "PREFIX SWISSLIPID: <https://swisslipids.org/rdf/SLM_>\nPREFIX owl: <http://www.w3.org/2002/07/owl#>\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX rh: <http://rdf.rhea-db.org/>\nPREFIX up: <http://purl.uniprot.org/core/>\n\n# Example 16\nSELECT ?startId ?startName ?uniprot\nWHERE\n{\n  # SwissLipids query (list of) identifier(s)\n  VALUES ?startId { SWISSLIPID:000399814 }\n  # name\n  ?startId rdfs:label ?startName .\n  # ChEBI x-ref\n  ?startId owl:equivalentClass ?chebi .\n  # federated query to Rhea\n  SERVICE <https://sparql.rhea-db.org/sparql> {\n  \t?rhea rh:side/rh:contains/rh:compound/rh:chebi ?chebi .\n  }    \n  # federated query to UniProt\n  SERVICE <https://sparql.uniprot.org/sparql> {\n    ?uniprot up:reviewed true .\n    ?uniprot up:annotation/up:catalyticActivity/up:catalyzedReaction ?rhea .\n  }\n} \nORDER BY ?startId",
    "target_endpoint": "https://sparql.swisslipids.org/sparql/",
    "federates_with": [
      "https://sparql.uniprot.org/sparql",
      "https://sparql.rhea-db.org/sparql"
    ],
    "endpoint_set": "SwissLipids",
    "file_path": "SwissLipids/16.ttl",
    "predicted_query": "# https://sparql.swisslipids.org/sparql/\nPREFIX SWISSLIPID: <https://swisslipids.org/rdf/SLM_>\nPREFIX owl: <http://www.w3.org/2002/07/owl#>\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX rh: <http://rdf.rhea-db.org/>\nPREFIX up: <http://purl.uniprot.org/core/>\n\nSELECT DISTINCT ?uniprot ?uniprotName\nWHERE\n{\n  # SwissLipids query (list of) identifier(s)\n  VALUES ?startId { SWISSLIPID:000399814 }\n  \n  # Find the ChEBI equivalent for the lipid in SwissLipids\n  ?startId owl:equivalentClass ?chebi .\n  \n  # Federated query to Rhea to find reactions involving the ChEBI compound\n  SERVICE <https://sparql.rhea-db.org/sparql> {\n    ?rhea rh:side/rh:contains/rh:compound/rh:chebi ?chebi .\n    # Ensure we only get approved reactions\n    ?rhea rdfs:subClassOf rh:Reaction ;\n          rh:status rh:Approved .\n  }    \n  \n  # Federated query to UniProt to find enzymes catalyzing these reactions\n  SERVICE <https://sparql.uniprot.org/sparql> {\n    # Find proteins that catalyze the reaction\n    ?uniprot up:annotation/up:catalyticActivity/up:catalyzedReaction ?rhea .\n    \n    # Filter for reviewed entries (Swiss-Prot)\n    ?uniprot up:reviewed true .\n    \n    # Get the recommended full name of the protein\n    ?uniprot up:recommendedName/up:fullName ?uniprotName .\n  }\n} \nORDER BY ?uniprot",
    "predicted_endpoint": "https://sparql.swisslipids.org/sparql/",
    "predicted_endpoint_equal_to_target_endpoint": true,
    "predicted_endpoint_in_federates_with": false,
    "predicted_endpoint_or_federated_endpoint": true,
    "run_id_langsmith": "9ddd4a7a-9f21-44f9-873e-385d41a9b298",
    "evaluation_timestamp": "2025-05-01T09:04:55.548512",
    "question_understanding_prompt_tokens": 307,
    "question_understanding_completion_tokens": 42,
    "question_understanding_total_tokens": 349,
    "sparql_query_construction_prompt_tokens": 6666,
    "sparql_query_construction_completion_tokens": 0,
    "sparql_query_construction_total_tokens": 6666,
    "is_valid_sparql": true,
    "sparql_syntax_error": "syntactically correct",
    "result_eval_f1_score": 0.0,
    "result_eval_precision": 0.0,
    "result_eval_recall": 0.0,
    "error_occured_at_endpoint": true,
    "predicted_query_result_is_empty": true,
    "ground_truth_query_result_is_empty": true,
    "error_occured_at_endpoint_message": "The read operation timed out"
  },
  {
    "resource": "https://sparql.swisslipids.org/.well-known/sparql-examples/6",
    "natural_language_question": "For a given lipid (SWISSLIPID:000399814, Ceramide), return a list of all corresponding reactions (Rhea IDs and equation), as well as their enzymes as annotated in UniProtKB/Swiss-Prot) enzymes themselves (ID and protein name).\nThis query does not consider the hierarchy: it looks for reactions and enzymes only for the specified lipid.",
    "ground_truth_query": "PREFIX SWISSLIPID: <https://swisslipids.org/rdf/SLM_>\nPREFIX owl: <http://www.w3.org/2002/07/owl#>\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX rh: <http://rdf.rhea-db.org/>\nPREFIX up: <http://purl.uniprot.org/core/>\n\n# Example 6\nSELECT ?startId ?startName ?chebi ?rhea ?rheaEquation ?uniprot ?uniprotName\nWHERE\n{\n  # SwissLipids query (list of) identifier(s)\n  VALUES ?startId { SWISSLIPID:000399814 }\n  # name\n  ?startId rdfs:label ?startName .\n  # ChEBI x-ref\n  ?startId owl:equivalentClass ?chebi .\n  # federated query to Rhea\n  SERVICE <https://sparql.rhea-db.org/sparql> {\n  \t?rhea rh:equation ?rheaEquation .\n  \t?rhea rh:side/rh:contains/rh:compound/rh:chebi ?chebi .\n  }    \n  # federated query to UniProt\n  SERVICE <https://sparql.uniprot.org/sparql> {\n    ?uniprot up:reviewed true .\n    ?uniprot up:recommendedName/up:fullName ?uniprotName .\n    ?uniprot up:annotation/up:catalyticActivity/up:catalyzedReaction ?rhea .\n  }\n} \nORDER BY ?startId",
    "target_endpoint": "https://sparql.swisslipids.org/sparql/",
    "federates_with": [
      "https://sparql.uniprot.org/sparql",
      "https://sparql.rhea-db.org/sparql"
    ],
    "endpoint_set": "SwissLipids",
    "file_path": "SwissLipids/6.ttl",
    "predicted_query": "# https://sparql.swisslipids.org/sparql/\nPREFIX SWISSLIPID: <https://swisslipids.org/rdf/SLM_>\nPREFIX owl: <http://www.w3.org/2002/07/owl#>\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX rh: <http://rdf.rhea-db.org/>\nPREFIX up: <http://purl.uniprot.org/core/>\n\nSELECT ?rhea ?rheaAccession ?rheaEquation ?uniprot ?uniprotName\nWHERE\n{\n  # Start with the given SwissLipids identifier\n  VALUES ?swisslipid { SWISSLIPID:000399814 }\n\n  # Find the equivalent ChEBI identifier for the lipid\n  # SwissLipids entries are linked to ChEBI via owl:equivalentClass\n  ?swisslipid owl:equivalentClass ?chebi .\n\n  # Federated query to Rhea to find reactions involving the ChEBI compound\n  SERVICE <https://sparql.rhea-db.org/sparql> {\n    # Find reactions where the ChEBI compound is present on either side (reactant or product)\n    # The path rh:side/rh:contains/rh:compound/rh:chebi links a reaction to its involved ChEBI compounds\n    ?rhea rh:side/rh:contains/rh:compound/rh:chebi ?chebi .\n    # Get Rhea accession (ID) and equation for the reaction\n    ?rhea rh:accession ?rheaAccession .\n    ?rhea rh:equation ?rheaEquation .\n  }\n\n  # Federated query to UniProt to find enzymes catalyzing these reactions\n  SERVICE <https://sparql.uniprot.org/sparql> {\n    # Find UniProt entries that have a catalytic activity annotation linked to the Rhea reaction\n    ?uniprot up:annotation/up:catalyticActivity/up:catalyzedReaction ?rhea .\n    # Filter for reviewed entries (UniProtKB/Swiss-Prot)\n    ?uniprot up:reviewed true .\n    # Get the protein name (recommended full name)\n    ?uniprot up:recommendedName/up:fullName/rdfs:label ?uniprotName .\n  }\n}",
    "predicted_endpoint": "https://sparql.swisslipids.org/sparql/",
    "predicted_endpoint_equal_to_target_endpoint": true,
    "predicted_endpoint_in_federates_with": false,
    "predicted_endpoint_or_federated_endpoint": true,
    "run_id_langsmith": "d82a919d-a637-4297-a62c-941651b09f3e",
    "evaluation_timestamp": "2025-05-01T09:10:22.920787",
    "question_understanding_prompt_tokens": 319,
    "question_understanding_completion_tokens": 89,
    "question_understanding_total_tokens": 408,
    "sparql_query_construction_prompt_tokens": 6705,
    "sparql_query_construction_completion_tokens": 537,
    "sparql_query_construction_total_tokens": 7242,
    "is_valid_sparql": true,
    "sparql_syntax_error": "syntactically correct",
    "result_eval_f1_score": 0.0,
    "result_eval_precision": 0.0,
    "result_eval_recall": 0.0,
    "error_occured_at_endpoint": true,
    "predicted_query_result_is_empty": true,
    "ground_truth_query_result_is_empty": true,
    "error_occured_at_endpoint_message": "The read operation timed out"
  },
  {
    "resource": "https://sparql.swisslipids.org/.well-known/sparql-examples/5",
    "natural_language_question": "For a given lipid (SWISSLIPID:000399814, Ceramide), return a list of all corresponding reactions (Rhea IDs and equation).\nThis query does consider the hierarchy: it looks for reactions involving the specified lipid and/or its more specific forms.",
    "ground_truth_query": "PREFIX SWISSLIPID: <https://swisslipids.org/rdf/SLM_>\nPREFIX owl: <http://www.w3.org/2002/07/owl#>\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX rh: <http://rdf.rhea-db.org/>\n\n# Example 5\nSELECT ?startId ?startName ?id ?name ?chebi ?rhea ?rheaEquation \nWHERE\n{\n  # SwissLipids query (list of) identifier(s)\n  VALUES ?startId { SWISSLIPID:000399814 }\n  # name\n  ?startId rdfs:label ?startName .\n  # Retrieve children lipids \n  ?id rdfs:subClassOf* ?startId .\n  ?id rdfs:label ?name .\n  # ChEBI x-ref\n  ?id owl:equivalentClass ?chebi .\n  # federated query to Rhea\n  SERVICE <https://sparql.rhea-db.org/sparql> {\n  \t?rhea rh:equation ?rheaEquation .\n  \t?rhea rh:side/rh:contains/rh:compound/rh:chebi ?chebi .\n  }    \n} \nORDER BY  ?startId ?id",
    "target_endpoint": "https://sparql.swisslipids.org/sparql/",
    "federates_with": [
      "https://sparql.rhea-db.org/sparql"
    ],
    "endpoint_set": "SwissLipids",
    "file_path": "SwissLipids/5.ttl",
    "predicted_query": "# https://sparql.swisslipids.org/sparql/\nPREFIX SWISSLIPID: <https://swisslipids.org/rdf/SLM_>\nPREFIX owl: <http://www.w3.org/2002/07/owl#>\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX rh: <http://rdf.rhea-db.org/>\nPREFIX CHEBI: <http://purl.obolibrary.org/obo/CHEBI_>\n\nSELECT DISTINCT ?rheaId ?equation\nWHERE {\n  # Start with the given SwissLipids ID\n  VALUES ?swisslipid { SWISSLIPID:000399814 }\n\n  # Find the equivalent ChEBI ID in SwissLipids\n  # SwissLipids links to ChEBI using owl:equivalentClass\n  ?swisslipid owl:equivalentClass ?chebi .\n\n  # Federated query to Rhea to find reactions involving the lipid or its descendants\n  SERVICE <https://sparql.rhea-db.org/sparql> {\n    # Find all ChEBI entities that are the lipid (?chebi) or its descendants in the hierarchy\n    # rdfs:subClassOf* includes the starting node itself\n    ?descendantChebi rdfs:subClassOf* ?chebi .\n\n    # Find Rhea reactions involving these descendant ChEBI entities\n    # A compound in Rhea can link to ChEBI in several ways (chebi, reactivePart/chebi, underlyingChebi/chebi)\n    ?rhea rh:side/rh:contains/rh:compound ?compound .\n    { ?compound rh:chebi ?descendantChebi }\n    UNION\n    { ?compound rh:reactivePart/rh:chebi ?descendantChebi }\n    UNION\n    { ?compound rh:underlyingChebi/rh:chebi ?descendantChebi }\n\n    # Get the Rhea ID and equation for the found reactions\n    ?rhea rh:accession ?rheaId .\n    ?rhea rh:equation ?equation .\n  }\n}\nORDER BY ?rheaId",
    "predicted_endpoint": "https://sparql.swisslipids.org/sparql/",
    "predicted_endpoint_equal_to_target_endpoint": true,
    "predicted_endpoint_in_federates_with": false,
    "predicted_endpoint_or_federated_endpoint": true,
    "run_id_langsmith": "0b4efe5f-92bc-4442-b290-9fc7f939614c",
    "evaluation_timestamp": "2025-05-01T09:15:44.192977",
    "question_understanding_prompt_tokens": 298,
    "question_understanding_completion_tokens": 66,
    "question_understanding_total_tokens": 364,
    "sparql_query_construction_prompt_tokens": 5426,
    "sparql_query_construction_completion_tokens": 0,
    "sparql_query_construction_total_tokens": 5426,
    "is_valid_sparql": true,
    "sparql_syntax_error": "syntactically correct",
    "result_eval_f1_score": 0.0,
    "result_eval_precision": 0.0,
    "result_eval_recall": 0.0,
    "error_occured_at_endpoint": false,
    "predicted_query_result_is_empty": false,
    "ground_truth_query_result_is_empty": false,
    "error_occured_at_endpoint_message": "no error"
  },
  {
    "resource": "https://sparql.swisslipids.org/.well-known/sparql-examples/34",
    "natural_language_question": "Lipids affected by human enzymes",
    "ground_truth_query": "PREFIX owl: <http://www.w3.org/2002/07/owl#>\nPREFIX rh: <http://rdf.rhea-db.org/>\nPREFIX taxon: <http://purl.uniprot.org/taxonomy/>\nPREFIX up: <http://purl.uniprot.org/core/>\n\nSELECT ?swisslipid  {\n  ?swisslipid owl:equivalentClass ?chebi .\n  SERVICE <https://sparql.rhea-db.org/sparql> {\n    ?rhea rh:side/rh:contains/rh:compound ?compound .\n\t?compound (rh:chebi|(rh:reactivePart/rh:chebi)|(rh:underlyingChebi/rh:chebi)) ?metabolite . \n  }\n  SERVICE <https://sparql.uniprot.org/sparql> {\n    ?catalyticActivityAnnotation up:catalyticActivity/up:catalyzedReaction ?rhea .\n    ?protein up:annotation ?catalyticActivityAnnotation ;\n             up:organism taxon:9606 .\n  }\n}\nLIMIT 1",
    "target_endpoint": "https://sparql.swisslipids.org/sparql/",
    "federates_with": [
      "https://sparql.uniprot.org/sparql",
      "https://sparql.rhea-db.org/sparql"
    ],
    "endpoint_set": "SwissLipids",
    "file_path": "SwissLipids/34.ttl",
    "predicted_query": "# Primary endpoint: https://sparql.uniprot.org/sparql/\nPREFIX up: <http://purl.uniprot.org/core/>\nPREFIX taxon: <http://purl.uniprot.org/taxonomy/>\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX rh: <http://rdf.rhea-db.org/>\nPREFIX CHEBI: <http://purl.obolibrary.org/obo/CHEBI_>\nPREFIX owl: <http://www.w3.org/2002/07/owl#>\n\nSELECT DISTINCT ?swisslipid ?swisslipidName ?protein ?proteinName\nWHERE {\n  # Find human proteins in UniProt\n  SERVICE <https://sparql.uniprot.org/sparql/> {\n    ?protein up:organism taxon:9606 ; # Filter for human (taxon:9606)\n             up:annotation ?catalyticActivityAnnotation .\n    ?catalyticActivityAnnotation a up:Catalytic_Activity_Annotation ;\n                                 up:catalyticActivity ?catalyticActivity .\n    ?catalyticActivity up:catalyzedReaction ?rheaReaction . # Link to Rhea reaction\n    OPTIONAL { ?protein up:recommendedName/up:fullName ?proteinName . } # Get protein name\n  }\n\n  # Find compounds involved in the reactions catalyzed by human enzymes in Rhea\n  SERVICE <https://sparql.rhea-db.org/sparql/> {\n    ?rheaReaction rdfs:subClassOf rh:Reaction ;\n                  rh:side ?reactionSide .\n    ?reactionSide rh:contains ?participant .\n    ?participant rh:compound ?compound .\n    ?compound rh:chebi ?chebi . # Get the ChEBI identifier for the compound\n  }\n\n  # Find SwissLipids entries corresponding to the ChEBI identifiers\n  SERVICE <https://sparql.swisslipids.org/sparql/> {\n    ?swisslipid owl:equivalentClass ?chebi . # Link SwissLipids to ChEBI\n    ?swisslipid rdfs:label ?swisslipidName . # Get the SwissLipid name\n    # Optional: Add a filter if you want to ensure ?chebi is a lipid or lipid-like molecule in ChEBI hierarchy\n    # ?chebi rdfs:subClassOf* CHEBI:18059 ; # CHEBI:18059 is 'lipid'\n    #        rdfs:subClassOf* CHEBI:24940 . # CHEBI:24940 is 'lipid-like molecule'\n  }\n}",
    "predicted_endpoint": "Primary",
    "predicted_endpoint_equal_to_target_endpoint": false,
    "predicted_endpoint_in_federates_with": false,
    "predicted_endpoint_or_federated_endpoint": false,
    "run_id_langsmith": "bbea9f74-ae8c-49cb-aa6c-69762b953b15",
    "evaluation_timestamp": "2025-05-01T09:18:31.597269",
    "question_understanding_prompt_tokens": 244,
    "question_understanding_completion_tokens": 22,
    "question_understanding_total_tokens": 266,
    "sparql_query_construction_prompt_tokens": 6986,
    "sparql_query_construction_completion_tokens": 0,
    "sparql_query_construction_total_tokens": 6986,
    "is_valid_sparql": true,
    "sparql_syntax_error": "syntactically correct",
    "result_eval_f1_score": 0.0,
    "result_eval_precision": 0.0,
    "result_eval_recall": 0.0,
    "error_occured_at_endpoint": true,
    "predicted_query_result_is_empty": true,
    "ground_truth_query_result_is_empty": true,
    "error_occured_at_endpoint_message": "unknown url type: 'Primary?query=%23+Primary+endpoint%3A+https%3A//sparql.uniprot.org/sparql/%0APREFIX+up%3A+%3Chttp%3A//purl.uniprot.org/core/%3E%0APREFIX+taxon%3A+%3Chttp%3A//purl.uniprot.org/taxonomy/%3E%0APREFIX+rdfs%3A+%3Chttp%3A//www.w3.org/2000/01/rdf-schema%23%3E%0APREFIX+rh%3A+%3Chttp%3A//rdf.rhea-db.org/%3E%0APREFIX+CHEBI%3A+%3Chttp%3A//purl.obolibrary.org/obo/CHEBI_%3E%0APREFIX+owl%3A+%3Chttp%3A//www.w3.org/2002/07/owl%23%3E%0A%0ASELECT+DISTINCT+%3Fswisslipid+%3FswisslipidName+%3Fprotein+%3FproteinName%0AWHERE+%7B%0A++%23+Find+human+proteins+in+UniProt%0A++SERVICE+%3Chttps%3A//sparql.uniprot.org/sparql/%3E+%7B%0A++++%3Fprotein+up%3Aorganism+taxon%3A9606+%3B+%23+Filter+for+human+%28taxon%3A9606%29%0A+++++++++++++up%3Aannotation+%3FcatalyticActivityAnnotation+.%0A++++%3FcatalyticActivityAnnotation+a+up%3ACatalytic_Activity_Annotation+%3B%0A+++++++++++++++++++++++++++++++++up%3AcatalyticActivity+%3FcatalyticActivity+.%0A++++%3FcatalyticActivity+up%3AcatalyzedReaction+%3FrheaReaction+.+%23+Link+to+Rhea+reaction%0A++++OPTIONAL+%7B+%3Fprotein+up%3ArecommendedName/up%3AfullName+%3FproteinName+.+%7D+%23+Get+protein+name%0A++%7D%0A%0A++%23+Find+compounds+involved+in+the+reactions+catalyzed+by+human+enzymes+in+Rhea%0A++SERVICE+%3Chttps%3A//sparql.rhea-db.org/sparql/%3E+%7B%0A++++%3FrheaReaction+rdfs%3AsubClassOf+rh%3AReaction+%3B%0A++++++++++++++++++rh%3Aside+%3FreactionSide+.%0A++++%3FreactionSide+rh%3Acontains+%3Fparticipant+.%0A++++%3Fparticipant+rh%3Acompound+%3Fcompound+.%0A++++%3Fcompound+rh%3Achebi+%3Fchebi+.+%23+Get+the+ChEBI+identifier+for+the+compound%0A++%7D%0A%0A++%23+Find+SwissLipids+entries+corresponding+to+the+ChEBI+identifiers%0A++SERVICE+%3Chttps%3A//sparql.swisslipids.org/sparql/%3E+%7B%0A++++%3Fswisslipid+owl%3AequivalentClass+%3Fchebi+.+%23+Link+SwissLipids+to+ChEBI%0A++++%3Fswisslipid+rdfs%3Alabel+%3FswisslipidName+.+%23+Get+the+SwissLipid+name%0A++++%23+Optional%3A+Add+a+filter+if+you+want+to+ensure+%3Fchebi+is+a+lipid+or+lipid-like+molecule+in+ChEBI+hierarchy%0A++++%23+%3Fchebi+rdfs%3AsubClassOf%2A+CHEBI%3A18059+%3B+%23+CHEBI%3A18059+is+%27lipid%27%0A++++%23++++++++rdfs%3AsubClassOf%2A+CHEBI%3A24940+.+%23+CHEBI%3A24940+is+%27lipid-like+molecule%27%0A++%7D%0A%7D&format=json&output=json&results=json'"
  },
  {
    "resource": "https://sparql.uniprot.org/.well-known/sparql-examples/118_biosodafrontend_rat_brain_human_cancer",
    "natural_language_question": "What are the Homo sapiens genes associated with cancer and their orthologs expressed in the Rattus norvegicus brain?",
    "ground_truth_query": "PREFIX up:<http://purl.uniprot.org/core/>\nPREFIX taxon:<http://purl.uniprot.org/taxonomy/>\nPREFIX rdfs:<http://www.w3.org/2000/01/rdf-schema#>\nPREFIX orth:<http://purl.org/net/orth#>\nPREFIX dcterms:<http://purl.org/dc/terms/>\nPREFIX obo:<http://purl.obolibrary.org/obo/>\nPREFIX lscr:<http://purl.org/lscr#>\nPREFIX genex:<http://purl.org/genex#>\nPREFIX sio: <http://semanticscience.org/resource/>\nSELECT ?gene ?orthologous_protein2 WHERE {\n  {\n    SELECT ?protein1 WHERE {\n      ?protein1 a up:Protein;\n        up:organism/up:scientificName 'Homo sapiens' ;\n        up:annotation ?annotation .\n      ?annotation rdfs:comment ?annotation_text.\n      ?annotation a up:Disease_Annotation .\n      FILTER CONTAINS (?annotation_text, \"cancer\")\n    }\n  }\n  SERVICE <https://sparql.omabrowser.org/sparql/> {\n    SELECT ?orthologous_protein2 ?protein1 ?gene WHERE {\n      ?protein_OMA a orth:Protein .\n      ?orthologous_protein2 a orth:Protein .\n      ?cluster a orth:OrthologsCluster .\n      ?cluster orth:hasHomologousMember ?node1 .\n      ?cluster orth:hasHomologousMember ?node2 .\n      ?node2 orth:hasHomologousMember* ?protein_OMA .\n      ?node1 orth:hasHomologousMember* ?orthologous_protein2 \n      .?orthologous_protein2 orth:organism/obo:RO_0002162/up:scientificName 'Rattus norvegicus' .\n      ?orthologous_protein2 sio:SIO_010079 ?gene .\n      ?protein_OMA lscr:xrefUniprot ?protein1 .\n      FILTER(?node1 != ?node2)\n    }\n  }\n  SERVICE <https://www.bgee.org/sparql/> {\n    ?gene genex:isExpressedIn ?anatEntity .\n    ?anatEntity rdfs:label 'brain' .\n    ?gene orth:organism ?org . \n    ?org obo:RO_0002162 taxon:10116 .\n  }\n}",
    "target_endpoint": "https://sparql.uniprot.org/sparql",
    "federates_with": [
      "https://sparql.omabrowser.org/sparql/",
      "https://www.bgee.org/sparql/"
    ],
    "endpoint_set": "Uniprot",
    "file_path": "UniProt/118_biosodafrontend_rat_brain_human_cancer.ttl",
    "predicted_query": "# https://sparql.uniprot.org/sparql/\nPREFIX up: <http://purl.uniprot.org/core/>\nPREFIX taxon: <http://purl.uniprot.org/taxonomy/>\nPREFIX skos: <http://www.w3.org/2004/02/skos/core#>\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX orthodb: <http://purl.orthodb.org/>\nPREFIX genex: <http://purl.org/genex#>\nPREFIX lscr: <http://purl.org/lscr#>\n\nSELECT DISTINCT ?humanGeneName ?ratProtein\nWHERE {\n  # Find human proteins (Homo sapiens)\n  ?humanProtein a up:Protein ;\n                up:organism taxon:9606 ; # Homo sapiens\n                up:annotation ?diseaseAnnotation .\n\n  # Filter for proteins associated with diseases related to cancer\n  ?diseaseAnnotation a up:Disease_Annotation ;\n                   up:disease ?disease .\n  ?disease skos:prefLabel ?diseaseLabel .\n  FILTER(regex(str(?diseaseLabel), \"cancer\", \"i\")) # Filter diseases by label containing \"cancer\"\n\n  # Get the preferred name of the human gene encoded by the protein\n  ?humanProtein up:encodedBy ?humanGene .\n  ?humanGene skos:prefLabel ?humanGeneName .\n\n  # Get the OrthoDB orthogroup URI for the human protein\n  ?humanProtein rdfs:seeAlso ?orthoGroup .\n  FILTER(STRSTARTS(STR(?orthoGroup), \"http://purl.orthodb.org/odbgroup/\")) # Ensure the xref is an OrthoDB group\n\n  # Use the OrthoDB service to find members of the orthogroup\n  SERVICE <https://sparql.orthodb.org/sparql/> {\n    ?orthoGroup orthodb:hasMember ?orthoMember .\n    # Get the UniProt xref for each member in the orthogroup\n    ?orthoMember orthodb:xref/orthodb:xrefResource ?ratProtein .\n  }\n\n  # Use the UniProt service to check if the ortholog is from Rattus norvegicus\n  # and get its Ensembl gene identifier\n  SERVICE <https://sparql.uniprot.org/sparql/> {\n     ?ratProtein a up:Protein ;\n                 up:organism taxon:10116 . # Rattus norvegicus\n\n     # Get the gene encoded by the rat protein\n     ?ratProtein up:encodedBy ?ratGene .\n     # Get the Ensembl gene xref for the rat gene\n     ?ratGene rdfs:seeAlso ?ensemblGene .\n     FILTER(STRSTARTS(STR(?ensemblGene), \"http://rdf.ebi.ac.uk/resource/ensembl/\")) # Ensure the xref is an Ensembl gene\n  }\n\n  # Use the Bgee service to check if the Rattus norvegicus gene is expressed in the brain\n  SERVICE <https://www.bgee.org/sparql/> {\n    # Find the Bgee gene corresponding to the Ensembl gene identifier\n    ?bgeeGene lscr:xrefEnsemblGene ?ensemblGene .\n\n    # Check for expression in an anatomic entity labeled \"brain\"\n    ?bgeeGene genex:isExpressedIn ?brainEntity .\n    ?brainEntity rdfs:label \"brain\" . # Filter for the brain tissue\n  }\n}",
    "predicted_endpoint": "https://sparql.uniprot.org/sparql/",
    "predicted_endpoint_equal_to_target_endpoint": true,
    "predicted_endpoint_in_federates_with": false,
    "predicted_endpoint_or_federated_endpoint": true,
    "run_id_langsmith": "263aed3b-8f6a-4f18-b225-b710781b17af",
    "evaluation_timestamp": "2025-05-01T09:19:48.119348",
    "question_understanding_prompt_tokens": 265,
    "question_understanding_completion_tokens": 52,
    "question_understanding_total_tokens": 317,
    "sparql_query_construction_prompt_tokens": 6619,
    "sparql_query_construction_completion_tokens": 0,
    "sparql_query_construction_total_tokens": 6619,
    "is_valid_sparql": true,
    "sparql_syntax_error": "syntactically correct",
    "result_eval_f1_score": 0.0,
    "result_eval_precision": 0.0,
    "result_eval_recall": 0.0,
    "error_occured_at_endpoint": true,
    "predicted_query_result_is_empty": true,
    "ground_truth_query_result_is_empty": true,
    "error_occured_at_endpoint_message": "The read operation timed out"
  },
  {
    "resource": "https://sparql.uniprot.org/.well-known/sparql-examples/51",
    "natural_language_question": "Find all proteins linked to arachidonate (CHEBI:32395)",
    "ground_truth_query": "PREFIX CHEBI: <http://purl.obolibrary.org/obo/CHEBI_>\nPREFIX rh: <http://rdf.rhea-db.org/>\nPREFIX skos: <http://www.w3.org/2004/02/skos/core#>\nPREFIX up: <http://purl.uniprot.org/core/>\n\n\nSELECT \n    DISTINCT\n        ?uniprot\n        ?uniprotID\n        ?recname\n        ?gene\n        ?chebi\n        ?uniprotName\nWHERE {\n  SERVICE <https://sparql.rhea-db.org/sparql> {\n     VALUES (?chebi) { (CHEBI:32395) }\n     ?rhea rh:side/rh:contains/rh:compound ?compound .\n     ?compound rh:chebi ?chebi .\n     ?chebi up:name ?uniprotName .\n  }\n  ?uniprot up:annotation/up:catalyticActivity/up:catalyzedReaction ?rhea .\n  ?uniprot up:mnemonic ?uniprotID .\n  ?uniprot up:recommendedName/up:fullName ?recname .\n  OPTIONAL {?uniprot up:encodedBy/skos:prefLabel ?gene .}\n}",
    "target_endpoint": "https://sparql.uniprot.org/sparql/",
    "federates_with": [
      "https://sparql.rhea-db.org/sparql"
    ],
    "endpoint_set": "Uniprot",
    "file_path": "UniProt/51_all_proteins_linked_to_arachidonate.ttl",
    "predicted_query": "# https://sparql.uniprot.org/sparql/\nPREFIX up: <http://purl.uniprot.org/core/>\nPREFIX rh: <http://rdf.rhea-db.org/>\nPREFIX CHEBI: <http://purl.obolibrary.org/obo/CHEBI_>\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\n\nSELECT DISTINCT ?protein\nWHERE {\n  # Find reactions in Rhea that involve CHEBI:32395 (arachidonate)\n  SERVICE <https://sparql.rhea-db.org/sparql> {\n    ?rhea rdfs:subClassOf rh:Reaction ;\n          # Check if CHEBI:32395 is part of any side (reactant or product) of the reaction\n          rh:side/rh:contains/rh:compound/rh:chebi CHEBI:32395 .\n  }\n  # Find proteins in UniProt that catalyze these reactions\n  ?protein up:annotation ?annotation .\n  ?annotation a up:CatalyticActivityAnnotation ;\n              up:catalyzedReaction ?rhea .\n}",
    "predicted_endpoint": "https://sparql.uniprot.org/sparql/",
    "predicted_endpoint_equal_to_target_endpoint": true,
    "predicted_endpoint_in_federates_with": false,
    "predicted_endpoint_or_federated_endpoint": true,
    "run_id_langsmith": "36c7b8f7-8d07-4fca-a76e-2b530364b546",
    "evaluation_timestamp": "2025-05-01T09:27:44.614321",
    "question_understanding_prompt_tokens": 256,
    "question_understanding_completion_tokens": 31,
    "question_understanding_total_tokens": 287,
    "sparql_query_construction_prompt_tokens": 5177,
    "sparql_query_construction_completion_tokens": 272,
    "sparql_query_construction_total_tokens": 5449,
    "is_valid_sparql": true,
    "sparql_syntax_error": "syntactically correct",
    "result_eval_f1_score": 0.0,
    "result_eval_precision": 0.0,
    "result_eval_recall": 0.0,
    "error_occured_at_endpoint": true,
    "predicted_query_result_is_empty": true,
    "ground_truth_query_result_is_empty": true,
    "error_occured_at_endpoint_message": "The read operation timed out"
  },
  {
    "resource": "https://sparql.uniprot.org/.well-known/sparql-examples/40",
    "natural_language_question": "Retrieve human enzymes that metabolize sphingolipids and are annotated in ChEMBL",
    "ground_truth_query": "PREFIX CHEBI: <http://purl.obolibrary.org/obo/CHEBI_>\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX rh: <http://rdf.rhea-db.org/>\nPREFIX taxon: <http://purl.uniprot.org/taxonomy/>\nPREFIX up: <http://purl.uniprot.org/core/>\n\nSELECT DISTINCT ?protein ?chemblEntry\nWHERE {\n  SERVICE <https://sparql.rhea-db.org/sparql> {\n    ?rhea rdfs:subClassOf rh:Reaction ;\n      rh:side/rh:contains/rh:compound/rh:chebi/rdfs:subClassOf+ CHEBI:26739 .\n  }\n  ?ca up:catalyzedReaction ?rhea .\n  ?protein up:annotation/up:catalyticActivity ?ca ;\n    up:organism taxon:9606 ;\n    rdfs:seeAlso ?chemblEntry .\n  ?chemblEntry up:database <http://purl.uniprot.org/database/ChEMBL> .\n}\nLIMIT 10",
    "target_endpoint": "https://sparql.uniprot.org/sparql/",
    "federates_with": [
      "https://sparql.rhea-db.org/sparql"
    ],
    "endpoint_set": "Uniprot",
    "file_path": "UniProt/40_human_enzymes_that_metabolize_sphingolipids.ttl",
    "predicted_query": "# https://sparql.uniprot.org/sparql/\nPREFIX up: <http://purl.uniprot.org/core/>\nPREFIX taxon: <http://purl.uniprot.org/taxonomy/>\nPREFIX rh: <http://rdf.rhea-db.org/>\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX CHEBI: <http://purl.obolibrary.org/obo/CHEBI_>\nPREFIX cco: <http://rdf.ebi.ac.uk/terms/chembl#>\n\nSELECT DISTINCT ?protein ?proteinName\nWHERE {\n  # Find human proteins\n  ?protein a up:Protein ;\n           up:organism taxon:9606 ; # Filter for human proteins (Taxonomy ID 9606)\n           up:recommendedName/up:fullName ?proteinName . # Get the protein full name\n\n  # Find proteins annotated with catalytic activity (enzymes)\n  ?protein up:annotation ?catalyticActivityAnnotation .\n  ?catalyticActivityAnnotation a up:Catalytic_Activity_Annotation ;\n                               up:catalyticActivity ?catalyticActivity .\n  ?catalyticActivity up:catalyzedReaction ?rhea . # Link to the catalyzed Rhea reaction\n\n  # Federated query to Rhea to check if the reaction involves a sphingolipid\n  SERVICE <https://sparql.rhea-db.org/sparql> {\n    # Find compounds participating in the reaction\n    ?rhea rh:side/rh:contains/rh:compound ?compound .\n    # Link compound to ChEBI identifier\n    ?compound rh:chebi ?chebi .\n    # Check if the ChEBI compound is a sphingolipid (CHEBI:16359) or a subclass of it\n    ?chebi (rdfs:subClassOf)+ CHEBI:16359 .\n  }\n\n  # Federated query to IDSM (Elixir Czech Republic) to check for ChEMBL annotation\n  SERVICE <https://idsm.elixir-czech.cz/sparql/endpoint/idsm> {\n    # Find ChEMBL targets that reference the UniProt protein\n    ?chemblTarget cco:hasTargetComponent/cco:targetCmptXref ?protein .\n    # Ensure the reference is a UniProt reference in ChEMBL\n    ?protein a cco:UniprotRef .\n  }\n}",
    "predicted_endpoint": "https://sparql.uniprot.org/sparql/",
    "predicted_endpoint_equal_to_target_endpoint": true,
    "predicted_endpoint_in_federates_with": false,
    "predicted_endpoint_or_federated_endpoint": true,
    "run_id_langsmith": "d3283b63-667f-47b3-a54a-7c48b0db370d",
    "evaluation_timestamp": "2025-05-01T09:33:47.908308",
    "question_understanding_prompt_tokens": 250,
    "question_understanding_completion_tokens": 33,
    "question_understanding_total_tokens": 283,
    "sparql_query_construction_prompt_tokens": 8291,
    "sparql_query_construction_completion_tokens": 550,
    "sparql_query_construction_total_tokens": 8841,
    "is_valid_sparql": true,
    "sparql_syntax_error": "syntactically correct",
    "result_eval_f1_score": 0.0,
    "result_eval_precision": 0.0,
    "result_eval_recall": 0.0,
    "error_occured_at_endpoint": true,
    "predicted_query_result_is_empty": true,
    "ground_truth_query_result_is_empty": true,
    "error_occured_at_endpoint_message": "The read operation timed out"
  },
  {
    "resource": "https://sparql.uniprot.org/.well-known/sparql-examples/49",
    "natural_language_question": "Retrieve the UniProtKB proteins, their catalyzed Rhea reactions, their encoding genes (Ensembl) and the anatomic entities where the genes are expressed (UBERON anatomic entites from Bgee expression data resource).",
    "ground_truth_query": "PREFIX CHEBI: <http://purl.obolibrary.org/obo/CHEBI_>\nPREFIX genex: <http://purl.org/genex#>\nPREFIX lscr: <http://purl.org/lscr#>\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX rh: <http://rdf.rhea-db.org/>\nPREFIX taxon: <http://purl.uniprot.org/taxonomy/>\nPREFIX up: <http://purl.uniprot.org/core/>\n\nSELECT DISTINCT ?protein ?ensemblGene ?reaction ?anatomicEntityLabel ?anatomicEntity\nWHERE {\n  # federated query to Rhea enadpoint\n  {\n    SELECT DISTINCT ?reaction WHERE {\n      SERVICE <https://sparql.rhea-db.org/sparql> {\n        ?reaction rdfs:subClassOf rh:Reaction ;\n          rh:equation ?reactionEquation ;\n          rh:side ?reactionSide .\n        ?reactionSide rh:contains ?participant .\n        ?participant rh:compound ?compound .\n        # compound constraint (CHEBI:16113 == cholesterol)\n        ?compound rh:chebi CHEBI:16113 .\n      }\n    }\n  }\n  # taxonomy constraint (taxon:9606 == Homo sapiens)\n  ?protein up:organism taxon:9606 ;\n    up:annotation ?a ;\n    rdfs:seeAlso / up:transcribedFrom ?ensemblGene .\n  ?a a up:Catalytic_Activity_Annotation ;\n    up:catalyticActivity ?ca .\n  ?ca up:catalyzedReaction ?reaction .\n  # federated query to Bgee (expression data)\n  BIND(IRI(REPLACE(STR(?ensemblGene), \"\\\\.[0-9]+$\", \"\")) AS ?ensemblGeneNoVersion)\n  SERVICE <https://www.bgee.org/sparql/> {\n    ?gene lscr:xrefEnsemblGene ?ensemblGeneNoVersion ;\n      genex:isExpressedIn ?anatomicEntity .\n    ?anatomicEntity rdfs:label ?anatomicEntityLabel .\n  }\n}",
    "target_endpoint": "https://sparql.uniprot.org/sparql/",
    "federates_with": [
      "https://sparql.rhea-db.org/sparql",
      "https://www.bgee.org/sparql/"
    ],
    "endpoint_set": "Uniprot",
    "file_path": "UniProt/49_tissues_where_genes_metabolizing_cholestrol_are_expressed.ttl",
    "predicted_query": "# Primary endpoint: https://sparql.uniprot.org/sparql/\nPREFIX up: <http://purl.uniprot.org/core/>\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX genex: <http://purl.org/genex#>\nPREFIX lscr: <http://purl.org/lscr#>\nPREFIX obo: <http://purl.obolibrary.org/obo/> # For UBERON terms\n\nSELECT DISTINCT ?protein ?rhea ?ensemblGene ?anatomicEntity\nWHERE {\n  # Find UniProtKB proteins\n  ?protein a up:Protein .\n  # Optional: Filter for reviewed entries (Swiss-Prot) for higher confidence\n  # ?protein up:reviewed true .\n\n  # Find catalyzed Rhea reactions linked to the protein\n  ?protein up:annotation ?annotation .\n  ?annotation up:catalyticActivity ?catalyticActivity .\n  ?catalyticActivity up:catalyzedReaction ?rhea .\n\n  # Find the encoding Ensembl gene linked to the protein (via Ensembl transcript)\n  ?protein rdfs:seeAlso ?ensemblTranscript .\n  ?ensemblTranscript up:database <http://purl.uniprot.org/database/Ensembl> .\n  ?ensemblTranscript up:transcribedFrom ?ensemblGene .\n\n  # Query the Bgee SPARQL endpoint for gene expression data\n  SERVICE <https://www.bgee.org/sparql> {\n    # Link the Bgee sequence/gene entity to the UniProt protein using xref\n    ?seq lscr:xrefUniprot ?protein .\n    # Find the anatomic entity (UBERON term) where the sequence/gene is expressed\n    ?seq genex:isExpressedIn ?anatomicEntity .\n    # Optional: Filter for specific expression call types if needed (e.g., high quality)\n    # ?seq genex:hasExpressionCondition ?condition .\n    # ?condition genex:hasExpressionLevel ?level .\n    # ?level genex:hasCallType genex:HighQualityExpressionCall .\n  }\n}",
    "predicted_endpoint": "Primary",
    "predicted_endpoint_equal_to_target_endpoint": false,
    "predicted_endpoint_in_federates_with": false,
    "predicted_endpoint_or_federated_endpoint": false,
    "run_id_langsmith": "6510cfdd-642d-4c8a-b474-ba50eddb55b6",
    "evaluation_timestamp": "2025-05-01T09:39:57.358565",
    "question_understanding_prompt_tokens": 280,
    "question_understanding_completion_tokens": 75,
    "question_understanding_total_tokens": 355,
    "sparql_query_construction_prompt_tokens": 7473,
    "sparql_query_construction_completion_tokens": 485,
    "sparql_query_construction_total_tokens": 7958,
    "is_valid_sparql": true,
    "sparql_syntax_error": "syntactically correct",
    "result_eval_f1_score": 0.0,
    "result_eval_precision": 0.0,
    "result_eval_recall": 0.0,
    "error_occured_at_endpoint": true,
    "predicted_query_result_is_empty": true,
    "ground_truth_query_result_is_empty": true,
    "error_occured_at_endpoint_message": "unknown url type: 'Primary?query=%23+Primary+endpoint%3A+https%3A//sparql.uniprot.org/sparql/%0APREFIX+up%3A+%3Chttp%3A//purl.uniprot.org/core/%3E%0APREFIX+rdfs%3A+%3Chttp%3A//www.w3.org/2000/01/rdf-schema%23%3E%0APREFIX+genex%3A+%3Chttp%3A//purl.org/genex%23%3E%0APREFIX+lscr%3A+%3Chttp%3A//purl.org/lscr%23%3E%0APREFIX+obo%3A+%3Chttp%3A//purl.obolibrary.org/obo/%3E+%23+For+UBERON+terms%0A%0ASELECT+DISTINCT+%3Fprotein+%3Frhea+%3FensemblGene+%3FanatomicEntity%0AWHERE+%7B%0A++%23+Find+UniProtKB+proteins%0A++%3Fprotein+a+up%3AProtein+.%0A++%23+Optional%3A+Filter+for+reviewed+entries+%28Swiss-Prot%29+for+higher+confidence%0A++%23+%3Fprotein+up%3Areviewed+true+.%0A%0A++%23+Find+catalyzed+Rhea+reactions+linked+to+the+protein%0A++%3Fprotein+up%3Aannotation+%3Fannotation+.%0A++%3Fannotation+up%3AcatalyticActivity+%3FcatalyticActivity+.%0A++%3FcatalyticActivity+up%3AcatalyzedReaction+%3Frhea+.%0A%0A++%23+Find+the+encoding+Ensembl+gene+linked+to+the+protein+%28via+Ensembl+transcript%29%0A++%3Fprotein+rdfs%3AseeAlso+%3FensemblTranscript+.%0A++%3FensemblTranscript+up%3Adatabase+%3Chttp%3A//purl.uniprot.org/database/Ensembl%3E+.%0A++%3FensemblTranscript+up%3AtranscribedFrom+%3FensemblGene+.%0A%0A++%23+Query+the+Bgee+SPARQL+endpoint+for+gene+expression+data%0A++SERVICE+%3Chttps%3A//www.bgee.org/sparql%3E+%7B%0A++++%23+Link+the+Bgee+sequence/gene+entity+to+the+UniProt+protein+using+xref%0A++++%3Fseq+lscr%3AxrefUniprot+%3Fprotein+.%0A++++%23+Find+the+anatomic+entity+%28UBERON+term%29+where+the+sequence/gene+is+expressed%0A++++%3Fseq+genex%3AisExpressedIn+%3FanatomicEntity+.%0A++++%23+Optional%3A+Filter+for+specific+expression+call+types+if+needed+%28e.g.%2C+high+quality%29%0A++++%23+%3Fseq+genex%3AhasExpressionCondition+%3Fcondition+.%0A++++%23+%3Fcondition+genex%3AhasExpressionLevel+%3Flevel+.%0A++++%23+%3Flevel+genex%3AhasCallType+genex%3AHighQualityExpressionCall+.%0A++%7D%0A%7D&format=json&output=json&results=json'"
  },
  {
    "resource": "https://sparql.uniprot.org/.well-known/sparql-examples/53",
    "natural_language_question": "Find mouse homologs in OMABrowser of human enzymes that catalyze reactions involving sterols (CHEBI:15889). Federating with Rhea and OMABrowser.",
    "ground_truth_query": "PREFIX CHEBI: <http://purl.obolibrary.org/obo/CHEBI_>\nPREFIX lscr: <http://purl.org/lscr#>\nPREFIX orth: <http://purl.org/net/orth#>\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX rh: <http://rdf.rhea-db.org/>\nPREFIX taxon: <http://purl.uniprot.org/taxonomy/>\nPREFIX up: <http://purl.uniprot.org/core/>\n\nSELECT\n  DISTINCT\n    ?chebi\n    ?reaction\n    ?humanProtein\n    ?mouseProtein\n    ?cluster \nWHERE {\n  SERVICE <https://sparql.rhea-db.org/sparql> {\n    ?reaction rdfs:subClassOf rh:Reaction .\n    ?reaction rh:side/rh:contains/rh:compound ?compound .\n    ?compound rh:chebi ?chebi .\n    ?chebi rdfs:subClassOf* CHEBI:15889\n  }\n\n  ?humanProtein up:organism taxon:9606 .\n  ?humanProtein up:annotation ?a .\n  ?a a up:Catalytic_Activity_Annotation .\n  ?a up:catalyticActivity ?ca .\n  ?ca up:catalyzedReaction ?reaction .\n\n  SERVICE  <https://sparql.omabrowser.org/sparql> {\n    ?cluster a orth:ParalogsCluster .\n    ?cluster orth:hasHomologousMember ?node1 , ?node2 .\n    ?node1 orth:hasHomologousMember* ?orthoProtein1 .\n    ?node2 orth:hasHomologousMember* ?orthoProtein2 .\n    ?orthoProtein1 lscr:xrefUniprot ?mouseProtein .\n    ?orthoProtein2 lscr:xrefUniprot ?humanProtein .\n    # inTaxon mouse\n    ?orthoProtein1 orth:organism/<http://purl.obolibrary.org/obo/RO_0002162> taxon:10090 . \n  }\n}",
    "target_endpoint": "https://sparql.uniprot.org/sparql/",
    "federates_with": [
      "https://sparql.rhea-db.org/sparql",
      "https://sparql.omabrowser.org/sparql"
    ],
    "endpoint_set": "Uniprot",
    "file_path": "UniProt/53_mouse_homologs_of_sterol_enzymes_via_omabrowser.ttl",
    "predicted_query": "# Primary endpoint: https://sparql.uniprot.org/sparql\nPREFIX CHEBI: <http://purl.obolibrary.org/obo/CHEBI_>\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX rh: <http://rdf.rhea-db.org/>\nPREFIX taxon: <http://purl.uniprot.org/taxonomy/>\nPREFIX up: <http://purl.uniprot.org/core/>\nPREFIX oma: <http://omabrowser.org/ontology/oma#> # Assuming this prefix for OMA ontology\n\nSELECT DISTINCT ?humanProtein ?humanProteinName ?mouseHomolog ?mouseHomologName\nWHERE {\n  # Find human proteins catalyzing reactions involving sterols (CHEBI:15889) in UniProt\n  SERVICE <https://sparql.uniprot.org/sparql> {\n    ?humanProtein up:annotation/up:catalyticActivity/up:catalyzedReaction ?reaction ;\n                  up:organism taxon:9606 ; # Human taxonomy ID\n                  up:reviewed true ; # Focus on reviewed entries\n                  up:recommendedName/up:fullName ?humanProteinName ;\n                  rdfs:seeAlso ?humanOmaProteinLink . # Link to OMA\n\n    # Filter for OMA cross-references\n    ?humanOmaProteinLink up:database <http://purl.uniprot.org/database/OMA> .\n\n    # Find Rhea reactions involving sterols (CHEBI:15889)\n    SERVICE <https://sparql.rhea-db.org/sparql> {\n      ?reaction rdfs:subClassOf rh:Reaction ;\n                rh:side/rh:contains/rh:compound/rh:chebi/rdfs:subClassOf* CHEBI:15889 .\n    }\n  }\n\n  # Find mouse homologs in OMA\n  SERVICE <https://sparql.omabrowser.org/sparql> {\n    # Find the OMA protein entry corresponding to the human UniProt entry\n    # UniProt's rdfs:seeAlso links to the OMA protein URI\n    ?humanOmaProteinLink oma:memberOfGroup ?omaGroup . # Find the OMA group for the human protein\n\n    # Find members of this OMA group that are from mouse\n    ?mouseHomologOmaLink oma:memberOfGroup ?omaGroup ;\n                         oma:organism taxon:10090 . # Mouse taxonomy ID in OMA\n\n    # Get the UniProt accession for the mouse homolog from OMA\n    # OMA protein entries link back to UniProt using rdfs:seeAlso\n    ?mouseHomologOmaLink rdfs:seeAlso ?mouseHomologUniProtUri .\n    FILTER(STRSTARTS(STR(?mouseHomologUniProtUri), \"http://purl.uniprot.org/uniprot/\"))\n\n    # Extract the UniProt accession from the URI\n    BIND(REPLACE(STR(?mouseHomologUniProtUri), \"http://purl.uniprot.org/uniprot/\", \"\") AS ?mouseHomolog)\n  }\n\n  # Get the name of the mouse homolog from UniProt\n  SERVICE <https://sparql.uniprot.org/sparql> {\n      # Need to use the extracted accession to find the protein URI in UniProt\n      BIND(URI(CONCAT(\"http://purl.uniprot.org/uniprot/\", ?mouseHomolog)) AS ?mouseHomologUniProtUriForName)\n      ?mouseHomologUniProtUriForName up:recommendedName/up:fullName ?mouseHomologName .\n  }\n}",
    "predicted_endpoint": "Primary",
    "predicted_endpoint_equal_to_target_endpoint": false,
    "predicted_endpoint_in_federates_with": false,
    "predicted_endpoint_or_federated_endpoint": false,
    "run_id_langsmith": "494f2a94-a56c-4d60-b1c7-b9d505e8d11c",
    "evaluation_timestamp": "2025-05-01T09:40:41.287867",
    "question_understanding_prompt_tokens": 276,
    "question_understanding_completion_tokens": 41,
    "question_understanding_total_tokens": 317,
    "sparql_query_construction_prompt_tokens": 7811,
    "sparql_query_construction_completion_tokens": 0,
    "sparql_query_construction_total_tokens": 7811,
    "is_valid_sparql": true,
    "sparql_syntax_error": "syntactically correct",
    "result_eval_f1_score": 0.0,
    "result_eval_precision": 0.0,
    "result_eval_recall": 0.0,
    "error_occured_at_endpoint": true,
    "predicted_query_result_is_empty": true,
    "ground_truth_query_result_is_empty": true,
    "error_occured_at_endpoint_message": "unknown url type: 'Primary?query=%23+Primary+endpoint%3A+https%3A//sparql.uniprot.org/sparql%0APREFIX+CHEBI%3A+%3Chttp%3A//purl.obolibrary.org/obo/CHEBI_%3E%0APREFIX+rdfs%3A+%3Chttp%3A//www.w3.org/2000/01/rdf-schema%23%3E%0APREFIX+rh%3A+%3Chttp%3A//rdf.rhea-db.org/%3E%0APREFIX+taxon%3A+%3Chttp%3A//purl.uniprot.org/taxonomy/%3E%0APREFIX+up%3A+%3Chttp%3A//purl.uniprot.org/core/%3E%0APREFIX+oma%3A+%3Chttp%3A//omabrowser.org/ontology/oma%23%3E+%23+Assuming+this+prefix+for+OMA+ontology%0A%0ASELECT+DISTINCT+%3FhumanProtein+%3FhumanProteinName+%3FmouseHomolog+%3FmouseHomologName%0AWHERE+%7B%0A++%23+Find+human+proteins+catalyzing+reactions+involving+sterols+%28CHEBI%3A15889%29+in+UniProt%0A++SERVICE+%3Chttps%3A//sparql.uniprot.org/sparql%3E+%7B%0A++++%3FhumanProtein+up%3Aannotation/up%3AcatalyticActivity/up%3AcatalyzedReaction+%3Freaction+%3B%0A++++++++++++++++++up%3Aorganism+taxon%3A9606+%3B+%23+Human+taxonomy+ID%0A++++++++++++++++++up%3Areviewed+true+%3B+%23+Focus+on+reviewed+entries%0A++++++++++++++++++up%3ArecommendedName/up%3AfullName+%3FhumanProteinName+%3B%0A++++++++++++++++++rdfs%3AseeAlso+%3FhumanOmaProteinLink+.+%23+Link+to+OMA%0A%0A++++%23+Filter+for+OMA+cross-references%0A++++%3FhumanOmaProteinLink+up%3Adatabase+%3Chttp%3A//purl.uniprot.org/database/OMA%3E+.%0A%0A++++%23+Find+Rhea+reactions+involving+sterols+%28CHEBI%3A15889%29%0A++++SERVICE+%3Chttps%3A//sparql.rhea-db.org/sparql%3E+%7B%0A++++++%3Freaction+rdfs%3AsubClassOf+rh%3AReaction+%3B%0A++++++++++++++++rh%3Aside/rh%3Acontains/rh%3Acompound/rh%3Achebi/rdfs%3AsubClassOf%2A+CHEBI%3A15889+.%0A++++%7D%0A++%7D%0A%0A++%23+Find+mouse+homologs+in+OMA%0A++SERVICE+%3Chttps%3A//sparql.omabrowser.org/sparql%3E+%7B%0A++++%23+Find+the+OMA+protein+entry+corresponding+to+the+human+UniProt+entry%0A++++%23+UniProt%27s+rdfs%3AseeAlso+links+to+the+OMA+protein+URI%0A++++%3FhumanOmaProteinLink+oma%3AmemberOfGroup+%3FomaGroup+.+%23+Find+the+OMA+group+for+the+human+protein%0A%0A++++%23+Find+members+of+this+OMA+group+that+are+from+mouse%0A++++%3FmouseHomologOmaLink+oma%3AmemberOfGroup+%3FomaGroup+%3B%0A+++++++++++++++++++++++++oma%3Aorganism+taxon%3A10090+.+%23+Mouse+taxonomy+ID+in+OMA%0A%0A++++%23+Get+the+UniProt+accession+for+the+mouse+homolog+from+OMA%0A++++%23+OMA+protein+entries+link+back+to+UniProt+using+rdfs%3AseeAlso%0A++++%3FmouseHomologOmaLink+rdfs%3AseeAlso+%3FmouseHomologUniProtUri+.%0A++++FILTER%28STRSTARTS%28STR%28%3FmouseHomologUniProtUri%29%2C+%22http%3A//purl.uniprot.org/uniprot/%22%29%29%0A%0A++++%23+Extract+the+UniProt+accession+from+the+URI%0A++++BIND%28REPLACE%28STR%28%3FmouseHomologUniProtUri%29%2C+%22http%3A//purl.uniprot.org/uniprot/%22%2C+%22%22%29+AS+%3FmouseHomolog%29%0A++%7D%0A%0A++%23+Get+the+name+of+the+mouse+homolog+from+UniProt%0A++SERVICE+%3Chttps%3A//sparql.uniprot.org/sparql%3E+%7B%0A++++++%23+Need+to+use+the+extracted+accession+to+find+the+protein+URI+in+UniProt%0A++++++BIND%28URI%28CONCAT%28%22http%3A//purl.uniprot.org/uniprot/%22%2C+%3FmouseHomolog%29%29+AS+%3FmouseHomologUniProtUriForName%29%0A++++++%3FmouseHomologUniProtUriForName+up%3ArecommendedName/up%3AfullName+%3FmouseHomologName+.%0A++%7D%0A%7D&format=json&output=json&results=json'"
  },
  {
    "resource": "https://sparql.uniprot.org/.well-known/sparql-examples/52",
    "natural_language_question": "Retrieve drugs that target human enzymes involved in sterol metabolism (federated query with Rhea and ChEMBL via IDSM/Elixir czech republic).",
    "ground_truth_query": "PREFIX CHEBI: <http://purl.obolibrary.org/obo/CHEBI_>\nPREFIX cco: <http://rdf.ebi.ac.uk/terms/chembl#>\nPREFIX chebihash: <http://purl.obolibrary.org/obo/chebi#>\nPREFIX owl: <http://www.w3.org/2002/07/owl#>\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX rh: <http://rdf.rhea-db.org/>\nPREFIX skos: <http://www.w3.org/2004/02/skos/core#>\nPREFIX taxon: <http://purl.uniprot.org/taxonomy/>\nPREFIX up: <http://purl.uniprot.org/core/>\n\nSELECT\n        DISTINCT\n            ?protein\n            ?proteinFullName\n            ?activityType\n            ?standardActivityValue\n            ?standardActivityUnit\n            ?chemblMolecule\n            ?chemlbMoleculePrefLabel\nWHERE\n  {\n  # ChEBI: retrieve members of the ChEBI class ChEBI:15889 (sterol)\n  # Rhea: retrieve the reactions involving these ChEBI as participants\n  SERVICE <https://sparql.rhea-db.org/sparql> {\n    ?reaction rdfs:subClassOf  rh:Reaction ;\n\t      rh:status        rh:Approved ;\n\t      rh:side          ?reactionSide .\n    ?reactionSide\n\t      rh:contains      ?participant .\n    ?participant rh:compound  ?compound\n    {\n      ?compound  rh:chebi  ?chebi .\n      ?chebi (rdfs:subClassOf)+ CHEBI:15889\n    } UNION {\n      ?compound  rh:chebi           ?chebi .\n      ?chebi2   rdfs:subClassOf     ?chebiRestriction .\n      ?chebiRestriction\n\t\ta           owl:Restriction ;\n\t\towl:onProperty      chebihash:has_major_microspecies_at_pH_7_3 ;\n\t\towl:someValuesFrom  ?chebi .\n      ?chebi2 (rdfs:subClassOf)+ CHEBI:15889\n    }\n  }\n  # UniProt: retrieve the human (taxid:9606) enzymes catalyzing these Rhea reactions\n  ?ca       up:catalyzedReaction  ?reaction .\n  ?a        up:catalyticActivity  ?ca .\n  ?protein  up:annotation         ?a ;\n\t    up:organism           taxon:9606 ;\n\t    up:recommendedName    ?proteinRecName .\n  ?proteinRecName\n\t    up:fullName           ?proteinFullName .\n  # Find drugs in wikidata that interact with the UniProt Proteins\n  # ChEMBL: retrieve the corresponding targets and with drugs in clinical phase 4\n  # Via https://idsm.elixir-czech.cz/sparql/\n  SERVICE <https://idsm.elixir-czech.cz/sparql/endpoint/idsm> {\n    ?activity a cco:Activity ;\n      cco:hasMolecule ?chemblMolecule ;\n      cco:hasAssay ?assay ;\n      cco:standardType ?activityType ;\n      cco:standardValue ?standardActivityValue ;\n      cco:standardUnits ?standardActivityUnit .\n    ?chemblMolecule cco:highestDevelopmentPhase ?highestDevelopmentPhase ;\n      rdfs:label ?chemblMoleculeLabel ;\n      skos:prefLabel ?chemlbMoleculePrefLabel .\n    FILTER (?highestDevelopmentPhase > 3)\n    ?assay cco:hasTarget ?target .\n    ?target cco:hasTargetComponent/cco:targetCmptXref ?protein .\n    ?protein a cco:UniprotRef .\n  }\n}",
    "target_endpoint": "https://sparql.uniprot.org/sparql/",
    "federates_with": [
      "https://sparql.rhea-db.org/sparql",
      "https://idsm.elixir-czech.cz/sparql/endpoint/idsm"
    ],
    "endpoint_set": "Uniprot",
    "file_path": "UniProt/52_drugs_targeting_sterol_metabolism.ttl",
    "predicted_query": "# https://sparql.uniprot.org/sparql/\nPREFIX up: <http://purl.uniprot.org/core/>\nPREFIX taxon: <http://purl.uniprot.org/taxonomy/>\nPREFIX rh: <http://rdf.rhea-db.org/>\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX CHEBI: <http://purl.obolibrary.org/obo/CHEBI_>\n\nSELECT DISTINCT ?drug ?drugName ?protein ?proteinName\nWHERE {\n  # Find human proteins\n  ?protein a up:Protein ;\n           up:organism taxon:9606 ; # Human taxonomy ID\n           up:recommendedName/up:fullName ?proteinName .\n\n  # Find catalytic activities of these proteins\n  ?protein up:annotation ?catActivityAnnotation .\n  ?catActivityAnnotation a up:Catalytic_Activity_Annotation ;\n                         up:catalyticActivity ?catalyticActivity .\n  ?catalyticActivity up:catalyzedReaction ?rheaReaction .\n\n  # Federate to Rhea to check if the reaction involves sterols\n  SERVICE <https://sparql.rhea-db.org/sparql> {\n    # Ensure it's a valid Rhea reaction\n    ?rheaReaction rdfs:subClassOf rh:Reaction ;\n                  # Find compounds involved in the reaction sides (substrates or products)\n                  rh:side/rh:contains/rh:compound ?compound .\n    # Link the compound to its ChEBI identifier\n    ?compound rh:chebi ?chebi .\n    # Check if the ChEBI compound is a sterol or a subclass of sterol (CHEBI:15889)\n    ?chebi rdfs:subClassOf* CHEBI:15889 .\n  }\n\n  # Find drug annotations for these proteins in UniProt\n  # UniProt links proteins directly to drugs that target them via annotations\n  ?protein up:annotation ?drugAnnotation .\n  ?drugAnnotation a up:Drug_Annotation ;\n                  up:drug ?drug . # Link to the drug resource\n\n  # Get drug name (optional, but useful for identification)\n  OPTIONAL { ?drug rdfs:label ?drugName . }\n\n  # Note: The user mentioned ChEMBL via IDSM/Elixir Czech Republic.\n  # Based on the provided examples, UniProt directly links to ChEMBL entries\n  # via rdfs:seeAlso and up:database. However, finding drugs that *target*\n  # a protein is typically done via UniProt's drug annotations (up:Drug_Annotation),\n  # which link to drug resources directly, rather than querying ChEMBL for targets.\n  # This query uses the direct UniProt drug annotation path.\n}",
    "predicted_endpoint": "https://sparql.uniprot.org/sparql/",
    "predicted_endpoint_equal_to_target_endpoint": true,
    "predicted_endpoint_in_federates_with": false,
    "predicted_endpoint_or_federated_endpoint": true,
    "run_id_langsmith": "cb7b563b-0893-40b1-97bb-b20aaad5624b",
    "evaluation_timestamp": "2025-05-01T09:41:03.154089",
    "question_understanding_prompt_tokens": 270,
    "question_understanding_completion_tokens": 28,
    "question_understanding_total_tokens": 298,
    "sparql_query_construction_prompt_tokens": 5815,
    "sparql_query_construction_completion_tokens": 0,
    "sparql_query_construction_total_tokens": 5815,
    "is_valid_sparql": true,
    "sparql_syntax_error": "syntactically correct",
    "result_eval_f1_score": 0.0,
    "result_eval_precision": 0.0,
    "result_eval_recall": 0.0,
    "error_occured_at_endpoint": true,
    "predicted_query_result_is_empty": true,
    "ground_truth_query_result_is_empty": true,
    "error_occured_at_endpoint_message": "The read operation timed out"
  },
  {
    "resource": "https://sparql.uniprot.org/.well-known/sparql-examples/54",
    "natural_language_question": "Proteins with binding sites for ligands similar to heme",
    "ground_truth_query": "PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX sachem: <http://bioinfo.uochb.cas.cz/rdf/v1.0/sachem#>\nPREFIX up: <http://purl.uniprot.org/core/>\nPREFIX xsd: <http://www.w3.org/2001/XMLSchema#>\n\nSELECT \n  ?protein\n  ?mnemonic\n  ?proteinName\n  ?ligandSimilarityScore\n  ?ligand\nWHERE {\n  SERVICE <https://idsm.elixir-czech.cz/sparql/endpoint/chebi> {\n    ?ssc sachem:compound ?ligand; \n      sachem:score ?ligandSimilarityScore ;\n      sachem:similaritySearch ?sss .\n        # Smiles of Heme\n    ?sss    sachem:query \"CC1=C(CCC([O-])=O)C2=[N+]3C1=Cc1c(C)c(C=C)c4C=C5C(C)=C(C=C)C6=[N+]5[Fe-]3(n14)n1c(=C6)c(C)c(CCC([O-])=O)c1=C2\";\n      sachem:cutoff \"8e-1\"^^xsd:double ;\n      sachem:aromaticityMode sachem:aromaticityDetect ;\n      sachem:similarityRadius 1 ;\n      sachem:tautomerMode sachem:ignoreTautomers .\n  }\n  ?protein up:mnemonic ?mnemonic ;\n    up:recommendedName/up:fullName ?proteinName ;\n    up:annotation ?annotation .\n  ?annotation a up:Binding_Site_Annotation ;\n      up:ligand/rdfs:subClassOf ?ligand .\n}\nORDER BY DESC(?ligandSimilarityScore)",
    "target_endpoint": "https://sparql.uniprot.org/sparql/",
    "federates_with": [
      "https://idsm.elixir-czech.cz/sparql/endpoint/chebi"
    ],
    "endpoint_set": "Uniprot",
    "file_path": "UniProt/54_binding_sites_for_ligands_similar_to_heme_sachem.ttl",
    "predicted_query": "# Primary endpoint: https://sparql.uniprot.org/sparql/\nPREFIX up: <http://purl.uniprot.org/core/>\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX sachem: <http://bioinfo.uochb.cas.cz/rdf/v1.0/sachem#>\nPREFIX CHEBI: <http://purl.obolibrary.org/obo/CHEBI_>\n\nSELECT DISTINCT ?protein ?ligandName\nWHERE {\n  # Find proteins with binding site annotations in UniProt\n  ?protein up:annotation ?annotation .\n  ?annotation a up:Binding_Site_Annotation .\n\n  # Get the ligand associated with the binding site\n  ?annotation up:ligand ?ligand .\n  ?ligand rdfs:subClassOf ?chebi . # Link ligand to its ChEBI identifier\n  ?ligand rdfs:label ?ligandName . # Get the ligand name\n\n  # Use the IDSM Sachem service to find ChEBI compounds similar to Heme (CHEBI:24867)\n  # The SMILES for Heme B (CHEBI:24867) is used for the similarity search.\n  SERVICE <https://idsm.elixir-czech.cz/sparql/endpoint/chebi> {\n    ?similarChebi sachem:similarCompoundSearch [\n      sachem:query \"C[C@@H]1C=C(C)C2=C(C=C3C(C)=C(C=C4C(C)=C(C=C1[N+]2=C4)[N]5=C(C=C(C=C5)[N]6=C3C=C(C=C6)[N]7=C(C=C(C=C7)[Fe]))C(=O)O)C(=O)O\"\n      # Optional: Add sachem:threshold property to specify similarity threshold (default is often 0.8)\n      # sachem:threshold \"0.8\"^^xsd:float\n    ] .\n  }\n\n  # Filter the proteins whose ligand's ChEBI identifier matches one found by the similarity search\n  FILTER(?chebi = ?similarChebi)\n}",
    "predicted_endpoint": "Primary",
    "predicted_endpoint_equal_to_target_endpoint": false,
    "predicted_endpoint_in_federates_with": false,
    "predicted_endpoint_or_federated_endpoint": false,
    "run_id_langsmith": "d19e2532-3d2a-4334-91b2-ce6dd3bb03a5",
    "evaluation_timestamp": "2025-05-01T09:46:35.479388",
    "question_understanding_prompt_tokens": 248,
    "question_understanding_completion_tokens": 29,
    "question_understanding_total_tokens": 277,
    "sparql_query_construction_prompt_tokens": 5068,
    "sparql_query_construction_completion_tokens": 0,
    "sparql_query_construction_total_tokens": 5068,
    "is_valid_sparql": true,
    "sparql_syntax_error": "syntactically correct",
    "result_eval_f1_score": 0.0,
    "result_eval_precision": 0.0,
    "result_eval_recall": 0.0,
    "error_occured_at_endpoint": true,
    "predicted_query_result_is_empty": true,
    "ground_truth_query_result_is_empty": true,
    "error_occured_at_endpoint_message": "unknown url type: 'Primary?query=%23+Primary+endpoint%3A+https%3A//sparql.uniprot.org/sparql/%0APREFIX+up%3A+%3Chttp%3A//purl.uniprot.org/core/%3E%0APREFIX+rdfs%3A+%3Chttp%3A//www.w3.org/2000/01/rdf-schema%23%3E%0APREFIX+sachem%3A+%3Chttp%3A//bioinfo.uochb.cas.cz/rdf/v1.0/sachem%23%3E%0APREFIX+CHEBI%3A+%3Chttp%3A//purl.obolibrary.org/obo/CHEBI_%3E%0A%0ASELECT+DISTINCT+%3Fprotein+%3FligandName%0AWHERE+%7B%0A++%23+Find+proteins+with+binding+site+annotations+in+UniProt%0A++%3Fprotein+up%3Aannotation+%3Fannotation+.%0A++%3Fannotation+a+up%3ABinding_Site_Annotation+.%0A%0A++%23+Get+the+ligand+associated+with+the+binding+site%0A++%3Fannotation+up%3Aligand+%3Fligand+.%0A++%3Fligand+rdfs%3AsubClassOf+%3Fchebi+.+%23+Link+ligand+to+its+ChEBI+identifier%0A++%3Fligand+rdfs%3Alabel+%3FligandName+.+%23+Get+the+ligand+name%0A%0A++%23+Use+the+IDSM+Sachem+service+to+find+ChEBI+compounds+similar+to+Heme+%28CHEBI%3A24867%29%0A++%23+The+SMILES+for+Heme+B+%28CHEBI%3A24867%29+is+used+for+the+similarity+search.%0A++SERVICE+%3Chttps%3A//idsm.elixir-czech.cz/sparql/endpoint/chebi%3E+%7B%0A++++%3FsimilarChebi+sachem%3AsimilarCompoundSearch+%5B%0A++++++sachem%3Aquery+%22C%5BC%40%40H%5D1C%3DC%28C%29C2%3DC%28C%3DC3C%28C%29%3DC%28C%3DC4C%28C%29%3DC%28C%3DC1%5BN%2B%5D2%3DC4%29%5BN%5D5%3DC%28C%3DC%28C%3DC5%29%5BN%5D6%3DC3C%3DC%28C%3DC6%29%5BN%5D7%3DC%28C%3DC%28C%3DC7%29%5BFe%5D%29%29C%28%3DO%29O%29C%28%3DO%29O%22%0A++++++%23+Optional%3A+Add+sachem%3Athreshold+property+to+specify+similarity+threshold+%28default+is+often+0.8%29%0A++++++%23+sachem%3Athreshold+%220.8%22%5E%5Exsd%3Afloat%0A++++%5D+.%0A++%7D%0A%0A++%23+Filter+the+proteins+whose+ligand%27s+ChEBI+identifier+matches+one+found+by+the+similarity+search%0A++FILTER%28%3Fchebi+%3D+%3FsimilarChebi%29%0A%7D&format=json&output=json&results=json'"
  },
  {
    "resource": "https://sparql.uniprot.org/.well-known/sparql-examples/43",
    "natural_language_question": "Connect patents cited in UniProtKB with those in the patent database at EPO via publication number, whose grant date is more than twenty years in the past.",
    "ground_truth_query": "PREFIX patent: <http://data.epo.org/linked-data/def/patent/>\nPREFIX skos: <http://www.w3.org/2004/02/skos/core#>\nPREFIX up: <http://purl.uniprot.org/core/>\n\nSELECT ?grantDate ?patent ?application ?applicationNo\nWHERE\n{\n    ?citation a up:Patent_Citation ;\n  skos:exactMatch ?patent .\n  BIND(SUBSTR(STR(?patent), 35) AS ?applicationNo)\n  BIND(SUBSTR(STR(?patent), 33, 2) AS ?countryCode)\n  SERVICE <https://data.epo.org/linked-data/query>{\n    ?publication patent:publicationNumber ?applicationNo ;\n      patent:application ?application .\n    ?application patent:grantDate ?grantDate .\n  }\n  BIND((year(now()) - 20) AS ?thisYearMinusTwenty)\n  BIND(year(?grantDate) AS ?grantYear)\n  FILTER(?grantYear < ?thisYearMinusTwenty)\n} ORDER BY ?grantYear",
    "target_endpoint": "https://sparql.uniprot.org/sparql/",
    "federates_with": [
      "https://data.epo.org/linked-data/query"
    ],
    "endpoint_set": "Uniprot",
    "file_path": "UniProt/43_patents_used_in_uniprot_granted_twenty_years_in_the_past.ttl",
    "predicted_query": "# Primary endpoint: https://sparql.uniprot.org/sparql/\nPREFIX up: <http://purl.uniprot.org/core/>\nPREFIX skos: <http://www.w3.org/2004/02/skos/core#>\nPREFIX patent: <http://data.epo.org/linked-data/def/patent/>\nPREFIX xsd: <http://www.w3.org/2001/XMLSchema#>\nPREFIX fn: <http://www.w3.org/2005/xpath-functions#>\n\nSELECT ?citation ?patentURI ?applicationNo ?grantDate\nWHERE\n{\n  # Get patent citations from UniProtKB\n  ?citation a up:Patent_Citation ;\n            skos:exactMatch ?patentURI .\n\n  # Extract the publication number from the patent URI.\n  # This extraction method (SUBSTR) is based on the structure of EPO patent URIs\n  # found in UniProtKB cross-references, e.g., http://data.epo.org/linked-data/data/publication/EP/1234567/A1\n  BIND(SUBSTR(STR(?patentURI), 35) AS ?applicationNo)\n\n  # Calculate the date exactly 20 years ago from the current date.\n  # fn:adjust-date-to-timezone is used to handle potential timezone issues with NOW().\n  BIND(fn:adjust-date-to-timezone(NOW(), \"PT0H\") - \"P20Y\"^^xsd:duration AS ?dateTwentyYearsAgo)\n\n  # Query the EPO patent database using a SERVICE clause\n  SERVICE <https://data.epo.org/linked-data/query>\n  {\n    # Find the patent application/publication by its number\n    ?application patent:publicationNumber ?applicationNo ;\n                 # Get the grant date for the patent\n                 patent:grantDate ?grantDate .\n\n    # Filter for patents where the grant date is more than twenty years in the past\n    FILTER(?grantDate < ?dateTwentyYearsAgo)\n  }\n}",
    "predicted_endpoint": "Primary",
    "predicted_endpoint_equal_to_target_endpoint": false,
    "predicted_endpoint_in_federates_with": false,
    "predicted_endpoint_or_federated_endpoint": false,
    "run_id_langsmith": "e1c6b630-4441-4a82-9b18-fcae1f97085c",
    "evaluation_timestamp": "2025-05-01T09:47:26.562261",
    "question_understanding_prompt_tokens": 270,
    "question_understanding_completion_tokens": 47,
    "question_understanding_total_tokens": 317,
    "sparql_query_construction_prompt_tokens": 4530,
    "sparql_query_construction_completion_tokens": 473,
    "sparql_query_construction_total_tokens": 5003,
    "is_valid_sparql": true,
    "sparql_syntax_error": "syntactically correct",
    "result_eval_f1_score": 0.0,
    "result_eval_precision": 0.0,
    "result_eval_recall": 0.0,
    "error_occured_at_endpoint": true,
    "predicted_query_result_is_empty": true,
    "ground_truth_query_result_is_empty": true,
    "error_occured_at_endpoint_message": "unknown url type: 'Primary?query=%23+Primary+endpoint%3A+https%3A//sparql.uniprot.org/sparql/%0APREFIX+up%3A+%3Chttp%3A//purl.uniprot.org/core/%3E%0APREFIX+skos%3A+%3Chttp%3A//www.w3.org/2004/02/skos/core%23%3E%0APREFIX+patent%3A+%3Chttp%3A//data.epo.org/linked-data/def/patent/%3E%0APREFIX+xsd%3A+%3Chttp%3A//www.w3.org/2001/XMLSchema%23%3E%0APREFIX+fn%3A+%3Chttp%3A//www.w3.org/2005/xpath-functions%23%3E%0A%0ASELECT+%3Fcitation+%3FpatentURI+%3FapplicationNo+%3FgrantDate%0AWHERE%0A%7B%0A++%23+Get+patent+citations+from+UniProtKB%0A++%3Fcitation+a+up%3APatent_Citation+%3B%0A++++++++++++skos%3AexactMatch+%3FpatentURI+.%0A%0A++%23+Extract+the+publication+number+from+the+patent+URI.%0A++%23+This+extraction+method+%28SUBSTR%29+is+based+on+the+structure+of+EPO+patent+URIs%0A++%23+found+in+UniProtKB+cross-references%2C+e.g.%2C+http%3A//data.epo.org/linked-data/data/publication/EP/1234567/A1%0A++BIND%28SUBSTR%28STR%28%3FpatentURI%29%2C+35%29+AS+%3FapplicationNo%29%0A%0A++%23+Calculate+the+date+exactly+20+years+ago+from+the+current+date.%0A++%23+fn%3Aadjust-date-to-timezone+is+used+to+handle+potential+timezone+issues+with+NOW%28%29.%0A++BIND%28fn%3Aadjust-date-to-timezone%28NOW%28%29%2C+%22PT0H%22%29+-+%22P20Y%22%5E%5Exsd%3Aduration+AS+%3FdateTwentyYearsAgo%29%0A%0A++%23+Query+the+EPO+patent+database+using+a+SERVICE+clause%0A++SERVICE+%3Chttps%3A//data.epo.org/linked-data/query%3E%0A++%7B%0A++++%23+Find+the+patent+application/publication+by+its+number%0A++++%3Fapplication+patent%3ApublicationNumber+%3FapplicationNo+%3B%0A+++++++++++++++++%23+Get+the+grant+date+for+the+patent%0A+++++++++++++++++patent%3AgrantDate+%3FgrantDate+.%0A%0A++++%23+Filter+for+patents+where+the+grant+date+is+more+than+twenty+years+in+the+past%0A++++FILTER%28%3FgrantDate+%3C+%3FdateTwentyYearsAgo%29%0A++%7D%0A%7D&format=json&output=json&results=json'"
  },
  {
    "resource": "https://sparql.uniprot.org/.well-known/sparql-examples/45",
    "natural_language_question": "Retrieve drugs that target human enzymes involved in sterol metabolism (federated query with WikiData and Rhea).",
    "ground_truth_query": "PREFIX CHEBI: <http://purl.obolibrary.org/obo/CHEBI_>\nPREFIX chebihash: <http://purl.obolibrary.org/obo/chebi#>\nPREFIX owl: <http://www.w3.org/2002/07/owl#>\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX rh: <http://rdf.rhea-db.org/>\nPREFIX taxon: <http://purl.uniprot.org/taxonomy/>\nPREFIX uniprotkb: <http://purl.uniprot.org/uniprot/>\nPREFIX up: <http://purl.uniprot.org/core/>\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\n\nSELECT DISTINCT ?protein ?proteinFullName ?wikiChemical ?wikiChemicalLabel ?medicalConditionTreatedLabel\nWHERE {\n  # ChEBI: retrieve members of the ChEBI class ChEBI:15889 (sterol)\n  # Rhea: retrieve the reactions involving these ChEBI as participants\n  SERVICE <https://sparql.rhea-db.org/sparql> {\n    ?reaction rdfs:subClassOf rh:Reaction ;\n      rh:status rh:Approved ;\n      rh:side ?reactionSide .\n    ?reactionSide\n      rh:contains ?participant .\n    ?participant rh:compound ?compound\n    {\n      ?compound rh:chebi ?chebi .\n      ?chebi (rdfs:subClassOf)+ CHEBI:15889\n    } UNION {\n      ?compound rh:chebi ?chebi .\n      ?chebi2 rdfs:subClassOf ?chebiRestriction .\n      ?chebiRestriction\n\t\ta owl:Restriction ;\n\t\towl:onProperty chebihash:has_major_microspecies_at_pH_7_3 ;\n\t\towl:someValuesFrom ?chebi .\n      ?chebi2 (rdfs:subClassOf)+ CHEBI:15889\n    }\n  }\n  # UniProt: retrieve the human (taxid:9606) enzymes catalyzing these Rhea reactions\n  ?ca up:catalyzedReaction  ?reaction .\n  ?a up:catalyticActivity  ?ca .\n  ?proteinIRI  up:annotation ?a ;\n    up:organism taxon:9606 ;\n    up:recommendedName ?proteinRecName .\n  ?proteinRecName up:fullName ?proteinFullName .\n  # Find drugs in wikidata that interact with the UniProt Proteins\n  BIND (SUBSTR(STR(?proteinIRI), STRLEN(STR(uniprotkb:))+1) AS ?protein)\n  SERVICE <https://query.wikidata.org/sparql> {\n    ?wp wdt:P352  ?protein .\n    ?wikiChemical wdt:P129 ?wp . # Physically interacts with\n    ?wikiChemical rdfs:label ?wikiChemicalLabel .\n    ?wikiChemical wdt:P2175 ?wmc . # Medical conndition treated\n    ?wmc rdfs:label ?medicalConditionTreatedLabel .\n    FILTER(lang(?medicalConditionTreatedLabel) = 'en')\n    FILTER(lang(?wikiChemicalLabel) = 'en')\n  }\n}",
    "target_endpoint": "https://sparql.uniprot.org/sparql/",
    "federates_with": [
      "https://query.wikidata.org/sparql",
      "https://sparql.rhea-db.org/sparql"
    ],
    "endpoint_set": "Uniprot",
    "file_path": "UniProt/45_drugs_targeting_human_sterol_metabolism_enzymes.ttl",
    "predicted_query": "# Primary endpoint: https://sparql.uniprot.org/sparql/\nPREFIX up: <http://purl.uniprot.org/core/>\nPREFIX taxon: <http://purl.uniprot.org/taxonomy/>\nPREFIX rh: <http://rdf.rhea-db.org/>\nPREFIX CHEBI: <http://purl.obolibrary.org/obo/CHEBI_>\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\nPREFIX wd: <http://www.wikidata.org/entity/>\n\nSELECT DISTINCT ?drug ?drugLabel ?protein ?proteinLabel\nWHERE {\n  # Find human proteins in UniProt\n  ?protein a up:Protein ;\n           up:organism taxon:9606 ; # Homo sapiens\n           rdfs:label ?proteinLabel . # Get protein label from UniProt\n\n  # Find catalytic activity annotations for these proteins\n  ?protein up:annotation ?a .\n  ?a a up:Catalytic_Activity_Annotation ;\n    up:catalyticActivity ?ca .\n\n  # Find the reactions catalyzed by these activities\n  ?ca up:catalyzedReaction ?reaction .\n\n  # Federate with Rhea to check if the reaction involves sterols\n  SERVICE <https://sparql.rhea-db.org/sparql> {\n    # Ensure ?reaction is a specific reaction instance\n    ?reaction rdfs:subClassOf rh:Reaction .\n    # Check if the reaction involves a compound that is a sterol or a subclass of sterol\n    ?reaction rh:side/rh:contains/rh:compound/rh:chebi ?chebi .\n    ?chebi rdfs:subClassOf* CHEBI:15889 . # CHEBI:15889 is 'sterol'\n  }\n\n  # Federate with WikiData to find drugs targeting these proteins\n  SERVICE <https://query.wikidata.org/sparql> {\n    # Get the UniProt ID from the protein URI to link with WikiData\n    BIND(STRAFTER(STR(?protein), \"http://purl.uniprot.org/uniprot/\") AS ?uniprotId)\n\n    # Find entities in WikiData that are instances of drug\n    ?drug wdt:P31 wd:Q12140 . # Q12140 is 'drug'\n\n    # Find entities in WikiData that target a protein with the matching UniProt ID\n    ?drug wdt:P129 ?targetProtein . # P129 is 'targets'\n    ?targetProtein wdt:P352 ?uniprotId . # P352 is 'UniProt ID'\n\n    # Get the label for the drug in English\n    ?drug rdfs:label ?drugLabel .\n    FILTER(LANG(?drugLabel) = \"en\")\n  }\n}",
    "predicted_endpoint": "Primary",
    "predicted_endpoint_equal_to_target_endpoint": false,
    "predicted_endpoint_in_federates_with": false,
    "predicted_endpoint_or_federated_endpoint": false,
    "run_id_langsmith": "04a1155d-6eaf-4547-a415-2bde7e42f5b1",
    "evaluation_timestamp": "2025-05-01T09:48:06.113623",
    "question_understanding_prompt_tokens": 261,
    "question_understanding_completion_tokens": 28,
    "question_understanding_total_tokens": 289,
    "sparql_query_construction_prompt_tokens": 5957,
    "sparql_query_construction_completion_tokens": 0,
    "sparql_query_construction_total_tokens": 5957,
    "is_valid_sparql": true,
    "sparql_syntax_error": "syntactically correct",
    "result_eval_f1_score": 0.0,
    "result_eval_precision": 0.0,
    "result_eval_recall": 0.0,
    "error_occured_at_endpoint": true,
    "predicted_query_result_is_empty": true,
    "ground_truth_query_result_is_empty": true,
    "error_occured_at_endpoint_message": "unknown url type: 'Primary?query=%23+Primary+endpoint%3A+https%3A//sparql.uniprot.org/sparql/%0APREFIX+up%3A+%3Chttp%3A//purl.uniprot.org/core/%3E%0APREFIX+taxon%3A+%3Chttp%3A//purl.uniprot.org/taxonomy/%3E%0APREFIX+rh%3A+%3Chttp%3A//rdf.rhea-db.org/%3E%0APREFIX+CHEBI%3A+%3Chttp%3A//purl.obolibrary.org/obo/CHEBI_%3E%0APREFIX+rdfs%3A+%3Chttp%3A//www.w3.org/2000/01/rdf-schema%23%3E%0APREFIX+wdt%3A+%3Chttp%3A//www.wikidata.org/prop/direct/%3E%0APREFIX+wd%3A+%3Chttp%3A//www.wikidata.org/entity/%3E%0A%0ASELECT+DISTINCT+%3Fdrug+%3FdrugLabel+%3Fprotein+%3FproteinLabel%0AWHERE+%7B%0A++%23+Find+human+proteins+in+UniProt%0A++%3Fprotein+a+up%3AProtein+%3B%0A+++++++++++up%3Aorganism+taxon%3A9606+%3B+%23+Homo+sapiens%0A+++++++++++rdfs%3Alabel+%3FproteinLabel+.+%23+Get+protein+label+from+UniProt%0A%0A++%23+Find+catalytic+activity+annotations+for+these+proteins%0A++%3Fprotein+up%3Aannotation+%3Fa+.%0A++%3Fa+a+up%3ACatalytic_Activity_Annotation+%3B%0A++++up%3AcatalyticActivity+%3Fca+.%0A%0A++%23+Find+the+reactions+catalyzed+by+these+activities%0A++%3Fca+up%3AcatalyzedReaction+%3Freaction+.%0A%0A++%23+Federate+with+Rhea+to+check+if+the+reaction+involves+sterols%0A++SERVICE+%3Chttps%3A//sparql.rhea-db.org/sparql%3E+%7B%0A++++%23+Ensure+%3Freaction+is+a+specific+reaction+instance%0A++++%3Freaction+rdfs%3AsubClassOf+rh%3AReaction+.%0A++++%23+Check+if+the+reaction+involves+a+compound+that+is+a+sterol+or+a+subclass+of+sterol%0A++++%3Freaction+rh%3Aside/rh%3Acontains/rh%3Acompound/rh%3Achebi+%3Fchebi+.%0A++++%3Fchebi+rdfs%3AsubClassOf%2A+CHEBI%3A15889+.+%23+CHEBI%3A15889+is+%27sterol%27%0A++%7D%0A%0A++%23+Federate+with+WikiData+to+find+drugs+targeting+these+proteins%0A++SERVICE+%3Chttps%3A//query.wikidata.org/sparql%3E+%7B%0A++++%23+Get+the+UniProt+ID+from+the+protein+URI+to+link+with+WikiData%0A++++BIND%28STRAFTER%28STR%28%3Fprotein%29%2C+%22http%3A//purl.uniprot.org/uniprot/%22%29+AS+%3FuniprotId%29%0A%0A++++%23+Find+entities+in+WikiData+that+are+instances+of+drug%0A++++%3Fdrug+wdt%3AP31+wd%3AQ12140+.+%23+Q12140+is+%27drug%27%0A%0A++++%23+Find+entities+in+WikiData+that+target+a+protein+with+the+matching+UniProt+ID%0A++++%3Fdrug+wdt%3AP129+%3FtargetProtein+.+%23+P129+is+%27targets%27%0A++++%3FtargetProtein+wdt%3AP352+%3FuniprotId+.+%23+P352+is+%27UniProt+ID%27%0A%0A++++%23+Get+the+label+for+the+drug+in+English%0A++++%3Fdrug+rdfs%3Alabel+%3FdrugLabel+.%0A++++FILTER%28LANG%28%3FdrugLabel%29+%3D+%22en%22%29%0A++%7D%0A%7D&format=json&output=json&results=json'"
  },
  {
    "resource": "https://sparql.uniprot.org/.well-known/sparql-examples/42",
    "natural_language_question": "Connect patents cited in UniProtKB with those in the patent database at EPO via publication number.",
    "ground_truth_query": "PREFIX patent: <http://data.epo.org/linked-data/def/patent/>\nPREFIX skos: <http://www.w3.org/2004/02/skos/core#>\nPREFIX up: <http://purl.uniprot.org/core/>\n\nSELECT ?citation ?patent ?application ?applicationNo\nWHERE\n{\n  ?citation a up:Patent_Citation ;\n    skos:exactMatch ?patent .\n  FILTER(CONTAINS(STR(?patent), 'EP'))\n  BIND(SUBSTR(STR(?patent), 35) AS ?applicationNo)\n  SERVICE <https://data.epo.org/linked-data/query>{\n    ?application patent:publicationNumber ?applicationNo\n  }\n}",
    "target_endpoint": "https://sparql.uniprot.org/sparql/",
    "federates_with": [
      "https://data.epo.org/linked-data/query"
    ],
    "endpoint_set": "Uniprot",
    "file_path": "UniProt/42_connect_patents_to_epo.ttl",
    "predicted_query": "# https://sparql.uniprot.org/sparql/\nPREFIX up: <http://purl.uniprot.org/core/>\nPREFIX skos: <http://www.w3.org/2004/02/skos/core#>\nPREFIX patent: <http://data.epo.org/linked-data/def/patent/>\n\nSELECT ?uniprotCitation ?epoPublication ?publicationNumber\nWHERE\n{\n  # Find patent citations in UniProtKB\n  ?uniprotCitation a up:Patent_Citation ;\n                   # Link to the patent URI (often in the EPO linked data format)\n                   skos:exactMatch ?patentURI .\n\n  # Extract the publication number from the patent URI\n  # Assumes a URI structure like http://data.epo.org/linked-data/patent/COUNTRY/NUMBER/KIND\n  # The publication number is typically the part after the country code and before the kind code\n  # This extraction method is based on the example query and might need adjustment\n  # depending on the exact URI format used in UniProt for EPO patents.\n  # A more robust way might involve parsing the URI components if a standard exists.\n  # For this query, we'll use the substring approach from the example.\n  BIND(SUBSTR(STR(?patentURI), 35) AS ?publicationNumber) # Adjust index if URI format differs\n\n  # Query the EPO linked data endpoint\n  SERVICE <https://data.epo.org/linked-data/query>\n  {\n    # Find the patent publication in the EPO database using the publication number\n    ?epoPublication patent:publicationNumber ?publicationNumber .\n    # We could add more details from EPO here if needed, e.g., patent:application ?application .\n  }\n}",
    "predicted_endpoint": "https://sparql.uniprot.org/sparql/",
    "predicted_endpoint_equal_to_target_endpoint": true,
    "predicted_endpoint_in_federates_with": false,
    "predicted_endpoint_or_federated_endpoint": true,
    "run_id_langsmith": "139c3618-33a8-4b34-aa6d-403280eca9e2",
    "evaluation_timestamp": "2025-05-01T09:48:24.880215",
    "question_understanding_prompt_tokens": 258,
    "question_understanding_completion_tokens": 35,
    "question_understanding_total_tokens": 293,
    "sparql_query_construction_prompt_tokens": 4390,
    "sparql_query_construction_completion_tokens": 0,
    "sparql_query_construction_total_tokens": 4390,
    "is_valid_sparql": true,
    "sparql_syntax_error": "syntactically correct",
    "result_eval_f1_score": 0.0,
    "result_eval_precision": 0.0,
    "result_eval_recall": 0.0,
    "error_occured_at_endpoint": true,
    "predicted_query_result_is_empty": true,
    "ground_truth_query_result_is_empty": true,
    "error_occured_at_endpoint_message": "The read operation timed out"
  },
  {
    "resource": "https://sparql.uniprot.org/.well-known/sparql-examples/67_draft_human_metabolome",
    "natural_language_question": "Generate a draft human metabolome",
    "ground_truth_query": "PREFIX chebislash: <http://purl.obolibrary.org/obo/chebi/>\nPREFIX rh: <http://rdf.rhea-db.org/>\nPREFIX taxon: <http://purl.uniprot.org/taxonomy/>\nPREFIX up: <http://purl.uniprot.org/core/>\n\nSELECT\n?uniprot ?mnemonic ?rhea ?chebi ?smiles ?inchiKey\nWHERE\n{\n  ?uniprot up:annotation/up:catalyticActivity/up:catalyzedReaction ?rhea ;\n        up:organism taxon:9606 ;\n        up:mnemonic ?mnemonic .\n  SERVICE <https://sparql.rhea-db.org/sparql> {\n\t?rhea rh:side/rh:contains/rh:compound ?compound .\n    ?compound (rh:chebi|(rh:reactivePart/rh:chebi)|(rh:underlyingChebi/rh:chebi)) ?chebi .\n   }\n   ?chebi chebislash:smiles ?smiles ;\n          chebislash:inchikey ?inchiKey .\n}",
    "target_endpoint": "https://sparql.uniprot.org/sparql/",
    "federates_with": [
      "https://sparql.rhea-db.org/sparql"
    ],
    "endpoint_set": "Uniprot",
    "file_path": "UniProt/67_draft_human_metabolome.ttl",
    "predicted_query": "# https://sparql.uniprot.org/sparql\nPREFIX up: <http://purl.uniprot.org/core/>\nPREFIX taxon: <http://purl.uniprot.org/taxonomy/>\nPREFIX rh: <http://rdf.rhea-db.org/>\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX CHEBI: <http://purl.obolibrary.org/obo/CHEBI_>\n\nSELECT DISTINCT ?chebi ?chebiLabel\nWHERE {\n  # Query UniProt to find human proteins annotated with catalytic activity\n  SERVICE <https://sparql.uniprot.org/sparql> {\n    ?protein a up:Protein ;\n             up:organism taxon:9606 ; # Filter for human proteins (Taxonomy ID 9606)\n             up:annotation ?annotation . # Get protein annotations\n\n    # Find annotations specifically for catalytic activity\n    ?annotation a up:Catalytic_Activity_Annotation ;\n                up:catalyticActivity ?catalyticActivity .\n\n    # Link the catalytic activity to the catalyzed reaction, which is a Rhea reaction\n    ?catalyticActivity up:catalyzedReaction ?rheaReaction .\n  }\n\n  # Query Rhea to find the compounds involved in these reactions\n  SERVICE <https://sparql.rhea-db.org/sparql> {\n    # Ensure the linked resource is a Rhea reaction\n    ?rheaReaction rdfs:subClassOf rh:Reaction ;\n                  rh:side ?reactionSide . # Get the reaction sides (left and right)\n\n    # Find the participants (compounds) on each side of the reaction\n    ?reactionSide rh:contains ?participant .\n    ?participant rh:compound ?compound . # Get the compound resource\n\n    # Get the ChEBI identifier for the compound\n    ?compound rh:chebi ?chebi .\n  }\n\n  # Optional: Query an external service (like EBI's SPARQL endpoint) to get ChEBI labels\n  # This service is not explicitly in the provided context but is commonly used for ChEBI data.\n  SERVICE <https://sparql.ebi.ac.uk/sparql> {\n     ?chebi rdfs:label ?chebiLabel .\n  }\n}",
    "predicted_endpoint": "https://sparql.uniprot.org/sparql",
    "predicted_endpoint_equal_to_target_endpoint": true,
    "predicted_endpoint_in_federates_with": false,
    "predicted_endpoint_or_federated_endpoint": true,
    "run_id_langsmith": "eee427a9-bd7d-4a15-994a-63e7d30122be",
    "evaluation_timestamp": "2025-05-01T09:53:47.523605",
    "question_understanding_prompt_tokens": 247,
    "question_understanding_completion_tokens": 20,
    "question_understanding_total_tokens": 267,
    "sparql_query_construction_prompt_tokens": 5109,
    "sparql_query_construction_completion_tokens": 0,
    "sparql_query_construction_total_tokens": 5109,
    "is_valid_sparql": true,
    "sparql_syntax_error": "syntactically correct",
    "result_eval_f1_score": 0.0,
    "result_eval_precision": 0.0,
    "result_eval_recall": 0.0,
    "error_occured_at_endpoint": true,
    "predicted_query_result_is_empty": true,
    "ground_truth_query_result_is_empty": true,
    "error_occured_at_endpoint_message": "The read operation timed out"
  },
  {
    "resource": "https://sparql.uniprot.org/.well-known/sparql-examples/36",
    "natural_language_question": "Find the orthologous proteins for UniProtKB entry P05067 using the <a href=\"http://www.orthod.org\">OrthoDB database</a>",
    "ground_truth_query": "PREFIX orthodb: <http://purl.orthodb.org/>\nPREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX skos: <http://www.w3.org/2004/02/skos/core#>\nPREFIX uniprotkb: <http://purl.uniprot.org/uniprot/>\nPREFIX up: <http://purl.uniprot.org/core/>\n\nSELECT\n  ?protein\n  ?orthoGroup\n  ?scientificName\n  ?functionComment\n  ?prefferedGeneName\n  ((STRLEN(?value) - ?medianLength) as ?deviationFromMedianLength)\nWHERE\n{\n  uniprotkb:P05067 a up:Protein ;\n        up:organism/up:scientificName ?scientificName ;\n        rdfs:seeAlso ?orthoGroup ;\n        up:encodedBy/skos:prefLabel ?prefferedGeneName ;\n          up:sequence/rdf:value ?value .\n  OPTIONAL {\n    ?protein up:annotation ?functionAnnotation .\n    ?functionAnnotation a up:Function_Annotation ;\n      rdfs:comment ?functionComment .\n  }\n  SERVICE <https://sparql.orthodb.org/sparql>{\n    ?orthoGroup orthodb:ogMedianProteinLength ?medianLength .\n    ?orthoGroup orthodb:hasMember ?xref .\n    ?xref orthodb:xref/orthodb:xrefResource uniprotkb:P05067 .\n  }\n}\nLIMIT 985915",
    "target_endpoint": "https://sparql.uniprot.org/sparql/",
    "federates_with": [
      "https://sparql.orthodb.org/sparql"
    ],
    "endpoint_set": "Uniprot",
    "file_path": "UniProt/36_orthologous_proteins_via_orthodb.ttl",
    "predicted_query": "# Primary endpoint: https://sparql.uniprot.org/sparql/\nPREFIX uniprotkb: <http://purl.uniprot.org/uniprot/>\nPREFIX up: <http://purl.uniprot.org/core/>\nPREFIX db: <http://purl.uniprot.org/database/>\n\nSELECT ?orthoDBAccession\nWHERE {\n  # Specify the UniProt protein entry\n  BIND(uniprotkb:P05067 AS ?protein)\n\n  # Find cross-references from the UniProt protein\n  ?protein up:database ?dbRef .\n\n  # Filter these cross-references to find the one pointing to OrthoDB\n  ?dbRef up:type db:OrthoDB .\n\n  # Retrieve the accession identifier within OrthoDB for this protein\n  ?dbRef up:accession ?orthoDBAccession .\n\n  # Note: The OrthoDB SPARQL endpoint was not provided in the context.\n  # This query finds the OrthoDB accession linked from the UniProt entry,\n  # which serves as an entry point to find orthologs within OrthoDB,\n  # but does not directly query OrthoDB for the orthologous proteins themselves.\n}",
    "predicted_endpoint": "Primary",
    "predicted_endpoint_equal_to_target_endpoint": false,
    "predicted_endpoint_in_federates_with": false,
    "predicted_endpoint_or_federated_endpoint": false,
    "run_id_langsmith": "6f871b7d-0580-44d8-a74e-86134869bf39",
    "evaluation_timestamp": "2025-05-01T09:59:33.115717",
    "question_understanding_prompt_tokens": 276,
    "question_understanding_completion_tokens": 44,
    "question_understanding_total_tokens": 320,
    "sparql_query_construction_prompt_tokens": 4902,
    "sparql_query_construction_completion_tokens": 281,
    "sparql_query_construction_total_tokens": 5183,
    "is_valid_sparql": true,
    "sparql_syntax_error": "syntactically correct",
    "result_eval_f1_score": 0.0,
    "result_eval_precision": 0.0,
    "result_eval_recall": 0.0,
    "error_occured_at_endpoint": true,
    "predicted_query_result_is_empty": true,
    "ground_truth_query_result_is_empty": true,
    "error_occured_at_endpoint_message": "unknown url type: 'Primary?query=%23+Primary+endpoint%3A+https%3A//sparql.uniprot.org/sparql/%0APREFIX+uniprotkb%3A+%3Chttp%3A//purl.uniprot.org/uniprot/%3E%0APREFIX+up%3A+%3Chttp%3A//purl.uniprot.org/core/%3E%0APREFIX+db%3A+%3Chttp%3A//purl.uniprot.org/database/%3E%0A%0ASELECT+%3ForthoDBAccession%0AWHERE+%7B%0A++%23+Specify+the+UniProt+protein+entry%0A++BIND%28uniprotkb%3AP05067+AS+%3Fprotein%29%0A%0A++%23+Find+cross-references+from+the+UniProt+protein%0A++%3Fprotein+up%3Adatabase+%3FdbRef+.%0A%0A++%23+Filter+these+cross-references+to+find+the+one+pointing+to+OrthoDB%0A++%3FdbRef+up%3Atype+db%3AOrthoDB+.%0A%0A++%23+Retrieve+the+accession+identifier+within+OrthoDB+for+this+protein%0A++%3FdbRef+up%3Aaccession+%3ForthoDBAccession+.%0A%0A++%23+Note%3A+The+OrthoDB+SPARQL+endpoint+was+not+provided+in+the+context.%0A++%23+This+query+finds+the+OrthoDB+accession+linked+from+the+UniProt+entry%2C%0A++%23+which+serves+as+an+entry+point+to+find+orthologs+within+OrthoDB%2C%0A++%23+but+does+not+directly+query+OrthoDB+for+the+orthologous+proteins+themselves.%0A%7D&format=json&output=json&results=json'"
  },
  {
    "resource": "https://sparql.uniprot.org/.well-known/sparql-examples/60",
    "natural_language_question": "Find human proteins that catalyze reactions where substrates or product have a <a href=\"https://www.ebi.ac.uk/chebi/searchId.do?chebiId=CHEBI:35516\">Cholestane skeleton</a>",
    "ground_truth_query": "PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX rh: <http://rdf.rhea-db.org/>\nPREFIX sachem: <http://bioinfo.uochb.cas.cz/rdf/v1.0/sachem#>\nPREFIX taxon: <http://purl.uniprot.org/taxonomy/>\nPREFIX up: <http://purl.uniprot.org/core/>\n\nSELECT\n  DISTINCT\n    ?protein\n    ?disease\n    ?rhea\n    ?chebi\n    ?omim\nWHERE {\n    # Find complete ChEBIs with a Cholestane skeleton, via the Czech Elixir node IDSM Sachem chemical substructure search.\n    SERVICE <https://idsm.elixir-czech.cz/sparql/endpoint/chebi> {\n      ?chebi sachem:substructureSearch [\n        sachem:query\n\"[C@]12(CCC3CCCC[C@]3(C)[C@@]1([H])CC[C@]1(C)[C@@]([H])([C@@](C)([H])CCCC(C)C)CC[C@@]21[H])[H]\"\n].\n   }\n   # Use the fact that UniProt catalytic activities are annotated using Rhea \n   # Mapping the found ChEBIs to Rhea reactions\n   SERVICE <https://sparql.rhea-db.org/sparql>{\n     ?rhea rh:side/rh:contains/rh:compound/rdfs:subClassOf ?chebi .\n   }\n   # Match the found Rhea reactions with human UniProtKB proteins\n   ?protein up:annotation/up:catalyticActivity/up:catalyzedReaction ?rhea .\n   ?protein up:organism taxon:9606 .\n   # Find only those human entries that have an annotated related disease, and optionaly map these to OMIM\n   ?protein up:annotation/up:disease ?disease .\n   OPTIONAL {\n     ?disease rdfs:seeAlso ?omim .\n     ?omim up:database <http://purl.uniprot.org/database/MIM>\n   }\n}",
    "target_endpoint": "https://sparql.uniprot.org/sparql/",
    "federates_with": [
      "https://idsm.elixir-czech.cz/sparql/endpoint/chebi",
      "https://sparql.rhea-db.org/sparql"
    ],
    "endpoint_set": "Uniprot",
    "file_path": "UniProt/60_enzymes_working_on_substrate_with_Cholestene_backbone.ttl",
    "predicted_query": "# https://sparql.uniprot.org/sparql/\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX rh: <http://rdf.rhea-db.org/>\nPREFIX sachem: <http://bioinfo.uochb.cas.cz/rdf/v1.0/sachem#>\nPREFIX taxon: <http://purl.uniprot.org/taxonomy/>\nPREFIX up: <http://purl.uniprot.org/core/>\nPREFIX CHEBI: <http://purl.obolibrary.org/obo/CHEBI_>\n\nSELECT\n  DISTINCT ?protein\nWHERE {\n  # Find complete ChEBIs with a Cholestane skeleton substructure,\n  # via the Czech Elixir node IDSM Sachem chemical substructure search.\n  # The SMARTS query is for the Cholestane skeleton (CHEBI:35516).\n  SERVICE <https://idsm.elixir-czech.cz/sparql/endpoint/chebi> {\n    ?chebi sachem:substructureSearch [\n      sachem:query \"[C@]12(CCC3CCCC[C@]3(C)[C@@]1([H])CC[C@]1(C)[C@@]([H])([C@@](C)([H])CCCC(C)C)CC[C@@]21[H])[H]\"\n    ].\n  }\n\n  # Use the fact that UniProt catalytic activities are annotated using Rhea\n  # Mapping the found ChEBIs to Rhea reactions where they are participants (substrate or product)\n  SERVICE <https://sparql.rhea-db.org/sparql> {\n    ?rhea rh:side/rh:contains/rh:compound/rh:chebi ?chebi .\n    # Ensure the reaction is approved\n    ?rhea rh:status rh:Approved .\n  }\n\n  # Match the found Rhea reactions with human UniProtKB proteins\n  SERVICE <https://sparql.uniprot.org/sparql> {\n    ?protein up:annotation/up:catalyticActivity/up:catalyzedReaction ?rhea .\n    # Filter for human proteins\n    ?protein up:organism taxon:9606 .\n    # Optional: Filter for reviewed proteins\n    ?protein up:reviewed true .\n  }\n}",
    "predicted_endpoint": "https://sparql.uniprot.org/sparql/",
    "predicted_endpoint_equal_to_target_endpoint": true,
    "predicted_endpoint_in_federates_with": false,
    "predicted_endpoint_or_federated_endpoint": true,
    "run_id_langsmith": "070e699a-2974-4f35-b44b-d8566671646e",
    "evaluation_timestamp": "2025-05-01T10:00:55.880572",
    "question_understanding_prompt_tokens": 293,
    "question_understanding_completion_tokens": 38,
    "question_understanding_total_tokens": 331,
    "sparql_query_construction_prompt_tokens": 9907,
    "sparql_query_construction_completion_tokens": 536,
    "sparql_query_construction_total_tokens": 10443,
    "is_valid_sparql": true,
    "sparql_syntax_error": "syntactically correct",
    "result_eval_f1_score": 0.0,
    "result_eval_precision": 0.0,
    "result_eval_recall": 0.0,
    "error_occured_at_endpoint": true,
    "predicted_query_result_is_empty": true,
    "ground_truth_query_result_is_empty": true,
    "error_occured_at_endpoint_message": "The read operation timed out"
  },
  {
    "resource": "https://sparql.uniprot.org/.well-known/sparql-examples/70_enzymes_interacting_with_molecules_similar_to_dopamine",
    "natural_language_question": "Look for enzymes catalyzing reactions with molecules similar to dopamine.",
    "ground_truth_query": "PREFIX CHEBI: <http://purl.obolibrary.org/obo/CHEBI_>\nPREFIX rh: <http://rdf.rhea-db.org/>\nPREFIX sachem: <http://bioinfo.uochb.cas.cz/rdf/v1.0/sachem#>\nPREFIX up: <http://purl.uniprot.org/core/>\n\nSELECT\n  ?protein\n  ?rhea\n  ?chebi\nWHERE {\n  # Use the smiles of dopamine CHEBI:18243\n  SERVICE <https://idsm.elixir-czech.cz/sparql/endpoint/chebi>{\n    ?chebi sachem:similarCompoundSearch [\n      sachem:query \"NCCc1ccc(O)c(O)c1\" ] .\n  }\n  GRAPH<https://sparql.rhea-db.org/rhea>{\n    ?rhea rh:side/rh:contains/rh:compound ?compound .\n    ?compound (rh:chebi|(rh:reactivePart/rh:chebi)|(rh:underlyingChebi/rh:chebi)) ?chebi .\n  }\n  ?protein up:reviewed true ;\n    up:annotation ?caa .\n  ?caa up:catalyticActivity/up:catalyzedReaction ?rhea .\n}",
    "target_endpoint": "https://sparql.uniprot.org/sparql/",
    "federates_with": [
      "https://idsm.elixir-czech.cz/sparql/endpoint/chebi"
    ],
    "endpoint_set": "Uniprot",
    "file_path": "UniProt/70_enzymes_interacting_with_molecules_similar_to_dopamine.ttl",
    "predicted_query": "# https://sparql.uniprot.org/sparql/\nPREFIX CHEBI: <http://purl.obolibrary.org/obo/CHEBI_>\nPREFIX rh: <http://rdf.rhea-db.org/>\nPREFIX sachem: <http://bioinfo.uochb.cas.cz/rdf/v1.0/sachem#>\nPREFIX up: <http://purl.uniprot.org/core/>\n\nSELECT DISTINCT ?protein ?rhea ?chebi\nWHERE {\n  # Use the SMILES of dopamine (CHEBI:18243) to find similar compounds in ChEBI\n  SERVICE <https://idsm.elixir-czech.cz/sparql/endpoint/chebi> {\n    ?chebi sachem:similarCompoundSearch [\n      sachem:query \"NCCc1ccc(O)c(O)c1\" ; # SMILES for dopamine\n      sachem:threshold \"0.8\"^^<http://www.w3.org/2001/XMLSchema#float> # Example similarity threshold\n    ] .\n  }\n\n  # Find Rhea reactions involving the similar ChEBI compounds\n  SERVICE <https://sparql.rhea-db.org/sparql> {\n    ?rhea rh:side/rh:contains/rh:compound ?compound .\n    # Link the compound in Rhea to the ChEBI entity found via similarity search\n    ?compound (rh:chebi|(rh:reactivePart/rh:chebi)|(rh:underlyingChebi/rh:chebi)) ?chebi .\n  }\n\n  # Find UniProt proteins that catalyze these Rhea reactions\n  ?protein up:annotation ?catalyticActivityAnnotation .\n  ?catalyticActivityAnnotation a up:Catalytic_Activity_Annotation ;\n                               up:catalyzedReaction ?rhea .\n\n  # Ensure the protein is annotated as an enzyme or has a catalytic activity annotation\n  # The catalytic activity annotation already implies it's an enzyme, but adding up:enzyme can sometimes help\n  # ?protein up:enzyme [] . # Optional: can add this if needed, but Catalytic_Activity_Annotation is usually sufficient\n\n}",
    "predicted_endpoint": "https://sparql.uniprot.org/sparql/",
    "predicted_endpoint_equal_to_target_endpoint": true,
    "predicted_endpoint_in_federates_with": false,
    "predicted_endpoint_or_federated_endpoint": true,
    "run_id_langsmith": "4c70d17e-7ade-47a0-8423-10e50d072526",
    "evaluation_timestamp": "2025-05-01T10:07:23.039259",
    "question_understanding_prompt_tokens": 251,
    "question_understanding_completion_tokens": 26,
    "question_understanding_total_tokens": 277,
    "sparql_query_construction_prompt_tokens": 5994,
    "sparql_query_construction_completion_tokens": 487,
    "sparql_query_construction_total_tokens": 6481,
    "is_valid_sparql": true,
    "sparql_syntax_error": "syntactically correct",
    "result_eval_f1_score": 0.0,
    "result_eval_precision": 0.0,
    "result_eval_recall": 0.0,
    "error_occured_at_endpoint": true,
    "predicted_query_result_is_empty": true,
    "ground_truth_query_result_is_empty": true,
    "error_occured_at_endpoint_message": "The read operation timed out"
  },
  {
    "resource": "https://sparql.uniprot.org/.well-known/sparql-examples/38",
    "natural_language_question": "For the human entry P05067 (Amyloid-beta precursor protein) find the gene start ends in WikiData",
    "ground_truth_query": "PREFIX p: <http://www.wikidata.org/prop/>\nPREFIX pq: <http://www.wikidata.org/prop/qualifier/>\nPREFIX ps: <http://www.wikidata.org/prop/statement/>\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX uniprotkb: <http://purl.uniprot.org/uniprot/>\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\n\n\nSELECT \n\t?protein \n\t?begin\n\t?end\n\t?chromosome\n\t?assembly\nWHERE {\n    {\n        BIND(uniprotkb:P05067 AS ?proteinIRI)\n        BIND (SUBSTR(STR(?proteinIRI), STRLEN(STR(uniprotkb:))+1) AS ?protein)\n    }\n    SERVICE <https://query.wikidata.org/sparql> {\n        ?wp wdt:P352 ?protein ;\n            wdt:P702 ?wg . \n        ?wg p:P644   ?wgss .\n        ?wgss ps:P644        ?begin ;\n          pq:P1057/wdt:P1813 ?chromosome ;\n          pq:P659/rdfs:label ?assembly .\n        ?wg p:P645 ?wgse .\n        ?wgse ps:P645        ?end ;\n          pq:P1057/wdt:P1813 ?chromosome ;\n          pq:P659/rdfs:label ?assembly .\n        FILTER(lang(?assembly) = \"en\")\n  } \n}",
    "target_endpoint": "https://sparql.uniprot.org/sparql/",
    "federates_with": [
      "https://query.wikidata.org/sparql"
    ],
    "endpoint_set": "Uniprot",
    "file_path": "UniProt/38_find_gene_region_in_wikidata_for_known_entry.ttl",
    "predicted_query": "# https://sparql.uniprot.org/sparql/\nPREFIX uniprotkb: <http://purl.uniprot.org/uniprot/>\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\n\nSELECT ?gene ?geneStart ?geneEnd\nWHERE {\n  # Start from the UniProt entry for P05067\n  uniprotkb:P05067 rdfs:seeAlso ?wikidataItem .\n\n  # Filter to ensure the seeAlso link is to WikiData\n  FILTER(STRSTARTS(STR(?wikidataItem), \"http://www.wikidata.org/entity/Q\"))\n\n  # Query the WikiData endpoint using SERVICE\n  SERVICE <https://query.wikidata.org/sparql> {\n    # Find the gene encoded by the protein (or associated with the protein item)\n    # P702 is the WikiData property \"encoded by\"\n    ?wikidataItem wdt:P702 ?gene .\n\n    # Retrieve the genomic start and end positions for the gene\n    # P644 is \"genomic start\"\n    # P645 is \"genomic end\"\n    ?gene wdt:P644 ?geneStart ;\n          wdt:P645 ?geneEnd .\n  }\n}",
    "predicted_endpoint": "https://sparql.uniprot.org/sparql/",
    "predicted_endpoint_equal_to_target_endpoint": true,
    "predicted_endpoint_in_federates_with": false,
    "predicted_endpoint_or_federated_endpoint": true,
    "run_id_langsmith": "a0abe4fd-f117-4b96-8f95-ee968fb75e7b",
    "evaluation_timestamp": "2025-05-01T10:13:08.427860",
    "question_understanding_prompt_tokens": 267,
    "question_understanding_completion_tokens": 52,
    "question_understanding_total_tokens": 319,
    "sparql_query_construction_prompt_tokens": 4693,
    "sparql_query_construction_completion_tokens": 0,
    "sparql_query_construction_total_tokens": 4693,
    "is_valid_sparql": true,
    "sparql_syntax_error": "syntactically correct",
    "result_eval_f1_score": 0.0,
    "result_eval_precision": 0.0,
    "result_eval_recall": 0.0,
    "error_occured_at_endpoint": true,
    "predicted_query_result_is_empty": true,
    "ground_truth_query_result_is_empty": true,
    "error_occured_at_endpoint_message": "The read operation timed out"
  },
  {
    "resource": "https://sparql.uniprot.org/.well-known/sparql-examples/117_biosodafrontend_glioblastoma_orthologs_rat",
    "natural_language_question": "Which are the proteins associated with glioblastoma and the orthologs expressed in the rat brain?",
    "ground_truth_query": "PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX obo: <http://purl.obolibrary.org/obo/>\nPREFIX orth: <http://purl.org/net/orth#>\nPREFIX sio: <http://semanticscience.org/resource/>\nPREFIX taxon: <http://purl.uniprot.org/taxonomy/>\nPREFIX up: <http://purl.uniprot.org/core/>\nPREFIX lscr: <http://purl.org/lscr#>\nPREFIX genex: <http://purl.org/genex#>\nSELECT DISTINCT ?protein ?orthologous_protein ?gene ?annotation_text WHERE {\n  {\n  \tSELECT ?protein ?annotation_text WHERE {\n      ?protein a up:Protein ;\n          up:organism taxon:9606 ;\n          up:annotation ?annotation .\n      ?annotation rdfs:comment ?annotation_text .\n      ?annotation a up:Disease_Annotation .\n      FILTER CONTAINS (?annotation_text, \"glioblastoma\")\n    }\n  }\n  SERVICE <https://sparql.omabrowser.org/sparql/> {\n    SELECT ?orthologous_protein ?protein ?gene WHERE {\n    ?protein_OMA a orth:Protein .\n    ?orthologous_protein a orth:Protein .\n    ?cluster a orth:OrthologsCluster .\n    ?cluster orth:hasHomologousMember ?node1 .\n    ?cluster\n    orth:hasHomologousMember ?node2 .\n    ?node2 orth:hasHomologousMember* ?protein_OMA .\n    ?node1 orth:hasHomologousMember* ?orthologous_protein .\n    ?orthologous_protein orth:organism/obo:RO_0002162 taxon:10116 . # rattus norvegicus\n    ?orthologous_protein sio:SIO_010079 ?gene .\n    ?protein_OMA lscr:xrefUniprot ?protein .\n    FILTER(?node1 != ?node2)\n\t\t}\n\t}\n  SERVICE <https://www.bgee.org/sparql/> {\n    ?gene genex:isExpressedIn ?a .\n    ?a rdfs:label \"brain\" .\n    ?gene orth:organism ?s . \n    ?s obo:RO_0002162 taxon:10116.\n\t}\n}",
    "target_endpoint": "https://sparql.uniprot.org/sparql",
    "federates_with": [
      "https://sparql.omabrowser.org/sparql/",
      "https://www.bgee.org/sparql/"
    ],
    "endpoint_set": "Uniprot",
    "file_path": "UniProt/117_biosodafrontend_glioblastoma_orthologs_rat.ttl",
    "predicted_query": "# https://sparql.uniprot.org/sparql/\nPREFIX up: <http://purl.uniprot.org/core/>\nPREFIX skos: <http://www.w3.org/2004/02/skos/core#>\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX orthodb: <http://purl.orthodb.org/>\nPREFIX taxon: <http://purl.uniprot.org/taxonomy/>\n\nSELECT DISTINCT ?ratOrthologProtein ?ratOrthologProteinName ?glioblastomaProtein ?glioblastomaProteinName\nWHERE {\n  # Find proteins associated with Glioblastoma in UniProt\n  # We search for the disease label \"glioblastoma\" as it's a specific type of glioma\n  ?glioblastomaProtein up:annotation ?diseaseAnnotation .\n  ?diseaseAnnotation a up:Disease_Annotation ;\n                   up:disease ?disease .\n  ?disease skos:prefLabel ?diseaseLabel .\n  FILTER (CONTAINS(LCASE(?diseaseLabel), \"glioblastoma\"))\n\n  # Get the name of the glioblastoma protein (optional)\n  OPTIONAL { ?glioblastomaProtein up:recommendedName/up:fullName ?glioblastomaProteinName . }\n  OPTIONAL { ?glioblastomaProtein up:submittedName/up:fullName ?glioblastomaProteinName . }\n\n  # Find the ortholog group for the glioblastoma protein using rdfs:seeAlso\n  ?glioblastomaProtein rdfs:seeAlso ?orthoGroup .\n  # Ensure the seeAlso link points to an OrthoDB resource\n  FILTER (STRSTARTS(STR(?orthoGroup), \"http://purl.orthodb.org/\"))\n\n  # Use SERVICE to query OrthoDB for members of this ortholog group\n  SERVICE <https://sparql.orthodb.org/sparql> {\n    # Find members of the ortholog group\n    ?orthoGroup orthodb:hasMember ?orthoMember .\n    # Get the external reference (xref) for the member\n    ?orthoMember orthodb:xref ?orthoMemberXref .\n    # Get the resource URI (UniProt URI) from the xref\n    ?orthoMemberXref orthodb:xrefResource ?ratOrthologProteinUri .\n  }\n\n  # Back in UniProt, check the ortholog member identified from OrthoDB\n  # Bind the URI string obtained from OrthoDB to a URI variable\n  BIND(URI(?ratOrthologProteinUri) AS ?ratOrthologProtein)\n\n  # Filter the ortholog protein by organism: Rat (Rattus norvegicus, taxon:10116)\n  ?ratOrthologProtein up:organism taxon:10116 .\n\n  # Get the name of the rat ortholog protein (optional)\n  OPTIONAL { ?ratOrthologProtein up:recommendedName/up:fullName ?ratOrthologProteinName . }\n  OPTIONAL { ?ratOrthologProtein up:submittedName/up:fullName ?ratOrthologProteinName . }\n\n  # Check for expression annotation in the rat ortholog protein\n  # Filter for comments that mention \"brain\" to indicate expression in brain tissue\n  ?ratOrthologProtein up:annotation ?expressionAnnotation .\n  ?expressionAnnotation a up:Expression_Annotation ;\n                      rdfs:comment ?expressionComment .\n  FILTER (CONTAINS(LCASE(?expressionComment), \"brain\"))\n}",
    "predicted_endpoint": "https://sparql.uniprot.org/sparql/",
    "predicted_endpoint_equal_to_target_endpoint": true,
    "predicted_endpoint_in_federates_with": false,
    "predicted_endpoint_or_federated_endpoint": true,
    "run_id_langsmith": "91886a8b-c2a5-40b5-b431-919aab7f2828",
    "evaluation_timestamp": "2025-05-01T10:19:04.229776",
    "question_understanding_prompt_tokens": 256,
    "question_understanding_completion_tokens": 35,
    "question_understanding_total_tokens": 291,
    "sparql_query_construction_prompt_tokens": 5322,
    "sparql_query_construction_completion_tokens": 0,
    "sparql_query_construction_total_tokens": 5322,
    "is_valid_sparql": true,
    "sparql_syntax_error": "syntactically correct",
    "result_eval_f1_score": 0.0,
    "result_eval_precision": 0.0,
    "result_eval_recall": 0.0,
    "error_occured_at_endpoint": true,
    "predicted_query_result_is_empty": true,
    "ground_truth_query_result_is_empty": true,
    "error_occured_at_endpoint_message": "<urlopen error _ssl.c:989: The handshake operation timed out>"
  },
  {
    "resource": "https://sparql.uniprot.org/.well-known/sparql-examples/116_biosodafrontend_rabit_mouse_orthologs",
    "natural_language_question": "Rabbit's proteins encoded by genes that are orthologous to Mouse's HBB-Y gene and their cross reference links to Uniprot",
    "ground_truth_query": "PREFIX lscr: <http://purl.org/lscr#>\nPREFIX orth: <http://purl.org/net/orth#>\nPREFIX up: <http://purl.uniprot.org/core/>\nPREFIX obo: <http://purl.obolibrary.org/obo/>\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nSELECT DISTINCT ?PROTEIN_1 ?PROTEIN_2 ?UNIPROT_XREF_1 ?UNIPROT_XREF_2 WHERE {\n\t?taxon_1 up:commonName 'Mouse' .\n\t?taxon_2 up:commonName 'Rabbit' .\n\tSERVICE <https://sparql.omabrowser.org/sparql/> {\n\t\t?cluster a orth:OrthologsCluster .\n\t\t?cluster orth:hasHomologousMember ?node1 .\n\t\t?cluster orth:hasHomologousMember ?node2 .\n\t\t?node2 orth:hasHomologousMember* ?PROTEIN_2 .\n\t\t?node1 orth:hasHomologousMember* ?PROTEIN_1 .\n\t\t?PROTEIN_1 a orth:Protein .\n\t\t?PROTEIN_1 orth:organism/obo:RO_0002162 ?taxon_1 ;\n\t\t\trdfs:label 'HBB-Y' ;\n\t\t\tlscr:xrefUniprot ?UNIPROT_XREF_1 .\n\t\t?PROTEIN_2 a orth:Protein .\n\t\t?PROTEIN_2 orth:organism/obo:RO_0002162 ?taxon_2 .\n\t\t?PROTEIN_2 lscr:xrefUniprot ?UNIPROT_XREF_2 .\n\t\tFILTER ( ?node1 != ?node2 )\n\t}\n}",
    "target_endpoint": "https://sparql.uniprot.org/sparql",
    "federates_with": [
      "https://sparql.omabrowser.org/sparql/"
    ],
    "endpoint_set": "Uniprot",
    "file_path": "UniProt/116_biosodafrontend_rabit_mouse_orthologs.ttl",
    "predicted_query": "# https://sparql.uniprot.org/sparql/\nPREFIX up: <http://purl.uniprot.org/core/>\nPREFIX skos: <http://www.w3.org/2004/02/skos/core#>\nPREFIX taxon: <http://purl.uniprot.org/taxonomy/>\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX orthodb: <http://purl.orthodb.org/>\n\nSELECT DISTINCT ?rabbitProtein ?rabbitProteinAccession ?rabbitGene\nWHERE {\n  # Define taxon IDs for Mouse (Mus musculus) and Rabbit (Oryctolagus cuniculus)\n  BIND(taxon:10090 AS ?mouseTaxon)\n  BIND(taxon:9986 AS ?rabbitTaxon)\n\n  # 1. Find the Mouse gene named \"HBB-Y\" in UniProt\n  ?mouseGene a up:Gene ;\n             up:organism ?mouseTaxon ;\n             skos:prefLabel \"HBB-Y\" . # Assuming \"HBB-Y\" is the preferred label for the gene\n\n  # 2. Find the protein encoded by the Mouse gene\n  ?mouseProtein up:encodedBy ?mouseGene .\n\n  # 3. Find the OrthoDB group linked to the Mouse protein via rdfs:seeAlso\n  ?mouseProtein rdfs:seeAlso ?orthoGroup .\n  FILTER(STRSTARTS(STR(?orthoGroup), \"http://purl.orthodb.org/\")) # Ensure the linked resource is from OrthoDB\n\n  # 4. Use the OrthoDB service to find members of this orthologous group\n  SERVICE <https://sparql.orthodb.org/sparql> {\n    ?orthoGroup orthodb:hasMember ?orthoMemberId .\n    # Link the OrthoDB member ID back to its UniProt resource URI\n    ?orthoMemberId orthodb:xref/orthodb:xrefResource ?rabbitProtein .\n  }\n\n  # 5. Back in UniProt, filter the orthologous members to be from Rabbit\n  ?rabbitProtein up:organism ?rabbitTaxon .\n\n  # 6. Find the gene encoding the Rabbit protein\n  ?rabbitProtein up:encodedBy ?rabbitGene .\n\n  # Get the UniProt accession for the Rabbit protein (serving as the UniProt cross-reference link)\n  BIND(STRAFTER(STR(?rabbitProtein), \"http://purl.uniprot.org/uniprot/\") AS ?rabbitProteinAccession)\n}",
    "predicted_endpoint": "https://sparql.uniprot.org/sparql/",
    "predicted_endpoint_equal_to_target_endpoint": true,
    "predicted_endpoint_in_federates_with": false,
    "predicted_endpoint_or_federated_endpoint": true,
    "run_id_langsmith": "c181697d-b1c6-4124-b4b8-6c8bc13dca36",
    "evaluation_timestamp": "2025-05-01T10:24:45.779231",
    "question_understanding_prompt_tokens": 265,
    "question_understanding_completion_tokens": 49,
    "question_understanding_total_tokens": 314,
    "sparql_query_construction_prompt_tokens": 6000,
    "sparql_query_construction_completion_tokens": 591,
    "sparql_query_construction_total_tokens": 6591,
    "is_valid_sparql": true,
    "sparql_syntax_error": "syntactically correct",
    "result_eval_f1_score": 0.0,
    "result_eval_precision": 0.0,
    "result_eval_recall": 0.0,
    "error_occured_at_endpoint": true,
    "predicted_query_result_is_empty": true,
    "ground_truth_query_result_is_empty": true,
    "error_occured_at_endpoint_message": "<urlopen error [Errno 61] Connection refused>"
  },
  {
    "resource": "https://sparql.uniprot.org/.well-known/sparql-examples/29",
    "natural_language_question": "Use <a href=\"http://allie.dbcls.jp/\">ALLIE</a> a service for Abbreviation / Long Form in Japanese and English to search in UniProt using Japanese.",
    "ground_truth_query": "PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX up: <http://purl.uniprot.org/core/>\n\nSELECT ?protein ?englishLabelStr\nWHERE {\n    SERVICE <https://data.allie.dbcls.jp/sparql>{\n        ?x rdfs:label \"アミロイド前駆体タンパク質\"@ja ;\n            rdfs:label ?englishLabel .\n        FILTER(lang(?englishLabel) = \"en\")\n    }\n    BIND (STR(?englishLabel) AS ?englishLabelStr)\n    ?protein a up:Protein .\n    {\n        ?protein (up:recommendedName|up:alternativeName) ?structuredName .\n    }\n    UNION\n    {\n        VALUES(?partType){(up:domain) (up:component)}\n            ?protein ?partType ?part .\n        ?part (up:recommendedName|up:alternativeName) ?structuredName .\n    }\n    ?structuredName ?anyKindOfName  ?englishLabelStr .\n    ?anyKindOfName rdfs:subPropertyOf up:structuredNameType .\n}",
    "target_endpoint": "https://sparql.uniprot.org/sparql/",
    "federates_with": [
      "https://data.allie.dbcls.jp/sparql"
    ],
    "endpoint_set": "Uniprot",
    "file_path": "UniProt/29_search_uniprot_in_japanese_with_allie.ttl",
    "predicted_query": "# https://sparql.uniprot.org/sparql/\nPREFIX up: <http://purl.uniprot.org/core/>\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX skos: <http://www.w3.org/2004/02/skos/core#>\n\nSELECT ?protein ?proteinName ?englishLabel\nWHERE {\n  # Query ALLIE service (https://data.allie.dbcls.jp/sparql) to get English translation of the Japanese term\n  SERVICE <https://data.allie.dbcls.jp/sparql> {\n    # Replace \"Japanese Term\" with the actual Japanese term you want to search for\n    # Example: \"インスリン\" for Insulin\n    ?allie_resource rdfs:label \"Japanese Term\"@ja ;\n                    rdfs:label ?englishLabel .\n    FILTER(lang(?englishLabel) = \"en\")\n  }\n\n  # Search UniProt (https://sparql.uniprot.org/sparql/) using the English term obtained from ALLIE\n  ?protein a up:Protein .\n\n  # Match the English term against protein recommended or alternative full names\n  # Using UNION to search across multiple name properties\n  {\n     ?protein up:recommendedName ?recName .\n     ?recName up:fullName ?proteinName .\n     # Use LCASE and STR for case-insensitive comparison with the string value\n     FILTER(CONTAINS(LCASE(STR(?proteinName)), LCASE(STR(?englishLabel))))\n  } UNION {\n     ?protein up:alternativeName ?altName .\n     ?altName up:fullName ?proteinName .\n     FILTER(CONTAINS(LCASE(STR(?proteinName)), LCASE(STR(?englishLabel))))\n  }\n  # Optional: Add gene name search if the English term might correspond to a gene name\n  # UNION {\n  #    ?protein up:encodedBy ?gene .\n  #    ?gene skos:prefLabel ?proteinName . # Use ?proteinName for gene label\n  #    FILTER(CONTAINS(LCASE(STR(?proteinName)), LCASE(STR(?englishLabel))))\n  # }\n}",
    "predicted_endpoint": "https://sparql.uniprot.org/sparql/",
    "predicted_endpoint_equal_to_target_endpoint": true,
    "predicted_endpoint_in_federates_with": false,
    "predicted_endpoint_or_federated_endpoint": true,
    "run_id_langsmith": "c8f896f0-47ed-4892-a460-b6b1f1bc56aa",
    "evaluation_timestamp": "2025-05-01T10:27:27.120435",
    "question_understanding_prompt_tokens": 279,
    "question_understanding_completion_tokens": 29,
    "question_understanding_total_tokens": 308,
    "sparql_query_construction_prompt_tokens": 4477,
    "sparql_query_construction_completion_tokens": 0,
    "sparql_query_construction_total_tokens": 4477,
    "is_valid_sparql": true,
    "sparql_syntax_error": "syntactically correct",
    "result_eval_f1_score": 0.0,
    "result_eval_precision": 0.0,
    "result_eval_recall": 0.0,
    "error_occured_at_endpoint": true,
    "predicted_query_result_is_empty": true,
    "ground_truth_query_result_is_empty": true,
    "error_occured_at_endpoint_message": "The read operation timed out"
  },
  {
    "resource": "https://sparql.rhea-db.org/.well-known/sparql-examples/94_Select_all_approved_reactions_with_CHEBI_or_one_of_its_descendant_optional_UniProtKB_reviewed_EC",
    "natural_language_question": "Select all approved reactions with CHEBI:17815 (a 1,2-diacyl-sn-glycerol) or one of its descendant. Display links to UniProtKB/Swiss-Prot entries via EC numbers if the link rhea-ec exists.",
    "ground_truth_query": "PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX rh:<http://rdf.rhea-db.org/>\nPREFIX CHEBI:<http://purl.obolibrary.org/obo/CHEBI_>\nPREFIX up:<http://purl.uniprot.org/core/>\n\nSELECT\n  distinct\n    ?reaction\n    ?enzyme\n    (count(distinct ?protein) as ?proteinCount)\nWHERE {\n  ?reaction rdfs:subClassOf rh:Reaction .\n  ?reaction rh:status rh:Approved .\n  ?reaction rh:side ?reactionSide .\n\n  OPTIONAL {?reaction rh:ec ?enzyme .\n    SERVICE <https://sparql.uniprot.org/sparql> {\n      ?protein up:reviewed true .\n      ?protein up:enzyme ?enzyme.\n    }\n  } .\n  ?reactionSide rh:contains ?participant .\n  ?participant rh:compound ?compound .\n  ?compound rh:chebi ?chebi .\n  ?chebi rdfs:subClassOf* CHEBI:17815 .\n}\nGROUP BY ?reaction ?enzyme\nORDER BY ?reaction\nLIMIT 985915",
    "target_endpoint": "https://sparql.rhea-db.org/sparql",
    "federates_with": [
      "https://sparql.uniprot.org/sparql"
    ],
    "endpoint_set": "Rhea",
    "file_path": "Rhea/94_Select_all_approved_reactions_with_CHEBI_or_one_of_its_descendant_optional_UniProtKB_reviewed_EC.ttl",
    "predicted_query": "# https://sparql.rhea-db.org/sparql/\nPREFIX rh: <http://rdf.rhea-db.org/>\nPREFIX CHEBI: <http://purl.obolibrary.org/obo/CHEBI_>\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX up: <http://purl.uniprot.org/core/>\n\nSELECT DISTINCT ?reaction ?equation ?ec ?uniprot\nWHERE {\n  # Query Rhea endpoint for reactions involving CHEBI:17815 or its descendants\n  SERVICE <https://sparql.rhea-db.org/sparql/> {\n    ?reaction rdfs:subClassOf rh:Reaction ;\n              rh:status rh:Approved ; # Filter for approved reactions\n              rh:equation ?equation . # Get the reaction equation\n\n    # Find participants involving the target ChEBI entity or its descendants\n    ?reaction rh:side ?reactionSide .\n    ?reactionSide rh:contains ?participant .\n    ?participant rh:compound ?compound .\n    ?compound rh:chebi ?chebi .\n\n    # Check if the ChEBI entity is CHEBI:17815 or a descendant\n    ?chebi rdfs:subClassOf* CHEBI:17815 .\n\n    # Optionally find the EC number associated with the reaction in Rhea\n    OPTIONAL {\n      ?reaction rh:ec ?ec .\n    }\n  }\n\n  # If an EC number was found in Rhea, query UniProt endpoint\n  # to find corresponding UniProt entries (Swiss-Prot is part of UniProtKB)\n  OPTIONAL {\n    FILTER(BOUND(?ec)) # Only execute this block if ?ec is bound\n    SERVICE <https://sparql.uniprot.org/sparql/> {\n      # Find UniProt entries linked to the EC number\n      ?uniprot a up:Protein ;\n               up:ecName ?ec .\n      # Further filter for Swiss-Prot entries if needed, e.g., using up:reviewed <http://purl.uniprot.org/core/Reviewed>\n      # However, the question asks for UniProtKB/Swiss-Prot, and linking via EC name is standard.\n    }\n  }\n}\nORDER BY ?reaction ?ec ?uniprot",
    "predicted_endpoint": "https://sparql.rhea-db.org/sparql/",
    "predicted_endpoint_equal_to_target_endpoint": true,
    "predicted_endpoint_in_federates_with": false,
    "predicted_endpoint_or_federated_endpoint": true,
    "run_id_langsmith": "8bc5155e-7cab-4159-a644-144a1f074edd",
    "evaluation_timestamp": "2025-05-01T10:34:18.478534",
    "question_understanding_prompt_tokens": 297,
    "question_understanding_completion_tokens": 71,
    "question_understanding_total_tokens": 368,
    "sparql_query_construction_prompt_tokens": 4285,
    "sparql_query_construction_completion_tokens": 0,
    "sparql_query_construction_total_tokens": 4285,
    "is_valid_sparql": true,
    "sparql_syntax_error": "syntactically correct",
    "result_eval_f1_score": 0.0,
    "result_eval_precision": 0.0,
    "result_eval_recall": 0.0,
    "error_occured_at_endpoint": true,
    "predicted_query_result_is_empty": true,
    "ground_truth_query_result_is_empty": true,
    "error_occured_at_endpoint_message": "The read operation timed out"
  },
  {
    "resource": "https://sparql.rhea-db.org/.well-known/sparql-examples/11",
    "natural_language_question": "Distribution of reactions according to the first class of the enzyme classification (federated query)",
    "ground_truth_query": "PREFIX ec: <http://purl.uniprot.org/enzyme/>\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX rh: <http://rdf.rhea-db.org/>\nPREFIX skos: <http://www.w3.org/2004/02/skos/core#>\n\n# Query 11\n# Retrieve the count of reactions mapped to each level (main class) of the enzyme classification\n#\n# This query mimics the Filter section of the Rhea website (Browse all reactions)\n# https://www.rhea-db.org/rhea?query=\nSELECT ?ecClass (STR(?ecName) AS ?ecClassName) (COUNT(?rhea) AS ?rheaCount)\nWHERE {\n  SERVICE <https://sparql.uniprot.org/sparql> {\n    VALUES (?ecClass) { (ec:1.-.-.-)(ec:2.-.-.-)(ec:3.-.-.-)(ec:4.-.-.-)(ec:5.-.-.-) (ec:6.-.-.-) (ec:7.-.-.-)}\n    ?ecNumber rdfs:subClassOf ?ecClass .\n    ?ecClass skos:prefLabel ?ecName .\n  }\n  ?rhea rdfs:subClassOf rh:Reaction .\n  ?rhea rh:ec ?ecNumber .\n} GROUP BY ?ecClass ?ecName",
    "target_endpoint": "https://sparql.rhea-db.org/sparql",
    "federates_with": [
      "https://sparql.uniprot.org/sparql"
    ],
    "endpoint_set": "Rhea",
    "file_path": "Rhea/11.ttl",
    "predicted_query": "# https://sparql.rhea-db.org/sparql/\nPREFIX rh: <http://rdf.rhea-db.org/>\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX ec: <http://purl.uniprot.org/enzyme/>\nPREFIX skos: <http://www.w3.org/2004/02/skos/core#>\n\nSELECT\n  ?ecClass\n  (str(?ecName) as ?ecClassName)\n  (count(?reaction) as ?reactionCount)\nWHERE\n{\n  # Find all reactions in Rhea\n  ?reaction rdfs:subClassOf rh:Reaction .\n  # Link reactions to their EC numbers\n  ?reaction rh:ec ?ecNumber .\n\n  # Query UniProt to get information about the EC numbers\n  SERVICE <https://sparql.uniprot.org/sparql> {\n    # Define the first level EC classes\n    VALUES (?ecClass) {\n      (ec:1.-.-.-) # Oxidoreductases\n      (ec:2.-.-.-) # Transferases\n      (ec:3.-.-.-) # Hydrolases\n      (ec:4.-.-.-) # Lyases\n      (ec:5.-.-.-) # Isomerases\n      (ec:6.-.-.-) # Ligases\n      (ec:7.-.-.-) # Translocases\n    }\n    # Find EC numbers that are subclasses of the first level classes\n    ?ecNumber rdfs:subClassOf ?ecClass .\n    # Get the preferred label (name) for the first level EC class\n    ?ecClass skos:prefLabel ?ecName .\n  }\n}\nGROUP BY ?ecClass ?ecName\nORDER BY ?ecClass",
    "predicted_endpoint": "https://sparql.rhea-db.org/sparql/",
    "predicted_endpoint_equal_to_target_endpoint": true,
    "predicted_endpoint_in_federates_with": false,
    "predicted_endpoint_or_federated_endpoint": true,
    "run_id_langsmith": "647cb181-25af-4f9a-b444-5ca477442db4",
    "evaluation_timestamp": "2025-05-01T10:39:37.757235",
    "question_understanding_prompt_tokens": 254,
    "question_understanding_completion_tokens": 26,
    "question_understanding_total_tokens": 280,
    "sparql_query_construction_prompt_tokens": 4619,
    "sparql_query_construction_completion_tokens": 0,
    "sparql_query_construction_total_tokens": 4619,
    "is_valid_sparql": true,
    "sparql_syntax_error": "syntactically correct",
    "result_eval_f1_score": 1.0,
    "result_eval_precision": 1.0,
    "result_eval_recall": 1.0,
    "error_occured_at_endpoint": false,
    "predicted_query_result_is_empty": false,
    "ground_truth_query_result_is_empty": false,
    "error_occured_at_endpoint_message": "no error"
  },
  {
    "resource": "https://sparql.rhea-db.org/.well-known/sparql-examples/109_Distribution_of_reactions_according_to_the_first_level_of_enzyme_classification",
    "natural_language_question": "Distribution of reactions according to the first level of enzyme classification",
    "ground_truth_query": "\nPREFIX rh:<http://rdf.rhea-db.org/>\nPREFIX ec:<http://purl.uniprot.org/enzyme/>\nPREFIX rdfs:<http://www.w3.org/2000/01/rdf-schema#>\nPREFIX skos:<http://www.w3.org/2004/02/skos/core#>\n\nSELECT\n  ?ecClass\n  (str(?ecName) as ?ecClassName)\n  (count(?reaction) as ?reactionCount)\nWHERE\n{\n  SERVICE <http://sparql.uniprot.org/sparql> {\n    VALUES (?ecClass) { (ec:1.-.-.-)(ec:2.-.-.-)(ec:3.-.-.-)(ec:4.-.-.-)(ec:5.-.-.-) (ec:6.-.-.-) (ec:7.-.-.-) }\n    ?ecNumber rdfs:subClassOf ?ecClass .\n    ?ecClass skos:prefLabel ?ecName .\n  }\n  ?reaction rdfs:subClassOf rh:Reaction .\n  ?reaction rh:ec ?ecNumber .\n}\nGROUP BY ?ecClass ?ecName\n",
    "target_endpoint": "https://sparql.rhea-db.org/sparql",
    "federates_with": [
      "http://sparql.uniprot.org/sparql"
    ],
    "endpoint_set": "Rhea",
    "file_path": "Rhea/109_Distribution_of_reactions_according_to_the_first_level_of_enzyme_classification.ttl",
    "predicted_query": "# https://sparql.rhea-db.org/sparql/\nPREFIX ec: <http://purl.uniprot.org/enzyme/>\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX rh: <http://rdf.rhea-db.org/>\nPREFIX skos: <http://www.w3.org/2004/02/skos/core#>\n\n# Retrieve the count of reactions mapped to each first level (main class) of the enzyme classification\nSELECT ?ecClass (STR(?ecName) AS ?ecClassName) (COUNT(?rhea) AS ?rheaCount)\nWHERE {\n  # Find reactions in Rhea and their associated EC numbers\n  ?rhea rdfs:subClassOf rh:Reaction .\n  ?rhea rh:ec ?ecNumber .\n\n  # Use SERVICE to query UniProt for EC classification details\n  SERVICE <https://sparql.uniprot.org/sparql> {\n    # Define the first level EC classes\n    VALUES (?ecClass) {\n      (ec:1.-.-.-) # Oxidoreductases\n      (ec:2.-.-.-) # Transferases\n      (ec:3.-.-.-) # Hydrolases\n      (ec:4.-.-.-) # Lyases\n      (ec:5.-.-.-) # Isomerases\n      (ec:6.-.-.-) # Ligases\n      (ec:7.-.-.-) # Translocases\n    }\n    # Find EC numbers that are subclasses of these first level classes\n    ?ecNumber rdfs:subClassOf ?ecClass .\n    # Get the preferred label for the first level class\n    ?ecClass skos:prefLabel ?ecName .\n  }\n}\n# Group results by the first level EC class and its name to count reactions per class\nGROUP BY ?ecClass ?ecName\nORDER BY ?ecClass",
    "predicted_endpoint": "https://sparql.rhea-db.org/sparql/",
    "predicted_endpoint_equal_to_target_endpoint": true,
    "predicted_endpoint_in_federates_with": false,
    "predicted_endpoint_or_federated_endpoint": true,
    "run_id_langsmith": "338e7f4c-be58-40e9-9bf2-43962bf8bacf",
    "evaluation_timestamp": "2025-05-01T10:41:49.062347",
    "question_understanding_prompt_tokens": 249,
    "question_understanding_completion_tokens": 27,
    "question_understanding_total_tokens": 276,
    "sparql_query_construction_prompt_tokens": 4556,
    "sparql_query_construction_completion_tokens": 0,
    "sparql_query_construction_total_tokens": 4556,
    "is_valid_sparql": true,
    "sparql_syntax_error": "syntactically correct",
    "result_eval_f1_score": 1.0,
    "result_eval_precision": 1.0,
    "result_eval_recall": 1.0,
    "error_occured_at_endpoint": false,
    "predicted_query_result_is_empty": false,
    "ground_truth_query_result_is_empty": false,
    "error_occured_at_endpoint_message": "no error"
  },
  {
    "resource": "https://sparql.rhea-db.org/.well-known/sparql-examples/12",
    "natural_language_question": "Select all Rhea reactions linked to protein sequences (enzymes and transporters) in UniProtKB",
    "ground_truth_query": "PREFIX rh: <http://rdf.rhea-db.org/>\nPREFIX up: <http://purl.uniprot.org/core/>\n\n# Query 12\n# Select all Rhea reactions used to annotate enzyme sequences in UniProtKB\n# return the number of UniProtKB entries\n# Federated query using a service to UniProt SPARQL endpoint\n#\n# This query corresponds to the Rhea website query:\n# https://www.rhea-db.org/rhea?query=uniprot:*\n#\nSELECT ?uniprotCount ?rhea ?accession ?equation \nWHERE {\n  SERVICE <https://sparql.uniprot.org/sparql> { \n  \tSELECT ?rhea (count(?uniprot) as ?uniprotCount) {\n      ?uniprot up:annotation/up:catalyticActivity/up:catalyzedReaction ?rhea . \n  \t}\n  \tGROUP BY ?rhea\n  }\n  ?rhea rh:accession ?accession .\n  ?rhea rh:equation ?equation .\n}",
    "target_endpoint": "https://sparql.rhea-db.org/sparql",
    "federates_with": [
      "https://sparql.uniprot.org/sparql"
    ],
    "endpoint_set": "Rhea",
    "file_path": "Rhea/12.ttl",
    "predicted_query": "# https://sparql.uniprot.org/sparql/\nPREFIX up: <http://purl.uniprot.org/core/>\nPREFIX rh: <http://rdf.rhea-db.org/>\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\n\nSELECT DISTINCT ?protein ?proteinAccession ?rhea ?rheaAccession ?rheaEquation\nWHERE {\n  # Query UniProt for proteins linked to Rhea reactions\n  SERVICE <https://sparql.uniprot.org/sparql> {\n    ?protein a up:Protein .\n    ?protein up:accession ?proteinAccession .\n\n    # Find annotations related to catalytic activity or transport, which link to Rhea reactions\n    ?protein up:annotation ?annotation .\n    ?annotation up:catalyticActivity ?catalyticActivity .\n    ?catalyticActivity up:catalyzedReaction ?rhea .\n  }\n\n  # Query Rhea for details about the linked reactions\n  SERVICE <https://sparql.rhea-db.org/sparql> {\n    ?rhea a rh:Reaction . # Ensure it's a Rhea reaction\n    ?rhea rh:accession ?rheaAccession .\n    ?rhea rh:equation ?rheaEquation .\n    # Optional: Filter for specific types if needed, but the UniProt link via catalyticActivity\n    # usually implies enzymatic or transport activity.\n    # For example, to explicitly filter for transport reactions:\n    # ?rhea rh:isTransport true .\n  }\n}",
    "predicted_endpoint": "https://sparql.uniprot.org/sparql/",
    "predicted_endpoint_equal_to_target_endpoint": false,
    "predicted_endpoint_in_federates_with": true,
    "predicted_endpoint_or_federated_endpoint": true,
    "run_id_langsmith": "c28f3a0a-eaea-4657-a95d-76b405d8c143",
    "evaluation_timestamp": "2025-05-01T10:42:21.126982",
    "question_understanding_prompt_tokens": 258,
    "question_understanding_completion_tokens": 30,
    "question_understanding_total_tokens": 288,
    "sparql_query_construction_prompt_tokens": 4797,
    "sparql_query_construction_completion_tokens": 0,
    "sparql_query_construction_total_tokens": 4797,
    "is_valid_sparql": true,
    "sparql_syntax_error": "syntactically correct",
    "result_eval_f1_score": 0.0,
    "result_eval_precision": 0.0,
    "result_eval_recall": 0.0,
    "error_occured_at_endpoint": true,
    "predicted_query_result_is_empty": true,
    "ground_truth_query_result_is_empty": true,
    "error_occured_at_endpoint_message": "QueryBadFormed: A bad request has been sent to the endpoint: probably the SPARQL query is badly formed."
  },
  {
    "resource": "https://sparql.rhea-db.org/.well-known/sparql-examples/112_Total_number_of_reaction_ec_protein_links",
    "natural_language_question": "Total number of <reaction> <ec> <protein> links",
    "ground_truth_query": "PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX rh:<http://rdf.rhea-db.org/>\nPREFIX ec:<http://purl.uniprot.org/enzyme/>\nPREFIX up:<http://purl.uniprot.org/core/>\n\nSELECT\n  (count(?reaction) as ?reactionEcProteinLinkCount)\nWHERE {\n  ?reaction rdfs:subClassOf rh:Reaction .\n  ?reaction rh:ec ?enzyme\n  SERVICE <http://sparql.uniprot.org/sparql> {\n    ?protein up:reviewed true .\n    ?protein up:enzyme ?enzyme.\n  }\n}",
    "target_endpoint": "https://sparql.rhea-db.org/sparql",
    "federates_with": [
      "http://sparql.uniprot.org/sparql"
    ],
    "endpoint_set": "Rhea",
    "file_path": "Rhea/112_Total_number_of_reaction_ec_protein_links.ttl",
    "predicted_query": "# https://sparql.rhea-db.org/sparql/\nPREFIX rh: <http://rdf.rhea-db.org/>\nPREFIX up: <http://purl.uniprot.org/core/>\nPREFIX ec: <http://purl.uniprot.org/enzyme/>\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\n\nSELECT\n  (count(distinct ?reaction) as ?reactionCount) # Count distinct reactions involved\n  (count(distinct ?enzyme) as ?enzymeCount)     # Count distinct EC numbers involved\n  (count(distinct ?protein) as ?proteinCount)   # Count distinct proteins involved\nWHERE {\n  # Find reactions linked to EC numbers in Rhea\n  ?reaction rdfs:subClassOf rh:Reaction .\n  ?reaction rh:ec ?enzyme .\n\n  # Federate with UniProt to find proteins linked to the same EC numbers\n  SERVICE <https://sparql.uniprot.org/sparql> {\n    ?protein a up:Protein ;\n             up:reviewed true . # Filter for reviewed UniProt entries\n\n    # Proteins can be linked to EC numbers directly or via domains/components\n    { ?protein up:enzyme ?enzyme }\n    UNION\n    { ?protein up:domain/up:enzyme ?enzyme }\n    UNION\n    { ?protein up:component/up:enzyme ?enzyme }\n  }\n}",
    "predicted_endpoint": "https://sparql.rhea-db.org/sparql/",
    "predicted_endpoint_equal_to_target_endpoint": true,
    "predicted_endpoint_in_federates_with": false,
    "predicted_endpoint_or_federated_endpoint": true,
    "run_id_langsmith": "2d55b531-f624-4a0e-b036-2342d995ad15",
    "evaluation_timestamp": "2025-05-01T10:42:48.866641",
    "question_understanding_prompt_tokens": 254,
    "question_understanding_completion_tokens": 21,
    "question_understanding_total_tokens": 275,
    "sparql_query_construction_prompt_tokens": 5205,
    "sparql_query_construction_completion_tokens": 328,
    "sparql_query_construction_total_tokens": 5533,
    "is_valid_sparql": true,
    "sparql_syntax_error": "syntactically correct",
    "result_eval_f1_score": 0.0,
    "result_eval_precision": 0.0,
    "result_eval_recall": 0.0,
    "error_occured_at_endpoint": false,
    "predicted_query_result_is_empty": false,
    "ground_truth_query_result_is_empty": false,
    "error_occured_at_endpoint_message": "no error"
  },
  {
    "resource": "https://sparql.rhea-db.org/.well-known/sparql-examples/19_draft_human_metabolome",
    "natural_language_question": "Generate a draft human metabolome",
    "ground_truth_query": "PREFIX chebislash: <http://purl.obolibrary.org/obo/chebi/>\nPREFIX rh: <http://rdf.rhea-db.org/>\nPREFIX taxon: <http://purl.uniprot.org/taxonomy/>\nPREFIX up: <http://purl.uniprot.org/core/>\n\nSELECT\n  ?uniprot ?mnemonic ?rhea ?chebi ?smiles ?inchiKey\nWHERE\n{\n  ?rhea rh:side/rh:contains/rh:compound ?compound .\n  ?compound (rh:chebi|(rh:reactivePart/rh:chebi)|(rh:underlyingChebi/rh:chebi)) ?chebi .\n  ?chebi chebislash:smiles ?smiles ;\n          chebislash:inchikey ?inchiKey .\n  SERVICE <https://sparql.uniprot.org/sparql> {\n     ?uniprot up:annotation/up:catalyticActivity/up:catalyzedReaction ?rhea ;\n                                             up:organism taxon:9606 ;\n                                             up:mnemonic ?mnemonic .\n\n   }\n}",
    "target_endpoint": "https://sparql.rhea-db.org/sparql/",
    "federates_with": [
      "https://sparql.uniprot.org/sparql"
    ],
    "endpoint_set": "Rhea",
    "file_path": "Rhea/19_draft_human_metabolome.ttl",
    "predicted_query": "# https://sparql.uniprot.org/sparql\nPREFIX up: <http://purl.uniprot.org/core/>\nPREFIX taxon: <http://purl.uniprot.org/taxonomy/>\nPREFIX rh: <http://rdf.rhea-db.org/>\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX CHEBI: <http://purl.obolibrary.org/obo/CHEBI_>\n\nSELECT DISTINCT ?chebi ?chebiLabel\nWHERE {\n  # Query UniProt to find human proteins that are enzymes\n  SERVICE <https://sparql.uniprot.org/sparql> {\n    ?protein a up:Protein .\n    ?protein up:organism taxon:9606 . # Filter for human proteins\n\n    # Find catalytic activity annotations for these proteins\n    ?protein up:annotation ?a .\n    ?a a up:Catalytic_Activity_Annotation .\n    ?a up:catalyticActivity ?ca .\n\n    # Link the catalytic activity to a Rhea reaction\n    ?ca up:catalyzedReaction ?reaction . # ?reaction will be a Rhea URI\n  }\n\n  # Query Rhea to find metabolites involved in these reactions\n  SERVICE <https://sparql.rhea-db.org/sparql> {\n    # Use the Rhea reaction URI obtained from UniProt\n    ?reaction rdfs:subClassOf rh:Reaction . # Ensure it's a valid Rhea reaction\n\n    # Find the reaction sides (substrates/products)\n    ?reaction rh:side ?reactionSide .\n\n    # Find the participants (compounds) in the reaction sides\n    ?reactionSide rh:contains ?participant .\n\n    # Find the compound associated with the participant\n    ?participant rh:compound ?compound .\n\n    # Get the ChEBI identifier for the compound\n    ?compound rh:chebi ?chebi .\n  }\n\n  # Optional: Query a public ChEBI endpoint to get the label for the metabolite\n  # Note: This service is not explicitly listed in the context but is commonly used for ontology lookups.\n  SERVICE <https://sparql.ebi.ac.uk/sparql> {\n      ?chebi rdfs:label ?chebiLabel .\n  }\n}",
    "predicted_endpoint": "https://sparql.uniprot.org/sparql",
    "predicted_endpoint_equal_to_target_endpoint": false,
    "predicted_endpoint_in_federates_with": true,
    "predicted_endpoint_or_federated_endpoint": true,
    "run_id_langsmith": "cd773f15-9c8c-49e5-b17d-21af3a0d8257",
    "evaluation_timestamp": "2025-05-01T10:44:36.091630",
    "question_understanding_prompt_tokens": 246,
    "question_understanding_completion_tokens": 20,
    "question_understanding_total_tokens": 266,
    "sparql_query_construction_prompt_tokens": 5109,
    "sparql_query_construction_completion_tokens": 0,
    "sparql_query_construction_total_tokens": 5109,
    "is_valid_sparql": true,
    "sparql_syntax_error": "syntactically correct",
    "result_eval_f1_score": 0.0,
    "result_eval_precision": 0.0,
    "result_eval_recall": 0.0,
    "error_occured_at_endpoint": true,
    "predicted_query_result_is_empty": true,
    "ground_truth_query_result_is_empty": true,
    "error_occured_at_endpoint_message": "QueryBadFormed: A bad request has been sent to the endpoint: probably the SPARQL query is badly formed."
  },
  {
    "resource": "https://sparql.rhea-db.org/.well-known/sparql-examples/20_search_chemical_names_in_japanese",
    "natural_language_question": "Search for Chemical names starting in Japanese, translated to english using allie",
    "ground_truth_query": "PREFIX oboInOwl: <http://www.geneontology.org/formats/oboInOwl#>\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\n\nSELECT\n*\nWHERE {\nSERVICE <https://data.allie.dbcls.jp/sparql>{\n        ?x rdfs:label \"1,2,4-トリクロロベンゼン\"@ja ;\n            rdfs:label ?englishLabel .\n        FILTER(lang(?englishLabel) = \"en\")\n    }\n  BIND(STR(?englishLabel) AS ?englishLabelStr)\n  ?chebi rdfs:label|oboInOwl:hasSynonym ?englishLabelStr .\n}",
    "target_endpoint": "https://sparql.rhea-db.org/sparql/",
    "federates_with": [
      "https://data.allie.dbcls.jp/sparql"
    ],
    "endpoint_set": "Rhea",
    "file_path": "Rhea/20_search_chemical_names_in_japanese.ttl",
    "predicted_query": "# https://sparql.rhea-db.org/sparql/\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX rh: <http://rdf.rhea-db.org/>\nPREFIX chebi: <http://purl.obolibrary.org/obo/CHEBI_>\n\nSELECT ?chebi ?japaneseLabel ?englishLabel\nWHERE {\n  # Find chemical compounds in Rhea DB.\n  # Rhea links its compounds to ChEBI identifiers.\n  ?compound rh:chebi ?chebi .\n\n  # Get the standard label for the ChEBI entity.\n  # This label is typically in English and will be used to link to ALLIE.\n  ?chebi rdfs:label ?chebiName .\n\n  # Use the ALLIE service to find entities that have the ChEBI name as an English label\n  # and also have a Japanese label.\n  SERVICE <https://data.allie.dbcls.jp/sparql> {\n    # Find an entity ?x in ALLIE that has ?chebiName as an English label.\n    ?x rdfs:label ?englishLabel .\n    FILTER(STR(?englishLabel) = STR(?chebiName) && lang(?englishLabel) = \"en\")\n\n    # Find the corresponding Japanese label for the same entity ?x in ALLIE.\n    ?x rdfs:label ?japaneseLabel .\n    FILTER(lang(?japaneseLabel) = \"ja\")\n  }\n}",
    "predicted_endpoint": "https://sparql.rhea-db.org/sparql/",
    "predicted_endpoint_equal_to_target_endpoint": true,
    "predicted_endpoint_in_federates_with": false,
    "predicted_endpoint_or_federated_endpoint": true,
    "run_id_langsmith": "5e9eda09-f3e5-4a76-aade-495794fce8e6",
    "evaluation_timestamp": "2025-05-01T10:45:11.681565",
    "question_understanding_prompt_tokens": 256,
    "question_understanding_completion_tokens": 23,
    "question_understanding_total_tokens": 279,
    "sparql_query_construction_prompt_tokens": 4476,
    "sparql_query_construction_completion_tokens": 344,
    "sparql_query_construction_total_tokens": 4820,
    "is_valid_sparql": true,
    "sparql_syntax_error": "syntactically correct",
    "result_eval_f1_score": 0.0,
    "result_eval_precision": 0.0,
    "result_eval_recall": 0.0,
    "error_occured_at_endpoint": false,
    "predicted_query_result_is_empty": true,
    "ground_truth_query_result_is_empty": false,
    "error_occured_at_endpoint_message": "no error, but empty result"
  },
  {
    "resource": "https://sparql.rhea-db.org/.well-known/sparql-examples/117_Retrieve_parent_reactions_and_their_catalyzing_enzymes_for_a_metabolite_that_is_not_directly_involved_in_a_reaction",
    "natural_language_question": "Retrieve parent reactions (and their catalyzing enzymes) for a metabolite that is not directly involved in a reaction (ex: CHEBI:83137).",
    "ground_truth_query": "PREFIX CHEBI: <http://purl.obolibrary.org/obo/CHEBI_>\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX rh:<http://rdf.rhea-db.org/>\nPREFIX ec:<http://purl.uniprot.org/enzyme/>\nPREFIX up:<http://purl.uniprot.org/core/>\nPREFIX taxon:<http://purl.uniprot.org/taxonomy/>\nPREFIX keywords:<http://purl.uniprot.org/keywords/>\n\nSELECT\n  ?chebi\n  ?ecNumber\n  (count(?protein) as ?proteinCount)\n  ?reaction\n  ?equation\nWHERE {\n  ?reaction rdfs:subClassOf rh:Reaction .\n  ?reaction rh:status rh:Approved .\n  ?reaction rh:equation ?equation .\n  ?reaction rh:ec ?ecNumber .\n  ?reaction rh:side ?reactionSide .\n  ?reactionSide rh:contains ?participant .\n  ?participant rh:compound ?compound .\n  ?compound rh:chebi ?chebi .\n  CHEBI:83137 rdfs:subClassOf+ ?chebi.\n\n  SERVICE <https://sparql.uniprot.org/sparql> {\n  ?protein a up:Protein .\n  ?protein up:reviewed true .\n    {?protein up:enzyme ?ecNumber}\n  UNION\n    {?protein up:domain/up:enzyme ?ecNumber}\n  UNION\n    {?protein up:component/up:enzyme ?ecNumber} .\n  }\n} \nGROUP BY ?chebi ?ecNumber ?reaction ?equation",
    "target_endpoint": "https://sparql.rhea-db.org/sparql",
    "federates_with": [
      "https://sparql.uniprot.org/sparql"
    ],
    "endpoint_set": "Rhea",
    "file_path": "Rhea/117_Retrieve_parent_reactions_and_their_catalyzing_enzymes_for_a_metabolite_that_is_not_directly_involved_in_a_reaction.ttl",
    "predicted_query": "# https://sparql.rhea-db.org/sparql/\nPREFIX rh: <http://rdf.rhea-db.org/>\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX CHEBI: <http://purl.obolibrary.org/obo/CHEBI_>\nPREFIX up: <http://purl.uniprot.org/core/>\n\nSELECT DISTINCT ?parentReaction ?ecNumber ?protein\nWHERE {\n  # Find reactions (child reactions) that involve the specified metabolite (CHEBI:83137)\n  ?childReaction rdfs:subClassOf rh:Reaction .\n  ?childReaction rh:status rh:Approved . # Ensure the child reaction is approved\n  ?childReaction rh:side ?side .\n  ?side rh:contains ?participant .\n  ?participant rh:compound ?compound .\n  ?compound rh:chebi CHEBI:83137 . # Link to the specific metabolite\n\n  # Find the parent reaction(s) of the child reaction\n  ?childReaction rdfs:subClassOf ?parentReaction .\n  ?parentReaction rdfs:subClassOf rh:Reaction . # Ensure the parent is a Rhea reaction\n  ?parentReaction rh:status rh:Approved . # Ensure the parent reaction is approved\n\n  # Find the EC number(s) associated with the parent reaction\n  ?parentReaction rh:ec ?ecNumber .\n\n  # Federate to UniProt to find proteins associated with the EC number\n  SERVICE <https://sparql.uniprot.org/sparql> {\n    ?protein a up:Protein .\n    # Link protein to EC number (considering different ways EC is linked in UniProt)\n    { ?protein up:enzyme ?ecNumber }\n    UNION\n    { ?protein up:domain/up:enzyme ?ecNumber }\n    UNION\n    { ?protein up:component/up:enzyme ?ecNumber }\n  }\n}",
    "predicted_endpoint": "https://sparql.rhea-db.org/sparql/",
    "predicted_endpoint_equal_to_target_endpoint": true,
    "predicted_endpoint_in_federates_with": false,
    "predicted_endpoint_or_federated_endpoint": true,
    "run_id_langsmith": "83d03262-5587-4d01-adcb-da345c22ff21",
    "evaluation_timestamp": "2025-05-01T10:45:42.702305",
    "question_understanding_prompt_tokens": 273,
    "question_understanding_completion_tokens": 42,
    "question_understanding_total_tokens": 315,
    "sparql_query_construction_prompt_tokens": 5856,
    "sparql_query_construction_completion_tokens": 448,
    "sparql_query_construction_total_tokens": 6304,
    "is_valid_sparql": true,
    "sparql_syntax_error": "syntactically correct",
    "result_eval_f1_score": 0.0,
    "result_eval_precision": 0.0,
    "result_eval_recall": 0.0,
    "error_occured_at_endpoint": false,
    "predicted_query_result_is_empty": true,
    "ground_truth_query_result_is_empty": false,
    "error_occured_at_endpoint_message": "no error, but empty result"
  },
  {
    "resource": "https://sparql.rhea-db.org/.well-known/sparql-examples/115_Retrieve_the_set_of_metabolites_involved_in_reactions_catalyzed_by_human_genes_HUMAN_reference_proteome",
    "natural_language_question": "Retrieve the set of metabolites involved in reactions catalyzed by human genes (HUMAN reference proteome)",
    "ground_truth_query": "\nPREFIX rh:<http://rdf.rhea-db.org/>\nPREFIX taxon:<http://purl.uniprot.org/taxonomy/>\nPREFIX ec:<http://purl.uniprot.org/enzyme/>\nPREFIX rdfs:<http://www.w3.org/2000/01/rdf-schema#>\nPREFIX up:<http://purl.uniprot.org/core/>\nPREFIX keywords:<http://purl.uniprot.org/keywords/>\n\nSELECT\n  ?chebi\n  ?reaction\n  ?ecNumber\n  ?protein\n  ?ensemblTranscript\n  ?ensemblGene\nWHERE {\n  SERVICE <https://sparql.uniprot.org/sparql> {\n    ?protein a up:Protein .\n    ?protein up:reviewed true .\n    ?protein up:organism taxon:9606 .\n    ?protein up:classifiedWith keywords:1185 .\n\n    ?protein rdfs:seeAlso ?ensemblTranscript .\n    ?ensemblTranscript a up:Transcript_Resource .\n    ?ensemblTranscript up:database <http://purl.uniprot.org/database/Ensembl> .\n    ?ensemblTranscript up:transcribedFrom ?ensemblGene .\n\n      {?protein up:enzyme ?ecNumber .}\n    UNION\n      {?protein up:domain/up:enzyme ?ecNumber .}\n    UNION\n      {?protein up:component/up:enzyme ?ecNumber .}\n  }\n\n  ?reaction rdfs:subClassOf rh:Reaction .\n  ?reaction rh:status rh:Approved .\n  ?reaction rh:ec ?ecNumber .\n  ?reaction rh:side ?reactionSide .\n  ?reactionSide rh:contains ?participant .\n  ?participant rh:compound ?compound .\n  ?compound rh:chebi ?chebi . # only considering small molecules participants\n}",
    "target_endpoint": "https://sparql.rhea-db.org/sparql",
    "federates_with": [
      "https://sparql.uniprot.org/sparql"
    ],
    "endpoint_set": "Rhea",
    "file_path": "Rhea/115_Retrieve_the_set_of_metabolites_involved_in_reactions_catalyzed_by_human_genes_HUMAN_reference_proteome.ttl",
    "predicted_query": "# https://sparql.uniprot.org/sparql\nPREFIX up: <http://purl.uniprot.org/core/>\nPREFIX taxon: <http://purl.uniprot.org/taxonomy/>\nPREFIX rh: <http://rdf.rhea-db.org/>\nPREFIX CHEBI: <http://purl.obolibrary.org/obo/CHEBI_>\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\n\nSELECT DISTINCT ?chebi ?chebiLabel\nWHERE {\n  # Find human proteins in UniProt\n  SERVICE <https://sparql.uniprot.org/sparql> {\n    ?protein a up:Protein ;\n             up:reviewed true ; # Focus on reviewed entries\n             up:organism taxon:9606 ; # Filter for human proteins\n             up:annotation/up:catalyticActivity/up:catalyzedReaction ?rhea . # Find catalyzed reactions (linked to Rhea)\n  }\n\n  # For the found Rhea reactions, find the involved metabolites in Rhea\n  SERVICE <https://sparql.rhea-db.org/sparql> {\n    ?rhea rh:side ?reactionSide . # Get reaction sides (left/right)\n    ?reactionSide rh:contains ?participant . # Get participants in the side\n    ?participant rh:compound ?compound . # Get the compound involved\n    ?compound rh:chebi ?chebi . # Get the ChEBI identifier for the compound\n    # Optionally get the label for the ChEBI compound\n    OPTIONAL {\n      SERVICE <http://purl.obolibrary.org/obo/sparql> { # ChEBI endpoint for labels\n        ?chebi rdfs:label ?chebiLabel .\n      }\n    }\n  }\n}",
    "predicted_endpoint": "https://sparql.uniprot.org/sparql",
    "predicted_endpoint_equal_to_target_endpoint": false,
    "predicted_endpoint_in_federates_with": true,
    "predicted_endpoint_or_federated_endpoint": true,
    "run_id_langsmith": "adc57548-4cc9-48db-97c7-614ce92bcbea",
    "evaluation_timestamp": "2025-05-01T10:46:51.978869",
    "question_understanding_prompt_tokens": 258,
    "question_understanding_completion_tokens": 26,
    "question_understanding_total_tokens": 284,
    "sparql_query_construction_prompt_tokens": 6735,
    "sparql_query_construction_completion_tokens": 415,
    "sparql_query_construction_total_tokens": 7150,
    "is_valid_sparql": true,
    "sparql_syntax_error": "syntactically correct",
    "result_eval_f1_score": 0.0,
    "result_eval_precision": 0.0,
    "result_eval_recall": 0.0,
    "error_occured_at_endpoint": true,
    "predicted_query_result_is_empty": true,
    "ground_truth_query_result_is_empty": true,
    "error_occured_at_endpoint_message": "QueryBadFormed: A bad request has been sent to the endpoint: probably the SPARQL query is badly formed."
  }
]