[
  {
    "resource": "https://sparql.swisslipids.org/.well-known/sparql-examples/16",
    "natural_language_question": "For a given lipid (SWISSLIPID:000399814, Ceramide), return a list of all enzymes in UniProtKB/Swiss-Prot annotated to catalyze reactions involving that lipid.\nThis query does not consider the hierarchy: it looks for reactions and enzymes only for the specified lipid.",
    "ground_truth_query": "PREFIX SWISSLIPID: <https://swisslipids.org/rdf/SLM_>\nPREFIX owl: <http://www.w3.org/2002/07/owl#>\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX rh: <http://rdf.rhea-db.org/>\nPREFIX up: <http://purl.uniprot.org/core/>\n\n# Example 16\nSELECT ?startId ?startName ?uniprot\nWHERE\n{\n  # SwissLipids query (list of) identifier(s)\n  VALUES ?startId { SWISSLIPID:000399814 }\n  # name\n  ?startId rdfs:label ?startName .\n  # ChEBI x-ref\n  ?startId owl:equivalentClass ?chebi .\n  # federated query to Rhea\n  SERVICE <https://sparql.rhea-db.org/sparql> {\n  \t?rhea rh:side/rh:contains/rh:compound/rh:chebi ?chebi .\n  }    \n  # federated query to UniProt\n  SERVICE <https://sparql.uniprot.org/sparql> {\n    ?uniprot up:reviewed true .\n    ?uniprot up:annotation/up:catalyticActivity/up:catalyzedReaction ?rhea .\n  }\n} \nORDER BY ?startId",
    "target_endpoint": "https://sparql.swisslipids.org/sparql/",
    "federates_with": [
      "https://sparql.uniprot.org/sparql",
      "https://sparql.rhea-db.org/sparql"
    ],
    "endpoint_set": "SwissLipids",
    "file_path": "SwissLipids/16.ttl",
    "predicted_query": "# https://sparql.swisslipids.org/sparql/\n# Federated SPARQL query to find enzymes in UniProtKB/Swiss-Prot that catalyze reactions involving a specific lipid (SWISSLIPID:000399814, Ceramide).\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>\nPREFIX sl: <http://www.swisslipids.org/rdf/SwissLipids#>\nPREFIX uniprot: <http://purl.uniprot.org/core/>\n\nSELECT DISTINCT ?enzyme ?enzymeName\nWHERE {\n  # Find reactions in SwissLipids involving the specified lipid.\n  SERVICE <https://sparql.swisslipids.org/sparql/> {\n    VALUES ?lipid { sl:SWISSLIPID_000399814 } # SWISSLIPID:000399814 (Ceramide)\n    ?reaction sl:participates ?lipid .\n  }\n\n  # Find enzymes in UniProtKB/Swiss-Prot that catalyze these reactions.\n  SERVICE <https://sparql.uniprot.org/sparql> {\n    ?enzyme uniprot:catalyticActivity ?reaction ;\n            rdf:type uniprot:Protein ;\n            rdfs:label ?enzymeName .\n  }\n}",
    "predicted_endpoint": "https://sparql.swisslipids.org/sparql/",
    "predicted_endpoint_equal_to_target_endpoint": true,
    "predicted_endpoint_in_federates_with": false,
    "predicted_endpoint_or_federated_endpoint": true,
    "run_id_langsmith": "89b32571-3b21-4567-aeaf-2a64449eb3bd",
    "evaluation_timestamp": "2025-05-10T18:22:58.754096",
    "question_understanding_prompt_tokens": 308,
    "question_understanding_completion_tokens": 72,
    "question_understanding_total_tokens": 380,
    "sparql_query_construction_prompt_tokens": 3307,
    "sparql_query_construction_completion_tokens": 332,
    "sparql_query_construction_total_tokens": 3639,
    "is_valid_sparql": true,
    "sparql_syntax_error": "syntactically correct",
    "result_eval_f1_score": 0.0,
    "result_eval_precision": 0.0,
    "result_eval_recall": 0.0,
    "error_occured_at_endpoint": false,
    "predicted_query_result_is_empty": true,
    "ground_truth_query_result_is_empty": false,
    "error_occured_at_endpoint_message": "no error, but empty result"
  },
  {
    "resource": "https://sparql.swisslipids.org/.well-known/sparql-examples/6",
    "natural_language_question": "For a given lipid (SWISSLIPID:000399814, Ceramide), return a list of all corresponding reactions (Rhea IDs and equation), as well as their enzymes as annotated in UniProtKB/Swiss-Prot) enzymes themselves (ID and protein name).\nThis query does not consider the hierarchy: it looks for reactions and enzymes only for the specified lipid.",
    "ground_truth_query": "PREFIX SWISSLIPID: <https://swisslipids.org/rdf/SLM_>\nPREFIX owl: <http://www.w3.org/2002/07/owl#>\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX rh: <http://rdf.rhea-db.org/>\nPREFIX up: <http://purl.uniprot.org/core/>\n\n# Example 6\nSELECT ?startId ?startName ?chebi ?rhea ?rheaEquation ?uniprot ?uniprotName\nWHERE\n{\n  # SwissLipids query (list of) identifier(s)\n  VALUES ?startId { SWISSLIPID:000399814 }\n  # name\n  ?startId rdfs:label ?startName .\n  # ChEBI x-ref\n  ?startId owl:equivalentClass ?chebi .\n  # federated query to Rhea\n  SERVICE <https://sparql.rhea-db.org/sparql> {\n  \t?rhea rh:equation ?rheaEquation .\n  \t?rhea rh:side/rh:contains/rh:compound/rh:chebi ?chebi .\n  }    \n  # federated query to UniProt\n  SERVICE <https://sparql.uniprot.org/sparql> {\n    ?uniprot up:reviewed true .\n    ?uniprot up:recommendedName/up:fullName ?uniprotName .\n    ?uniprot up:annotation/up:catalyticActivity/up:catalyzedReaction ?rhea .\n  }\n} \nORDER BY ?startId",
    "target_endpoint": "https://sparql.swisslipids.org/sparql/",
    "federates_with": [
      "https://sparql.uniprot.org/sparql",
      "https://sparql.rhea-db.org/sparql"
    ],
    "endpoint_set": "SwissLipids",
    "file_path": "SwissLipids/6.ttl",
    "predicted_query": "# https://sparql.swisslipids.org/sparql/\n# Federated SPARQL query to find reactions and enzymes associated with a specific lipid (SWISSLIPID:000399814, Ceramide).\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>\nPREFIX sl: <http://www.swisslipids.org/rdf#>\n\nSELECT DISTINCT ?rheaID ?equation ?enzymeID ?proteinName\nWHERE {\n  # Find reactions associated with the given lipid in SwissLipids\n  VALUES ?lipid { sl:SWISSLIPID_000399814 } # SWISSLIPID:000399814 (Ceramide)\n  ?reaction sl:refersToLipid ?lipid .\n  ?reaction sl:rheaId ?rheaID .\n\n  # Get the equation for the reaction from Rhea\n  SERVICE <https://sparql.rhea-db.org/sparql> {\n    ?rheaID rdfs:label ?equation .\n  }\n\n  # Find enzymes associated with the reaction in SwissLipids\n  ?reaction sl:enzyme ?enzymeID .\n\n  # Get the protein name for the enzyme from UniProt\n  SERVICE <https://sparql.uniprot.org/sparql> {\n    ?enzymeID rdfs:label ?proteinName .\n  }\n}",
    "predicted_endpoint": "https://sparql.swisslipids.org/sparql/",
    "predicted_endpoint_equal_to_target_endpoint": true,
    "predicted_endpoint_in_federates_with": false,
    "predicted_endpoint_or_federated_endpoint": true,
    "run_id_langsmith": "28f83864-19f7-4141-b2b5-8af9dadd2759",
    "evaluation_timestamp": "2025-05-10T18:23:10.529799",
    "question_understanding_prompt_tokens": 322,
    "question_understanding_completion_tokens": 89,
    "question_understanding_total_tokens": 411,
    "sparql_query_construction_prompt_tokens": 2857,
    "sparql_query_construction_completion_tokens": 0,
    "sparql_query_construction_total_tokens": 2857,
    "is_valid_sparql": true,
    "sparql_syntax_error": "syntactically correct",
    "result_eval_f1_score": 0.0,
    "result_eval_precision": 0.0,
    "result_eval_recall": 0.0,
    "error_occured_at_endpoint": false,
    "predicted_query_result_is_empty": true,
    "ground_truth_query_result_is_empty": false,
    "error_occured_at_endpoint_message": "no error, but empty result"
  },
  {
    "resource": "https://sparql.swisslipids.org/.well-known/sparql-examples/5",
    "natural_language_question": "For a given lipid (SWISSLIPID:000399814, Ceramide), return a list of all corresponding reactions (Rhea IDs and equation).\nThis query does consider the hierarchy: it looks for reactions involving the specified lipid and/or its more specific forms.",
    "ground_truth_query": "PREFIX SWISSLIPID: <https://swisslipids.org/rdf/SLM_>\nPREFIX owl: <http://www.w3.org/2002/07/owl#>\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX rh: <http://rdf.rhea-db.org/>\n\n# Example 5\nSELECT ?startId ?startName ?id ?name ?chebi ?rhea ?rheaEquation \nWHERE\n{\n  # SwissLipids query (list of) identifier(s)\n  VALUES ?startId { SWISSLIPID:000399814 }\n  # name\n  ?startId rdfs:label ?startName .\n  # Retrieve children lipids \n  ?id rdfs:subClassOf* ?startId .\n  ?id rdfs:label ?name .\n  # ChEBI x-ref\n  ?id owl:equivalentClass ?chebi .\n  # federated query to Rhea\n  SERVICE <https://sparql.rhea-db.org/sparql> {\n  \t?rhea rh:equation ?rheaEquation .\n  \t?rhea rh:side/rh:contains/rh:compound/rh:chebi ?chebi .\n  }    \n} \nORDER BY  ?startId ?id",
    "target_endpoint": "https://sparql.swisslipids.org/sparql/",
    "federates_with": [
      "https://sparql.rhea-db.org/sparql"
    ],
    "endpoint_set": "SwissLipids",
    "file_path": "SwissLipids/5.ttl",
    "predicted_query": "# https://sparql.swisslipids.org/sparql/\n# Federated query to retrieve Rhea IDs and equations for reactions involving a given lipid (SWISSLIPID:000399814, Ceramide) and its more specific forms.\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>\nPREFIX sl: <http://www.swisslipids.org/rdf#>\n\nSELECT DISTINCT ?rheaId ?equation\nWHERE {\n  # Define the target lipid.\n  VALUES ?lipid { <http://www.swisslipids.org/rdf/SWISSLIPID:000399814> } # SWISSLIPID:000399814\n\n  # Find more specific forms of the lipid using rdfs:subClassOf.\n  {\n    SELECT DISTINCT ?specificLipid WHERE {\n      ?specificLipid rdfs:subClassOf* ?lipid .\n    }\n  }\n\n  # Query SwissLipids to find reactions associated with the lipid or its specific forms.\n  SERVICE <https://sparql.swisslipids.org/sparql/> {\n    ?reaction sl:reaction_substrate|sl:reaction_product ?specificLipid .\n    ?reaction sl:rhea_id ?rheaId .\n  }\n\n  # Query Rhea to retrieve the equation for each Rhea ID.\n  SERVICE <https://sparql.rhea-db.org/sparql> {\n    ?rheaUri rdf:type <http://rdf.rhea-db.org/Reaction> ;\n             rdfs:label ?equation .\n    FILTER (STR(?rheaUri) = STR(?rheaId)) # Ensure the Rhea URI matches the ID from SwissLipids.\n  }\n}",
    "predicted_endpoint": "https://sparql.swisslipids.org/sparql/",
    "predicted_endpoint_equal_to_target_endpoint": true,
    "predicted_endpoint_in_federates_with": false,
    "predicted_endpoint_or_federated_endpoint": true,
    "run_id_langsmith": "38e75b20-154a-4146-bd59-99c8152d6a0d",
    "evaluation_timestamp": "2025-05-10T18:23:19.496348",
    "question_understanding_prompt_tokens": 296,
    "question_understanding_completion_tokens": 66,
    "question_understanding_total_tokens": 362,
    "sparql_query_construction_prompt_tokens": 2138,
    "sparql_query_construction_completion_tokens": 0,
    "sparql_query_construction_total_tokens": 2138,
    "is_valid_sparql": true,
    "sparql_syntax_error": "syntactically correct",
    "result_eval_f1_score": 0.0,
    "result_eval_precision": 0.0,
    "result_eval_recall": 0.0,
    "error_occured_at_endpoint": true,
    "predicted_query_result_is_empty": true,
    "ground_truth_query_result_is_empty": true,
    "error_occured_at_endpoint_message": "EndPointInternalError: The endpoint returned the HTTP status code 500. \n\nResponse:\nb'<!DOCTYPE html SYSTEM \"about:legacy-compat\">\\n<html xmlns=\"http://www.w3.org/1999/xhtml\" lang=\"en\" xml:lang=\"en\"><head><title>Error</title><meta content=\"text/html; charset=UTF-8\" http-equiv=\"Content-Type\"/><link href=\"/\" rel=\"home\"/><link href=\"/base.css\" type=\"text/css\" rel=\"stylesheet\"/><link type=\"image/vnd.microsoft.icon\" href=\"/swisslipids-favicon.ico\" rel=\"shortcut icon\"/><link href=\"/swisslipids-sparql.css\" type=\"text/css\" rel=\"stylesheet\"/><link href=\"https://creativecommons.org/licenses/by/4.0/\" rel=\"license\"/><script src=\"https://cdn.jsdelivr.net/npm/yasgui-yasqe@2.11.22/dist/yasqe.bundled.min.js\"></script><link type=\"text/css\" rel=\"stylesheet\" href=\"https://cdn.jsdelivr.net/yasqe/2.2/yasqe.min.css\"/><meta content=\"width=device-width, initial-scale=1\" name=\"viewport\"/><meta content=\"no-referrer\" name=\"referrer\"/></head><body typeof=\"schema:WebPage\"><nav><a href=\"https://www.sib.swiss\"><img alt=\"SIB Swiss Institute of Bioinformatics\" src=\"https://www.swisslipids.org//images/sib_logo_small.gif\"/></a><a href=\"https://www.swisslipids.org/#/\"><img height=\"31\" width=\"74\" alt=\"SL Title Swiss Small\" src=\"https://www.swisslipids.org/images/SL_title_swiss-small.png\"/><img height=\"18\" width=\"18\" id=\"titleFlag\" alt=\"SL Title Flag Small\" style=\"margin-top: 6px;padding: 0\" src=\"https://www.swisslipids.org/images/SL_title_flag-small.png\"/><img height=\"32\" width=\"75\" alt=\"SL Title Lipids Small\" src=\"https://www.swisslipids.org/images/SL_title_lipids-small.png\"/></a><a href=\"/sparql\">SPARQL</a><a href=\"https://www.swisslipids.org/#/mapper\">ID Mapping</a><a href=\"https://www.swisslipids.org/#/downloads\">Downloads</a><a href=\"https://www.swisslipids.org/#/news\">News</a><a href=\"https://www.swisslipids.org/#/about\">About</a><a href=\"https://www.swisslipids.org/#/api\">API</a></nav><a accesskey=\"2\" href=\"#content\" hidden=\"hidden\">Skip Header</a><main class=\"sparql error\" id=\"content\"><h1>500 Internal Server Error</h1><p>The server was not able to handle your request.</p><p> If this error occurs repeatedly, \\n\\t\\tplease <a id=\"contactLink\">contact us</a>\\n\\t\\tand indicate the page you were trying to access.</p><script language=\"javascript\">\\n\\t\\t\\tvar part2 = document.domain.replace(/sparql\\\\./,\\'\\');\\n\\t\\t\\tdocument.getElementById(\\'contactLink\\').href=part2 + \\'/contact\\';\\n\\t\\t</script></main><div id=\"footer\"><div id=\"sibLogoDiv\"><p id=\"fund\">\\n\\t\\t\\tSwissLipids is brought to you by members of the <a href=\"https://www.sib.swiss/alan-bridge-group\">Swiss-Prot</a> at the <a href=\"https://www.sib.swiss/\">SIB Swiss Institute of Bioinformatics</a>.\\nContact the SwissLipids team at swisslipids@sib.swiss\\nSwissLipids is supported by funding from the Swiss Initiative for Systems Biology <a href=\"http://www.systemsx.ch/\">SystemsX.ch</a> and the <a href=\"http://www.sbfi.admin.ch/?lang=en\">Swiss State Secretariat for Education, Research and Innovation</a> through <a href=\"https://www.sib.swiss/\">SIB Swiss Institute of Bioinformatics</a>. \\n\\t\\t\\t</p><p><a target=\"_blank\" href=\"http://www.lipidx.org/\"><img height=\"75\" alt=\"LipidX\" src=\"images/LipidX.png\"/></a><a target=\"_blank\" href=\"http://www.systemsx.ch/\"><img height=\"75\" width=\"175\" alt=\"SystemsX\" src=\"images/SystemsX.png\"/></a></p></div><div xmlns:xsd=\"http://www.w3.org/2001/XMLSchema#\" xmlns:sd=\"http://www.w3.org/ns/sparql-service-description#\" xmlns=\"http://www.w3.org/1999/xhtml\" xmlns:rdfs=\"http://www.w3.org/2000/01/rdf-schema#\" xmlns:rdf=\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\" style=\"display: none\"><div typeof=\"sd:Service\" about=\"\" class=\"description\"><div resource=\"/sparql\" rel=\"sd:endpoint\"><span resource=\"http://www.w3.org/ns/sparql-service-description#UnionDefaultGraph\" rel=\"sd:feature\"/><span resource=\"http://www.w3.org/ns/sparql-service-description#DereferencesURIs\" rel=\"sd:feature\"/><span resource=\"http://www.w3.org/ns/formats/RDF_XML\" rel=\"sd:resultFormat\"/><span resource=\"http://www.w3.org/ns/formats/Turtle\" rel=\"sd:resultFormat\"/><span resource=\"http://www.w3.org/ns/formats/SPARQL_Results_CSV\" rel=\"sd:resultFormat\"/><span resource=\"http://www.w3.org/ns/formats/N-Triples\" rel=\"sd:resultFormat\"/><span resource=\"http://www.w3.org/ns/formats/N3\" rel=\"sd:resultFormat\"/><span resource=\"http://www.w3.org/ns/formats/SPARQL_Results_JSON\" rel=\"sd:resultFormat\"/><span resource=\"http://www.w3.org/ns/formats/SPARQL_Results_XML\" rel=\"sd:resultFormat\"/><div resource=\"http://www.w3.org/ns/sparql-service-description#SPARQL11Query\" rel=\"sd:supportedLanguage\"><div resource=\"/sparql\" rel=\"sd:url\"/></div></div></div></div></div><script src=\"/sparql.js\" type=\"text/javascript\"> </script></body></html>'"
  },
  {
    "resource": "https://sparql.swisslipids.org/.well-known/sparql-examples/34",
    "natural_language_question": "Lipids affected by human enzymes",
    "ground_truth_query": "PREFIX owl: <http://www.w3.org/2002/07/owl#>\nPREFIX rh: <http://rdf.rhea-db.org/>\nPREFIX taxon: <http://purl.uniprot.org/taxonomy/>\nPREFIX up: <http://purl.uniprot.org/core/>\n\nSELECT ?swisslipid  {\n  ?swisslipid owl:equivalentClass ?chebi .\n  SERVICE <https://sparql.rhea-db.org/sparql> {\n    ?rhea rh:side/rh:contains/rh:compound ?compound .\n\t?compound (rh:chebi|(rh:reactivePart/rh:chebi)|(rh:underlyingChebi/rh:chebi)) ?metabolite . \n  }\n  SERVICE <https://sparql.uniprot.org/sparql> {\n    ?catalyticActivityAnnotation up:catalyticActivity/up:catalyzedReaction ?rhea .\n    ?protein up:annotation ?catalyticActivityAnnotation ;\n             up:organism taxon:9606 .\n  }\n}\nLIMIT 1",
    "target_endpoint": "https://sparql.swisslipids.org/sparql/",
    "federates_with": [
      "https://sparql.uniprot.org/sparql",
      "https://sparql.rhea-db.org/sparql"
    ],
    "endpoint_set": "SwissLipids",
    "file_path": "SwissLipids/34.ttl",
    "predicted_query": "# https://sparql.swisslipids.org/sparql/\n# Federated query to find lipids affected by human enzymes, using SwissLipids and UniProt.\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX sl: <http://swisslipids.org/rdf#>\nPREFIX up: <http://purl.uniprot.org/core/>\n\nSELECT DISTINCT ?lipidName ?enzymeName\nWHERE {\n  # Query SwissLipids to find lipids and the enzymes that act upon them.\n  SERVICE <https://sparql.swisslipids.org/sparql/> {\n    ?enzyme sl:actsOn ?lipid .\n    ?lipid rdfs:label ?lipidName .\n    ?enzyme rdfs:label ?enzymeName .\n  }\n  \n  # Filter for human enzymes by linking to UniProt and filtering by taxonomy.\n  SERVICE <https://sparql.uniprot.org/sparql/> {\n    ?enzyme up:mnemonic ?enzymeMnemonic .\n    ?enzymeMnemonic up:organism <http://purl.uniprot.org/taxonomy/9606> . # Human taxonomy\n  }\n}",
    "predicted_endpoint": "https://sparql.swisslipids.org/sparql/",
    "predicted_endpoint_equal_to_target_endpoint": true,
    "predicted_endpoint_in_federates_with": false,
    "predicted_endpoint_or_federated_endpoint": true,
    "run_id_langsmith": "db891eeb-f656-4609-a8dd-8e7f2d6f95ab",
    "evaluation_timestamp": "2025-05-10T18:23:38.701792",
    "question_understanding_prompt_tokens": 242,
    "question_understanding_completion_tokens": 20,
    "question_understanding_total_tokens": 262,
    "sparql_query_construction_prompt_tokens": 1906,
    "sparql_query_construction_completion_tokens": 266,
    "sparql_query_construction_total_tokens": 2172,
    "is_valid_sparql": true,
    "sparql_syntax_error": "syntactically correct",
    "result_eval_f1_score": 0.0,
    "result_eval_precision": 0.0,
    "result_eval_recall": 0.0,
    "error_occured_at_endpoint": false,
    "predicted_query_result_is_empty": true,
    "ground_truth_query_result_is_empty": false,
    "error_occured_at_endpoint_message": "no error, but empty result"
  },
  {
    "resource": "https://sparql.uniprot.org/.well-known/sparql-examples/118_biosodafrontend_rat_brain_human_cancer",
    "natural_language_question": "What are the Homo sapiens genes associated with cancer and their orthologs expressed in the Rattus norvegicus brain?",
    "ground_truth_query": "PREFIX up:<http://purl.uniprot.org/core/>\nPREFIX taxon:<http://purl.uniprot.org/taxonomy/>\nPREFIX rdfs:<http://www.w3.org/2000/01/rdf-schema#>\nPREFIX orth:<http://purl.org/net/orth#>\nPREFIX dcterms:<http://purl.org/dc/terms/>\nPREFIX obo:<http://purl.obolibrary.org/obo/>\nPREFIX lscr:<http://purl.org/lscr#>\nPREFIX genex:<http://purl.org/genex#>\nPREFIX sio: <http://semanticscience.org/resource/>\nSELECT ?gene ?orthologous_protein2 WHERE {\n  {\n    SELECT ?protein1 WHERE {\n      ?protein1 a up:Protein;\n        up:organism/up:scientificName 'Homo sapiens' ;\n        up:annotation ?annotation .\n      ?annotation rdfs:comment ?annotation_text.\n      ?annotation a up:Disease_Annotation .\n      FILTER CONTAINS (?annotation_text, \"cancer\")\n    }\n  }\n  SERVICE <https://sparql.omabrowser.org/sparql/> {\n    SELECT ?orthologous_protein2 ?protein1 ?gene WHERE {\n      ?protein_OMA a orth:Protein .\n      ?orthologous_protein2 a orth:Protein .\n      ?cluster a orth:OrthologsCluster .\n      ?cluster orth:hasHomologousMember ?node1 .\n      ?cluster orth:hasHomologousMember ?node2 .\n      ?node2 orth:hasHomologousMember* ?protein_OMA .\n      ?node1 orth:hasHomologousMember* ?orthologous_protein2 \n      .?orthologous_protein2 orth:organism/obo:RO_0002162/up:scientificName 'Rattus norvegicus' .\n      ?orthologous_protein2 sio:SIO_010079 ?gene .\n      ?protein_OMA lscr:xrefUniprot ?protein1 .\n      FILTER(?node1 != ?node2)\n    }\n  }\n  SERVICE <https://www.bgee.org/sparql/> {\n    ?gene genex:isExpressedIn ?anatEntity .\n    ?anatEntity rdfs:label 'brain' .\n    ?gene orth:organism ?org . \n    ?org obo:RO_0002162 taxon:10116 .\n  }\n}",
    "target_endpoint": "https://sparql.uniprot.org/sparql",
    "federates_with": [
      "https://sparql.omabrowser.org/sparql/",
      "https://www.bgee.org/sparql/"
    ],
    "endpoint_set": "Uniprot",
    "file_path": "UniProt/118_biosodafrontend_rat_brain_human_cancer.ttl",
    "predicted_query": "# https://sparql.uniprot.org/sparql\n# Prefix declarations for commonly used namespaces\nPREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX up: <http://purl.uniprot.org/core/>\nPREFIX taxon: <http://purl.uniprot.org/taxonomy/>\nPREFIX uniprot: <http://purl.uniprot.org/uniprot/>\n\n# Select the gene names and their corresponding orthologs\nSELECT DISTINCT ?geneName ?orthologName\nWHERE {\n  # Subquery to find Homo sapiens genes associated with cancer\n  {\n    SELECT ?gene\n    WHERE {\n      # Find UniProt entries for Homo sapiens\n      ?gene a up:Protein ;\n            up:organism taxon:9606 . # Homo sapiens taxon ID\n\n      # Filter for genes associated with cancer\n      ?gene rdfs:comment ?comment .\n      FILTER (CONTAINS(LCASE(?comment), \"cancer\")) # Case-insensitive search for \"cancer\" in comments\n    }\n  }\n\n  # Find orthologs of the identified genes\n  ?gene up:sequence ?sequence .\n  ?ortholog up:sequence ?orthologSequence ;\n            up:organism taxon:10116 . # Rattus norvegicus taxon ID\n  FILTER (?sequence = ?orthologSequence) # Assuming orthologs have similar sequences\n\n  # Find genes expressed in the brain\n  ?ortholog rdfs:comment ?brainComment .\n  FILTER (CONTAINS(LCASE(?brainComment), \"brain\")) # Case-insensitive search for \"brain\" in comments\n\n  # Get the gene names\n  ?gene up:recommendedName ?recName .\n  ?recName rdfs:label ?geneName .\n  ?ortholog up:recommendedName ?orthologRecName .\n  ?orthologRecName rdfs:label ?orthologName .\n}",
    "predicted_endpoint": "https://sparql.uniprot.org/sparql",
    "predicted_endpoint_equal_to_target_endpoint": true,
    "predicted_endpoint_in_federates_with": false,
    "predicted_endpoint_or_federated_endpoint": true,
    "run_id_langsmith": "18d361a8-d1ef-4533-8c14-8ffda96ce5a1",
    "evaluation_timestamp": "2025-05-10T18:23:54.202962",
    "question_understanding_prompt_tokens": 263,
    "question_understanding_completion_tokens": 47,
    "question_understanding_total_tokens": 310,
    "sparql_query_construction_prompt_tokens": 3106,
    "sparql_query_construction_completion_tokens": 462,
    "sparql_query_construction_total_tokens": 3568,
    "is_valid_sparql": true,
    "sparql_syntax_error": "syntactically correct",
    "result_eval_f1_score": 0.0,
    "result_eval_precision": 0.0,
    "result_eval_recall": 0.0,
    "error_occured_at_endpoint": false,
    "predicted_query_result_is_empty": true,
    "ground_truth_query_result_is_empty": false,
    "error_occured_at_endpoint_message": "no error, but empty result"
  },
  {
    "resource": "https://sparql.uniprot.org/.well-known/sparql-examples/51",
    "natural_language_question": "Find all proteins linked to arachidonate (CHEBI:32395)",
    "ground_truth_query": "PREFIX CHEBI: <http://purl.obolibrary.org/obo/CHEBI_>\nPREFIX rh: <http://rdf.rhea-db.org/>\nPREFIX skos: <http://www.w3.org/2004/02/skos/core#>\nPREFIX up: <http://purl.uniprot.org/core/>\n\n\nSELECT \n    DISTINCT\n        ?uniprot\n        ?uniprotID\n        ?recname\n        ?gene\n        ?chebi\n        ?uniprotName\nWHERE {\n  SERVICE <https://sparql.rhea-db.org/sparql> {\n     VALUES (?chebi) { (CHEBI:32395) }\n     ?rhea rh:side/rh:contains/rh:compound ?compound .\n     ?compound rh:chebi ?chebi .\n     ?chebi up:name ?uniprotName .\n  }\n  ?uniprot up:annotation/up:catalyticActivity/up:catalyzedReaction ?rhea .\n  ?uniprot up:mnemonic ?uniprotID .\n  ?uniprot up:recommendedName/up:fullName ?recname .\n  OPTIONAL {?uniprot up:encodedBy/skos:prefLabel ?gene .}\n}",
    "target_endpoint": "https://sparql.uniprot.org/sparql/",
    "federates_with": [
      "https://sparql.rhea-db.org/sparql"
    ],
    "endpoint_set": "Uniprot",
    "file_path": "UniProt/51_all_proteins_linked_to_arachidonate.ttl",
    "predicted_query": "# https://sparql.uniprot.org/sparql\n# Prefixes for commonly used ontologies\nPREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX up: <http://purl.uniprot.org/core/>\nPREFIX chebi: <http://purl.obolibrary.org/obo/>\n\n# Select the protein identifiers\nSELECT DISTINCT ?protein\nWHERE {\n  # Use the UniProt SPARQL endpoint\n  SERVICE <https://sparql.uniprot.org/sparql> {\n    # Find proteins that are associated with arachidonate (CHEBI:32395)\n    ?protein up:classifiedWith chebi:CHEBI_32395 .\n  }\n}",
    "predicted_endpoint": "https://sparql.uniprot.org/sparql",
    "predicted_endpoint_equal_to_target_endpoint": true,
    "predicted_endpoint_in_federates_with": false,
    "predicted_endpoint_or_federated_endpoint": true,
    "run_id_langsmith": "f5f9c4f1-ae1e-47e0-a162-90d6bd153791",
    "evaluation_timestamp": "2025-05-10T18:24:01.651072",
    "question_understanding_prompt_tokens": 255,
    "question_understanding_completion_tokens": 31,
    "question_understanding_total_tokens": 286,
    "sparql_query_construction_prompt_tokens": 1975,
    "sparql_query_construction_completion_tokens": 0,
    "sparql_query_construction_total_tokens": 1975,
    "is_valid_sparql": true,
    "sparql_syntax_error": "syntactically correct",
    "result_eval_f1_score": 0.0,
    "result_eval_precision": 0.0,
    "result_eval_recall": 0.0,
    "error_occured_at_endpoint": false,
    "predicted_query_result_is_empty": true,
    "ground_truth_query_result_is_empty": false,
    "error_occured_at_endpoint_message": "no error, but empty result"
  },
  {
    "resource": "https://sparql.uniprot.org/.well-known/sparql-examples/40",
    "natural_language_question": "Retrieve human enzymes that metabolize sphingolipids and are annotated in ChEMBL",
    "ground_truth_query": "PREFIX CHEBI: <http://purl.obolibrary.org/obo/CHEBI_>\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX rh: <http://rdf.rhea-db.org/>\nPREFIX taxon: <http://purl.uniprot.org/taxonomy/>\nPREFIX up: <http://purl.uniprot.org/core/>\n\nSELECT DISTINCT ?protein ?chemblEntry\nWHERE {\n  SERVICE <https://sparql.rhea-db.org/sparql> {\n    ?rhea rdfs:subClassOf rh:Reaction ;\n      rh:side/rh:contains/rh:compound/rh:chebi/rdfs:subClassOf+ CHEBI:26739 .\n  }\n  ?ca up:catalyzedReaction ?rhea .\n  ?protein up:annotation/up:catalyticActivity ?ca ;\n    up:organism taxon:9606 ;\n    rdfs:seeAlso ?chemblEntry .\n  ?chemblEntry up:database <http://purl.uniprot.org/database/ChEMBL> .\n}\nLIMIT 10",
    "target_endpoint": "https://sparql.uniprot.org/sparql/",
    "federates_with": [
      "https://sparql.rhea-db.org/sparql"
    ],
    "endpoint_set": "Uniprot",
    "file_path": "UniProt/40_human_enzymes_that_metabolize_sphingolipids.ttl",
    "predicted_query": "# https://sparql.uniprot.org/sparql\n# Federated SPARQL query to retrieve human enzymes that metabolize sphingolipids\n\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX up: <http://purl.uniprot.org/core/>\nPREFIX taxon: <http://purl.uniprot.org/taxonomy/>\nPREFIX chebi: <http://purl.obolibrary.org/obo/>\n\nSELECT DISTINCT ?enzymeName ?enzymeUri\nWHERE {\n  # Find human proteins (enzymes) in UniProt\n  SERVICE <https://sparql.uniprot.org/sparql> {\n    ?enzymeUri a up:Protein .\n    ?enzymeUri up:organism taxon:9606 .  # Homo sapiens (human)\n    ?enzymeUri rdfs:label ?enzymeName .\n    \n    # Filter for enzymes (EC number annotation)\n    FILTER EXISTS { ?enzymeUri up:annotation ?annotation .\n                     ?annotation a up:EC_Annotation . }\n  }\n  \n  # Find reactions in Rhea involving sphingolipids\n  SERVICE <https://sparql.rhea-db.org/sparql> {\n    ?reaction rdfs:comment ?comment .\n    FILTER (CONTAINS(LCASE(?comment), \"sphingolipid\"))\n    \n    # Connect Rhea reactions to ChEBI entities (sphingolipids)\n    ?reaction rhea:has_participant ?participant .\n    ?participant chebi:CHEBI ?sphingolipid .\n    FILTER (CONTAINS(STR(?sphingolipid), \"CHEBI\")) # Ensure it's a CHEBI URI\n  }\n  \n  # Connect UniProt enzymes to Rhea reactions via cross-references (assuming UniProt contains Rhea xrefs)\n  SERVICE <https://sparql.uniprot.org/sparql> {\n    ?enzymeUri up:database ?dbReference .\n    ?dbReference rdfs:label ?rheaId .\n    FILTER (STRSTARTS(?rheaId, \"RHEA:\"))  # Filter for Rhea IDs\n  }\n  \n  # Optional: Further filter by enzymes annotated in ChEMBL (if ChEMBL xrefs are available in UniProt)\n  # SERVICE <https://sparql.uniprot.org/sparql> {\n  #   ?enzymeUri up:database ?chemblReference .\n  #   ?chemblReference rdfs:label ?chemblId .\n  #   FILTER (STRSTARTS(?chemblId, \"CHEMBL\")) # Filter for ChEMBL IDs\n  # }\n}",
    "predicted_endpoint": "https://sparql.uniprot.org/sparql",
    "predicted_endpoint_equal_to_target_endpoint": true,
    "predicted_endpoint_in_federates_with": false,
    "predicted_endpoint_or_federated_endpoint": true,
    "run_id_langsmith": "c48b6d7d-7029-4956-94e1-2487034971d3",
    "evaluation_timestamp": "2025-05-10T18:24:11.156419",
    "question_understanding_prompt_tokens": 256,
    "question_understanding_completion_tokens": 31,
    "question_understanding_total_tokens": 287,
    "sparql_query_construction_prompt_tokens": 1700,
    "sparql_query_construction_completion_tokens": 0,
    "sparql_query_construction_total_tokens": 1700,
    "is_valid_sparql": false,
    "sparql_syntax_error": "Line 28, column 15: Unresolved prefixed name: rhea:has_participant",
    "result_eval_f1_score": 0.0,
    "result_eval_precision": 0.0,
    "result_eval_recall": 0.0,
    "error_occured_at_endpoint": false,
    "predicted_query_result_is_empty": true,
    "ground_truth_query_result_is_empty": false,
    "error_occured_at_endpoint_message": "syntactically not correct"
  },
  {
    "resource": "https://sparql.uniprot.org/.well-known/sparql-examples/49",
    "natural_language_question": "Retrieve the UniProtKB proteins, their catalyzed Rhea reactions, their encoding genes (Ensembl) and the anatomic entities where the genes are expressed (UBERON anatomic entites from Bgee expression data resource).",
    "ground_truth_query": "PREFIX CHEBI: <http://purl.obolibrary.org/obo/CHEBI_>\nPREFIX genex: <http://purl.org/genex#>\nPREFIX lscr: <http://purl.org/lscr#>\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX rh: <http://rdf.rhea-db.org/>\nPREFIX taxon: <http://purl.uniprot.org/taxonomy/>\nPREFIX up: <http://purl.uniprot.org/core/>\n\nSELECT DISTINCT ?protein ?ensemblGene ?reaction ?anatomicEntityLabel ?anatomicEntity\nWHERE {\n  # federated query to Rhea enadpoint\n  {\n    SELECT DISTINCT ?reaction WHERE {\n      SERVICE <https://sparql.rhea-db.org/sparql> {\n        ?reaction rdfs:subClassOf rh:Reaction ;\n          rh:equation ?reactionEquation ;\n          rh:side ?reactionSide .\n        ?reactionSide rh:contains ?participant .\n        ?participant rh:compound ?compound .\n        # compound constraint (CHEBI:16113 == cholesterol)\n        ?compound rh:chebi CHEBI:16113 .\n      }\n    }\n  }\n  # taxonomy constraint (taxon:9606 == Homo sapiens)\n  ?protein up:organism taxon:9606 ;\n    up:annotation ?a ;\n    rdfs:seeAlso / up:transcribedFrom ?ensemblGene .\n  ?a a up:Catalytic_Activity_Annotation ;\n    up:catalyticActivity ?ca .\n  ?ca up:catalyzedReaction ?reaction .\n  # federated query to Bgee (expression data)\n  BIND(IRI(REPLACE(STR(?ensemblGene), \"\\\\.[0-9]+$\", \"\")) AS ?ensemblGeneNoVersion)\n  SERVICE <https://www.bgee.org/sparql/> {\n    ?gene lscr:xrefEnsemblGene ?ensemblGeneNoVersion ;\n      genex:isExpressedIn ?anatomicEntity .\n    ?anatomicEntity rdfs:label ?anatomicEntityLabel .\n  }\n}",
    "target_endpoint": "https://sparql.uniprot.org/sparql/",
    "federates_with": [
      "https://sparql.rhea-db.org/sparql",
      "https://www.bgee.org/sparql/"
    ],
    "endpoint_set": "Uniprot",
    "file_path": "UniProt/49_tissues_where_genes_metabolizing_cholestrol_are_expressed.ttl",
    "predicted_query": "# https://sparql.uniprot.org/sparql\n# Prefixes for commonly used namespaces\nPREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX up: <http://purl.uniprot.org/core/>\nPREFIX rhea: <http://rdf.rhea-db.org/>\nPREFIX uniprot: <http://purl.uniprot.org/uniprot/>\n\n# Select the protein URI, Rhea reaction URI, Ensembl gene ID, and UBERON ID\nSELECT DISTINCT ?protein ?rheaReaction ?gene ?anatomicalEntity\nWHERE {\n  # Get UniProt proteins and their corresponding Rhea reactions\n  ?protein a up:Protein .\n  SERVICE <https://sparql.rhea-db.org/sparql> {\n    ?rheaReaction rhea:equation ?equation .\n    ?protein rhea:rheaMasterReaction ?rheaReaction . # Assuming a direct link between UniProt protein and Rhea reaction\n  }\n  \n  # Get Ensembl gene ID for the protein\n  SERVICE <https://sparql.uniprot.org/sparql> {\n    ?protein up:encodedBy ?gene .\n  }\n  \n  # Get anatomical entities where the gene is expressed (using Bgee)\n  SERVICE <https://bgee.org/sparql/> {\n    ?gene bgee:expressedIn ?anatomicalEntity . # Assuming bgee:expressedIn links gene to anatomical entity\n  }\n  \n  # Filter for UBERON anatomical entities\n  FILTER (STRSTARTS(STR(?anatomicalEntity), \"http://purl.obolibrary.org/obo/UBERON_\"))\n}",
    "predicted_endpoint": "https://sparql.uniprot.org/sparql",
    "predicted_endpoint_equal_to_target_endpoint": true,
    "predicted_endpoint_in_federates_with": false,
    "predicted_endpoint_or_federated_endpoint": true,
    "run_id_langsmith": "d1729de8-898b-471b-97d3-682a6b3a1a76",
    "evaluation_timestamp": "2025-05-10T18:24:21.973898",
    "question_understanding_prompt_tokens": 281,
    "question_understanding_completion_tokens": 71,
    "question_understanding_total_tokens": 352,
    "sparql_query_construction_prompt_tokens": 3988,
    "sparql_query_construction_completion_tokens": 0,
    "sparql_query_construction_total_tokens": 3988,
    "is_valid_sparql": false,
    "sparql_syntax_error": "Line 26, column 11: Unresolved prefixed name: bgee:expressedIn",
    "result_eval_f1_score": 0.0,
    "result_eval_precision": 0.0,
    "result_eval_recall": 0.0,
    "error_occured_at_endpoint": false,
    "predicted_query_result_is_empty": true,
    "ground_truth_query_result_is_empty": false,
    "error_occured_at_endpoint_message": "syntactically not correct"
  },
  {
    "resource": "https://sparql.uniprot.org/.well-known/sparql-examples/53",
    "natural_language_question": "Find mouse homologs in OMABrowser of human enzymes that catalyze reactions involving sterols (CHEBI:15889). Federating with Rhea and OMABrowser.",
    "ground_truth_query": "PREFIX CHEBI: <http://purl.obolibrary.org/obo/CHEBI_>\nPREFIX lscr: <http://purl.org/lscr#>\nPREFIX orth: <http://purl.org/net/orth#>\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX rh: <http://rdf.rhea-db.org/>\nPREFIX taxon: <http://purl.uniprot.org/taxonomy/>\nPREFIX up: <http://purl.uniprot.org/core/>\n\nSELECT\n  DISTINCT\n    ?chebi\n    ?reaction\n    ?humanProtein\n    ?mouseProtein\n    ?cluster \nWHERE {\n  SERVICE <https://sparql.rhea-db.org/sparql> {\n    ?reaction rdfs:subClassOf rh:Reaction .\n    ?reaction rh:side/rh:contains/rh:compound ?compound .\n    ?compound rh:chebi ?chebi .\n    ?chebi rdfs:subClassOf* CHEBI:15889\n  }\n\n  ?humanProtein up:organism taxon:9606 .\n  ?humanProtein up:annotation ?a .\n  ?a a up:Catalytic_Activity_Annotation .\n  ?a up:catalyticActivity ?ca .\n  ?ca up:catalyzedReaction ?reaction .\n\n  SERVICE  <https://sparql.omabrowser.org/sparql> {\n    ?cluster a orth:ParalogsCluster .\n    ?cluster orth:hasHomologousMember ?node1 , ?node2 .\n    ?node1 orth:hasHomologousMember* ?orthoProtein1 .\n    ?node2 orth:hasHomologousMember* ?orthoProtein2 .\n    ?orthoProtein1 lscr:xrefUniprot ?mouseProtein .\n    ?orthoProtein2 lscr:xrefUniprot ?humanProtein .\n    # inTaxon mouse\n    ?orthoProtein1 orth:organism/<http://purl.obolibrary.org/obo/RO_0002162> taxon:10090 . \n  }\n}",
    "target_endpoint": "https://sparql.uniprot.org/sparql/",
    "federates_with": [
      "https://sparql.rhea-db.org/sparql",
      "https://sparql.omabrowser.org/sparql"
    ],
    "endpoint_set": "Uniprot",
    "file_path": "UniProt/53_mouse_homologs_of_sterol_enzymes_via_omabrowser.ttl",
    "predicted_query": "# https://sparql.rhea-db.org/sparql\n# Prefixes for commonly used namespaces\nPREFIX rhea: <http://rdf.rhea-db.org/>\nPREFIX chebi: <http://purl.obolibrary.org/obo/CHEBI_>\nPREFIX uniprot: <http://purl.uniprot.org/core/>\nPREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>\nPREFIX oma: <http://omabrowser.org/ontology/core#>\nPREFIX obo: <http://purl.obolibrary.org/obo/>\n\n# Select the Rhea reaction identifiers\nSELECT DISTINCT ?rhea_reaction ?enzyme_human ?enzyme_mouse\nWHERE {\n  # Subquery to find Rhea reactions involving sterols (CHEBI:15889)\n  {\n    SELECT DISTINCT ?rhea_reaction\n    WHERE {\n      ?rhea_reaction rhea: Rhea_has_participant chebi:15889 . #CHEBI_15889 is sterols\n    }\n  }\n\n  # Find human enzymes (UniProt IDs) that catalyze these reactions using the Rhea endpoint\n  SERVICE <https://sparql.rhea-db.org/sparql> {\n    ?rhea_reaction rhea: Rhea_has_enzyme ?enzyme_uri .\n    ?enzyme_uri rdfs:label ?enzyme_human .\n    FILTER (CONTAINS(STR(?enzyme_uri), \"uniprot\")) # Filter to ensure we only get UniProt IDs\n  }\n\n  # Find mouse homologs of the human enzymes using the OMA Browser SPARQL endpoint\n  SERVICE <http://sparql.omabrowser.org/sparql> {\n    ?human_gene oma:has_translation ?human_protein .\n    ?human_protein oma:xref ?enzyme_human_uri .\n    FILTER (STRSTARTS(STR(?enzyme_human_uri), \"http://purl.uniprot.org/uniprot/\")) # Filter to ensure we only get UniProt IDs\n\n    ?mouse_gene oma:is_homologous_to ?human_gene .\n    ?mouse_gene oma:has_translation ?mouse_protein .\n    ?mouse_protein oma:xref ?enzyme_mouse_uri .\n    FILTER (STRSTARTS(STR(?enzyme_mouse_uri), \"http://purl.uniprot.org/uniprot/\")) # Filter to ensure we only get UniProt IDs\n\n    BIND(STRAFTER(STR(?enzyme_human_uri), \"http://purl.uniprot.org/uniprot/\") AS ?enzyme_human)\n    BIND(STRAFTER(STR(?enzyme_mouse_uri), \"http://purl.uniprot.org/uniprot/\") AS ?enzyme_mouse)\n  }\n}",
    "predicted_endpoint": "https://sparql.rhea-db.org/sparql",
    "predicted_endpoint_equal_to_target_endpoint": false,
    "predicted_endpoint_in_federates_with": true,
    "predicted_endpoint_or_federated_endpoint": true,
    "run_id_langsmith": "674d55cd-837c-402e-ac8f-746adec2c5b5",
    "evaluation_timestamp": "2025-05-10T18:24:32.658080",
    "question_understanding_prompt_tokens": 276,
    "question_understanding_completion_tokens": 41,
    "question_understanding_total_tokens": 317,
    "sparql_query_construction_prompt_tokens": 2740,
    "sparql_query_construction_completion_tokens": 0,
    "sparql_query_construction_total_tokens": 2740,
    "is_valid_sparql": false,
    "sparql_syntax_error": "Lexical error at line 17, column 48.  Encountered: '32' (32), after prefix \"Rhea_has_participant\"",
    "result_eval_f1_score": 0.0,
    "result_eval_precision": 0.0,
    "result_eval_recall": 0.0,
    "error_occured_at_endpoint": false,
    "predicted_query_result_is_empty": true,
    "ground_truth_query_result_is_empty": false,
    "error_occured_at_endpoint_message": "syntactically not correct"
  },
  {
    "resource": "https://sparql.uniprot.org/.well-known/sparql-examples/52",
    "natural_language_question": "Retrieve drugs that target human enzymes involved in sterol metabolism (federated query with Rhea and ChEMBL via IDSM/Elixir czech republic).",
    "ground_truth_query": "PREFIX CHEBI: <http://purl.obolibrary.org/obo/CHEBI_>\nPREFIX cco: <http://rdf.ebi.ac.uk/terms/chembl#>\nPREFIX chebihash: <http://purl.obolibrary.org/obo/chebi#>\nPREFIX owl: <http://www.w3.org/2002/07/owl#>\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX rh: <http://rdf.rhea-db.org/>\nPREFIX skos: <http://www.w3.org/2004/02/skos/core#>\nPREFIX taxon: <http://purl.uniprot.org/taxonomy/>\nPREFIX up: <http://purl.uniprot.org/core/>\n\nSELECT\n        DISTINCT\n            ?protein\n            ?proteinFullName\n            ?activityType\n            ?standardActivityValue\n            ?standardActivityUnit\n            ?chemblMolecule\n            ?chemlbMoleculePrefLabel\nWHERE\n  {\n  # ChEBI: retrieve members of the ChEBI class ChEBI:15889 (sterol)\n  # Rhea: retrieve the reactions involving these ChEBI as participants\n  SERVICE <https://sparql.rhea-db.org/sparql> {\n    ?reaction rdfs:subClassOf  rh:Reaction ;\n\t      rh:status        rh:Approved ;\n\t      rh:side          ?reactionSide .\n    ?reactionSide\n\t      rh:contains      ?participant .\n    ?participant rh:compound  ?compound\n    {\n      ?compound  rh:chebi  ?chebi .\n      ?chebi (rdfs:subClassOf)+ CHEBI:15889\n    } UNION {\n      ?compound  rh:chebi           ?chebi .\n      ?chebi2   rdfs:subClassOf     ?chebiRestriction .\n      ?chebiRestriction\n\t\ta           owl:Restriction ;\n\t\towl:onProperty      chebihash:has_major_microspecies_at_pH_7_3 ;\n\t\towl:someValuesFrom  ?chebi .\n      ?chebi2 (rdfs:subClassOf)+ CHEBI:15889\n    }\n  }\n  # UniProt: retrieve the human (taxid:9606) enzymes catalyzing these Rhea reactions\n  ?ca       up:catalyzedReaction  ?reaction .\n  ?a        up:catalyticActivity  ?ca .\n  ?protein  up:annotation         ?a ;\n\t    up:organism           taxon:9606 ;\n\t    up:recommendedName    ?proteinRecName .\n  ?proteinRecName\n\t    up:fullName           ?proteinFullName .\n  # Find drugs in wikidata that interact with the UniProt Proteins\n  # ChEMBL: retrieve the corresponding targets and with drugs in clinical phase 4\n  # Via https://idsm.elixir-czech.cz/sparql/\n  SERVICE <https://idsm.elixir-czech.cz/sparql/endpoint/idsm> {\n    ?activity a cco:Activity ;\n      cco:hasMolecule ?chemblMolecule ;\n      cco:hasAssay ?assay ;\n      cco:standardType ?activityType ;\n      cco:standardValue ?standardActivityValue ;\n      cco:standardUnits ?standardActivityUnit .\n    ?chemblMolecule cco:highestDevelopmentPhase ?highestDevelopmentPhase ;\n      rdfs:label ?chemblMoleculeLabel ;\n      skos:prefLabel ?chemlbMoleculePrefLabel .\n    FILTER (?highestDevelopmentPhase > 3)\n    ?assay cco:hasTarget ?target .\n    ?target cco:hasTargetComponent/cco:targetCmptXref ?protein .\n    ?protein a cco:UniprotRef .\n  }\n}",
    "target_endpoint": "https://sparql.uniprot.org/sparql/",
    "federates_with": [
      "https://sparql.rhea-db.org/sparql",
      "https://idsm.elixir-czech.cz/sparql/endpoint/idsm"
    ],
    "endpoint_set": "Uniprot",
    "file_path": "UniProt/52_drugs_targeting_sterol_metabolism.ttl",
    "predicted_query": "# https://sparql.rhea-db.org/sparql\n# Federated query to retrieve drugs that target human enzymes involved in sterol metabolism, federating Rhea, ChEMBL, and potentially UniProt.\nPREFIX rhea: <http://rdf.rhea-db.org/>\nPREFIX chebi: <http://purl.obolibrary.org/obo/CHEBI_>\nPREFIX uniprot: <http://purl.uniprot.org/core/>\n\nSELECT DISTINCT ?drug_name ?enzyme_name ?rhea_reaction\nWHERE {\n  # Subquery to find Rhea reactions related to sterol metabolism\n  {\n    SELECT DISTINCT ?rhea_reaction WHERE {\n      ?rhea_reaction rhea:equation ?equation .\n      ?equation a rhea:Reaction ;\n                   rdfs:label ?reaction_label .\n      FILTER (CONTAINS(LCASE(?reaction_label), \"sterol\")) # Filter for reactions containing \"sterol\"\n    }\n  }\n\n  # Find the enzyme (UniProt ID) associated with the Rhea reaction\n  SERVICE <https://sparql.rhea-db.org/sparql> {\n    ?rhea_reaction rhea:status rhea:approved ;\n                   rhea:enzymaticReaction ?enzyme_uri .\n    ?enzyme_uri rdfs:label ?enzyme_name .\n  }\n\n  # Find the UniProt ID of the enzyme\n  SERVICE <https://sparql.uniprot.org/sparql> {\n    ?enzyme_uri a uniprot:Protein ;\n                rdfs:label ?enzyme_name .\n    FILTER (CONTAINS(LCASE(?enzyme_name), \"human\")) # Filter for human enzymes\n    ?enzyme_uri uniprot:recommendedName ?recommendedName .\n  }\n\n  # Find drugs that target the human enzyme using the IDSM/Elixir Czech Republic SPARQL endpoint (ChEMBL)\n  SERVICE <https://idsm.elixir-czech.cz/sparql> {\n    # Assuming a predicate like 'targets' or 'interactsWith' exists in the IDSM endpoint\n    ?drug_uri <http://www.w3.org/2000/01/rdf-schema#label> ?drug_name . # Assuming rdfs:label is used for drug names\n    ?drug_uri <http://purl.uniprot.org/core/targets> ?enzyme_uri . # Replace targets with the correct predicate\n  }\n}",
    "predicted_endpoint": "https://sparql.rhea-db.org/sparql",
    "predicted_endpoint_equal_to_target_endpoint": false,
    "predicted_endpoint_in_federates_with": true,
    "predicted_endpoint_or_federated_endpoint": true,
    "run_id_langsmith": "2e6c914c-64b6-4f85-af2e-73a92a27db19",
    "evaluation_timestamp": "2025-05-10T18:24:40.578952",
    "question_understanding_prompt_tokens": 269,
    "question_understanding_completion_tokens": 28,
    "question_understanding_total_tokens": 297,
    "sparql_query_construction_prompt_tokens": 1808,
    "sparql_query_construction_completion_tokens": 0,
    "sparql_query_construction_total_tokens": 1808,
    "is_valid_sparql": false,
    "sparql_syntax_error": "Line 14, column 20: Unresolved prefixed name: rdfs:label",
    "result_eval_f1_score": 0.0,
    "result_eval_precision": 0.0,
    "result_eval_recall": 0.0,
    "error_occured_at_endpoint": false,
    "predicted_query_result_is_empty": true,
    "ground_truth_query_result_is_empty": false,
    "error_occured_at_endpoint_message": "syntactically not correct"
  },
  {
    "resource": "https://sparql.uniprot.org/.well-known/sparql-examples/54",
    "natural_language_question": "Proteins with binding sites for ligands similar to heme",
    "ground_truth_query": "PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX sachem: <http://bioinfo.uochb.cas.cz/rdf/v1.0/sachem#>\nPREFIX up: <http://purl.uniprot.org/core/>\nPREFIX xsd: <http://www.w3.org/2001/XMLSchema#>\n\nSELECT \n  ?protein\n  ?mnemonic\n  ?proteinName\n  ?ligandSimilarityScore\n  ?ligand\nWHERE {\n  SERVICE <https://idsm.elixir-czech.cz/sparql/endpoint/chebi> {\n    ?ssc sachem:compound ?ligand; \n      sachem:score ?ligandSimilarityScore ;\n      sachem:similaritySearch ?sss .\n        # Smiles of Heme\n    ?sss    sachem:query \"CC1=C(CCC([O-])=O)C2=[N+]3C1=Cc1c(C)c(C=C)c4C=C5C(C)=C(C=C)C6=[N+]5[Fe-]3(n14)n1c(=C6)c(C)c(CCC([O-])=O)c1=C2\";\n      sachem:cutoff \"8e-1\"^^xsd:double ;\n      sachem:aromaticityMode sachem:aromaticityDetect ;\n      sachem:similarityRadius 1 ;\n      sachem:tautomerMode sachem:ignoreTautomers .\n  }\n  ?protein up:mnemonic ?mnemonic ;\n    up:recommendedName/up:fullName ?proteinName ;\n    up:annotation ?annotation .\n  ?annotation a up:Binding_Site_Annotation ;\n      up:ligand/rdfs:subClassOf ?ligand .\n}\nORDER BY DESC(?ligandSimilarityScore)",
    "target_endpoint": "https://sparql.uniprot.org/sparql/",
    "federates_with": [
      "https://idsm.elixir-czech.cz/sparql/endpoint/chebi"
    ],
    "endpoint_set": "Uniprot",
    "file_path": "UniProt/54_binding_sites_for_ligands_similar_to_heme_sachem.ttl",
    "predicted_query": "# https://sparql.uniprot.org/sparql\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>\nPREFIX up: <http://purl.uniprot.org/core/>\n\nSELECT DISTINCT ?protein ?proteinName ?bindingSite\nWHERE {\n  # Find proteins that have binding sites\n  ?protein a up:Protein .\n  ?protein rdfs:label ?proteinName .\n  ?protein up:annotation ?bindingSiteAnnotation .\n  ?bindingSiteAnnotation a up:Binding_Site .\n  ?bindingSiteAnnotation rdfs:label ?bindingSite .\n\n  #OPTIONAL {\n  #  SERVICE <https://sparql.rhea-db.org/sparql> {\n  #    #Attempt to link to rhea to find reactions involving heme and the protein\n  #    ?rheaReaction rdfs:comment ?reactionComment .\n  #    FILTER (CONTAINS(LCASE(?reactionComment), \"heme\"))\n  #  }\n  #}\n  \n  # Filter for binding sites that are similar to \"Heme\"\n  FILTER (CONTAINS(LCASE(?bindingSite), \"heme\"))\n}",
    "predicted_endpoint": "https://sparql.uniprot.org/sparql",
    "predicted_endpoint_equal_to_target_endpoint": true,
    "predicted_endpoint_in_federates_with": false,
    "predicted_endpoint_or_federated_endpoint": true,
    "run_id_langsmith": "3e0a09fd-a9d2-4999-865e-ece776542a5e",
    "evaluation_timestamp": "2025-05-10T18:24:48.468425",
    "question_understanding_prompt_tokens": 250,
    "question_understanding_completion_tokens": 29,
    "question_understanding_total_tokens": 279,
    "sparql_query_construction_prompt_tokens": 2616,
    "sparql_query_construction_completion_tokens": 327,
    "sparql_query_construction_total_tokens": 2943,
    "is_valid_sparql": true,
    "sparql_syntax_error": "syntactically correct",
    "result_eval_f1_score": 0.0,
    "result_eval_precision": 0.0,
    "result_eval_recall": 0.0,
    "error_occured_at_endpoint": false,
    "predicted_query_result_is_empty": true,
    "ground_truth_query_result_is_empty": false,
    "error_occured_at_endpoint_message": "no error, but empty result"
  },
  {
    "resource": "https://sparql.uniprot.org/.well-known/sparql-examples/43",
    "natural_language_question": "Connect patents cited in UniProtKB with those in the patent database at EPO via publication number, whose grant date is more than twenty years in the past.",
    "ground_truth_query": "PREFIX patent: <http://data.epo.org/linked-data/def/patent/>\nPREFIX skos: <http://www.w3.org/2004/02/skos/core#>\nPREFIX up: <http://purl.uniprot.org/core/>\n\nSELECT ?grantDate ?patent ?application ?applicationNo\nWHERE\n{\n    ?citation a up:Patent_Citation ;\n  skos:exactMatch ?patent .\n  BIND(SUBSTR(STR(?patent), 35) AS ?applicationNo)\n  BIND(SUBSTR(STR(?patent), 33, 2) AS ?countryCode)\n  SERVICE <https://data.epo.org/linked-data/query>{\n    ?publication patent:publicationNumber ?applicationNo ;\n      patent:application ?application .\n    ?application patent:grantDate ?grantDate .\n  }\n  BIND((year(now()) - 20) AS ?thisYearMinusTwenty)\n  BIND(year(?grantDate) AS ?grantYear)\n  FILTER(?grantYear < ?thisYearMinusTwenty)\n} ORDER BY ?grantYear",
    "target_endpoint": "https://sparql.uniprot.org/sparql/",
    "federates_with": [
      "https://data.epo.org/linked-data/query"
    ],
    "endpoint_set": "Uniprot",
    "file_path": "UniProt/43_patents_used_in_uniprot_granted_twenty_years_in_the_past.ttl",
    "predicted_query": "# https://sparql.uniprot.org/sparql\n# Federated query to connect patents cited in UniProtKB with those in the patent database at EPO via publication number, whose grant date is more than twenty years in the past.\nPREFIX up: <http://purl.uniprot.org/core/>\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\n\nSELECT DISTINCT ?uniprotEntry ?patentPublicationNumber ?epoPatent WHERE {\n  # Query UniProtKB for entries with patent citations\n  SERVICE <https://sparql.uniprot.org/sparql> {\n    ?uniprotEntry a up:Protein ; # Assuming UniProt entries are of type Protein\n                  up:citation ?citation .\n    ?citation up:publicationNumber ?patentPublicationNumber .\n    FILTER (REGEX(?patentPublicationNumber, \"^[A-Z0-9]+$\")) # Filter to ensure it looks like a patent publication number\n  }\n\n  # Query EPO patent database for patents with matching publication numbers and grant date more than 20 years ago\n  SERVICE <https://ops.epo.org/3.2/rest-services/register> {\n    # Assuming there's a way to query EPO by publication number and filter by grant date.  This is a placeholder.\n    # Replace with the actual EPO query mechanism.  The following is illustrative.\n    BIND(URI(CONCAT(\"http://data.epo.org/patent/\", ?patentPublicationNumber)) AS ?epoPatent) # Example URI construction\n    #FILTER (?grantDate < (NOW() - YEAR(\"20\"^^xsd:integer))) # Example date filter - needs actual EPO property\n  }\n}",
    "predicted_endpoint": "https://sparql.uniprot.org/sparql",
    "predicted_endpoint_equal_to_target_endpoint": true,
    "predicted_endpoint_in_federates_with": false,
    "predicted_endpoint_or_federated_endpoint": true,
    "run_id_langsmith": "1d55d4a6-a99b-4545-bab0-0368cb66e934",
    "evaluation_timestamp": "2025-05-10T18:25:08.397639",
    "question_understanding_prompt_tokens": 268,
    "question_understanding_completion_tokens": 47,
    "question_understanding_total_tokens": 315,
    "sparql_query_construction_prompt_tokens": 1906,
    "sparql_query_construction_completion_tokens": 382,
    "sparql_query_construction_total_tokens": 2288,
    "is_valid_sparql": true,
    "sparql_syntax_error": "syntactically correct",
    "result_eval_f1_score": 0.0,
    "result_eval_precision": 0.0,
    "result_eval_recall": 0.0,
    "error_occured_at_endpoint": true,
    "predicted_query_result_is_empty": true,
    "ground_truth_query_result_is_empty": true,
    "error_occured_at_endpoint_message": "QueryBadFormed: A bad request has been sent to the endpoint: probably the SPARQL query is badly formed."
  },
  {
    "resource": "https://sparql.uniprot.org/.well-known/sparql-examples/45",
    "natural_language_question": "Retrieve drugs that target human enzymes involved in sterol metabolism (federated query with WikiData and Rhea).",
    "ground_truth_query": "PREFIX CHEBI: <http://purl.obolibrary.org/obo/CHEBI_>\nPREFIX chebihash: <http://purl.obolibrary.org/obo/chebi#>\nPREFIX owl: <http://www.w3.org/2002/07/owl#>\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX rh: <http://rdf.rhea-db.org/>\nPREFIX taxon: <http://purl.uniprot.org/taxonomy/>\nPREFIX uniprotkb: <http://purl.uniprot.org/uniprot/>\nPREFIX up: <http://purl.uniprot.org/core/>\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\n\nSELECT DISTINCT ?protein ?proteinFullName ?wikiChemical ?wikiChemicalLabel ?medicalConditionTreatedLabel\nWHERE {\n  # ChEBI: retrieve members of the ChEBI class ChEBI:15889 (sterol)\n  # Rhea: retrieve the reactions involving these ChEBI as participants\n  SERVICE <https://sparql.rhea-db.org/sparql> {\n    ?reaction rdfs:subClassOf rh:Reaction ;\n      rh:status rh:Approved ;\n      rh:side ?reactionSide .\n    ?reactionSide\n      rh:contains ?participant .\n    ?participant rh:compound ?compound\n    {\n      ?compound rh:chebi ?chebi .\n      ?chebi (rdfs:subClassOf)+ CHEBI:15889\n    } UNION {\n      ?compound rh:chebi ?chebi .\n      ?chebi2 rdfs:subClassOf ?chebiRestriction .\n      ?chebiRestriction\n\t\ta owl:Restriction ;\n\t\towl:onProperty chebihash:has_major_microspecies_at_pH_7_3 ;\n\t\towl:someValuesFrom ?chebi .\n      ?chebi2 (rdfs:subClassOf)+ CHEBI:15889\n    }\n  }\n  # UniProt: retrieve the human (taxid:9606) enzymes catalyzing these Rhea reactions\n  ?ca up:catalyzedReaction  ?reaction .\n  ?a up:catalyticActivity  ?ca .\n  ?proteinIRI  up:annotation ?a ;\n    up:organism taxon:9606 ;\n    up:recommendedName ?proteinRecName .\n  ?proteinRecName up:fullName ?proteinFullName .\n  # Find drugs in wikidata that interact with the UniProt Proteins\n  BIND (SUBSTR(STR(?proteinIRI), STRLEN(STR(uniprotkb:))+1) AS ?protein)\n  SERVICE <https://query.wikidata.org/sparql> {\n    ?wp wdt:P352  ?protein .\n    ?wikiChemical wdt:P129 ?wp . # Physically interacts with\n    ?wikiChemical rdfs:label ?wikiChemicalLabel .\n    ?wikiChemical wdt:P2175 ?wmc . # Medical conndition treated\n    ?wmc rdfs:label ?medicalConditionTreatedLabel .\n    FILTER(lang(?medicalConditionTreatedLabel) = 'en')\n    FILTER(lang(?wikiChemicalLabel) = 'en')\n  }\n}",
    "target_endpoint": "https://sparql.uniprot.org/sparql/",
    "federates_with": [
      "https://query.wikidata.org/sparql",
      "https://sparql.rhea-db.org/sparql"
    ],
    "endpoint_set": "Uniprot",
    "file_path": "UniProt/45_drugs_targeting_human_sterol_metabolism_enzymes.ttl",
    "predicted_query": "# https://sparql.rhea-db.org/sparql\n# Federated query to retrieve drugs that target human enzymes involved in sterol metabolism.\nPREFIX rhea: <http://rdf.rhea-db.org/>\nPREFIX chebi: <http://purl.obolibrary.org/obo/CHEBI_>\nPREFIX uniprot: <http://purl.uniprot.org/core/>\nPREFIX taxon: <http://purl.uniprot.org/taxonomy/>\n\nSELECT DISTINCT ?drug ?enzymeName\nWHERE {\n  # Find Rhea reactions related to sterol metabolism\n  SERVICE <https://sparql.rhea-db.org/sparql> {\n    ?reaction rhea:equation ?equation .\n    ?reaction rhea:status rhea:approved .\n    ?reaction rhea:directionalReaction ?directionalReaction .\n    ?directionalReaction rhea:side ?leftSide .\n    ?leftSide rhea:has ?participant .\n    ?participant rhea:chebi ?sterol .\n    ?sterol chebi:name ?sterolName .\n    FILTER (CONTAINS(LCASE(?sterolName), \"sterol\"))\n  }\n\n  # Find the enzyme that catalyzes the reaction\n  SERVICE <https://sparql.uniprot.org/sparql> {\n    ?enzyme uniprot:catalyticActivity ?reaction .\n    ?enzyme uniprot:organism taxon:9606 . # Filter for human enzymes\n    ?enzyme rdfs:label ?enzymeName .\n  }\n\n  # Find drugs that target the enzyme (This part would ideally use a drug-target database like DrugBank, ChEMBL, or BindingDB)\n  # Since those are not available, we will use a placeholder for demonstration.\n  # In a real scenario, this SERVICE block would query a drug-target database.\n  SERVICE <https://query.wikidata.org/sparql> {\n    # Placeholder: Assuming there's a property wdt:P129 (possible drug target)\n    # and wd:Q12136 (drug) in Wikidata.  This is for demonstration only.\n    # Replace with actual properties and classes from a real drug-target database.\n    ?drug wdt:P129 ?enzymeURI .  # Assuming enzymeURI is the Wikidata URI for the enzyme.\n    ?drug wdt:P31 wd:Q12136 . # Assuming wd:Q12136 represents a drug.\n    FILTER (STRSTARTS(str(?enzymeURI), \"http://www.wikidata.org/entity/\")) # Ensure it's a Wikidata URI\n    BIND(IRI(REPLACE(str(?enzyme), \"^.*uniprot/([A-Za-z0-9]+)$\", \"http://www.wikidata.org/entity/$1\")) AS ?enzymeURI) # Attempt to convert UniProt ID to Wikidata ID\n    ?drug rdfs:label ?drugLabel .\n    FILTER (LANG(?drugLabel) = \"en\")\n  }\n  BIND(STR(?drugLabel) AS ?drug) # Bind the drug label to the ?drug variable\n}",
    "predicted_endpoint": "https://sparql.rhea-db.org/sparql",
    "predicted_endpoint_equal_to_target_endpoint": false,
    "predicted_endpoint_in_federates_with": true,
    "predicted_endpoint_or_federated_endpoint": true,
    "run_id_langsmith": "5bcc669f-e82f-46b5-8e60-dd6513a5b148",
    "evaluation_timestamp": "2025-05-10T18:25:19.563894",
    "question_understanding_prompt_tokens": 260,
    "question_understanding_completion_tokens": 28,
    "question_understanding_total_tokens": 288,
    "sparql_query_construction_prompt_tokens": 2095,
    "sparql_query_construction_completion_tokens": 0,
    "sparql_query_construction_total_tokens": 2095,
    "is_valid_sparql": false,
    "sparql_syntax_error": "Line 26, column 13: Unresolved prefixed name: rdfs:label",
    "result_eval_f1_score": 0.0,
    "result_eval_precision": 0.0,
    "result_eval_recall": 0.0,
    "error_occured_at_endpoint": false,
    "predicted_query_result_is_empty": true,
    "ground_truth_query_result_is_empty": false,
    "error_occured_at_endpoint_message": "syntactically not correct"
  },
  {
    "resource": "https://sparql.uniprot.org/.well-known/sparql-examples/42",
    "natural_language_question": "Connect patents cited in UniProtKB with those in the patent database at EPO via publication number.",
    "ground_truth_query": "PREFIX patent: <http://data.epo.org/linked-data/def/patent/>\nPREFIX skos: <http://www.w3.org/2004/02/skos/core#>\nPREFIX up: <http://purl.uniprot.org/core/>\n\nSELECT ?citation ?patent ?application ?applicationNo\nWHERE\n{\n  ?citation a up:Patent_Citation ;\n    skos:exactMatch ?patent .\n  FILTER(CONTAINS(STR(?patent), 'EP'))\n  BIND(SUBSTR(STR(?patent), 35) AS ?applicationNo)\n  SERVICE <https://data.epo.org/linked-data/query>{\n    ?application patent:publicationNumber ?applicationNo\n  }\n}",
    "target_endpoint": "https://sparql.uniprot.org/sparql/",
    "federates_with": [
      "https://data.epo.org/linked-data/query"
    ],
    "endpoint_set": "Uniprot",
    "file_path": "UniProt/42_connect_patents_to_epo.ttl",
    "predicted_query": "# https://sparql.uniprot.org/sparql\n# Hypothetical federated query to connect UniProtKB entries with patent information based on publication numbers.\n# Note: This query assumes the existence of a patent endpoint and a property linking UniProt entries to patent publication numbers.\n# It also assumes a property in the patent endpoint that identifies the publication number.\n\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX up: <http://purl.uniprot.org/core/>\n\nSELECT ?uniprotEntry ?patentPublicationNumber ?patentTitle\nWHERE {\n  # Query UniProt for entries and their associated patent publication numbers.\n  SERVICE <https://sparql.uniprot.org/sparql> {\n    ?uniprotEntry a up:Protein .\n    ?uniprotEntry rdfs:seeAlso ?patentResource . # Assuming rdfs:seeAlso links to patent resources\n    ?patentResource up:publication ?patentPublicationNumber . # Assuming up:publication gives the publication number\n  }\n\n  # Query the hypothetical patent endpoint for patent details based on the publication number.\n  SERVICE <http://patents.example.org/sparql> { # Replace with the actual patent endpoint URL\n    ?patent a <http://patents.example.org/ontology/Patent> . # Assuming a Patent class\n    ?patent <http://patents.example.org/ontology/publicationNumber> ?patentPublicationNumber . # Assuming a publicationNumber property\n    ?patent <http://purl.org/dc/terms/title> ?patentTitle . # Get the title of the patent\n  }\n}",
    "predicted_endpoint": "https://sparql.uniprot.org/sparql",
    "predicted_endpoint_equal_to_target_endpoint": true,
    "predicted_endpoint_in_federates_with": false,
    "predicted_endpoint_or_federated_endpoint": true,
    "run_id_langsmith": "b656d03b-cbca-420f-87d0-3815c0e72602",
    "evaluation_timestamp": "2025-05-10T18:25:27.094847",
    "question_understanding_prompt_tokens": 257,
    "question_understanding_completion_tokens": 35,
    "question_understanding_total_tokens": 292,
    "sparql_query_construction_prompt_tokens": 1894,
    "sparql_query_construction_completion_tokens": 489,
    "sparql_query_construction_total_tokens": 2383,
    "is_valid_sparql": true,
    "sparql_syntax_error": "syntactically correct",
    "result_eval_f1_score": 0.0,
    "result_eval_precision": 0.0,
    "result_eval_recall": 0.0,
    "error_occured_at_endpoint": true,
    "predicted_query_result_is_empty": true,
    "ground_truth_query_result_is_empty": true,
    "error_occured_at_endpoint_message": "QueryBadFormed: A bad request has been sent to the endpoint: probably the SPARQL query is badly formed."
  },
  {
    "resource": "https://sparql.uniprot.org/.well-known/sparql-examples/67_draft_human_metabolome",
    "natural_language_question": "Generate a draft human metabolome",
    "ground_truth_query": "PREFIX chebislash: <http://purl.obolibrary.org/obo/chebi/>\nPREFIX rh: <http://rdf.rhea-db.org/>\nPREFIX taxon: <http://purl.uniprot.org/taxonomy/>\nPREFIX up: <http://purl.uniprot.org/core/>\n\nSELECT\n?uniprot ?mnemonic ?rhea ?chebi ?smiles ?inchiKey\nWHERE\n{\n  ?uniprot up:annotation/up:catalyticActivity/up:catalyzedReaction ?rhea ;\n        up:organism taxon:9606 ;\n        up:mnemonic ?mnemonic .\n  SERVICE <https://sparql.rhea-db.org/sparql> {\n\t?rhea rh:side/rh:contains/rh:compound ?compound .\n    ?compound (rh:chebi|(rh:reactivePart/rh:chebi)|(rh:underlyingChebi/rh:chebi)) ?chebi .\n   }\n   ?chebi chebislash:smiles ?smiles ;\n          chebislash:inchikey ?inchiKey .\n}",
    "target_endpoint": "https://sparql.uniprot.org/sparql/",
    "federates_with": [
      "https://sparql.rhea-db.org/sparql"
    ],
    "endpoint_set": "Uniprot",
    "file_path": "UniProt/67_draft_human_metabolome.ttl",
    "predicted_query": "# https://sparql.uniprot.org/sparql\n# This query is a draft and may not be fully executable due to the complexity of defining and querying the entire human metabolome across federated SPARQL endpoints.\n# It provides a starting point by querying UniProt for human proteins and linking them to potential metabolic functions.\n# Further refinement would require more specific knowledge of the target endpoints and their schemas.\n\nPREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX up: <http://purl.uniprot.org/core/>\nPREFIX taxon: <http://purl.uniprot.org/taxonomy/>\n\nSELECT DISTINCT ?protein ?proteinName ?function\nWHERE {\n  # Query UniProt for human proteins\n  SERVICE <https://sparql.uniprot.org/sparql> {\n    ?protein a up:Protein .\n    ?protein up:organism taxon:9606 .  # Filter for Homo sapiens (Human)\n    ?protein rdfs:label ?proteinName .\n    OPTIONAL { ?protein up:function ?function . } # Get protein functions if available\n  }\n  \n  # Potentially link to Rhea or SwissLipids for more metabolome-specific information.\n  # This requires further exploration of the Rhea and SwissLipids schemas to establish the links.\n  # Example: Linking to Rhea based on enzyme activity (requires schema knowledge)\n  # SERVICE <https://sparql.rhea-db.org/sparql> {\n  #   ?reaction rdfs:label ?reactionName .\n  #   ?reaction rhea:enzyme ?protein . # Assuming rhea:enzyme links to UniProt protein\n  # }\n  # Example: Linking to SwissLipids based on lipid interaction (requires schema knowledge)\n  # SERVICE <https://sparql.swisslipids.org/sparql/> {\n  #   ?lipid sl:enzyme ?protein . # Assuming sl:enzyme links to UniProt protein\n  #   ?lipid rdfs:label ?lipidName .\n  # }\n}",
    "predicted_endpoint": "https://sparql.uniprot.org/sparql",
    "predicted_endpoint_equal_to_target_endpoint": true,
    "predicted_endpoint_in_federates_with": false,
    "predicted_endpoint_or_federated_endpoint": true,
    "run_id_langsmith": "cd245f85-1e60-4fb8-9aea-ad1498b057dd",
    "evaluation_timestamp": "2025-05-10T18:25:35.837818",
    "question_understanding_prompt_tokens": 248,
    "question_understanding_completion_tokens": 20,
    "question_understanding_total_tokens": 268,
    "sparql_query_construction_prompt_tokens": 1299,
    "sparql_query_construction_completion_tokens": 0,
    "sparql_query_construction_total_tokens": 1299,
    "is_valid_sparql": true,
    "sparql_syntax_error": "syntactically correct",
    "result_eval_f1_score": 0.0,
    "result_eval_precision": 0.0,
    "result_eval_recall": 0.0,
    "error_occured_at_endpoint": false,
    "predicted_query_result_is_empty": false,
    "ground_truth_query_result_is_empty": false,
    "error_occured_at_endpoint_message": "no error"
  },
  {
    "resource": "https://sparql.uniprot.org/.well-known/sparql-examples/36",
    "natural_language_question": "Find the orthologous proteins for UniProtKB entry P05067 using the <a href=\"http://www.orthod.org\">OrthoDB database</a>",
    "ground_truth_query": "PREFIX orthodb: <http://purl.orthodb.org/>\nPREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX skos: <http://www.w3.org/2004/02/skos/core#>\nPREFIX uniprotkb: <http://purl.uniprot.org/uniprot/>\nPREFIX up: <http://purl.uniprot.org/core/>\n\nSELECT\n  ?protein\n  ?orthoGroup\n  ?scientificName\n  ?functionComment\n  ?prefferedGeneName\n  ((STRLEN(?value) - ?medianLength) as ?deviationFromMedianLength)\nWHERE\n{\n  uniprotkb:P05067 a up:Protein ;\n        up:organism/up:scientificName ?scientificName ;\n        rdfs:seeAlso ?orthoGroup ;\n        up:encodedBy/skos:prefLabel ?prefferedGeneName ;\n          up:sequence/rdf:value ?value .\n  OPTIONAL {\n    ?protein up:annotation ?functionAnnotation .\n    ?functionAnnotation a up:Function_Annotation ;\n      rdfs:comment ?functionComment .\n  }\n  SERVICE <https://sparql.orthodb.org/sparql>{\n    ?orthoGroup orthodb:ogMedianProteinLength ?medianLength .\n    ?orthoGroup orthodb:hasMember ?xref .\n    ?xref orthodb:xref/orthodb:xrefResource uniprotkb:P05067 .\n  }\n}\nLIMIT 985915",
    "target_endpoint": "https://sparql.uniprot.org/sparql/",
    "federates_with": [
      "https://sparql.orthodb.org/sparql"
    ],
    "endpoint_set": "Uniprot",
    "file_path": "UniProt/36_orthologous_proteins_via_orthodb.ttl",
    "predicted_query": "# https://sparql.uniprot.org/sparql\n# Find the orthologous proteins for UniProtKB entry P05067 using OrthoDB.\n# Since there is no direct OrthoDB endpoint, we will query UniProt and attempt to link to OrthoDB identifiers.\nPREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX up: <http://purl.uniprot.org/core/>\nPREFIX orthodb: <http://purl.orthodb.org/>\n\nSELECT DISTINCT ?protein ?orthodbGroup\nWHERE {\n  # Find the UniProt entry for P05067\n  VALUES ?uniprotEntry { <http://purl.uniprot.org/uniprot/P05067> }\n\n  # Get the protein associated with the UniProt entry\n  ?protein up:sequence ?sequence .\n  ?protein rdfs:seeAlso ?orthodbGroup .\n  FILTER (REGEX(STR(?orthodbGroup), \"orthodb.org\"))\n}",
    "predicted_endpoint": "https://sparql.uniprot.org/sparql",
    "predicted_endpoint_equal_to_target_endpoint": true,
    "predicted_endpoint_in_federates_with": false,
    "predicted_endpoint_or_federated_endpoint": true,
    "run_id_langsmith": "09e8b13f-19b0-43a1-889f-36d6937885c7",
    "evaluation_timestamp": "2025-05-10T18:26:18.664224",
    "question_understanding_prompt_tokens": 275,
    "question_understanding_completion_tokens": 41,
    "question_understanding_total_tokens": 316,
    "sparql_query_construction_prompt_tokens": 2167,
    "sparql_query_construction_completion_tokens": 273,
    "sparql_query_construction_total_tokens": 2440,
    "is_valid_sparql": true,
    "sparql_syntax_error": "syntactically correct",
    "result_eval_f1_score": 0.0,
    "result_eval_precision": 0.0,
    "result_eval_recall": 0.0,
    "error_occured_at_endpoint": true,
    "predicted_query_result_is_empty": true,
    "ground_truth_query_result_is_empty": true,
    "error_occured_at_endpoint_message": "The read operation timed out"
  },
  {
    "resource": "https://sparql.uniprot.org/.well-known/sparql-examples/60",
    "natural_language_question": "Find human proteins that catalyze reactions where substrates or product have a <a href=\"https://www.ebi.ac.uk/chebi/searchId.do?chebiId=CHEBI:35516\">Cholestane skeleton</a>",
    "ground_truth_query": "PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX rh: <http://rdf.rhea-db.org/>\nPREFIX sachem: <http://bioinfo.uochb.cas.cz/rdf/v1.0/sachem#>\nPREFIX taxon: <http://purl.uniprot.org/taxonomy/>\nPREFIX up: <http://purl.uniprot.org/core/>\n\nSELECT\n  DISTINCT\n    ?protein\n    ?disease\n    ?rhea\n    ?chebi\n    ?omim\nWHERE {\n    # Find complete ChEBIs with a Cholestane skeleton, via the Czech Elixir node IDSM Sachem chemical substructure search.\n    SERVICE <https://idsm.elixir-czech.cz/sparql/endpoint/chebi> {\n      ?chebi sachem:substructureSearch [\n        sachem:query\n\"[C@]12(CCC3CCCC[C@]3(C)[C@@]1([H])CC[C@]1(C)[C@@]([H])([C@@](C)([H])CCCC(C)C)CC[C@@]21[H])[H]\"\n].\n   }\n   # Use the fact that UniProt catalytic activities are annotated using Rhea \n   # Mapping the found ChEBIs to Rhea reactions\n   SERVICE <https://sparql.rhea-db.org/sparql>{\n     ?rhea rh:side/rh:contains/rh:compound/rdfs:subClassOf ?chebi .\n   }\n   # Match the found Rhea reactions with human UniProtKB proteins\n   ?protein up:annotation/up:catalyticActivity/up:catalyzedReaction ?rhea .\n   ?protein up:organism taxon:9606 .\n   # Find only those human entries that have an annotated related disease, and optionaly map these to OMIM\n   ?protein up:annotation/up:disease ?disease .\n   OPTIONAL {\n     ?disease rdfs:seeAlso ?omim .\n     ?omim up:database <http://purl.uniprot.org/database/MIM>\n   }\n}",
    "target_endpoint": "https://sparql.uniprot.org/sparql/",
    "federates_with": [
      "https://idsm.elixir-czech.cz/sparql/endpoint/chebi",
      "https://sparql.rhea-db.org/sparql"
    ],
    "endpoint_set": "Uniprot",
    "file_path": "UniProt/60_enzymes_working_on_substrate_with_Cholestene_backbone.ttl",
    "predicted_query": "# https://sparql.uniprot.org/sparql\n# Find human proteins that catalyze reactions where substrates or product have a Cholestane skeleton\n\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX up: <http://purl.uniprot.org/core/>\nPREFIX uniprot: <http://purl.uniprot.org/uniprot/>\nPREFIX taxon: <http://purl.uniprot.org/taxonomy/>\nPREFIX chebi: <http://purl.obolibrary.org/obo/CHEBI_>\nPREFIX rhea: <http://rdf.rhea-db.org/>\n\nSELECT DISTINCT ?protein ?proteinName ?reaction\nWHERE {\n  # Find human proteins\n  SERVICE <https://sparql.uniprot.org/sparql> {\n    ?protein a up:Protein ;\n             up:organism taxon:9606 ; # Homo sapiens\n             rdfs:label ?proteinName .\n  }\n  \n  # Find reactions catalyzed by these proteins\n  SERVICE <https://sparql.rhea-db.org/sparql> {\n    ?reaction rhea:enzyme ?protein .\n    \n    # Filter reactions where substrates or products have a Cholestane skeleton\n    {\n      ?reaction rhea:substrate ?substrate .\n      ?substrate chebi:35516 . # Cholestane skeleton\n    }\n    UNION\n    {\n      ?reaction rhea:product ?product .\n      ?product chebi:35516 . # Cholestane skeleton\n    }\n  }\n}",
    "predicted_endpoint": "https://sparql.uniprot.org/sparql",
    "predicted_endpoint_equal_to_target_endpoint": true,
    "predicted_endpoint_in_federates_with": false,
    "predicted_endpoint_or_federated_endpoint": true,
    "run_id_langsmith": "2acf41cd-52d9-4ee6-8d95-3c0df01f79a8",
    "evaluation_timestamp": "2025-05-10T18:36:47.976978",
    "question_understanding_prompt_tokens": 293,
    "question_understanding_completion_tokens": 38,
    "question_understanding_total_tokens": 331,
    "sparql_query_construction_prompt_tokens": 3488,
    "sparql_query_construction_completion_tokens": 364,
    "sparql_query_construction_total_tokens": 3852,
    "is_valid_sparql": false,
    "sparql_syntax_error": "Encountered \" \".\" \". \"\" at line 27, column 30.\nWas expecting one of:\n     ...\n     ...\n     ...\n     ...\n     ...\n     ...\n    \"true\" ...\n    \"false\" ...\n     ...\n     ...\n     ...\n     ...\n     ...\n     ...\n     ...\n     ...\n     ...\n     ...\n     ...\n     ...\n     ...\n    \"(\" ...\n     ...\n    \"[\" ...\n     ...\n    \"<<(\" ...\n    \"<<\" ...\n    \"+\" ...\n    \"*\" ...\n    \"/\" ...\n    \"|\" ...\n    \"?\" ...",
    "result_eval_f1_score": 0.0,
    "result_eval_precision": 0.0,
    "result_eval_recall": 0.0,
    "error_occured_at_endpoint": false,
    "predicted_query_result_is_empty": true,
    "ground_truth_query_result_is_empty": false,
    "error_occured_at_endpoint_message": "syntactically not correct"
  },
  {
    "resource": "https://sparql.uniprot.org/.well-known/sparql-examples/70_enzymes_interacting_with_molecules_similar_to_dopamine",
    "natural_language_question": "Look for enzymes catalyzing reactions with molecules similar to dopamine.",
    "ground_truth_query": "PREFIX CHEBI: <http://purl.obolibrary.org/obo/CHEBI_>\nPREFIX rh: <http://rdf.rhea-db.org/>\nPREFIX sachem: <http://bioinfo.uochb.cas.cz/rdf/v1.0/sachem#>\nPREFIX up: <http://purl.uniprot.org/core/>\n\nSELECT\n  ?protein\n  ?rhea\n  ?chebi\nWHERE {\n  # Use the smiles of dopamine CHEBI:18243\n  SERVICE <https://idsm.elixir-czech.cz/sparql/endpoint/chebi>{\n    ?chebi sachem:similarCompoundSearch [\n      sachem:query \"NCCc1ccc(O)c(O)c1\" ] .\n  }\n  GRAPH<https://sparql.rhea-db.org/rhea>{\n    ?rhea rh:side/rh:contains/rh:compound ?compound .\n    ?compound (rh:chebi|(rh:reactivePart/rh:chebi)|(rh:underlyingChebi/rh:chebi)) ?chebi .\n  }\n  ?protein up:reviewed true ;\n    up:annotation ?caa .\n  ?caa up:catalyticActivity/up:catalyzedReaction ?rhea .\n}",
    "target_endpoint": "https://sparql.uniprot.org/sparql/",
    "federates_with": [
      "https://idsm.elixir-czech.cz/sparql/endpoint/chebi"
    ],
    "endpoint_set": "Uniprot",
    "file_path": "UniProt/70_enzymes_interacting_with_molecules_similar_to_dopamine.ttl",
    "predicted_query": "# https://sparql.rhea-db.org/sparql\n# Find reactions in Rhea involving dopamine and then find enzymes associated with those reactions.\nPREFIX rhea: <http://rdf.rhea-db.org/>\nPREFIX chebi: <http://purl.obolibrary.org/obo/CHEBI_>\nPREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>\n\nSELECT DISTINCT ?enzyme ?reaction\nWHERE {\n  # Find reactions in Rhea that involve dopamine as a participant.\n  {\n    SELECT DISTINCT ?reaction WHERE {\n      ?reaction rhea: Rhea_has_participant chebi:15377 .  # CHEBI ID for dopamine\n    }\n  }\n\n  # Find enzymes associated with these reactions.\n  ?reaction rhea: Rhea_has_enzyme ?enzyme .\n}",
    "predicted_endpoint": "https://sparql.rhea-db.org/sparql",
    "predicted_endpoint_equal_to_target_endpoint": false,
    "predicted_endpoint_in_federates_with": false,
    "predicted_endpoint_or_federated_endpoint": false,
    "run_id_langsmith": "e8d1c83a-6eed-4e48-8b06-2dbf9eafc1db",
    "evaluation_timestamp": "2025-05-10T18:36:56.826694",
    "question_understanding_prompt_tokens": 251,
    "question_understanding_completion_tokens": 26,
    "question_understanding_total_tokens": 277,
    "sparql_query_construction_prompt_tokens": 2427,
    "sparql_query_construction_completion_tokens": 203,
    "sparql_query_construction_total_tokens": 2630,
    "is_valid_sparql": false,
    "sparql_syntax_error": "Lexical error at line 12, column 43.  Encountered: '32' (32), after prefix \"Rhea_has_participant\"",
    "result_eval_f1_score": 0.0,
    "result_eval_precision": 0.0,
    "result_eval_recall": 0.0,
    "error_occured_at_endpoint": false,
    "predicted_query_result_is_empty": true,
    "ground_truth_query_result_is_empty": false,
    "error_occured_at_endpoint_message": "syntactically not correct"
  },
  {
    "resource": "https://sparql.uniprot.org/.well-known/sparql-examples/38",
    "natural_language_question": "For the human entry P05067 (Amyloid-beta precursor protein) find the gene start ends in WikiData",
    "ground_truth_query": "PREFIX p: <http://www.wikidata.org/prop/>\nPREFIX pq: <http://www.wikidata.org/prop/qualifier/>\nPREFIX ps: <http://www.wikidata.org/prop/statement/>\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX uniprotkb: <http://purl.uniprot.org/uniprot/>\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\n\n\nSELECT \n\t?protein \n\t?begin\n\t?end\n\t?chromosome\n\t?assembly\nWHERE {\n    {\n        BIND(uniprotkb:P05067 AS ?proteinIRI)\n        BIND (SUBSTR(STR(?proteinIRI), STRLEN(STR(uniprotkb:))+1) AS ?protein)\n    }\n    SERVICE <https://query.wikidata.org/sparql> {\n        ?wp wdt:P352 ?protein ;\n            wdt:P702 ?wg . \n        ?wg p:P644   ?wgss .\n        ?wgss ps:P644        ?begin ;\n          pq:P1057/wdt:P1813 ?chromosome ;\n          pq:P659/rdfs:label ?assembly .\n        ?wg p:P645 ?wgse .\n        ?wgse ps:P645        ?end ;\n          pq:P1057/wdt:P1813 ?chromosome ;\n          pq:P659/rdfs:label ?assembly .\n        FILTER(lang(?assembly) = \"en\")\n  } \n}",
    "target_endpoint": "https://sparql.uniprot.org/sparql/",
    "federates_with": [
      "https://query.wikidata.org/sparql"
    ],
    "endpoint_set": "Uniprot",
    "file_path": "UniProt/38_find_gene_region_in_wikidata_for_known_entry.ttl",
    "predicted_query": "# https://sparql.uniprot.org/sparql\n# Find the gene start and end positions for the human Amyloid-beta precursor protein (P05067) using UniProt and Wikidata.\nPREFIX up: <http://purl.uniprot.org/core/>\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX wd: <http://www.wikidata.org/entity/>\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\n\nSELECT ?geneStart ?geneEnd\nWHERE {\n  # Find the human protein with UniProt ID P05067\n  SERVICE <https://sparql.uniprot.org/sparql> {\n    ?protein a up:Protein .\n    ?protein up:accession \"P05067\" .\n    ?protein up:organism <http://purl.uniprot.org/taxonomy/9606> . # Human\n    ?protein rdfs:seeAlso ?wikidataLink .\n    FILTER (CONTAINS(str(?wikidataLink), \"wikidata.org\"))\n  }\n\n  # Extract the Wikidata entity ID from the link\n  BIND(IRI(REPLACE(str(?wikidataLink), \".*(Q[0-9]+).*\", \"$1\")) AS ?gene)\n\n  # Query Wikidata for the gene start and end positions\n  SERVICE <https://query.wikidata.org/sparql> {\n    OPTIONAL {\n      ?gene wdt:P637 ?geneStart .  # Gene start position\n    }\n    OPTIONAL {\n      ?gene wdt:P638 ?geneEnd .    # Gene end position\n    }\n  }\n}",
    "predicted_endpoint": "https://sparql.uniprot.org/sparql",
    "predicted_endpoint_equal_to_target_endpoint": true,
    "predicted_endpoint_in_federates_with": false,
    "predicted_endpoint_or_federated_endpoint": true,
    "run_id_langsmith": "17b9b75c-7da5-42ac-8d75-df9e2a22c6a5",
    "evaluation_timestamp": "2025-05-10T18:37:07.461554",
    "question_understanding_prompt_tokens": 266,
    "question_understanding_completion_tokens": 52,
    "question_understanding_total_tokens": 318,
    "sparql_query_construction_prompt_tokens": 2807,
    "sparql_query_construction_completion_tokens": 388,
    "sparql_query_construction_total_tokens": 3195,
    "is_valid_sparql": true,
    "sparql_syntax_error": "syntactically correct",
    "result_eval_f1_score": 0.0,
    "result_eval_precision": 0.0,
    "result_eval_recall": 0.0,
    "error_occured_at_endpoint": false,
    "predicted_query_result_is_empty": true,
    "ground_truth_query_result_is_empty": false,
    "error_occured_at_endpoint_message": "no error, but empty result"
  },
  {
    "resource": "https://sparql.uniprot.org/.well-known/sparql-examples/117_biosodafrontend_glioblastoma_orthologs_rat",
    "natural_language_question": "Which are the proteins associated with glioblastoma and the orthologs expressed in the rat brain?",
    "ground_truth_query": "PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX obo: <http://purl.obolibrary.org/obo/>\nPREFIX orth: <http://purl.org/net/orth#>\nPREFIX sio: <http://semanticscience.org/resource/>\nPREFIX taxon: <http://purl.uniprot.org/taxonomy/>\nPREFIX up: <http://purl.uniprot.org/core/>\nPREFIX lscr: <http://purl.org/lscr#>\nPREFIX genex: <http://purl.org/genex#>\nSELECT DISTINCT ?protein ?orthologous_protein ?gene ?annotation_text WHERE {\n  {\n  \tSELECT ?protein ?annotation_text WHERE {\n      ?protein a up:Protein ;\n          up:organism taxon:9606 ;\n          up:annotation ?annotation .\n      ?annotation rdfs:comment ?annotation_text .\n      ?annotation a up:Disease_Annotation .\n      FILTER CONTAINS (?annotation_text, \"glioblastoma\")\n    }\n  }\n  SERVICE <https://sparql.omabrowser.org/sparql/> {\n    SELECT ?orthologous_protein ?protein ?gene WHERE {\n    ?protein_OMA a orth:Protein .\n    ?orthologous_protein a orth:Protein .\n    ?cluster a orth:OrthologsCluster .\n    ?cluster orth:hasHomologousMember ?node1 .\n    ?cluster\n    orth:hasHomologousMember ?node2 .\n    ?node2 orth:hasHomologousMember* ?protein_OMA .\n    ?node1 orth:hasHomologousMember* ?orthologous_protein .\n    ?orthologous_protein orth:organism/obo:RO_0002162 taxon:10116 . # rattus norvegicus\n    ?orthologous_protein sio:SIO_010079 ?gene .\n    ?protein_OMA lscr:xrefUniprot ?protein .\n    FILTER(?node1 != ?node2)\n\t\t}\n\t}\n  SERVICE <https://www.bgee.org/sparql/> {\n    ?gene genex:isExpressedIn ?a .\n    ?a rdfs:label \"brain\" .\n    ?gene orth:organism ?s . \n    ?s obo:RO_0002162 taxon:10116.\n\t}\n}",
    "target_endpoint": "https://sparql.uniprot.org/sparql",
    "federates_with": [
      "https://sparql.omabrowser.org/sparql/",
      "https://www.bgee.org/sparql/"
    ],
    "endpoint_set": "Uniprot",
    "file_path": "UniProt/117_biosodafrontend_glioblastoma_orthologs_rat.ttl",
    "predicted_query": "# https://sparql.uniprot.org/sparql\n# Prefixes for commonly used namespaces\nPREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX up: <http://purl.uniprot.org/core/>\nPREFIX taxon: <http://purl.uniprot.org/taxonomy/>\nPREFIX disease: <http://purl.uniprot.org/diseases/>\n\n# Select the protein accessions and their corresponding orthologs\nSELECT DISTINCT ?protein ?proteinName ?ratOrthologName\nWHERE {\n  # Subquery to find proteins associated with glioblastoma\n  {\n    SELECT DISTINCT ?protein ?proteinName\n    WHERE {\n      # Match proteins associated with the glioblastoma disease\n      ?protein up:annotation disease:2566 . # Using the disease URI for glioblastoma\n      ?protein rdfs:label ?proteinName .\n    }\n  }\n\n  # Find orthologs of the glioblastoma-associated proteins in rat brain\n  SERVICE <https://sparql.uniprot.org/sparql> {\n    ?ratOrtholog up:sequence ?sequence .\n    ?ratOrtholog up:organism taxon:10116 . #Taxon for Rattus norvegicus (Rat)\n    ?ratOrtholog rdfs:label ?ratOrthologName .\n    ?ratOrtholog up:xref ?xref .\n    ?xref rdf:type up:Protein .\n    ?xref rdfs:seeAlso ?protein . # Link to the original protein\n  }\n}",
    "predicted_endpoint": "https://sparql.uniprot.org/sparql",
    "predicted_endpoint_equal_to_target_endpoint": true,
    "predicted_endpoint_in_federates_with": false,
    "predicted_endpoint_or_federated_endpoint": true,
    "run_id_langsmith": "2e4bb141-863f-4204-ac9a-fb476a648050",
    "evaluation_timestamp": "2025-05-10T18:37:22.521181",
    "question_understanding_prompt_tokens": 257,
    "question_understanding_completion_tokens": 37,
    "question_understanding_total_tokens": 294,
    "sparql_query_construction_prompt_tokens": 2538,
    "sparql_query_construction_completion_tokens": 379,
    "sparql_query_construction_total_tokens": 2917,
    "is_valid_sparql": true,
    "sparql_syntax_error": "syntactically correct",
    "result_eval_f1_score": 0.0,
    "result_eval_precision": 0.0,
    "result_eval_recall": 0.0,
    "error_occured_at_endpoint": false,
    "predicted_query_result_is_empty": true,
    "ground_truth_query_result_is_empty": false,
    "error_occured_at_endpoint_message": "no error, but empty result"
  },
  {
    "resource": "https://sparql.uniprot.org/.well-known/sparql-examples/116_biosodafrontend_rabit_mouse_orthologs",
    "natural_language_question": "Rabbit's proteins encoded by genes that are orthologous to Mouse's HBB-Y gene and their cross reference links to Uniprot",
    "ground_truth_query": "PREFIX lscr: <http://purl.org/lscr#>\nPREFIX orth: <http://purl.org/net/orth#>\nPREFIX up: <http://purl.uniprot.org/core/>\nPREFIX obo: <http://purl.obolibrary.org/obo/>\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nSELECT DISTINCT ?PROTEIN_1 ?PROTEIN_2 ?UNIPROT_XREF_1 ?UNIPROT_XREF_2 WHERE {\n\t?taxon_1 up:commonName 'Mouse' .\n\t?taxon_2 up:commonName 'Rabbit' .\n\tSERVICE <https://sparql.omabrowser.org/sparql/> {\n\t\t?cluster a orth:OrthologsCluster .\n\t\t?cluster orth:hasHomologousMember ?node1 .\n\t\t?cluster orth:hasHomologousMember ?node2 .\n\t\t?node2 orth:hasHomologousMember* ?PROTEIN_2 .\n\t\t?node1 orth:hasHomologousMember* ?PROTEIN_1 .\n\t\t?PROTEIN_1 a orth:Protein .\n\t\t?PROTEIN_1 orth:organism/obo:RO_0002162 ?taxon_1 ;\n\t\t\trdfs:label 'HBB-Y' ;\n\t\t\tlscr:xrefUniprot ?UNIPROT_XREF_1 .\n\t\t?PROTEIN_2 a orth:Protein .\n\t\t?PROTEIN_2 orth:organism/obo:RO_0002162 ?taxon_2 .\n\t\t?PROTEIN_2 lscr:xrefUniprot ?UNIPROT_XREF_2 .\n\t\tFILTER ( ?node1 != ?node2 )\n\t}\n}",
    "target_endpoint": "https://sparql.uniprot.org/sparql",
    "federates_with": [
      "https://sparql.omabrowser.org/sparql/"
    ],
    "endpoint_set": "Uniprot",
    "file_path": "UniProt/116_biosodafrontend_rabit_mouse_orthologs.ttl",
    "predicted_query": "# https://sparql.uniprot.org/sparql\n# Federated query to find Rabbit proteins encoded by genes orthologous to Mouse's HBB-Y gene and their UniProt cross-references.\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX up: <http://purl.uniprot.org/core/>\nPREFIX taxon: <http://purl.uniprot.org/taxonomy/>\n\nSELECT DISTINCT ?rabbitProtein ?geneName ?uniprotCrossReference\nWHERE {\n  # Find the UniProt ID for Mouse HBB-Y gene (using a fuzzy match on the name).\n  SERVICE <https://sparql.uniprot.org/sparql> {\n    SELECT DISTINCT ?mouseGene WHERE {\n      ?mouseGene a up:Protein .\n      ?mouseGene up:organism taxon:10090 .  # Mouse NCBI Taxonomy ID\n      ?mouseGene rdfs:label ?geneLabel .\n      FILTER (contains(lcase(?geneLabel), \"HBB-Y\")) # Fuzzy matching for HBB-Y\n    }\n    LIMIT 1 # Assuming only one gene matches the name.\n  }\n\n  # Find orthologous genes in Rabbit\n  SERVICE <https://sparql.uniprot.org/sparql> {\n    ?rabbitProtein a up:Protein .\n    ?rabbitProtein up:organism taxon:9986 . # Rabbit NCBI Taxonomy ID\n    ?rabbitProtein up:gene ?gene .\n    ?gene rdfs:label ?geneName .\n    ?gene up:orthologOf ?mouseGene . # Find orthologs of the mouse gene\n    OPTIONAL { ?rabbitProtein up:database ?uniprotCrossReference . } # Get cross-references to UniProt\n  }\n}",
    "predicted_endpoint": "https://sparql.uniprot.org/sparql",
    "predicted_endpoint_equal_to_target_endpoint": true,
    "predicted_endpoint_in_federates_with": false,
    "predicted_endpoint_or_federated_endpoint": true,
    "run_id_langsmith": "dfa20659-e16b-411e-ac1d-0576c7e530de",
    "evaluation_timestamp": "2025-05-10T18:37:34.708195",
    "question_understanding_prompt_tokens": 270,
    "question_understanding_completion_tokens": 49,
    "question_understanding_total_tokens": 319,
    "sparql_query_construction_prompt_tokens": 3419,
    "sparql_query_construction_completion_tokens": 399,
    "sparql_query_construction_total_tokens": 3818,
    "is_valid_sparql": true,
    "sparql_syntax_error": "syntactically correct",
    "result_eval_f1_score": 0.0,
    "result_eval_precision": 0.0,
    "result_eval_recall": 0.0,
    "error_occured_at_endpoint": false,
    "predicted_query_result_is_empty": true,
    "ground_truth_query_result_is_empty": false,
    "error_occured_at_endpoint_message": "no error, but empty result"
  },
  {
    "resource": "https://sparql.uniprot.org/.well-known/sparql-examples/29",
    "natural_language_question": "Use <a href=\"http://allie.dbcls.jp/\">ALLIE</a> a service for Abbreviation / Long Form in Japanese and English to search in UniProt using Japanese.",
    "ground_truth_query": "PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX up: <http://purl.uniprot.org/core/>\n\nSELECT ?protein ?englishLabelStr\nWHERE {\n    SERVICE <https://data.allie.dbcls.jp/sparql>{\n        ?x rdfs:label \"アミロイド前駆体タンパク質\"@ja ;\n            rdfs:label ?englishLabel .\n        FILTER(lang(?englishLabel) = \"en\")\n    }\n    BIND (STR(?englishLabel) AS ?englishLabelStr)\n    ?protein a up:Protein .\n    {\n        ?protein (up:recommendedName|up:alternativeName) ?structuredName .\n    }\n    UNION\n    {\n        VALUES(?partType){(up:domain) (up:component)}\n            ?protein ?partType ?part .\n        ?part (up:recommendedName|up:alternativeName) ?structuredName .\n    }\n    ?structuredName ?anyKindOfName  ?englishLabelStr .\n    ?anyKindOfName rdfs:subPropertyOf up:structuredNameType .\n}",
    "target_endpoint": "https://sparql.uniprot.org/sparql/",
    "federates_with": [
      "https://data.allie.dbcls.jp/sparql"
    ],
    "endpoint_set": "Uniprot",
    "file_path": "UniProt/29_search_uniprot_in_japanese_with_allie.ttl",
    "predicted_query": "# https://sparql.uniprot.org/sparql\n# This query cannot directly use ALLIE. It requires the user to translate Japanese terms using ALLIE\n# and then input the translated terms (e.g., gene names, protein names) into this query.\n# This example demonstrates how to search UniProt for proteins related to a translated term.\n\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX up: <http://purl.uniprot.org/core/>\n\nSELECT ?protein ?proteinName\nWHERE {\n  # Replace \"translated_term\" with the actual English translation obtained from ALLIE.\n  ?protein a up:Protein .\n  ?protein rdfs:label ?proteinName .\n  FILTER (CONTAINS(LCASE(?proteinName), \"translated_term\"))  # Case-insensitive search\n}",
    "predicted_endpoint": "https://sparql.uniprot.org/sparql",
    "predicted_endpoint_equal_to_target_endpoint": true,
    "predicted_endpoint_in_federates_with": false,
    "predicted_endpoint_or_federated_endpoint": true,
    "run_id_langsmith": "110d0196-1639-4dc8-83cc-3b2216e4f83c",
    "evaluation_timestamp": "2025-05-10T18:37:54.200407",
    "question_understanding_prompt_tokens": 278,
    "question_understanding_completion_tokens": 22,
    "question_understanding_total_tokens": 300,
    "sparql_query_construction_prompt_tokens": 1892,
    "sparql_query_construction_completion_tokens": 305,
    "sparql_query_construction_total_tokens": 2197,
    "is_valid_sparql": true,
    "sparql_syntax_error": "syntactically correct",
    "result_eval_f1_score": 0.0,
    "result_eval_precision": 0.0,
    "result_eval_recall": 0.0,
    "error_occured_at_endpoint": true,
    "predicted_query_result_is_empty": true,
    "ground_truth_query_result_is_empty": true,
    "error_occured_at_endpoint_message": "The read operation timed out"
  },
  {
    "resource": "https://sparql.rhea-db.org/.well-known/sparql-examples/94_Select_all_approved_reactions_with_CHEBI_or_one_of_its_descendant_optional_UniProtKB_reviewed_EC",
    "natural_language_question": "Select all approved reactions with CHEBI:17815 (a 1,2-diacyl-sn-glycerol) or one of its descendant. Display links to UniProtKB/Swiss-Prot entries via EC numbers if the link rhea-ec exists.",
    "ground_truth_query": "PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX rh:<http://rdf.rhea-db.org/>\nPREFIX CHEBI:<http://purl.obolibrary.org/obo/CHEBI_>\nPREFIX up:<http://purl.uniprot.org/core/>\n\nSELECT\n  distinct\n    ?reaction\n    ?enzyme\n    (count(distinct ?protein) as ?proteinCount)\nWHERE {\n  ?reaction rdfs:subClassOf rh:Reaction .\n  ?reaction rh:status rh:Approved .\n  ?reaction rh:side ?reactionSide .\n\n  OPTIONAL {?reaction rh:ec ?enzyme .\n    SERVICE <https://sparql.uniprot.org/sparql> {\n      ?protein up:reviewed true .\n      ?protein up:enzyme ?enzyme.\n    }\n  } .\n  ?reactionSide rh:contains ?participant .\n  ?participant rh:compound ?compound .\n  ?compound rh:chebi ?chebi .\n  ?chebi rdfs:subClassOf* CHEBI:17815 .\n}\nGROUP BY ?reaction ?enzyme\nORDER BY ?reaction\nLIMIT 985915",
    "target_endpoint": "https://sparql.rhea-db.org/sparql",
    "federates_with": [
      "https://sparql.uniprot.org/sparql"
    ],
    "endpoint_set": "Rhea",
    "file_path": "Rhea/94_Select_all_approved_reactions_with_CHEBI_or_one_of_its_descendant_optional_UniProtKB_reviewed_EC.ttl",
    "predicted_query": "# https://sparql.rhea-db.org/sparql\n# Federated query to find reactions involving CHEBI:17815 or its descendants and link to UniProtKB entries via EC numbers.\nPREFIX rhea: <http://rdf.rhea-db.org/>\nPREFIX chebi: <http://purl.obolibrary.org/obo/CHEBI_>\nPREFIX ec: <http://purl.uniprot.org/enzyme/>\n\nSELECT DISTINCT ?reaction ?reactionName ?ecNumber ?uniprotEntry\nWHERE {\n  # Find reactions that have CHEBI:17815 or its descendants as a participant.\n  {\n    SELECT DISTINCT ?reaction WHERE {\n      ?compound rdfs:subClassOf* chebi:17815 . # Find CHEBI terms that are subclasses of CHEBI:17815\n      ?reaction rhea: Rhea_has_participant ?compoundURI .\n      ?compoundURI a ?compound .\n    }\n  }\n\n  # Get the reaction name\n  ?reaction rdfs:label ?reactionName .\n  \n  # Filter for approved reactions\n  ?reaction rhea:status \"approved\" .\n\n  # Optional: Link to UniProtKB entries via EC numbers if the rhea-ec link exists.\n  OPTIONAL {\n    ?reaction rhea:ec ?ecNumber .\n    SERVICE <https://sparql.uniprot.org/sparql> {\n      ?uniprotEntry rdfs:seeAlso ?ecNumber .\n    }\n  }\n}",
    "predicted_endpoint": "https://sparql.rhea-db.org/sparql",
    "predicted_endpoint_equal_to_target_endpoint": true,
    "predicted_endpoint_in_federates_with": false,
    "predicted_endpoint_or_federated_endpoint": true,
    "run_id_langsmith": "8bc34ab9-4338-4bb1-b41f-9fbdd8e23954",
    "evaluation_timestamp": "2025-05-10T18:48:03.481455",
    "question_understanding_prompt_tokens": 296,
    "question_understanding_completion_tokens": 88,
    "question_understanding_total_tokens": 384,
    "sparql_query_construction_prompt_tokens": 2091,
    "sparql_query_construction_completion_tokens": 344,
    "sparql_query_construction_total_tokens": 2435,
    "is_valid_sparql": false,
    "sparql_syntax_error": "Line 12, column 17: Unresolved prefixed name: rdfs:subClassOf",
    "result_eval_f1_score": 0.0,
    "result_eval_precision": 0.0,
    "result_eval_recall": 0.0,
    "error_occured_at_endpoint": false,
    "predicted_query_result_is_empty": true,
    "ground_truth_query_result_is_empty": false,
    "error_occured_at_endpoint_message": "syntactically not correct"
  },
  {
    "resource": "https://sparql.rhea-db.org/.well-known/sparql-examples/11",
    "natural_language_question": "Distribution of reactions according to the first class of the enzyme classification (federated query)",
    "ground_truth_query": "PREFIX ec: <http://purl.uniprot.org/enzyme/>\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX rh: <http://rdf.rhea-db.org/>\nPREFIX skos: <http://www.w3.org/2004/02/skos/core#>\n\n# Query 11\n# Retrieve the count of reactions mapped to each level (main class) of the enzyme classification\n#\n# This query mimics the Filter section of the Rhea website (Browse all reactions)\n# https://www.rhea-db.org/rhea?query=\nSELECT ?ecClass (STR(?ecName) AS ?ecClassName) (COUNT(?rhea) AS ?rheaCount)\nWHERE {\n  SERVICE <https://sparql.uniprot.org/sparql> {\n    VALUES (?ecClass) { (ec:1.-.-.-)(ec:2.-.-.-)(ec:3.-.-.-)(ec:4.-.-.-)(ec:5.-.-.-) (ec:6.-.-.-) (ec:7.-.-.-)}\n    ?ecNumber rdfs:subClassOf ?ecClass .\n    ?ecClass skos:prefLabel ?ecName .\n  }\n  ?rhea rdfs:subClassOf rh:Reaction .\n  ?rhea rh:ec ?ecNumber .\n} GROUP BY ?ecClass ?ecName",
    "target_endpoint": "https://sparql.rhea-db.org/sparql",
    "federates_with": [
      "https://sparql.uniprot.org/sparql"
    ],
    "endpoint_set": "Rhea",
    "file_path": "Rhea/11.ttl",
    "predicted_query": "# https://sparql.rhea-db.org/sparql\n# Federated query to retrieve the distribution of reactions according to the first class of the enzyme classification.\nPREFIX rhea: <http://rdf.rhea-db.org/>\nPREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\n\nSELECT ?enzymeClass (COUNT(DISTINCT ?reaction) AS ?reactionCount)\nWHERE {\n  # Query Rhea for reactions and their associated enzyme codes.\n  SERVICE <https://sparql.rhea-db.org/sparql> {\n    ?reaction rdf:type rhea:Reaction .\n    ?reaction rhea:enzyme ?enzyme .\n  }\n\n  # Query UniProt for enzyme codes and their corresponding enzyme classes.\n  SERVICE <https://sparql.uniprot.org/sparql> {\n    ?enzyme uniprot:ec ?enzymeCode .\n    BIND(SUBSTR(STR(?enzymeCode), 1, 1) AS ?enzymeClass) # Extract the first digit of the EC number as the enzyme class.\n  }\n}\nGROUP BY ?enzymeClass\nORDER BY DESC(?reactionCount)",
    "predicted_endpoint": "https://sparql.rhea-db.org/sparql",
    "predicted_endpoint_equal_to_target_endpoint": true,
    "predicted_endpoint_in_federates_with": false,
    "predicted_endpoint_or_federated_endpoint": true,
    "run_id_langsmith": "84ee68a5-641f-426a-83ba-ea1c9cafd524",
    "evaluation_timestamp": "2025-05-10T18:48:09.375361",
    "question_understanding_prompt_tokens": 257,
    "question_understanding_completion_tokens": 25,
    "question_understanding_total_tokens": 282,
    "sparql_query_construction_prompt_tokens": 1540,
    "sparql_query_construction_completion_tokens": 297,
    "sparql_query_construction_total_tokens": 1837,
    "is_valid_sparql": false,
    "sparql_syntax_error": "Line 17, column 13: Unresolved prefixed name: uniprot:ec",
    "result_eval_f1_score": 0.0,
    "result_eval_precision": 0.0,
    "result_eval_recall": 0.0,
    "error_occured_at_endpoint": false,
    "predicted_query_result_is_empty": true,
    "ground_truth_query_result_is_empty": false,
    "error_occured_at_endpoint_message": "syntactically not correct"
  },
  {
    "resource": "https://sparql.rhea-db.org/.well-known/sparql-examples/109_Distribution_of_reactions_according_to_the_first_level_of_enzyme_classification",
    "natural_language_question": "Distribution of reactions according to the first level of enzyme classification",
    "ground_truth_query": "\nPREFIX rh:<http://rdf.rhea-db.org/>\nPREFIX ec:<http://purl.uniprot.org/enzyme/>\nPREFIX rdfs:<http://www.w3.org/2000/01/rdf-schema#>\nPREFIX skos:<http://www.w3.org/2004/02/skos/core#>\n\nSELECT\n  ?ecClass\n  (str(?ecName) as ?ecClassName)\n  (count(?reaction) as ?reactionCount)\nWHERE\n{\n  SERVICE <http://sparql.uniprot.org/sparql> {\n    VALUES (?ecClass) { (ec:1.-.-.-)(ec:2.-.-.-)(ec:3.-.-.-)(ec:4.-.-.-)(ec:5.-.-.-) (ec:6.-.-.-) (ec:7.-.-.-) }\n    ?ecNumber rdfs:subClassOf ?ecClass .\n    ?ecClass skos:prefLabel ?ecName .\n  }\n  ?reaction rdfs:subClassOf rh:Reaction .\n  ?reaction rh:ec ?ecNumber .\n}\nGROUP BY ?ecClass ?ecName\n",
    "target_endpoint": "https://sparql.rhea-db.org/sparql",
    "federates_with": [
      "http://sparql.uniprot.org/sparql"
    ],
    "endpoint_set": "Rhea",
    "file_path": "Rhea/109_Distribution_of_reactions_according_to_the_first_level_of_enzyme_classification.ttl",
    "predicted_query": "# https://sparql.rhea-db.org/sparql\n# Federated query to retrieve the distribution of reactions according to the first level of enzyme classification.\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX rh: <http://rdf.rhea-db.org/>\nPREFIX ec: <http://purl.uniprot.org/enzyme/>\n\nSELECT ?ec1 (COUNT(DISTINCT ?reaction) AS ?reactionCount)\nWHERE {\n  # Query Rhea for reactions and their associated EC numbers.\n  SERVICE <https://sparql.rhea-db.org/sparql> {\n    ?reaction a rh:Reaction .\n    ?reaction rh:ec ?ec .\n  }\n  \n  # Extract the first level of the EC number.\n  BIND(SUBSTR(STR(?ec), 31, 1) AS ?ec1) # Assuming EC numbers are in the format http://purl.uniprot.org/enzyme/X.Y.Z.W\n  \n  # Filter out invalid EC numbers (e.g., those without a first level).\n  FILTER (REGEX(?ec1, \"^[1-7]$\"))\n}\nGROUP BY ?ec1\nORDER BY ?ec1",
    "predicted_endpoint": "https://sparql.rhea-db.org/sparql",
    "predicted_endpoint_equal_to_target_endpoint": true,
    "predicted_endpoint_in_federates_with": false,
    "predicted_endpoint_or_federated_endpoint": true,
    "run_id_langsmith": "80507141-90e9-4e2b-b566-97ec0f27ff0d",
    "evaluation_timestamp": "2025-05-10T18:48:16.543601",
    "question_understanding_prompt_tokens": 248,
    "question_understanding_completion_tokens": 27,
    "question_understanding_total_tokens": 275,
    "sparql_query_construction_prompt_tokens": 1951,
    "sparql_query_construction_completion_tokens": 289,
    "sparql_query_construction_total_tokens": 2240,
    "is_valid_sparql": true,
    "sparql_syntax_error": "syntactically correct",
    "result_eval_f1_score": 0.0,
    "result_eval_precision": 0.0,
    "result_eval_recall": 0.0,
    "error_occured_at_endpoint": false,
    "predicted_query_result_is_empty": true,
    "ground_truth_query_result_is_empty": false,
    "error_occured_at_endpoint_message": "no error, but empty result"
  },
  {
    "resource": "https://sparql.rhea-db.org/.well-known/sparql-examples/12",
    "natural_language_question": "Select all Rhea reactions linked to protein sequences (enzymes and transporters) in UniProtKB",
    "ground_truth_query": "PREFIX rh: <http://rdf.rhea-db.org/>\nPREFIX up: <http://purl.uniprot.org/core/>\n\n# Query 12\n# Select all Rhea reactions used to annotate enzyme sequences in UniProtKB\n# return the number of UniProtKB entries\n# Federated query using a service to UniProt SPARQL endpoint\n#\n# This query corresponds to the Rhea website query:\n# https://www.rhea-db.org/rhea?query=uniprot:*\n#\nSELECT ?uniprotCount ?rhea ?accession ?equation \nWHERE {\n  SERVICE <https://sparql.uniprot.org/sparql> { \n  \tSELECT ?rhea (count(?uniprot) as ?uniprotCount) {\n      ?uniprot up:annotation/up:catalyticActivity/up:catalyzedReaction ?rhea . \n  \t}\n  \tGROUP BY ?rhea\n  }\n  ?rhea rh:accession ?accession .\n  ?rhea rh:equation ?equation .\n}",
    "target_endpoint": "https://sparql.rhea-db.org/sparql",
    "federates_with": [
      "https://sparql.uniprot.org/sparql"
    ],
    "endpoint_set": "Rhea",
    "file_path": "Rhea/12.ttl",
    "predicted_query": "# https://sparql.rhea-db.org/sparql\n# Federated query to retrieve Rhea reactions linked to protein sequences in UniProtKB\n\nPREFIX rhea: <http://rdf.rhea-db.org/>\nPREFIX uniprot: <http://purl.uniprot.org/core/>\nPREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>\n\nSELECT DISTINCT ?rheaReaction ?rheaId ?protein\nWHERE {\n  # Query Rhea for reactions\n  SERVICE <https://sparql.rhea-db.org/sparql> {\n    ?rheaReaction rdf:type rhea:Reaction .\n    ?rheaReaction rhea:id ?rheaId .\n  }\n\n  # Query UniProt for protein sequences linked to Rhea reactions via cross-references\n  SERVICE <https://sparql.uniprot.org/sparql> {\n    ?protein a uniprot:Protein .\n    ?protein uniprot:xref ?rheaReaction . # Assuming uniprot:xref links to Rhea reactions\n  }\n}",
    "predicted_endpoint": "https://sparql.rhea-db.org/sparql",
    "predicted_endpoint_equal_to_target_endpoint": true,
    "predicted_endpoint_in_federates_with": false,
    "predicted_endpoint_or_federated_endpoint": true,
    "run_id_langsmith": "bc807c37-39e7-4606-af22-a02d12bae338",
    "evaluation_timestamp": "2025-05-10T18:48:25.635532",
    "question_understanding_prompt_tokens": 257,
    "question_understanding_completion_tokens": 30,
    "question_understanding_total_tokens": 287,
    "sparql_query_construction_prompt_tokens": 2003,
    "sparql_query_construction_completion_tokens": 250,
    "sparql_query_construction_total_tokens": 2253,
    "is_valid_sparql": true,
    "sparql_syntax_error": "syntactically correct",
    "result_eval_f1_score": 0.0,
    "result_eval_precision": 0.0,
    "result_eval_recall": 0.0,
    "error_occured_at_endpoint": false,
    "predicted_query_result_is_empty": true,
    "ground_truth_query_result_is_empty": false,
    "error_occured_at_endpoint_message": "no error, but empty result"
  },
  {
    "resource": "https://sparql.rhea-db.org/.well-known/sparql-examples/112_Total_number_of_reaction_ec_protein_links",
    "natural_language_question": "Total number of <reaction> <ec> <protein> links",
    "ground_truth_query": "PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX rh:<http://rdf.rhea-db.org/>\nPREFIX ec:<http://purl.uniprot.org/enzyme/>\nPREFIX up:<http://purl.uniprot.org/core/>\n\nSELECT\n  (count(?reaction) as ?reactionEcProteinLinkCount)\nWHERE {\n  ?reaction rdfs:subClassOf rh:Reaction .\n  ?reaction rh:ec ?enzyme\n  SERVICE <http://sparql.uniprot.org/sparql> {\n    ?protein up:reviewed true .\n    ?protein up:enzyme ?enzyme.\n  }\n}",
    "target_endpoint": "https://sparql.rhea-db.org/sparql",
    "federates_with": [
      "http://sparql.uniprot.org/sparql"
    ],
    "endpoint_set": "Rhea",
    "file_path": "Rhea/112_Total_number_of_reaction_ec_protein_links.ttl",
    "predicted_query": "# https://sparql.rhea-db.org/sparql\n# Federated query to count the number of reactions, proteins, and EC number links.\nPREFIX rhea: <http://rdf.rhea-db.org/>\nPREFIX uniprot: <http://purl.uniprot.org/core/>\n\nSELECT (COUNT(DISTINCT ?reaction) AS ?reactionCount) (COUNT(DISTINCT ?protein) AS ?proteinCount) (COUNT(DISTINCT ?ec) AS ?ecCount)\nWHERE {\n  # Find reactions in RheaDB\n  ?reaction a rhea:Reaction .\n\n  # Find proteins associated with reactions via UniProt\n  SERVICE <https://sparql.uniprot.org/sparql> {\n    ?protein uniprot:encodedBy ?gene . # Assuming proteins are linked to genes\n    ?gene rdfs:seeAlso ?reaction . # Assuming genes have links to Rhea reactions\n    ?protein rdfs:seeAlso ?ec . # Assuming proteins have links to EC numbers\n  }\n}",
    "predicted_endpoint": "https://sparql.rhea-db.org/sparql",
    "predicted_endpoint_equal_to_target_endpoint": true,
    "predicted_endpoint_in_federates_with": false,
    "predicted_endpoint_or_federated_endpoint": true,
    "run_id_langsmith": "8c102e94-e6c3-49b8-bbea-436ee06c2ad1",
    "evaluation_timestamp": "2025-05-10T18:48:34.258870",
    "question_understanding_prompt_tokens": 248,
    "question_understanding_completion_tokens": 21,
    "question_understanding_total_tokens": 269,
    "sparql_query_construction_prompt_tokens": 2162,
    "sparql_query_construction_completion_tokens": 228,
    "sparql_query_construction_total_tokens": 2390,
    "is_valid_sparql": false,
    "sparql_syntax_error": "Line 14, column 11: Unresolved prefixed name: rdfs:seeAlso",
    "result_eval_f1_score": 0.0,
    "result_eval_precision": 0.0,
    "result_eval_recall": 0.0,
    "error_occured_at_endpoint": false,
    "predicted_query_result_is_empty": true,
    "ground_truth_query_result_is_empty": false,
    "error_occured_at_endpoint_message": "syntactically not correct"
  },
  {
    "resource": "https://sparql.rhea-db.org/.well-known/sparql-examples/19_draft_human_metabolome",
    "natural_language_question": "Generate a draft human metabolome",
    "ground_truth_query": "PREFIX chebislash: <http://purl.obolibrary.org/obo/chebi/>\nPREFIX rh: <http://rdf.rhea-db.org/>\nPREFIX taxon: <http://purl.uniprot.org/taxonomy/>\nPREFIX up: <http://purl.uniprot.org/core/>\n\nSELECT\n  ?uniprot ?mnemonic ?rhea ?chebi ?smiles ?inchiKey\nWHERE\n{\n  ?rhea rh:side/rh:contains/rh:compound ?compound .\n  ?compound (rh:chebi|(rh:reactivePart/rh:chebi)|(rh:underlyingChebi/rh:chebi)) ?chebi .\n  ?chebi chebislash:smiles ?smiles ;\n          chebislash:inchikey ?inchiKey .\n  SERVICE <https://sparql.uniprot.org/sparql> {\n     ?uniprot up:annotation/up:catalyticActivity/up:catalyzedReaction ?rhea ;\n                                             up:organism taxon:9606 ;\n                                             up:mnemonic ?mnemonic .\n\n   }\n}",
    "target_endpoint": "https://sparql.rhea-db.org/sparql/",
    "federates_with": [
      "https://sparql.uniprot.org/sparql"
    ],
    "endpoint_set": "Rhea",
    "file_path": "Rhea/19_draft_human_metabolome.ttl",
    "predicted_query": "# https://sparql.uniprot.org/sparql\n# This query is a draft and may not be fully executable due to the complexity of defining and querying the entire human metabolome across federated SPARQL endpoints.\n# It provides a starting point by querying UniProt for proteins associated with human and potentially involved in metabolic processes.\n# Further refinement and integration with other metabolome-specific databases (e.g., HMDB, ChEBI via Rhea) would be necessary for a comprehensive result.\n\nPREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX up: <http://purl.uniprot.org/core/>\nPREFIX taxon: <http://purl.uniprot.org/taxonomy/>\n\nSELECT DISTINCT ?protein ?proteinName ?gene ?organism\nWHERE {\n  # Query UniProt for proteins associated with Homo sapiens (Human)\n  SERVICE <https://sparql.uniprot.org/sparql> {\n    ?protein a up:Protein .\n    ?protein up:organism taxon:9606 .  # 9606 is the NCBI Taxonomy ID for Homo sapiens\n    ?protein rdfs:label ?proteinName .\n    ?protein up:encodedBy ?gene .\n    ?protein up:organism ?organism .\n    # Optional: Add filters or property paths to narrow down to proteins involved in metabolism\n    # This requires more specific knowledge of UniProt's ontology and annotation practices.\n    # Example (may not be accurate):\n    # ?protein up:classifiedWith <http://purl.uniprot.org/keywords/KW-0488> . # Metabolism keyword (example - may need refinement)\n  }\n  \n  # Potentially federate with Rhea to find reactions catalyzed by these proteins\n  # SERVICE <https://sparql.rhea-db.org/sparql> {\n  #   ?reaction rhea:equation ?equation .\n  #   ?reaction rhea:enzymes ?protein . # Assuming rhea:enzymes links to UniProt IDs\n  # }\n  \n  # Further federation with other databases (e.g., HMDB) would be needed to get a complete picture of the human metabolome.\n}",
    "predicted_endpoint": "https://sparql.uniprot.org/sparql",
    "predicted_endpoint_equal_to_target_endpoint": false,
    "predicted_endpoint_in_federates_with": true,
    "predicted_endpoint_or_federated_endpoint": true,
    "run_id_langsmith": "a43773bf-5f37-4730-8819-e3423b4f5e9f",
    "evaluation_timestamp": "2025-05-10T18:48:42.860776",
    "question_understanding_prompt_tokens": 243,
    "question_understanding_completion_tokens": 20,
    "question_understanding_total_tokens": 263,
    "sparql_query_construction_prompt_tokens": 1443,
    "sparql_query_construction_completion_tokens": 526,
    "sparql_query_construction_total_tokens": 1969,
    "is_valid_sparql": true,
    "sparql_syntax_error": "syntactically correct",
    "result_eval_f1_score": 0.0,
    "result_eval_precision": 0.0,
    "result_eval_recall": 0.0,
    "error_occured_at_endpoint": false,
    "predicted_query_result_is_empty": false,
    "ground_truth_query_result_is_empty": false,
    "error_occured_at_endpoint_message": "no error"
  },
  {
    "resource": "https://sparql.rhea-db.org/.well-known/sparql-examples/20_search_chemical_names_in_japanese",
    "natural_language_question": "Search for Chemical names starting in Japanese, translated to english using allie",
    "ground_truth_query": "PREFIX oboInOwl: <http://www.geneontology.org/formats/oboInOwl#>\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\n\nSELECT\n*\nWHERE {\nSERVICE <https://data.allie.dbcls.jp/sparql>{\n        ?x rdfs:label \"1,2,4-トリクロロベンゼン\"@ja ;\n            rdfs:label ?englishLabel .\n        FILTER(lang(?englishLabel) = \"en\")\n    }\n  BIND(STR(?englishLabel) AS ?englishLabelStr)\n  ?chebi rdfs:label|oboInOwl:hasSynonym ?englishLabelStr .\n}",
    "target_endpoint": "https://sparql.rhea-db.org/sparql/",
    "federates_with": [
      "https://data.allie.dbcls.jp/sparql"
    ],
    "endpoint_set": "Rhea",
    "file_path": "Rhea/20_search_chemical_names_in_japanese.ttl",
    "predicted_query": "# https://sparql.uniprot.org/sparql\n# Federated query to search for chemical names related to \"Japanese\" and translate them to English using ALLIE.\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX chebi: <http://purl.obolibrary.org/obo/CHEBI_>\n\nSELECT DISTINCT ?chemicalNameEn\nWHERE {\n  # Subquery to find ChEBI IDs related to \"Japanese\" chemicals.\n  SERVICE <https://sparql.rhea-db.org/sparql> {\n    SELECT DISTINCT ?chebiID WHERE {\n      ?reaction rdfs:comment ?comment .\n      FILTER (CONTAINS(LCASE(?comment), \"japanese\")) # Filter reactions related to \"Japanese\".\n      ?reaction rhea:has_participant ?participant .\n      ?participant chebi:CHEBI ?chebiID .\n    }\n  }\n\n  # Use the found ChEBI IDs to retrieve chemical names and translate them to English.\n  SERVICE <https://sparql.uniprot.org/sparql> {\n    BIND(IRI(CONCAT(\"http://purl.obolibrary.org/obo/CHEBI_\", ?chebiID)) AS ?chemical)\n    ?chemical rdfs:label ?chemicalName .\n    \n    # Attempt to translate the chemical name to English using ALLIE.\n    SERVICE <http://translator.allie.dbcls.jp/sparql> {\n      OPTIONAL {\n        ?translation a <http://purl.org/dbcls/allie/Translation> ;\n                     <http://purl.org/dbcls/allie/source> ?chemicalName ;\n                     <http://purl.org/dbcls/allie/target> ?chemicalNameEn .\n        FILTER (LANG(?chemicalNameEn) = \"en\")\n      }\n    }\n    FILTER (REGEX(?chemicalName, \"^Japanese\", \"i\")) # Filter chemical names starting with \"Japanese\" (case-insensitive).\n  }\n}",
    "predicted_endpoint": "https://sparql.uniprot.org/sparql",
    "predicted_endpoint_equal_to_target_endpoint": false,
    "predicted_endpoint_in_federates_with": false,
    "predicted_endpoint_or_federated_endpoint": false,
    "run_id_langsmith": "fa5c7cdc-b228-484d-a6ef-0ab339f0d380",
    "evaluation_timestamp": "2025-05-10T18:49:35.073828",
    "question_understanding_prompt_tokens": 253,
    "question_understanding_completion_tokens": 23,
    "question_understanding_total_tokens": 276,
    "sparql_query_construction_prompt_tokens": 1472,
    "sparql_query_construction_completion_tokens": 457,
    "sparql_query_construction_total_tokens": 1929,
    "is_valid_sparql": false,
    "sparql_syntax_error": "Line 13, column 17: Unresolved prefixed name: rhea:has_participant",
    "result_eval_f1_score": 0.0,
    "result_eval_precision": 0.0,
    "result_eval_recall": 0.0,
    "error_occured_at_endpoint": false,
    "predicted_query_result_is_empty": true,
    "ground_truth_query_result_is_empty": false,
    "error_occured_at_endpoint_message": "syntactically not correct"
  },
  {
    "resource": "https://sparql.rhea-db.org/.well-known/sparql-examples/117_Retrieve_parent_reactions_and_their_catalyzing_enzymes_for_a_metabolite_that_is_not_directly_involved_in_a_reaction",
    "natural_language_question": "Retrieve parent reactions (and their catalyzing enzymes) for a metabolite that is not directly involved in a reaction (ex: CHEBI:83137).",
    "ground_truth_query": "PREFIX CHEBI: <http://purl.obolibrary.org/obo/CHEBI_>\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX rh:<http://rdf.rhea-db.org/>\nPREFIX ec:<http://purl.uniprot.org/enzyme/>\nPREFIX up:<http://purl.uniprot.org/core/>\nPREFIX taxon:<http://purl.uniprot.org/taxonomy/>\nPREFIX keywords:<http://purl.uniprot.org/keywords/>\n\nSELECT\n  ?chebi\n  ?ecNumber\n  (count(?protein) as ?proteinCount)\n  ?reaction\n  ?equation\nWHERE {\n  ?reaction rdfs:subClassOf rh:Reaction .\n  ?reaction rh:status rh:Approved .\n  ?reaction rh:equation ?equation .\n  ?reaction rh:ec ?ecNumber .\n  ?reaction rh:side ?reactionSide .\n  ?reactionSide rh:contains ?participant .\n  ?participant rh:compound ?compound .\n  ?compound rh:chebi ?chebi .\n  CHEBI:83137 rdfs:subClassOf+ ?chebi.\n\n  SERVICE <https://sparql.uniprot.org/sparql> {\n  ?protein a up:Protein .\n  ?protein up:reviewed true .\n    {?protein up:enzyme ?ecNumber}\n  UNION\n    {?protein up:domain/up:enzyme ?ecNumber}\n  UNION\n    {?protein up:component/up:enzyme ?ecNumber} .\n  }\n} \nGROUP BY ?chebi ?ecNumber ?reaction ?equation",
    "target_endpoint": "https://sparql.rhea-db.org/sparql",
    "federates_with": [
      "https://sparql.uniprot.org/sparql"
    ],
    "endpoint_set": "Rhea",
    "file_path": "Rhea/117_Retrieve_parent_reactions_and_their_catalyzing_enzymes_for_a_metabolite_that_is_not_directly_involved_in_a_reaction.ttl",
    "predicted_query": "# https://sparql.rhea-db.org/sparql\n# Federated query to find parent reactions and catalyzing enzymes for a metabolite not directly involved in a reaction.\nPREFIX rhea: <http://rdf.rhea-db.org/>\nPREFIX chebi: <http://purl.obolibrary.org/obo/CHEBI_>\nPREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\n\nSELECT DISTINCT ?reaction ?reactionLabel ?enzyme ?enzymeLabel\nWHERE {\n  # Find reactions that have CHEBI:83137 as a participant\n  SERVICE <https://sparql.rhea-db.org/sparql> {\n    VALUES ?metabolite { chebi:83137 } # The metabolite of interest\n    ?reaction rhea: Rhea_has_participant ?metabolite .\n    ?reaction rdfs:label ?reactionLabel .\n  }\n  \n  # Optional: Find enzymes catalyzing the reaction.  This assumes a direct link between reaction and enzyme, which may not always exist.\n  OPTIONAL {\n    SERVICE <https://sparql.rhea-db.org/sparql> {\n      ?reaction rhea: Rhea_has_proteinequivalent ?enzyme .\n      ?enzyme rdfs:label ?enzymeLabel .\n    }\n  }\n}",
    "predicted_endpoint": "https://sparql.rhea-db.org/sparql",
    "predicted_endpoint_equal_to_target_endpoint": true,
    "predicted_endpoint_in_federates_with": false,
    "predicted_endpoint_or_federated_endpoint": true,
    "run_id_langsmith": "074ed9af-2f97-41a3-b3f9-e4733def2c09",
    "evaluation_timestamp": "2025-05-10T18:49:42.861475",
    "question_understanding_prompt_tokens": 272,
    "question_understanding_completion_tokens": 42,
    "question_understanding_total_tokens": 314,
    "sparql_query_construction_prompt_tokens": 2478,
    "sparql_query_construction_completion_tokens": 338,
    "sparql_query_construction_total_tokens": 2816,
    "is_valid_sparql": false,
    "sparql_syntax_error": "Lexical error at line 13, column 41.  Encountered: '32' (32), after prefix \"Rhea_has_participant\"",
    "result_eval_f1_score": 0.0,
    "result_eval_precision": 0.0,
    "result_eval_recall": 0.0,
    "error_occured_at_endpoint": false,
    "predicted_query_result_is_empty": true,
    "ground_truth_query_result_is_empty": false,
    "error_occured_at_endpoint_message": "syntactically not correct"
  },
  {
    "resource": "https://sparql.rhea-db.org/.well-known/sparql-examples/18",
    "natural_language_question": "Use <a href=\"https://idsm.elixir-czech.cz/sparql\">IDSM Sachem</a> to find ChEBIs with a a <a href=\"https://www.ebi.ac.uk/chebi/searchId.do?chebiId=CHEBI:35516\">Cholestane</a> skeleton (in SMILES). Then match returned ChEBIs to Rhea undirected reactions.",
    "ground_truth_query": "PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX rh: <http://rdf.rhea-db.org/>\nPREFIX sachem: <http://bioinfo.uochb.cas.cz/rdf/v1.0/sachem#>\n\n\nSELECT \n  ?rhea \n  ?chebi\nWHERE {\n  SERVICE <https://idsm.elixir-czech.cz/sparql/endpoint/chebi> {\n    ?chebi sachem:substructureSearch [\n        sachem:query \"[C@]12(CCC3CCCC[C@]3(C)[C@@]1([H])CC[C@]1(C)[C@@]([H])([C@@](C)([H])CCCC(C)C)CC[C@@]21[H])[H]\" ].\n  }\n  ?rhea rh:side/rh:contains/rh:compound/rdfs:subClassOf ?chebi .\n}",
    "target_endpoint": "https://sparql.rhea-db.org/sparql",
    "federates_with": [
      "https://idsm.elixir-czech.cz/sparql/endpoint/chebi"
    ],
    "endpoint_set": "Rhea",
    "file_path": "Rhea/18.ttl",
    "predicted_query": "# https://sparql.rhea-db.org/sparql\n# Federated SPARQL query to find ChEBIs with a Cholestane skeleton and match them to Rhea undirected reactions.\nPREFIX rhea: <http://rdf.rhea-db.org/>\nPREFIX chebi: <http://purl.obolibrary.org/obo/>\nPREFIX rhns: <http://rdf.rhea-db.org/namespace/>\n\nSELECT DISTINCT ?chebiEntity ?rheaReaction\nWHERE {\n  # Find ChEBI entities with a Cholestane skeleton using the ChEBI ID.\n  # This part queries the Rhea endpoint because it uses ChEBI.\n  SERVICE <https://sparql.rhea-db.org/sparql> {\n    VALUES ?cholestaneSkeleton { chebi:CHEBI_35516 } # The ChEBI ID for Cholestane skeleton\n\n    # Find ChEBI entities that are instances of the Cholestane skeleton.\n    ?chebiEntity chebi:is_a ?cholestaneSkeleton .\n\n    # Find Rhea undirected reactions that involve these ChEBI entities.\n    ?rheaReaction rhns:equation ?equation .\n    ?equation rhea:contains ?chebiEntity .\n  }\n}",
    "predicted_endpoint": "https://sparql.rhea-db.org/sparql",
    "predicted_endpoint_equal_to_target_endpoint": true,
    "predicted_endpoint_in_federates_with": false,
    "predicted_endpoint_or_federated_endpoint": true,
    "run_id_langsmith": "e0cca465-2622-4c7a-b38f-9bef154543c5",
    "evaluation_timestamp": "2025-05-10T18:49:53.828864",
    "question_understanding_prompt_tokens": 335,
    "question_understanding_completion_tokens": 52,
    "question_understanding_total_tokens": 387,
    "sparql_query_construction_prompt_tokens": 2561,
    "sparql_query_construction_completion_tokens": 287,
    "sparql_query_construction_total_tokens": 2848,
    "is_valid_sparql": true,
    "sparql_syntax_error": "syntactically correct",
    "result_eval_f1_score": 0.0,
    "result_eval_precision": 0.0,
    "result_eval_recall": 0.0,
    "error_occured_at_endpoint": true,
    "predicted_query_result_is_empty": true,
    "ground_truth_query_result_is_empty": true,
    "error_occured_at_endpoint_message": "QueryBadFormed: A bad request has been sent to the endpoint: probably the SPARQL query is badly formed."
  },
  {
    "resource": "https://sparql.rhea-db.org/.well-known/sparql-examples/115_Retrieve_the_set_of_metabolites_involved_in_reactions_catalyzed_by_human_genes_HUMAN_reference_proteome",
    "natural_language_question": "Retrieve the set of metabolites involved in reactions catalyzed by human genes (HUMAN reference proteome)",
    "ground_truth_query": "\nPREFIX rh:<http://rdf.rhea-db.org/>\nPREFIX taxon:<http://purl.uniprot.org/taxonomy/>\nPREFIX ec:<http://purl.uniprot.org/enzyme/>\nPREFIX rdfs:<http://www.w3.org/2000/01/rdf-schema#>\nPREFIX up:<http://purl.uniprot.org/core/>\nPREFIX keywords:<http://purl.uniprot.org/keywords/>\n\nSELECT\n  ?chebi\n  ?reaction\n  ?ecNumber\n  ?protein\n  ?ensemblTranscript\n  ?ensemblGene\nWHERE {\n  SERVICE <https://sparql.uniprot.org/sparql> {\n    ?protein a up:Protein .\n    ?protein up:reviewed true .\n    ?protein up:organism taxon:9606 .\n    ?protein up:classifiedWith keywords:1185 .\n\n    ?protein rdfs:seeAlso ?ensemblTranscript .\n    ?ensemblTranscript a up:Transcript_Resource .\n    ?ensemblTranscript up:database <http://purl.uniprot.org/database/Ensembl> .\n    ?ensemblTranscript up:transcribedFrom ?ensemblGene .\n\n      {?protein up:enzyme ?ecNumber .}\n    UNION\n      {?protein up:domain/up:enzyme ?ecNumber .}\n    UNION\n      {?protein up:component/up:enzyme ?ecNumber .}\n  }\n\n  ?reaction rdfs:subClassOf rh:Reaction .\n  ?reaction rh:status rh:Approved .\n  ?reaction rh:ec ?ecNumber .\n  ?reaction rh:side ?reactionSide .\n  ?reactionSide rh:contains ?participant .\n  ?participant rh:compound ?compound .\n  ?compound rh:chebi ?chebi . # only considering small molecules participants\n}",
    "target_endpoint": "https://sparql.rhea-db.org/sparql",
    "federates_with": [
      "https://sparql.uniprot.org/sparql"
    ],
    "endpoint_set": "Rhea",
    "file_path": "Rhea/115_Retrieve_the_set_of_metabolites_involved_in_reactions_catalyzed_by_human_genes_HUMAN_reference_proteome.ttl",
    "predicted_query": "# https://sparql.rhea-db.org/sparql\n# Federated SPARQL query to retrieve metabolites involved in reactions catalyzed by human genes.\nPREFIX rhea: <http://rdf.rhea-db.org/>\nPREFIX uniprot: <http://purl.uniprot.org/core/>\nPREFIX taxon: <http://purl.uniprot.org/taxonomy/>\nPREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>\nPREFIX chebi: <http://purl.obolibrary.org/obo/CHEBI_>\n\nSELECT DISTINCT ?metabolite\nWHERE {\n  # Find UniProt entries for human genes.\n  SERVICE <https://sparql.uniprot.org/sparql> {\n    SELECT DISTINCT ?protein ?gene\n    WHERE {\n      ?protein a uniprot:Protein .\n      ?protein uniprot:organism taxon:9606 .  # Human taxon.\n      ?protein uniprot:encodedBy ?gene .\n    }\n  }\n\n  # Find Rhea reactions associated with these UniProt entries (genes).\n  SERVICE <https://sparql.rhea-db.org/sparql> {\n    ?reaction rhea:enzyme ?gene .\n    ?reaction rhea:hasParticipant ?participant .\n    ?participant rdf:type chebi:CHEBI_24433 . #CHEBI_24433 is the class for chemical role of metabolite\n    ?participant rdfs:label ?metabolite .\n  }\n}",
    "predicted_endpoint": "https://sparql.rhea-db.org/sparql",
    "predicted_endpoint_equal_to_target_endpoint": true,
    "predicted_endpoint_in_federates_with": false,
    "predicted_endpoint_or_federated_endpoint": true,
    "run_id_langsmith": "9dae1ac9-7f94-4fd6-89e9-06aa56a34fe2",
    "evaluation_timestamp": "2025-05-10T18:50:03.853391",
    "question_understanding_prompt_tokens": 251,
    "question_understanding_completion_tokens": 25,
    "question_understanding_total_tokens": 276,
    "sparql_query_construction_prompt_tokens": 2393,
    "sparql_query_construction_completion_tokens": 349,
    "sparql_query_construction_total_tokens": 2742,
    "is_valid_sparql": false,
    "sparql_syntax_error": "Line 26, column 18: Unresolved prefixed name: rdfs:label",
    "result_eval_f1_score": 0.0,
    "result_eval_precision": 0.0,
    "result_eval_recall": 0.0,
    "error_occured_at_endpoint": false,
    "predicted_query_result_is_empty": true,
    "ground_truth_query_result_is_empty": false,
    "error_occured_at_endpoint_message": "syntactically not correct"
  }
]