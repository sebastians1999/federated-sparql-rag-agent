[
  {
    "resource": "https://sparql.swisslipids.org/.well-known/sparql-examples/16",
    "natural_language_question": "For a given lipid (SWISSLIPID:000399814, Ceramide), return a list of all enzymes in UniProtKB/Swiss-Prot annotated to catalyze reactions involving that lipid.\nThis query does not consider the hierarchy: it looks for reactions and enzymes only for the specified lipid.",
    "ground_truth_query": "PREFIX SWISSLIPID: <https://swisslipids.org/rdf/SLM_>\nPREFIX owl: <http://www.w3.org/2002/07/owl#>\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX rh: <http://rdf.rhea-db.org/>\nPREFIX up: <http://purl.uniprot.org/core/>\n\n# Example 16\nSELECT ?startId ?startName ?uniprot\nWHERE\n{\n  # SwissLipids query (list of) identifier(s)\n  VALUES ?startId { SWISSLIPID:000399814 }\n  # name\n  ?startId rdfs:label ?startName .\n  # ChEBI x-ref\n  ?startId owl:equivalentClass ?chebi .\n  # federated query to Rhea\n  SERVICE <https://sparql.rhea-db.org/sparql> {\n  \t?rhea rh:side/rh:contains/rh:compound/rh:chebi ?chebi .\n  }    \n  # federated query to UniProt\n  SERVICE <https://sparql.uniprot.org/sparql> {\n    ?uniprot up:reviewed true .\n    ?uniprot up:annotation/up:catalyticActivity/up:catalyzedReaction ?rhea .\n  }\n} \nORDER BY ?startId",
    "target_endpoint": "https://sparql.swisslipids.org/sparql/",
    "federates_with": [
      "https://sparql.uniprot.org/sparql",
      "https://sparql.rhea-db.org/sparql"
    ],
    "endpoint_set": "SwissLipids",
    "file_path": "SwissLipids/16.ttl",
    "predicted_query": "# https://sparql.uniprot.org/sparql\n# Return a list of all enzymes in UniProtKB/Swiss-Prot annotated to catalyze reactions involving a given lipid.\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX up: <http://purl.uniprot.org/core/>\nPREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>\nPREFIX chebi: <http://purl.obolibrary.org/obo/CHEBI_>\n\nSELECT DISTINCT ?enzyme ?enzymeName\nWHERE {\n  # Find reactions in SwissLipids involving the given lipid.\n  SERVICE <https://sparql.swisslipids.org/sparql/> {\n    # Define the lipid of interest.\n    BIND ( <http://identifiers.org/swisslipids:SWISSLIPID:000399814> AS ?lipid )\n    ?reaction sl:is_reaction_of ?lipid .\n  }\n  \n  # Find enzymes in UniProt that catalyze these reactions.\n  SERVICE <https://sparql.uniprot.org/sparql/> {\n    ?enzyme up:catalyticActivity ?reactionUri .\n    ?enzyme rdfs:label ?enzymeName .\n    \n    # Filter for UniProt entries (proteins).\n    ?enzyme rdf:type up:Protein .\n    \n    # Convert the SwissLipids reaction URI to a UniProt reaction URI (if possible).\n    BIND (IRI(REPLACE(STR(?reaction), \"https://www.swisslipids.org/rdf/reaction/\", \"http://purl.uniprot.org/rhea/\")) AS ?reactionUri)\n  }\n}",
    "predicted_endpoint": "https://sparql.uniprot.org/sparql",
    "predicted_endpoint_equal_to_target_endpoint": false,
    "predicted_endpoint_in_federates_with": true,
    "predicted_endpoint_or_federated_endpoint": true,
    "run_id_langsmith": "bb25a76f-9194-4472-8e8e-abd360b74b8e",
    "evaluation_timestamp": "2025-05-10T19:31:03.084235",
    "question_understanding_prompt_tokens": 306,
    "question_understanding_completion_tokens": 42,
    "question_understanding_total_tokens": 348,
    "sparql_query_construction_prompt_tokens": 2498,
    "sparql_query_construction_completion_tokens": 0,
    "sparql_query_construction_total_tokens": 2498,
    "is_valid_sparql": false,
    "sparql_syntax_error": "Line 14, column 15: Unresolved prefixed name: sl:is_reaction_of",
    "result_eval_f1_score": 0.0,
    "result_eval_precision": 0.0,
    "result_eval_recall": 0.0,
    "error_occured_at_endpoint": false,
    "predicted_query_result_is_empty": true,
    "ground_truth_query_result_is_empty": false,
    "error_occured_at_endpoint_message": "syntactically not correct"
  },
  {
    "resource": "https://sparql.swisslipids.org/.well-known/sparql-examples/6",
    "natural_language_question": "For a given lipid (SWISSLIPID:000399814, Ceramide), return a list of all corresponding reactions (Rhea IDs and equation), as well as their enzymes as annotated in UniProtKB/Swiss-Prot) enzymes themselves (ID and protein name).\nThis query does not consider the hierarchy: it looks for reactions and enzymes only for the specified lipid.",
    "ground_truth_query": "PREFIX SWISSLIPID: <https://swisslipids.org/rdf/SLM_>\nPREFIX owl: <http://www.w3.org/2002/07/owl#>\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX rh: <http://rdf.rhea-db.org/>\nPREFIX up: <http://purl.uniprot.org/core/>\n\n# Example 6\nSELECT ?startId ?startName ?chebi ?rhea ?rheaEquation ?uniprot ?uniprotName\nWHERE\n{\n  # SwissLipids query (list of) identifier(s)\n  VALUES ?startId { SWISSLIPID:000399814 }\n  # name\n  ?startId rdfs:label ?startName .\n  # ChEBI x-ref\n  ?startId owl:equivalentClass ?chebi .\n  # federated query to Rhea\n  SERVICE <https://sparql.rhea-db.org/sparql> {\n  \t?rhea rh:equation ?rheaEquation .\n  \t?rhea rh:side/rh:contains/rh:compound/rh:chebi ?chebi .\n  }    \n  # federated query to UniProt\n  SERVICE <https://sparql.uniprot.org/sparql> {\n    ?uniprot up:reviewed true .\n    ?uniprot up:recommendedName/up:fullName ?uniprotName .\n    ?uniprot up:annotation/up:catalyticActivity/up:catalyzedReaction ?rhea .\n  }\n} \nORDER BY ?startId",
    "target_endpoint": "https://sparql.swisslipids.org/sparql/",
    "federates_with": [
      "https://sparql.uniprot.org/sparql",
      "https://sparql.rhea-db.org/sparql"
    ],
    "endpoint_set": "SwissLipids",
    "file_path": "SwissLipids/6.ttl",
    "predicted_query": "# https://sparql.swisslipids.org/sparql/\n# Federated SPARQL query to find reactions and enzymes associated with a specific lipid (SWISSLIPID:000399814, Ceramide).\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>\nPREFIX sl: <http://www.swisslipids.org/rdf#>\n\nSELECT DISTINCT ?rheaID ?equation ?uniprotID ?proteinName\nWHERE {\n  # Find reactions associated with the given lipid in SwissLipids\n  SERVICE <https://sparql.swisslipids.org/sparql/> {\n    VALUES ?lipid { <http://www.swisslipids.org/rdf/SWISSLIPID:000399814> } # SWISSLIPID:000399814 (Ceramide)\n    ?reaction sl:refersToLipid ?lipid .\n    ?reaction a sl:Reaction .\n    ?reaction rdfs:seeAlso ?rheaID . # Get Rhea ID\n  }\n\n  # Get the equation for each Rhea reaction\n  SERVICE <https://sparql.rhea-db.org/sparql> {\n    ?rheaID rdfs:label ?equation . # Reaction equation\n    FILTER (STRSTARTS(STR(?rheaID), \"http://rdf.rhea-db.org/\")) # Ensure it's a Rhea ID\n  }\n\n  # Find enzymes associated with the reactions in UniProt\n  SERVICE <https://sparql.uniprot.org/sparql> {\n    ?uniprotID rdfs:seeAlso ?rheaID . # UniProt ID linked to Rhea ID\n    ?uniprotID rdf:type <http://purl.uniprot.org/core/Protein> . # Ensure it's a protein\n    ?uniprotID rdfs:label ?proteinName . # Protein name\n  }\n}",
    "predicted_endpoint": "https://sparql.swisslipids.org/sparql/",
    "predicted_endpoint_equal_to_target_endpoint": true,
    "predicted_endpoint_in_federates_with": false,
    "predicted_endpoint_or_federated_endpoint": true,
    "run_id_langsmith": "c7adecc8-cc58-4349-ae38-628f19e64f99",
    "evaluation_timestamp": "2025-05-10T19:31:12.420468",
    "question_understanding_prompt_tokens": 320,
    "question_understanding_completion_tokens": 89,
    "question_understanding_total_tokens": 409,
    "sparql_query_construction_prompt_tokens": 3322,
    "sparql_query_construction_completion_tokens": 467,
    "sparql_query_construction_total_tokens": 3789,
    "is_valid_sparql": true,
    "sparql_syntax_error": "syntactically correct",
    "result_eval_f1_score": 0.0,
    "result_eval_precision": 0.0,
    "result_eval_recall": 0.0,
    "error_occured_at_endpoint": true,
    "predicted_query_result_is_empty": true,
    "ground_truth_query_result_is_empty": true,
    "error_occured_at_endpoint_message": "QueryBadFormed: A bad request has been sent to the endpoint: probably the SPARQL query is badly formed."
  },
  {
    "resource": "https://sparql.swisslipids.org/.well-known/sparql-examples/5",
    "natural_language_question": "For a given lipid (SWISSLIPID:000399814, Ceramide), return a list of all corresponding reactions (Rhea IDs and equation).\nThis query does consider the hierarchy: it looks for reactions involving the specified lipid and/or its more specific forms.",
    "ground_truth_query": "PREFIX SWISSLIPID: <https://swisslipids.org/rdf/SLM_>\nPREFIX owl: <http://www.w3.org/2002/07/owl#>\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX rh: <http://rdf.rhea-db.org/>\n\n# Example 5\nSELECT ?startId ?startName ?id ?name ?chebi ?rhea ?rheaEquation \nWHERE\n{\n  # SwissLipids query (list of) identifier(s)\n  VALUES ?startId { SWISSLIPID:000399814 }\n  # name\n  ?startId rdfs:label ?startName .\n  # Retrieve children lipids \n  ?id rdfs:subClassOf* ?startId .\n  ?id rdfs:label ?name .\n  # ChEBI x-ref\n  ?id owl:equivalentClass ?chebi .\n  # federated query to Rhea\n  SERVICE <https://sparql.rhea-db.org/sparql> {\n  \t?rhea rh:equation ?rheaEquation .\n  \t?rhea rh:side/rh:contains/rh:compound/rh:chebi ?chebi .\n  }    \n} \nORDER BY  ?startId ?id",
    "target_endpoint": "https://sparql.swisslipids.org/sparql/",
    "federates_with": [
      "https://sparql.rhea-db.org/sparql"
    ],
    "endpoint_set": "SwissLipids",
    "file_path": "SwissLipids/5.ttl",
    "predicted_query": "# https://sparql.swisslipids.org/sparql/\n# Federated query to retrieve Rhea reactions associated with a given lipid (SWISSLIPID:000399814, Ceramide) and its child concepts.\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>\nPREFIX sl: <http://www.swisslipids.org/rdf#>\nPREFIX chebi: <http://purl.obolibrary.org/obo/CHEBI_>\n\nSELECT DISTINCT ?rheaId ?equation\nWHERE {\n  # Find the lipid and its child concepts in SwissLipids\n  {\n    # Get the specified lipid\n    VALUES ?lipid { <http://www.swisslipids.org/rdf/SWISSLIPID:000399814> }\n    ?lipid rdfs:label ?lipidLabel .\n  }\n  UNION\n  {\n    #Alternatively, get the ceramide from CHEBI\n    VALUES ?chebiEntity { chebi:CHEBI_17761 } #Ceramide CHEBI ID\n    # Find lipids in SwissLipids that are related to the ChEBI entity\n    ?lipid sl:related_to ?chebiEntity .\n    ?lipid rdfs:label ?lipidLabel .\n  }\n\n  # Find reactions in Rhea that involve the lipid or its child concepts\n  SERVICE <https://sparql.rhea-db.org/sparql> {\n    ?rheaId rdfs:label ?equation .\n    ?rheaId rdfs:comment ?comment .\n    FILTER (CONTAINS(LCASE(?comment), LCASE(?lipidLabel)))\n  }\n}",
    "predicted_endpoint": "https://sparql.swisslipids.org/sparql/",
    "predicted_endpoint_equal_to_target_endpoint": true,
    "predicted_endpoint_in_federates_with": false,
    "predicted_endpoint_or_federated_endpoint": true,
    "run_id_langsmith": "5bcb9efc-c3c0-430d-8134-97f85276fc29",
    "evaluation_timestamp": "2025-05-10T19:31:24.045971",
    "question_understanding_prompt_tokens": 298,
    "question_understanding_completion_tokens": 65,
    "question_understanding_total_tokens": 363,
    "sparql_query_construction_prompt_tokens": 2458,
    "sparql_query_construction_completion_tokens": 412,
    "sparql_query_construction_total_tokens": 2870,
    "is_valid_sparql": true,
    "sparql_syntax_error": "syntactically correct",
    "result_eval_f1_score": 0.0,
    "result_eval_precision": 0.0,
    "result_eval_recall": 0.0,
    "error_occured_at_endpoint": false,
    "predicted_query_result_is_empty": true,
    "ground_truth_query_result_is_empty": false,
    "error_occured_at_endpoint_message": "no error, but empty result"
  },
  {
    "resource": "https://sparql.swisslipids.org/.well-known/sparql-examples/34",
    "natural_language_question": "Lipids affected by human enzymes",
    "ground_truth_query": "PREFIX owl: <http://www.w3.org/2002/07/owl#>\nPREFIX rh: <http://rdf.rhea-db.org/>\nPREFIX taxon: <http://purl.uniprot.org/taxonomy/>\nPREFIX up: <http://purl.uniprot.org/core/>\n\nSELECT ?swisslipid  {\n  ?swisslipid owl:equivalentClass ?chebi .\n  SERVICE <https://sparql.rhea-db.org/sparql> {\n    ?rhea rh:side/rh:contains/rh:compound ?compound .\n\t?compound (rh:chebi|(rh:reactivePart/rh:chebi)|(rh:underlyingChebi/rh:chebi)) ?metabolite . \n  }\n  SERVICE <https://sparql.uniprot.org/sparql> {\n    ?catalyticActivityAnnotation up:catalyticActivity/up:catalyzedReaction ?rhea .\n    ?protein up:annotation ?catalyticActivityAnnotation ;\n             up:organism taxon:9606 .\n  }\n}\nLIMIT 1",
    "target_endpoint": "https://sparql.swisslipids.org/sparql/",
    "federates_with": [
      "https://sparql.uniprot.org/sparql",
      "https://sparql.rhea-db.org/sparql"
    ],
    "endpoint_set": "SwissLipids",
    "file_path": "SwissLipids/34.ttl",
    "predicted_query": "# https://sparql.swisslipids.org/sparql/\n# Federated query to find lipids affected by human enzymes, using SwissLipids and UniProt.\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX sl: <http://swisslipids.org/rdf#>\nPREFIX up: <http://purl.uniprot.org/core/>\n\nSELECT DISTINCT ?lipidName ?enzymeName\nWHERE {\n  # Query SwissLipids for lipids and their associated enzymes\n  SERVICE <https://sparql.swisslipids.org/sparql/> {\n    ?lipid a sl:Lipid .\n    ?lipid rdfs:label ?lipidName .\n    ?reaction sl:reactionOf ?lipid .\n    ?enzyme sl:catalyzes ?reaction .\n    ?enzyme rdfs:label ?enzymeName .\n  }\n  \n  # Filter for human enzymes using UniProt\n  SERVICE <https://sparql.uniprot.org/sparql/> {\n    ?enzyme up:annotation ?annotation .\n    ?annotation a up:Taxon .\n    ?annotation rdfs:label \"Homo sapiens\" . # Filter for human proteins\n  }\n}",
    "predicted_endpoint": "https://sparql.swisslipids.org/sparql/",
    "predicted_endpoint_equal_to_target_endpoint": true,
    "predicted_endpoint_in_federates_with": false,
    "predicted_endpoint_or_federated_endpoint": true,
    "run_id_langsmith": "bb05c15c-2767-4243-b152-d23b36a89023",
    "evaluation_timestamp": "2025-05-10T19:31:32.130420",
    "question_understanding_prompt_tokens": 246,
    "question_understanding_completion_tokens": 20,
    "question_understanding_total_tokens": 266,
    "sparql_query_construction_prompt_tokens": 1906,
    "sparql_query_construction_completion_tokens": 271,
    "sparql_query_construction_total_tokens": 2177,
    "is_valid_sparql": true,
    "sparql_syntax_error": "syntactically correct",
    "result_eval_f1_score": 0.0,
    "result_eval_precision": 0.0,
    "result_eval_recall": 0.0,
    "error_occured_at_endpoint": false,
    "predicted_query_result_is_empty": true,
    "ground_truth_query_result_is_empty": false,
    "error_occured_at_endpoint_message": "no error, but empty result"
  },
  {
    "resource": "https://sparql.uniprot.org/.well-known/sparql-examples/118_biosodafrontend_rat_brain_human_cancer",
    "natural_language_question": "What are the Homo sapiens genes associated with cancer and their orthologs expressed in the Rattus norvegicus brain?",
    "ground_truth_query": "PREFIX up:<http://purl.uniprot.org/core/>\nPREFIX taxon:<http://purl.uniprot.org/taxonomy/>\nPREFIX rdfs:<http://www.w3.org/2000/01/rdf-schema#>\nPREFIX orth:<http://purl.org/net/orth#>\nPREFIX dcterms:<http://purl.org/dc/terms/>\nPREFIX obo:<http://purl.obolibrary.org/obo/>\nPREFIX lscr:<http://purl.org/lscr#>\nPREFIX genex:<http://purl.org/genex#>\nPREFIX sio: <http://semanticscience.org/resource/>\nSELECT ?gene ?orthologous_protein2 WHERE {\n  {\n    SELECT ?protein1 WHERE {\n      ?protein1 a up:Protein;\n        up:organism/up:scientificName 'Homo sapiens' ;\n        up:annotation ?annotation .\n      ?annotation rdfs:comment ?annotation_text.\n      ?annotation a up:Disease_Annotation .\n      FILTER CONTAINS (?annotation_text, \"cancer\")\n    }\n  }\n  SERVICE <https://sparql.omabrowser.org/sparql/> {\n    SELECT ?orthologous_protein2 ?protein1 ?gene WHERE {\n      ?protein_OMA a orth:Protein .\n      ?orthologous_protein2 a orth:Protein .\n      ?cluster a orth:OrthologsCluster .\n      ?cluster orth:hasHomologousMember ?node1 .\n      ?cluster orth:hasHomologousMember ?node2 .\n      ?node2 orth:hasHomologousMember* ?protein_OMA .\n      ?node1 orth:hasHomologousMember* ?orthologous_protein2 \n      .?orthologous_protein2 orth:organism/obo:RO_0002162/up:scientificName 'Rattus norvegicus' .\n      ?orthologous_protein2 sio:SIO_010079 ?gene .\n      ?protein_OMA lscr:xrefUniprot ?protein1 .\n      FILTER(?node1 != ?node2)\n    }\n  }\n  SERVICE <https://www.bgee.org/sparql/> {\n    ?gene genex:isExpressedIn ?anatEntity .\n    ?anatEntity rdfs:label 'brain' .\n    ?gene orth:organism ?org . \n    ?org obo:RO_0002162 taxon:10116 .\n  }\n}",
    "target_endpoint": "https://sparql.uniprot.org/sparql",
    "federates_with": [
      "https://sparql.omabrowser.org/sparql/",
      "https://www.bgee.org/sparql/"
    ],
    "endpoint_set": "Uniprot",
    "file_path": "UniProt/118_biosodafrontend_rat_brain_human_cancer.ttl",
    "predicted_query": "# https://sparql.uniprot.org/sparql\n# Prefix declarations for commonly used namespaces\nPREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX up: <http://purl.uniprot.org/core/>\nPREFIX taxon: <http://purl.uniprot.org/taxonomy/>\nPREFIX uniprot: <http://purl.uniprot.org/uniprot/>\n\n# Select the gene names and their corresponding orthologs\nSELECT DISTINCT ?geneName ?orthologName\nWHERE {\n  # Subquery to find human genes associated with cancer\n  {\n    SELECT DISTINCT ?gene\n    WHERE {\n      # Find UniProt entries for Homo sapiens\n      ?gene a up:Protein ;\n            up:organism taxon:9606 . # Homo sapiens\n\n      # Find diseases associated with the gene (linking to cancer)\n      ?gene up:annotation ?diseaseAnnotation .\n      ?diseaseAnnotation a up:Disease_Annotation ;\n                           up:disease uniprot:2602 . # Breast cancer.  Could expand to other cancers.\n\n      # Filter for reviewed UniProt entries (Swiss-Prot)\n      ?gene up:reviewed \"true\"^^xsd:boolean .\n    }\n  }\n\n  # Find orthologs of the human gene in Rattus norvegicus\n  ?gene up:ortholog ?ortholog .\n  ?ortholog a up:Protein ;\n            up:organism taxon:10116 . # Rattus norvegicus\n\n  # Get the gene name for the human gene\n  ?gene rdfs:label ?geneName .\n\n  # Get the gene name for the rat ortholog\n  ?ortholog rdfs:label ?orthologName .\n\n  # SERVICE clause to query an external SPARQL endpoint (e.g., for brain expression data).\n  # Assuming there's a hypothetical endpoint with brain expression data.\n  # This part is speculative and requires a real endpoint and appropriate properties.\n  # SERVICE <http://example.org/sparql> {\n  #   ?ortholog <http://example.org/vocab/expressedIn> ?brainRegion .\n  #   ?brainRegion rdfs:label \"brain\" .\n  # }\n  # Filter orthologs expressed in brain.  This requires an external service with expression data.\n  # Since no such service is provided, this part is commented out.\n}",
    "predicted_endpoint": "https://sparql.uniprot.org/sparql",
    "predicted_endpoint_equal_to_target_endpoint": true,
    "predicted_endpoint_in_federates_with": false,
    "predicted_endpoint_or_federated_endpoint": true,
    "run_id_langsmith": "2dc37110-efec-470c-ada8-84c9607c9499",
    "evaluation_timestamp": "2025-05-10T19:31:51.407898",
    "question_understanding_prompt_tokens": 263,
    "question_understanding_completion_tokens": 47,
    "question_understanding_total_tokens": 310,
    "sparql_query_construction_prompt_tokens": 2704,
    "sparql_query_construction_completion_tokens": 0,
    "sparql_query_construction_total_tokens": 2704,
    "is_valid_sparql": false,
    "sparql_syntax_error": "Line 26, column 33: Unresolved prefixed name: xsd:boolean",
    "result_eval_f1_score": 0.0,
    "result_eval_precision": 0.0,
    "result_eval_recall": 0.0,
    "error_occured_at_endpoint": false,
    "predicted_query_result_is_empty": true,
    "ground_truth_query_result_is_empty": false,
    "error_occured_at_endpoint_message": "syntactically not correct"
  },
  {
    "resource": "https://sparql.uniprot.org/.well-known/sparql-examples/51",
    "natural_language_question": "Find all proteins linked to arachidonate (CHEBI:32395)",
    "ground_truth_query": "PREFIX CHEBI: <http://purl.obolibrary.org/obo/CHEBI_>\nPREFIX rh: <http://rdf.rhea-db.org/>\nPREFIX skos: <http://www.w3.org/2004/02/skos/core#>\nPREFIX up: <http://purl.uniprot.org/core/>\n\n\nSELECT \n    DISTINCT\n        ?uniprot\n        ?uniprotID\n        ?recname\n        ?gene\n        ?chebi\n        ?uniprotName\nWHERE {\n  SERVICE <https://sparql.rhea-db.org/sparql> {\n     VALUES (?chebi) { (CHEBI:32395) }\n     ?rhea rh:side/rh:contains/rh:compound ?compound .\n     ?compound rh:chebi ?chebi .\n     ?chebi up:name ?uniprotName .\n  }\n  ?uniprot up:annotation/up:catalyticActivity/up:catalyzedReaction ?rhea .\n  ?uniprot up:mnemonic ?uniprotID .\n  ?uniprot up:recommendedName/up:fullName ?recname .\n  OPTIONAL {?uniprot up:encodedBy/skos:prefLabel ?gene .}\n}",
    "target_endpoint": "https://sparql.uniprot.org/sparql/",
    "federates_with": [
      "https://sparql.rhea-db.org/sparql"
    ],
    "endpoint_set": "Uniprot",
    "file_path": "UniProt/51_all_proteins_linked_to_arachidonate.ttl",
    "predicted_query": "# https://sparql.uniprot.org/sparql\n# Prefixes for commonly used ontologies\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX up: <http://purl.uniprot.org/core/>\nPREFIX chebi: <http://purl.obolibrary.org/obo/>\n\n# Select the protein identifiers and names\nSELECT DISTINCT ?protein ?proteinName\nWHERE {\n  # Use the UniProt SPARQL endpoint\n  SERVICE <https://sparql.uniprot.org/sparql> {\n    # Find proteins that are associated with arachidonate (CHEBI:32395)\n    ?protein a up:Protein .\n    ?protein rdfs:label ?proteinName .\n    ?protein up:classifiedWith chebi:CHEBI_32395 . # Link to arachidonate in ChEBI\n  }\n}",
    "predicted_endpoint": "https://sparql.uniprot.org/sparql",
    "predicted_endpoint_equal_to_target_endpoint": true,
    "predicted_endpoint_in_federates_with": false,
    "predicted_endpoint_or_federated_endpoint": true,
    "run_id_langsmith": "60bf968f-658a-4396-8306-0c138271654e",
    "evaluation_timestamp": "2025-05-10T19:31:58.706184",
    "question_understanding_prompt_tokens": 256,
    "question_understanding_completion_tokens": 31,
    "question_understanding_total_tokens": 287,
    "sparql_query_construction_prompt_tokens": 1975,
    "sparql_query_construction_completion_tokens": 0,
    "sparql_query_construction_total_tokens": 1975,
    "is_valid_sparql": true,
    "sparql_syntax_error": "syntactically correct",
    "result_eval_f1_score": 0.0,
    "result_eval_precision": 0.0,
    "result_eval_recall": 0.0,
    "error_occured_at_endpoint": false,
    "predicted_query_result_is_empty": true,
    "ground_truth_query_result_is_empty": false,
    "error_occured_at_endpoint_message": "no error, but empty result"
  },
  {
    "resource": "https://sparql.uniprot.org/.well-known/sparql-examples/40",
    "natural_language_question": "Retrieve human enzymes that metabolize sphingolipids and are annotated in ChEMBL",
    "ground_truth_query": "PREFIX CHEBI: <http://purl.obolibrary.org/obo/CHEBI_>\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX rh: <http://rdf.rhea-db.org/>\nPREFIX taxon: <http://purl.uniprot.org/taxonomy/>\nPREFIX up: <http://purl.uniprot.org/core/>\n\nSELECT DISTINCT ?protein ?chemblEntry\nWHERE {\n  SERVICE <https://sparql.rhea-db.org/sparql> {\n    ?rhea rdfs:subClassOf rh:Reaction ;\n      rh:side/rh:contains/rh:compound/rh:chebi/rdfs:subClassOf+ CHEBI:26739 .\n  }\n  ?ca up:catalyzedReaction ?rhea .\n  ?protein up:annotation/up:catalyticActivity ?ca ;\n    up:organism taxon:9606 ;\n    rdfs:seeAlso ?chemblEntry .\n  ?chemblEntry up:database <http://purl.uniprot.org/database/ChEMBL> .\n}\nLIMIT 10",
    "target_endpoint": "https://sparql.uniprot.org/sparql/",
    "federates_with": [
      "https://sparql.rhea-db.org/sparql"
    ],
    "endpoint_set": "Uniprot",
    "file_path": "UniProt/40_human_enzymes_that_metabolize_sphingolipids.ttl",
    "predicted_query": "# https://sparql.uniprot.org/sparql\n# Federated SPARQL query to retrieve human enzymes that metabolize sphingolipids and are annotated in ChEMBL.\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX up: <http://purl.uniprot.org/core/>\nPREFIX taxon: <http://purl.uniprot.org/taxonomy/>\nPREFIX chebi: <http://purl.obolibrary.org/obo/CHEBI_>\n\nSELECT DISTINCT ?enzymeName ?enzymeAccession\nWHERE {\n  # Find human enzymes in UniProt\n  SERVICE <https://sparql.uniprot.org/sparql> {\n    ?enzyme a up:Protein .\n    ?enzyme up:organism taxon:9606 .  # Filter for Homo sapiens (human)\n    ?enzyme rdfs:label ?enzymeName .\n    ?enzyme up:accession ?enzymeAccession .\n    # Filter for enzymes that are involved in sphingolipid metabolism.  This is a broad filter and may need refinement.\n    # This assumes that UniProt has annotations linking enzymes to sphingolipid metabolism.\n    ?enzyme up:annotation ?annotation .\n    ?annotation rdfs:label ?annotationLabel .\n    FILTER (CONTAINS(LCASE(?annotationLabel), \"sphingolipid\"))\n  }\n  \n  # Further filter enzymes based on ChEMBL annotation.\n  # This part requires a SPARQL endpoint that links UniProt and ChEMBL.\n  # Since there is no direct ChEMBL endpoint provided, we will assume a hypothetical endpoint\n  # that contains links between UniProt accessions and ChEMBL identifiers.\n  # SERVICE <hypothetical_chembl_uniprot_endpoint> {\n  #   ?chemblEntity a <ChEMBL_Entity_Type> . # Replace with the actual ChEMBL entity type\n  #   ?chemblEntity <uniprot_accession_property> ?enzymeAccession . # Replace with the actual property linking to UniProt\n  # }\n  \n  # Placeholder for ChEMBL annotation check.  This needs to be replaced with a real service call.\n  # FILTER EXISTS {\n  #   SERVICE <hypothetical_chembl_uniprot_endpoint> {\n  #     ?chemblEntity a <ChEMBL_Entity_Type> .\n  #     ?chemblEntity <uniprot_accession_property> ?enzymeAccession .\n  #   }\n  # }\n}",
    "predicted_endpoint": "https://sparql.uniprot.org/sparql",
    "predicted_endpoint_equal_to_target_endpoint": true,
    "predicted_endpoint_in_federates_with": false,
    "predicted_endpoint_or_federated_endpoint": true,
    "run_id_langsmith": "3c0c90f9-ea16-4e70-a2da-035da1bf336e",
    "evaluation_timestamp": "2025-05-10T19:32:09.225488",
    "question_understanding_prompt_tokens": 252,
    "question_understanding_completion_tokens": 33,
    "question_understanding_total_tokens": 285,
    "sparql_query_construction_prompt_tokens": 2033,
    "sparql_query_construction_completion_tokens": 0,
    "sparql_query_construction_total_tokens": 2033,
    "is_valid_sparql": true,
    "sparql_syntax_error": "syntactically correct",
    "result_eval_f1_score": 0.0,
    "result_eval_precision": 0.0,
    "result_eval_recall": 0.0,
    "error_occured_at_endpoint": false,
    "predicted_query_result_is_empty": true,
    "ground_truth_query_result_is_empty": false,
    "error_occured_at_endpoint_message": "no error, but empty result"
  },
  {
    "resource": "https://sparql.uniprot.org/.well-known/sparql-examples/49",
    "natural_language_question": "Retrieve the UniProtKB proteins, their catalyzed Rhea reactions, their encoding genes (Ensembl) and the anatomic entities where the genes are expressed (UBERON anatomic entites from Bgee expression data resource).",
    "ground_truth_query": "PREFIX CHEBI: <http://purl.obolibrary.org/obo/CHEBI_>\nPREFIX genex: <http://purl.org/genex#>\nPREFIX lscr: <http://purl.org/lscr#>\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX rh: <http://rdf.rhea-db.org/>\nPREFIX taxon: <http://purl.uniprot.org/taxonomy/>\nPREFIX up: <http://purl.uniprot.org/core/>\n\nSELECT DISTINCT ?protein ?ensemblGene ?reaction ?anatomicEntityLabel ?anatomicEntity\nWHERE {\n  # federated query to Rhea enadpoint\n  {\n    SELECT DISTINCT ?reaction WHERE {\n      SERVICE <https://sparql.rhea-db.org/sparql> {\n        ?reaction rdfs:subClassOf rh:Reaction ;\n          rh:equation ?reactionEquation ;\n          rh:side ?reactionSide .\n        ?reactionSide rh:contains ?participant .\n        ?participant rh:compound ?compound .\n        # compound constraint (CHEBI:16113 == cholesterol)\n        ?compound rh:chebi CHEBI:16113 .\n      }\n    }\n  }\n  # taxonomy constraint (taxon:9606 == Homo sapiens)\n  ?protein up:organism taxon:9606 ;\n    up:annotation ?a ;\n    rdfs:seeAlso / up:transcribedFrom ?ensemblGene .\n  ?a a up:Catalytic_Activity_Annotation ;\n    up:catalyticActivity ?ca .\n  ?ca up:catalyzedReaction ?reaction .\n  # federated query to Bgee (expression data)\n  BIND(IRI(REPLACE(STR(?ensemblGene), \"\\\\.[0-9]+$\", \"\")) AS ?ensemblGeneNoVersion)\n  SERVICE <https://www.bgee.org/sparql/> {\n    ?gene lscr:xrefEnsemblGene ?ensemblGeneNoVersion ;\n      genex:isExpressedIn ?anatomicEntity .\n    ?anatomicEntity rdfs:label ?anatomicEntityLabel .\n  }\n}",
    "target_endpoint": "https://sparql.uniprot.org/sparql/",
    "federates_with": [
      "https://sparql.rhea-db.org/sparql",
      "https://www.bgee.org/sparql/"
    ],
    "endpoint_set": "Uniprot",
    "file_path": "UniProt/49_tissues_where_genes_metabolizing_cholestrol_are_expressed.ttl",
    "predicted_query": "# https://sparql.uniprot.org/sparql\n# Prefixes for commonly used namespaces\nPREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX up: <http://purl.uniprot.org/core/>\nPREFIX taxon: <http://purl.uniprot.org/taxonomy/>\nPREFIX rhea: <http://rdf.rhea-db.org/>\n\n# Query to retrieve UniProtKB proteins and their associated Rhea reactions\nSELECT DISTINCT ?protein ?proteinName ?gene ?geneName ?reaction ?reactionName ?anatomicalEntity ?anatomicalEntityName\nWHERE {\n  # Retrieve UniProtKB proteins\n  SERVICE <https://sparql.uniprot.org/sparql> {\n    ?protein a up:Protein .\n    ?protein rdfs:label ?proteinName .\n    # Optionally link to Ensembl gene identifiers\n    OPTIONAL { ?protein up:encodedBy ?gene . }\n  }\n  \n  # Retrieve Rhea reactions catalyzed by the proteins\n  SERVICE <https://sparql.rhea-db.org/sparql> {\n    ?reaction rhea:equation ?reactionName .\n    ?reaction rhea:participants ?protein . # Assuming proteins are participants in Rhea reactions\n  }\n  \n  # Retrieve Ensembl gene names\n  SERVICE <https://sparql.uniprot.org/sparql> {\n    OPTIONAL {\n      ?gene rdfs:label ?geneName .\n    }\n  }\n  \n  # Retrieve anatomical entities where the genes are expressed from Bgee\n  # This part requires a Bgee SPARQL endpoint. Since it's not provided, we'll use a placeholder.\n  # Replace <BGEE_SPARQL_ENDPOINT> with the actual Bgee SPARQL endpoint if available.\n  # Also, the properties used to link genes to anatomical entities might need adjustment based on the Bgee schema.\n  SERVICE <https://sparql.uniprot.org/sparql> {\n    OPTIONAL {\n      ?gene up:expression ?expressionData . # Assuming there's an expression property in UniProt\n      ?expressionData up:anatomicalEntity ?anatomicalEntity .\n    }\n  }\n  \n  # Retrieve anatomical entity names (UBERON)\n  SERVICE <https://sparql.uniprot.org/sparql> {\n    OPTIONAL {\n      ?anatomicalEntity rdfs:label ?anatomicalEntityName .\n    }\n  }\n}",
    "predicted_endpoint": "https://sparql.uniprot.org/sparql",
    "predicted_endpoint_equal_to_target_endpoint": true,
    "predicted_endpoint_in_federates_with": false,
    "predicted_endpoint_or_federated_endpoint": true,
    "run_id_langsmith": "c222282e-971f-487c-8a4d-c5c9c328fd3f",
    "evaluation_timestamp": "2025-05-10T19:32:23.484516",
    "question_understanding_prompt_tokens": 282,
    "question_understanding_completion_tokens": 71,
    "question_understanding_total_tokens": 353,
    "sparql_query_construction_prompt_tokens": 3988,
    "sparql_query_construction_completion_tokens": 0,
    "sparql_query_construction_total_tokens": 3988,
    "is_valid_sparql": true,
    "sparql_syntax_error": "syntactically correct",
    "result_eval_f1_score": 0.0,
    "result_eval_precision": 0.0,
    "result_eval_recall": 0.0,
    "error_occured_at_endpoint": true,
    "predicted_query_result_is_empty": true,
    "ground_truth_query_result_is_empty": true,
    "error_occured_at_endpoint_message": "The read operation timed out"
  },
  {
    "resource": "https://sparql.uniprot.org/.well-known/sparql-examples/53",
    "natural_language_question": "Find mouse homologs in OMABrowser of human enzymes that catalyze reactions involving sterols (CHEBI:15889). Federating with Rhea and OMABrowser.",
    "ground_truth_query": "PREFIX CHEBI: <http://purl.obolibrary.org/obo/CHEBI_>\nPREFIX lscr: <http://purl.org/lscr#>\nPREFIX orth: <http://purl.org/net/orth#>\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX rh: <http://rdf.rhea-db.org/>\nPREFIX taxon: <http://purl.uniprot.org/taxonomy/>\nPREFIX up: <http://purl.uniprot.org/core/>\n\nSELECT\n  DISTINCT\n    ?chebi\n    ?reaction\n    ?humanProtein\n    ?mouseProtein\n    ?cluster \nWHERE {\n  SERVICE <https://sparql.rhea-db.org/sparql> {\n    ?reaction rdfs:subClassOf rh:Reaction .\n    ?reaction rh:side/rh:contains/rh:compound ?compound .\n    ?compound rh:chebi ?chebi .\n    ?chebi rdfs:subClassOf* CHEBI:15889\n  }\n\n  ?humanProtein up:organism taxon:9606 .\n  ?humanProtein up:annotation ?a .\n  ?a a up:Catalytic_Activity_Annotation .\n  ?a up:catalyticActivity ?ca .\n  ?ca up:catalyzedReaction ?reaction .\n\n  SERVICE  <https://sparql.omabrowser.org/sparql> {\n    ?cluster a orth:ParalogsCluster .\n    ?cluster orth:hasHomologousMember ?node1 , ?node2 .\n    ?node1 orth:hasHomologousMember* ?orthoProtein1 .\n    ?node2 orth:hasHomologousMember* ?orthoProtein2 .\n    ?orthoProtein1 lscr:xrefUniprot ?mouseProtein .\n    ?orthoProtein2 lscr:xrefUniprot ?humanProtein .\n    # inTaxon mouse\n    ?orthoProtein1 orth:organism/<http://purl.obolibrary.org/obo/RO_0002162> taxon:10090 . \n  }\n}",
    "target_endpoint": "https://sparql.uniprot.org/sparql/",
    "federates_with": [
      "https://sparql.rhea-db.org/sparql",
      "https://sparql.omabrowser.org/sparql"
    ],
    "endpoint_set": "Uniprot",
    "file_path": "UniProt/53_mouse_homologs_of_sterol_enzymes_via_omabrowser.ttl",
    "predicted_query": "# https://sparql.rhea-db.org/sparql\n# Find mouse homologs in OMABrowser of human enzymes that catalyze reactions involving sterols (CHEBI:15889). Federating with Rhea and OMABrowser.\nPREFIX rhea: <http://rdf.rhea-db.org/>\nPREFIX chebi: <http://purl.obolibrary.org/obo/CHEBI_>\nPREFIX obo: <http://purl.obolibrary.org/obo/>\n\nSELECT DISTINCT ?mouse_homolog ?human_enzyme ?reaction\nWHERE {\n  # Find reactions involving sterols\n  SERVICE <https://sparql.rhea-db.org/sparql> {\n    ?reaction rhea: Rhea_has_reactant chebi:15889 . #CHEBI:15889 is sterol\n    ?reaction rhea: Rhea_has_enzyme ?human_enzyme .\n  }\n  \n  # Find human enzymes that catalyze these reactions\n  #SERVICE <https://sparql.uniprot.org/sparql> {\n  #  ?human_enzyme a uniprot:Protein .\n  #  ?human_enzyme rdfs:label ?human_enzyme_name .\n  #}\n  \n  #Assuming we have a service to query for homologs, e.g., OMA Browser\n  #SERVICE <OMA_BROWSER_SPARQL_ENDPOINT> { #Replace with the actual OMA Browser endpoint\n  #  ?human_enzyme oma:hasHomolog ?mouse_homolog .\n  #  ?mouse_homolog oma:organism <http://purl.uniprot.org/taxonomy/10090> . # Mouse TaxID\n  #}\n  \n  # Placeholder for OMA Browser service.  Since a real OMA Browser SPARQL endpoint is not provided,\n  # this part is commented out.  A real implementation would replace this with the actual\n  # service query to find mouse homologs of the human enzymes.\n  BIND(\"No OMA Browser endpoint provided\" AS ?mouse_homolog) #Placeholder\n  \n  FILTER (CONTAINS(str(?human_enzyme), \"CHEBI\")) #Ensuring that the enzyme is a CHEBI ID\n}",
    "predicted_endpoint": "https://sparql.rhea-db.org/sparql",
    "predicted_endpoint_equal_to_target_endpoint": false,
    "predicted_endpoint_in_federates_with": true,
    "predicted_endpoint_or_federated_endpoint": true,
    "run_id_langsmith": "02e69ca0-ab70-4a38-b8cb-cefe3d35e833",
    "evaluation_timestamp": "2025-05-10T19:42:41.131556",
    "question_understanding_prompt_tokens": 277,
    "question_understanding_completion_tokens": 41,
    "question_understanding_total_tokens": 318,
    "sparql_query_construction_prompt_tokens": 3207,
    "sparql_query_construction_completion_tokens": 499,
    "sparql_query_construction_total_tokens": 3706,
    "is_valid_sparql": false,
    "sparql_syntax_error": "Lexical error at line 11, column 38.  Encountered: '32' (32), after prefix \"Rhea_has_reactant\"",
    "result_eval_f1_score": 0.0,
    "result_eval_precision": 0.0,
    "result_eval_recall": 0.0,
    "error_occured_at_endpoint": false,
    "predicted_query_result_is_empty": true,
    "ground_truth_query_result_is_empty": false,
    "error_occured_at_endpoint_message": "syntactically not correct"
  },
  {
    "resource": "https://sparql.uniprot.org/.well-known/sparql-examples/52",
    "natural_language_question": "Retrieve drugs that target human enzymes involved in sterol metabolism (federated query with Rhea and ChEMBL via IDSM/Elixir czech republic).",
    "ground_truth_query": "PREFIX CHEBI: <http://purl.obolibrary.org/obo/CHEBI_>\nPREFIX cco: <http://rdf.ebi.ac.uk/terms/chembl#>\nPREFIX chebihash: <http://purl.obolibrary.org/obo/chebi#>\nPREFIX owl: <http://www.w3.org/2002/07/owl#>\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX rh: <http://rdf.rhea-db.org/>\nPREFIX skos: <http://www.w3.org/2004/02/skos/core#>\nPREFIX taxon: <http://purl.uniprot.org/taxonomy/>\nPREFIX up: <http://purl.uniprot.org/core/>\n\nSELECT\n        DISTINCT\n            ?protein\n            ?proteinFullName\n            ?activityType\n            ?standardActivityValue\n            ?standardActivityUnit\n            ?chemblMolecule\n            ?chemlbMoleculePrefLabel\nWHERE\n  {\n  # ChEBI: retrieve members of the ChEBI class ChEBI:15889 (sterol)\n  # Rhea: retrieve the reactions involving these ChEBI as participants\n  SERVICE <https://sparql.rhea-db.org/sparql> {\n    ?reaction rdfs:subClassOf  rh:Reaction ;\n\t      rh:status        rh:Approved ;\n\t      rh:side          ?reactionSide .\n    ?reactionSide\n\t      rh:contains      ?participant .\n    ?participant rh:compound  ?compound\n    {\n      ?compound  rh:chebi  ?chebi .\n      ?chebi (rdfs:subClassOf)+ CHEBI:15889\n    } UNION {\n      ?compound  rh:chebi           ?chebi .\n      ?chebi2   rdfs:subClassOf     ?chebiRestriction .\n      ?chebiRestriction\n\t\ta           owl:Restriction ;\n\t\towl:onProperty      chebihash:has_major_microspecies_at_pH_7_3 ;\n\t\towl:someValuesFrom  ?chebi .\n      ?chebi2 (rdfs:subClassOf)+ CHEBI:15889\n    }\n  }\n  # UniProt: retrieve the human (taxid:9606) enzymes catalyzing these Rhea reactions\n  ?ca       up:catalyzedReaction  ?reaction .\n  ?a        up:catalyticActivity  ?ca .\n  ?protein  up:annotation         ?a ;\n\t    up:organism           taxon:9606 ;\n\t    up:recommendedName    ?proteinRecName .\n  ?proteinRecName\n\t    up:fullName           ?proteinFullName .\n  # Find drugs in wikidata that interact with the UniProt Proteins\n  # ChEMBL: retrieve the corresponding targets and with drugs in clinical phase 4\n  # Via https://idsm.elixir-czech.cz/sparql/\n  SERVICE <https://idsm.elixir-czech.cz/sparql/endpoint/idsm> {\n    ?activity a cco:Activity ;\n      cco:hasMolecule ?chemblMolecule ;\n      cco:hasAssay ?assay ;\n      cco:standardType ?activityType ;\n      cco:standardValue ?standardActivityValue ;\n      cco:standardUnits ?standardActivityUnit .\n    ?chemblMolecule cco:highestDevelopmentPhase ?highestDevelopmentPhase ;\n      rdfs:label ?chemblMoleculeLabel ;\n      skos:prefLabel ?chemlbMoleculePrefLabel .\n    FILTER (?highestDevelopmentPhase > 3)\n    ?assay cco:hasTarget ?target .\n    ?target cco:hasTargetComponent/cco:targetCmptXref ?protein .\n    ?protein a cco:UniprotRef .\n  }\n}",
    "target_endpoint": "https://sparql.uniprot.org/sparql/",
    "federates_with": [
      "https://sparql.rhea-db.org/sparql",
      "https://idsm.elixir-czech.cz/sparql/endpoint/idsm"
    ],
    "endpoint_set": "Uniprot",
    "file_path": "UniProt/52_drugs_targeting_sterol_metabolism.ttl",
    "predicted_query": "# https://sparql.rhea-db.org/sparql\n# Federated query to retrieve drugs that target human enzymes involved in sterol metabolism.\nPREFIX rhea: <http://rdf.rhea-db.org/>\nPREFIX chebi: <http://purl.obolibrary.org/obo/CHEBI_>\nPREFIX obo: <http://purl.obolibrary.org/obo/>\n\nSELECT DISTINCT ?drug\nWHERE {\n  # Find Rhea reactions related to sterol metabolism\n  ?reaction rhea:equation ?equation .\n  ?reaction rhea:status rhea:approved .\n  ?reaction rhea:side ?side .\n  ?side rhea:substrate ?substrate .\n  ?substrate chebi:CHEBI_ID ?sterol .\n  FILTER regex(str(?sterol), \"CHEBI:.*\", \"i\") # Filter for sterol-related CHEBI IDs\n\n  # Find enzymes that catalyze these reactions\n  ?reaction rhea:enzyme ?enzyme .\n  ?enzyme rhea:uniprot ?uniprot_id .\n\n  # Filter for human enzymes (assuming UniProt IDs are for human enzymes)\n  # SERVICE <https://sparql.uniprot.org/sparql> {\n  #   ?uniprot_id rdf:type up:Protein .\n  #   ?uniprot_id rdfs:label ?protein_name .\n  #   FILTER (contains(lcase(?protein_name), \"human\"))\n  # }\n\n  # Find drugs that target these human enzymes (linking to ChEMBL via IDSM/Elixir czech republic - hypothetical)\n  # SERVICE <IDSM/Elixir czech republic endpoint> { # Replace with actual endpoint\n  #   ?drugTarget a chembl:DrugTarget .\n  #   ?drugTarget chembl:target ?uniprot_id .\n  #   ?drugTarget chembl:drug ?drug .\n  # }\n\n  # Placeholder for drug information (replace with actual properties from ChEMBL)\n  BIND(\"Placeholder Drug\" AS ?drug) # Replace with actual drug retrieval logic\n}",
    "predicted_endpoint": "https://sparql.rhea-db.org/sparql",
    "predicted_endpoint_equal_to_target_endpoint": false,
    "predicted_endpoint_in_federates_with": true,
    "predicted_endpoint_or_federated_endpoint": true,
    "run_id_langsmith": "2510305f-30d1-4ec9-b56f-29be15364b83",
    "evaluation_timestamp": "2025-05-10T19:42:57.516945",
    "question_understanding_prompt_tokens": 272,
    "question_understanding_completion_tokens": 40,
    "question_understanding_total_tokens": 312,
    "sparql_query_construction_prompt_tokens": 3306,
    "sparql_query_construction_completion_tokens": 466,
    "sparql_query_construction_total_tokens": 3772,
    "is_valid_sparql": true,
    "sparql_syntax_error": "syntactically correct",
    "result_eval_f1_score": 0.0,
    "result_eval_precision": 0.0,
    "result_eval_recall": 0.0,
    "error_occured_at_endpoint": false,
    "predicted_query_result_is_empty": true,
    "ground_truth_query_result_is_empty": false,
    "error_occured_at_endpoint_message": "no error, but empty result"
  },
  {
    "resource": "https://sparql.uniprot.org/.well-known/sparql-examples/54",
    "natural_language_question": "Proteins with binding sites for ligands similar to heme",
    "ground_truth_query": "PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX sachem: <http://bioinfo.uochb.cas.cz/rdf/v1.0/sachem#>\nPREFIX up: <http://purl.uniprot.org/core/>\nPREFIX xsd: <http://www.w3.org/2001/XMLSchema#>\n\nSELECT \n  ?protein\n  ?mnemonic\n  ?proteinName\n  ?ligandSimilarityScore\n  ?ligand\nWHERE {\n  SERVICE <https://idsm.elixir-czech.cz/sparql/endpoint/chebi> {\n    ?ssc sachem:compound ?ligand; \n      sachem:score ?ligandSimilarityScore ;\n      sachem:similaritySearch ?sss .\n        # Smiles of Heme\n    ?sss    sachem:query \"CC1=C(CCC([O-])=O)C2=[N+]3C1=Cc1c(C)c(C=C)c4C=C5C(C)=C(C=C)C6=[N+]5[Fe-]3(n14)n1c(=C6)c(C)c(CCC([O-])=O)c1=C2\";\n      sachem:cutoff \"8e-1\"^^xsd:double ;\n      sachem:aromaticityMode sachem:aromaticityDetect ;\n      sachem:similarityRadius 1 ;\n      sachem:tautomerMode sachem:ignoreTautomers .\n  }\n  ?protein up:mnemonic ?mnemonic ;\n    up:recommendedName/up:fullName ?proteinName ;\n    up:annotation ?annotation .\n  ?annotation a up:Binding_Site_Annotation ;\n      up:ligand/rdfs:subClassOf ?ligand .\n}\nORDER BY DESC(?ligandSimilarityScore)",
    "target_endpoint": "https://sparql.uniprot.org/sparql/",
    "federates_with": [
      "https://idsm.elixir-czech.cz/sparql/endpoint/chebi"
    ],
    "endpoint_set": "Uniprot",
    "file_path": "UniProt/54_binding_sites_for_ligands_similar_to_heme_sachem.ttl",
    "predicted_query": "# https://sparql.uniprot.org/sparql\n# Federated query to find proteins with binding sites for ligands similar to heme.\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX uniprot: <http://purl.uniprot.org/core/>\nPREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>\n\nSELECT DISTINCT ?protein ?proteinName\nWHERE {\n  # Query UniProt for proteins that have binding sites.\n  SERVICE <https://sparql.uniprot.org/sparql> {\n    ?protein a uniprot:Protein .\n    ?protein rdfs:label ?proteinName .\n    ?protein uniprot:annotation ?bindingSiteAnnotation .\n    ?bindingSiteAnnotation rdf:type uniprot:Binding_Site .\n    ?bindingSiteAnnotation rdfs:comment ?bindingSiteDescription .\n    \n    # Filter for binding sites that mention \"heme\" or similar ligands.\n    FILTER (CONTAINS(LCASE(?bindingSiteDescription), \"heme\"))\n  }\n}",
    "predicted_endpoint": "https://sparql.uniprot.org/sparql",
    "predicted_endpoint_equal_to_target_endpoint": true,
    "predicted_endpoint_in_federates_with": false,
    "predicted_endpoint_or_federated_endpoint": true,
    "run_id_langsmith": "caf348de-12b3-4a38-870c-64fee8edd421",
    "evaluation_timestamp": "2025-05-10T19:43:07.363883",
    "question_understanding_prompt_tokens": 248,
    "question_understanding_completion_tokens": 28,
    "question_understanding_total_tokens": 276,
    "sparql_query_construction_prompt_tokens": 2615,
    "sparql_query_construction_completion_tokens": 258,
    "sparql_query_construction_total_tokens": 2873,
    "is_valid_sparql": true,
    "sparql_syntax_error": "syntactically correct",
    "result_eval_f1_score": 0.0,
    "result_eval_precision": 0.0,
    "result_eval_recall": 0.0,
    "error_occured_at_endpoint": false,
    "predicted_query_result_is_empty": true,
    "ground_truth_query_result_is_empty": false,
    "error_occured_at_endpoint_message": "no error, but empty result"
  },
  {
    "resource": "https://sparql.uniprot.org/.well-known/sparql-examples/43",
    "natural_language_question": "Connect patents cited in UniProtKB with those in the patent database at EPO via publication number, whose grant date is more than twenty years in the past.",
    "ground_truth_query": "PREFIX patent: <http://data.epo.org/linked-data/def/patent/>\nPREFIX skos: <http://www.w3.org/2004/02/skos/core#>\nPREFIX up: <http://purl.uniprot.org/core/>\n\nSELECT ?grantDate ?patent ?application ?applicationNo\nWHERE\n{\n    ?citation a up:Patent_Citation ;\n  skos:exactMatch ?patent .\n  BIND(SUBSTR(STR(?patent), 35) AS ?applicationNo)\n  BIND(SUBSTR(STR(?patent), 33, 2) AS ?countryCode)\n  SERVICE <https://data.epo.org/linked-data/query>{\n    ?publication patent:publicationNumber ?applicationNo ;\n      patent:application ?application .\n    ?application patent:grantDate ?grantDate .\n  }\n  BIND((year(now()) - 20) AS ?thisYearMinusTwenty)\n  BIND(year(?grantDate) AS ?grantYear)\n  FILTER(?grantYear < ?thisYearMinusTwenty)\n} ORDER BY ?grantYear",
    "target_endpoint": "https://sparql.uniprot.org/sparql/",
    "federates_with": [
      "https://data.epo.org/linked-data/query"
    ],
    "endpoint_set": "Uniprot",
    "file_path": "UniProt/43_patents_used_in_uniprot_granted_twenty_years_in_the_past.ttl",
    "predicted_query": "# https://sparql.uniprot.org/sparql\n# Federated SPARQL query to connect patents cited in UniProtKB with those in the patent database at EPO via publication number, whose grant date is more than twenty years in the past.\nPREFIX up: <http://purl.uniprot.org/core/>\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\n\nSELECT DISTINCT ?uniprotEntry ?patentPublicationNumber ?patentTitle ?patentGrantDate\nWHERE {\n  # Query UniProtKB for entries with patent citations\n  SERVICE <https://sparql.uniprot.org/sparql> {\n    ?uniprotEntry a up:Protein .\n    ?uniprotEntry up:citation ?citation .\n    ?citation rdfs:label ?patentPublicationNumber . # Assuming patent publication number is stored as label\n    FILTER (REGEX(?patentPublicationNumber, \"^[A-Z]{2}[0-9]+[A-Z0-9]+$\")) # Filter to match patent publication number format\n  }\n\n  # Query EPO patent database (hypothetical) for patent details based on publication number\n  # This assumes an EPO SPARQL endpoint exists and has a suitable schema.  Since no EPO endpoint is provided, this is a placeholder.\n  # Replace with the actual EPO endpoint and property paths if available.\n  SERVICE <https://patents.example.org/sparql> {  # Hypothetical EPO endpoint\n    ?patent a <http://example.org/Patent> . # Hypothetical Patent class\n    ?patent <http://example.org/publicationNumber> ?patentPublicationNumber . # Hypothetical property for publication number\n    ?patent <http://example.org/title> ?patentTitle . # Hypothetical property for patent title\n    ?patent <http://example.org/grantDate> ?patentGrantDate . # Hypothetical property for grant date\n    FILTER (YEAR(NOW()) - YEAR(?patentGrantDate) > 20) # Filter for patents granted more than 20 years ago\n  }\n}",
    "predicted_endpoint": "https://sparql.uniprot.org/sparql",
    "predicted_endpoint_equal_to_target_endpoint": true,
    "predicted_endpoint_in_federates_with": false,
    "predicted_endpoint_or_federated_endpoint": true,
    "run_id_langsmith": "79eadfdd-1ed3-43b5-abee-4b1526bd251d",
    "evaluation_timestamp": "2025-05-10T19:43:33.676180",
    "question_understanding_prompt_tokens": 269,
    "question_understanding_completion_tokens": 47,
    "question_understanding_total_tokens": 316,
    "sparql_query_construction_prompt_tokens": 1906,
    "sparql_query_construction_completion_tokens": 458,
    "sparql_query_construction_total_tokens": 2364,
    "is_valid_sparql": true,
    "sparql_syntax_error": "syntactically correct",
    "result_eval_f1_score": 0.0,
    "result_eval_precision": 0.0,
    "result_eval_recall": 0.0,
    "error_occured_at_endpoint": true,
    "predicted_query_result_is_empty": true,
    "ground_truth_query_result_is_empty": true,
    "error_occured_at_endpoint_message": "QueryBadFormed: A bad request has been sent to the endpoint: probably the SPARQL query is badly formed."
  },
  {
    "resource": "https://sparql.uniprot.org/.well-known/sparql-examples/45",
    "natural_language_question": "Retrieve drugs that target human enzymes involved in sterol metabolism (federated query with WikiData and Rhea).",
    "ground_truth_query": "PREFIX CHEBI: <http://purl.obolibrary.org/obo/CHEBI_>\nPREFIX chebihash: <http://purl.obolibrary.org/obo/chebi#>\nPREFIX owl: <http://www.w3.org/2002/07/owl#>\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX rh: <http://rdf.rhea-db.org/>\nPREFIX taxon: <http://purl.uniprot.org/taxonomy/>\nPREFIX uniprotkb: <http://purl.uniprot.org/uniprot/>\nPREFIX up: <http://purl.uniprot.org/core/>\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\n\nSELECT DISTINCT ?protein ?proteinFullName ?wikiChemical ?wikiChemicalLabel ?medicalConditionTreatedLabel\nWHERE {\n  # ChEBI: retrieve members of the ChEBI class ChEBI:15889 (sterol)\n  # Rhea: retrieve the reactions involving these ChEBI as participants\n  SERVICE <https://sparql.rhea-db.org/sparql> {\n    ?reaction rdfs:subClassOf rh:Reaction ;\n      rh:status rh:Approved ;\n      rh:side ?reactionSide .\n    ?reactionSide\n      rh:contains ?participant .\n    ?participant rh:compound ?compound\n    {\n      ?compound rh:chebi ?chebi .\n      ?chebi (rdfs:subClassOf)+ CHEBI:15889\n    } UNION {\n      ?compound rh:chebi ?chebi .\n      ?chebi2 rdfs:subClassOf ?chebiRestriction .\n      ?chebiRestriction\n\t\ta owl:Restriction ;\n\t\towl:onProperty chebihash:has_major_microspecies_at_pH_7_3 ;\n\t\towl:someValuesFrom ?chebi .\n      ?chebi2 (rdfs:subClassOf)+ CHEBI:15889\n    }\n  }\n  # UniProt: retrieve the human (taxid:9606) enzymes catalyzing these Rhea reactions\n  ?ca up:catalyzedReaction  ?reaction .\n  ?a up:catalyticActivity  ?ca .\n  ?proteinIRI  up:annotation ?a ;\n    up:organism taxon:9606 ;\n    up:recommendedName ?proteinRecName .\n  ?proteinRecName up:fullName ?proteinFullName .\n  # Find drugs in wikidata that interact with the UniProt Proteins\n  BIND (SUBSTR(STR(?proteinIRI), STRLEN(STR(uniprotkb:))+1) AS ?protein)\n  SERVICE <https://query.wikidata.org/sparql> {\n    ?wp wdt:P352  ?protein .\n    ?wikiChemical wdt:P129 ?wp . # Physically interacts with\n    ?wikiChemical rdfs:label ?wikiChemicalLabel .\n    ?wikiChemical wdt:P2175 ?wmc . # Medical conndition treated\n    ?wmc rdfs:label ?medicalConditionTreatedLabel .\n    FILTER(lang(?medicalConditionTreatedLabel) = 'en')\n    FILTER(lang(?wikiChemicalLabel) = 'en')\n  }\n}",
    "target_endpoint": "https://sparql.uniprot.org/sparql/",
    "federates_with": [
      "https://query.wikidata.org/sparql",
      "https://sparql.rhea-db.org/sparql"
    ],
    "endpoint_set": "Uniprot",
    "file_path": "UniProt/45_drugs_targeting_human_sterol_metabolism_enzymes.ttl",
    "predicted_query": "# https://sparql.rhea-db.org/sparql\n# Federated SPARQL query to retrieve drugs that target human enzymes involved in sterol metabolism, federating Rhea and Wikidata.\nPREFIX rhea: <http://rdf.rhea-db.org/>\nPREFIX chebi: <http://purl.obolibrary.org/obo/CHEBI_>\nPREFIX wd: <http://www.wikidata.org/entity/>\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\nPREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>\nPREFIX skos: <http://www.w3.org/2004/02/skos/core#>\n\nSELECT DISTINCT ?drugLabel ?enzymeLabel WHERE {\n  # Find Rhea reactions related to sterol metabolism\n  SERVICE <https://sparql.rhea-db.org/sparql> {\n    ?reaction rhea:equation ?equation .\n    ?equation a rhea:Reaction .\n    FILTER (CONTAINS(LCASE(?equation), \"sterol\")) . # Filter reactions containing \"sterol\" in their equation\n\n    # Get the enzyme(s) that catalyze the reaction\n    ?reaction rhea:catalyzedBy ?enzyme .\n    ?enzyme skos:prefLabel ?enzymeLabel .\n  }\n\n  # Find human enzymes in Wikidata that are related to the enzymes found in Rhea\n  SERVICE <https://query.wikidata.org/sparql> {\n    ?enzymeWD wdt:P595 ?enzymeLabel . # Enzyme that catalyzes the reaction\n    ?enzymeWD wdt:P703 wd:Q5 . # Enzyme is found in humans (Homo sapiens)\n\n    # Find drugs that target these human enzymes\n    ?drugWD wdt:P2175 ?enzymeWD . # Drug that targets the enzyme\n    ?drugWD rdfs:label ?drugLabel .\n    FILTER (LANG(?drugLabel) = \"en\") # Filter for English labels\n  }\n}",
    "predicted_endpoint": "https://sparql.rhea-db.org/sparql",
    "predicted_endpoint_equal_to_target_endpoint": false,
    "predicted_endpoint_in_federates_with": true,
    "predicted_endpoint_or_federated_endpoint": true,
    "run_id_langsmith": "6ef16f96-34a5-4781-aea8-348238bd5760",
    "evaluation_timestamp": "2025-05-10T19:43:44.106589",
    "question_understanding_prompt_tokens": 258,
    "question_understanding_completion_tokens": 28,
    "question_understanding_total_tokens": 286,
    "sparql_query_construction_prompt_tokens": 1799,
    "sparql_query_construction_completion_tokens": 0,
    "sparql_query_construction_total_tokens": 1799,
    "is_valid_sparql": false,
    "sparql_syntax_error": "Line 29, column 13: Unresolved prefixed name: rdfs:label",
    "result_eval_f1_score": 0.0,
    "result_eval_precision": 0.0,
    "result_eval_recall": 0.0,
    "error_occured_at_endpoint": false,
    "predicted_query_result_is_empty": true,
    "ground_truth_query_result_is_empty": false,
    "error_occured_at_endpoint_message": "syntactically not correct"
  },
  {
    "resource": "https://sparql.uniprot.org/.well-known/sparql-examples/42",
    "natural_language_question": "Connect patents cited in UniProtKB with those in the patent database at EPO via publication number.",
    "ground_truth_query": "PREFIX patent: <http://data.epo.org/linked-data/def/patent/>\nPREFIX skos: <http://www.w3.org/2004/02/skos/core#>\nPREFIX up: <http://purl.uniprot.org/core/>\n\nSELECT ?citation ?patent ?application ?applicationNo\nWHERE\n{\n  ?citation a up:Patent_Citation ;\n    skos:exactMatch ?patent .\n  FILTER(CONTAINS(STR(?patent), 'EP'))\n  BIND(SUBSTR(STR(?patent), 35) AS ?applicationNo)\n  SERVICE <https://data.epo.org/linked-data/query>{\n    ?application patent:publicationNumber ?applicationNo\n  }\n}",
    "target_endpoint": "https://sparql.uniprot.org/sparql/",
    "federates_with": [
      "https://data.epo.org/linked-data/query"
    ],
    "endpoint_set": "Uniprot",
    "file_path": "UniProt/42_connect_patents_to_epo.ttl",
    "predicted_query": "# https://sparql.uniprot.org/sparql\n# Hypothetical federated query to connect patents cited in UniProtKB with a patent database (not available in provided context).\n# This query assumes UniProtKB has patent cross-references and a hypothetical patent database exists.\n\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX up: <http://purl.uniprot.org/core/>\n\nSELECT ?uniprotEntry ?patentID ?patentTitle\nWHERE {\n  # Query UniProtKB for entries with patent cross-references.\n  SERVICE <https://sparql.uniprot.org/sparql> {\n    ?uniprotEntry a up:Protein ;\n                  rdfs:seeAlso ?patent . # Assuming rdfs:seeAlso links to external resources\n\n    ?patent up:database <http://example.org/patentDB> ; # Hypothetical patent database identifier\n            up:identifier ?patentID . # Patent identifier in UniProtKB\n  }\n\n  # Hypothetical patent database query (replace with actual endpoint if available).\n  # This part assumes a patent database with patent IDs and titles.\n  SERVICE <http://example.org/patent-sparql> { # Replace with actual patent database endpoint\n    ?patentURI a <http://example.org/Patent> ; # Hypothetical Patent class\n               <http://example.org/id> ?patentID ; # Patent ID property\n               <http://example.org/title> ?patentTitle . # Patent title property\n  }\n}",
    "predicted_endpoint": "https://sparql.uniprot.org/sparql",
    "predicted_endpoint_equal_to_target_endpoint": true,
    "predicted_endpoint_in_federates_with": false,
    "predicted_endpoint_or_federated_endpoint": true,
    "run_id_langsmith": "15b5ec58-8ca8-4cfd-953f-15619b705002",
    "evaluation_timestamp": "2025-05-10T19:43:51.789334",
    "question_understanding_prompt_tokens": 259,
    "question_understanding_completion_tokens": 35,
    "question_understanding_total_tokens": 294,
    "sparql_query_construction_prompt_tokens": 1671,
    "sparql_query_construction_completion_tokens": 0,
    "sparql_query_construction_total_tokens": 1671,
    "is_valid_sparql": true,
    "sparql_syntax_error": "syntactically correct",
    "result_eval_f1_score": 0.0,
    "result_eval_precision": 0.0,
    "result_eval_recall": 0.0,
    "error_occured_at_endpoint": true,
    "predicted_query_result_is_empty": true,
    "ground_truth_query_result_is_empty": true,
    "error_occured_at_endpoint_message": "QueryBadFormed: A bad request has been sent to the endpoint: probably the SPARQL query is badly formed."
  },
  {
    "resource": "https://sparql.uniprot.org/.well-known/sparql-examples/67_draft_human_metabolome",
    "natural_language_question": "Generate a draft human metabolome",
    "ground_truth_query": "PREFIX chebislash: <http://purl.obolibrary.org/obo/chebi/>\nPREFIX rh: <http://rdf.rhea-db.org/>\nPREFIX taxon: <http://purl.uniprot.org/taxonomy/>\nPREFIX up: <http://purl.uniprot.org/core/>\n\nSELECT\n?uniprot ?mnemonic ?rhea ?chebi ?smiles ?inchiKey\nWHERE\n{\n  ?uniprot up:annotation/up:catalyticActivity/up:catalyzedReaction ?rhea ;\n        up:organism taxon:9606 ;\n        up:mnemonic ?mnemonic .\n  SERVICE <https://sparql.rhea-db.org/sparql> {\n\t?rhea rh:side/rh:contains/rh:compound ?compound .\n    ?compound (rh:chebi|(rh:reactivePart/rh:chebi)|(rh:underlyingChebi/rh:chebi)) ?chebi .\n   }\n   ?chebi chebislash:smiles ?smiles ;\n          chebislash:inchikey ?inchiKey .\n}",
    "target_endpoint": "https://sparql.uniprot.org/sparql/",
    "federates_with": [
      "https://sparql.rhea-db.org/sparql"
    ],
    "endpoint_set": "Uniprot",
    "file_path": "UniProt/67_draft_human_metabolome.ttl",
    "predicted_query": "# https://sparql.uniprot.org/sparql\n# This query is a draft and may not be fully executable due to the complexity of defining and querying the entire human metabolome across SPARQL endpoints.\n# It provides a starting point by querying UniProt for proteins associated with human and potentially involved in metabolic processes.\n# Further refinement would require integrating data from other metabolome-specific databases like HMDB, KEGG, or ChEBI, which are not directly available in the provided endpoint list.\n\nPREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX up: <http://purl.uniprot.org/core/>\nPREFIX taxon: <http://purl.uniprot.org/taxonomy/>\n\nSELECT DISTINCT ?protein ?proteinName\nWHERE {\n  # Find proteins associated with Homo sapiens (Human)\n  ?protein a up:Protein .\n  ?protein up:organism taxon:9606 . # 9606 is the NCBI Taxonomy ID for Homo sapiens\n  ?protein rdfs:label ?proteinName .\n\n  # Attempt to filter for proteins potentially involved in metabolic processes.\n  # This is a broad filter and may require more specific annotation properties if available in UniProt.\n  # Consider using GO annotations related to metabolism if available via UniProt SPARQL.\n  # FILTER CONTAINS(LCASE(?proteinName), \"metabolic\")  #This is too broad and might not be accurate\n\n  #SERVICE <other_metabolome_endpoint> {\n  #  # Query other metabolome databases (e.g., HMDB, KEGG) for metabolites and related proteins.\n  #  # This requires knowing the specific schema and properties of those endpoints.\n  #  # Example (replace with actual properties):\n  #  # ?metabolite <related_protein_property> ?protein .\n  #}\n}\n#LIMIT 10 # Limiting the results for demonstration purposes. Remove to get all results.",
    "predicted_endpoint": "https://sparql.uniprot.org/sparql",
    "predicted_endpoint_equal_to_target_endpoint": true,
    "predicted_endpoint_in_federates_with": false,
    "predicted_endpoint_or_federated_endpoint": true,
    "run_id_langsmith": "81134fd6-145b-45a1-9e7c-7a26382023f6",
    "evaluation_timestamp": "2025-05-10T19:44:03.153937",
    "question_understanding_prompt_tokens": 246,
    "question_understanding_completion_tokens": 20,
    "question_understanding_total_tokens": 266,
    "sparql_query_construction_prompt_tokens": 1443,
    "sparql_query_construction_completion_tokens": 470,
    "sparql_query_construction_total_tokens": 1913,
    "is_valid_sparql": true,
    "sparql_syntax_error": "syntactically correct",
    "result_eval_f1_score": 0.0,
    "result_eval_precision": 0.0,
    "result_eval_recall": 0.0,
    "error_occured_at_endpoint": false,
    "predicted_query_result_is_empty": false,
    "ground_truth_query_result_is_empty": false,
    "error_occured_at_endpoint_message": "no error"
  },
  {
    "resource": "https://sparql.uniprot.org/.well-known/sparql-examples/36",
    "natural_language_question": "Find the orthologous proteins for UniProtKB entry P05067 using the <a href=\"http://www.orthod.org\">OrthoDB database</a>",
    "ground_truth_query": "PREFIX orthodb: <http://purl.orthodb.org/>\nPREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX skos: <http://www.w3.org/2004/02/skos/core#>\nPREFIX uniprotkb: <http://purl.uniprot.org/uniprot/>\nPREFIX up: <http://purl.uniprot.org/core/>\n\nSELECT\n  ?protein\n  ?orthoGroup\n  ?scientificName\n  ?functionComment\n  ?prefferedGeneName\n  ((STRLEN(?value) - ?medianLength) as ?deviationFromMedianLength)\nWHERE\n{\n  uniprotkb:P05067 a up:Protein ;\n        up:organism/up:scientificName ?scientificName ;\n        rdfs:seeAlso ?orthoGroup ;\n        up:encodedBy/skos:prefLabel ?prefferedGeneName ;\n          up:sequence/rdf:value ?value .\n  OPTIONAL {\n    ?protein up:annotation ?functionAnnotation .\n    ?functionAnnotation a up:Function_Annotation ;\n      rdfs:comment ?functionComment .\n  }\n  SERVICE <https://sparql.orthodb.org/sparql>{\n    ?orthoGroup orthodb:ogMedianProteinLength ?medianLength .\n    ?orthoGroup orthodb:hasMember ?xref .\n    ?xref orthodb:xref/orthodb:xrefResource uniprotkb:P05067 .\n  }\n}\nLIMIT 985915",
    "target_endpoint": "https://sparql.uniprot.org/sparql/",
    "federates_with": [
      "https://sparql.orthodb.org/sparql"
    ],
    "endpoint_set": "Uniprot",
    "file_path": "UniProt/36_orthologous_proteins_via_orthodb.ttl",
    "predicted_query": "# https://sparql.uniprot.org/sparql\n# Find orthologous proteins for UniProtKB entry P05067 using OrthoDB.\n# Since there is no direct link to OrthoDB, this query will focus on finding orthologs within UniProt.\nPREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX up: <http://purl.uniprot.org/core/>\nPREFIX uniprot: <http://purl.uniprot.org/uniprot/>\n\nSELECT DISTINCT ?orthologousProtein ?geneName ?organismName\nWHERE {\n  # Focus on the UniProt endpoint since OrthoDB is not directly accessible.\n  VALUES ?protein { uniprot:P05067 } # The UniProt entry of interest.\n\n  ?protein up:sequence ?sequenceResource .\n  ?sequenceResource up:organism ?organism .\n  ?organism rdfs:label ?organismName .\n\n  # Find proteins that are not the same as the input protein.\n  ?orthologousProtein a up:Protein .\n  FILTER (?orthologousProtein != ?protein)\n\n  # Proteins with similar names\n  ?orthologousProtein up:recommendedName ?recName .\n  ?recName rdfs:label ?geneName .\n  FILTER (CONTAINS(LCASE(?geneName), LCASE(\"protein\"))) # Filter for proteins\n\n  # Optional: Further refine by organism, if possible.  This might require more specific organism information.\n  OPTIONAL {\n    ?orthologousProtein up:sequence ?orthologousSequenceResource .\n    ?orthologousSequenceResource up:organism ?orthologousOrganism .\n    ?orthologousOrganism rdfs:label ?orthologousOrganismName .\n    #FILTER (CONTAINS(LCASE(?organismName), LCASE(?orthologousOrganismName))) # Optional organism filter.\n  }\n}",
    "predicted_endpoint": "https://sparql.uniprot.org/sparql",
    "predicted_endpoint_equal_to_target_endpoint": true,
    "predicted_endpoint_in_federates_with": false,
    "predicted_endpoint_or_federated_endpoint": true,
    "run_id_langsmith": "71c6cd73-ace5-4fb8-bfde-a431819a0652",
    "evaluation_timestamp": "2025-05-10T19:44:38.444486",
    "question_understanding_prompt_tokens": 272,
    "question_understanding_completion_tokens": 43,
    "question_understanding_total_tokens": 315,
    "sparql_query_construction_prompt_tokens": 2570,
    "sparql_query_construction_completion_tokens": 449,
    "sparql_query_construction_total_tokens": 3019,
    "is_valid_sparql": true,
    "sparql_syntax_error": "syntactically correct",
    "result_eval_f1_score": 0.0,
    "result_eval_precision": 0.0,
    "result_eval_recall": 0.0,
    "error_occured_at_endpoint": false,
    "predicted_query_result_is_empty": true,
    "ground_truth_query_result_is_empty": false,
    "error_occured_at_endpoint_message": "no error, but empty result"
  },
  {
    "resource": "https://sparql.uniprot.org/.well-known/sparql-examples/60",
    "natural_language_question": "Find human proteins that catalyze reactions where substrates or product have a <a href=\"https://www.ebi.ac.uk/chebi/searchId.do?chebiId=CHEBI:35516\">Cholestane skeleton</a>",
    "ground_truth_query": "PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX rh: <http://rdf.rhea-db.org/>\nPREFIX sachem: <http://bioinfo.uochb.cas.cz/rdf/v1.0/sachem#>\nPREFIX taxon: <http://purl.uniprot.org/taxonomy/>\nPREFIX up: <http://purl.uniprot.org/core/>\n\nSELECT\n  DISTINCT\n    ?protein\n    ?disease\n    ?rhea\n    ?chebi\n    ?omim\nWHERE {\n    # Find complete ChEBIs with a Cholestane skeleton, via the Czech Elixir node IDSM Sachem chemical substructure search.\n    SERVICE <https://idsm.elixir-czech.cz/sparql/endpoint/chebi> {\n      ?chebi sachem:substructureSearch [\n        sachem:query\n\"[C@]12(CCC3CCCC[C@]3(C)[C@@]1([H])CC[C@]1(C)[C@@]([H])([C@@](C)([H])CCCC(C)C)CC[C@@]21[H])[H]\"\n].\n   }\n   # Use the fact that UniProt catalytic activities are annotated using Rhea \n   # Mapping the found ChEBIs to Rhea reactions\n   SERVICE <https://sparql.rhea-db.org/sparql>{\n     ?rhea rh:side/rh:contains/rh:compound/rdfs:subClassOf ?chebi .\n   }\n   # Match the found Rhea reactions with human UniProtKB proteins\n   ?protein up:annotation/up:catalyticActivity/up:catalyzedReaction ?rhea .\n   ?protein up:organism taxon:9606 .\n   # Find only those human entries that have an annotated related disease, and optionaly map these to OMIM\n   ?protein up:annotation/up:disease ?disease .\n   OPTIONAL {\n     ?disease rdfs:seeAlso ?omim .\n     ?omim up:database <http://purl.uniprot.org/database/MIM>\n   }\n}",
    "target_endpoint": "https://sparql.uniprot.org/sparql/",
    "federates_with": [
      "https://idsm.elixir-czech.cz/sparql/endpoint/chebi",
      "https://sparql.rhea-db.org/sparql"
    ],
    "endpoint_set": "Uniprot",
    "file_path": "UniProt/60_enzymes_working_on_substrate_with_Cholestene_backbone.ttl",
    "predicted_query": "# https://sparql.uniprot.org/sparql\n# Find human proteins that catalyze reactions where substrates or product have a Cholestane skeleton\n\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX up: <http://purl.uniprot.org/core/>\nPREFIX taxon: <http://purl.uniprot.org/taxonomy/>\nPREFIX chebi: <http://purl.obolibrary.org/obo/>\nPREFIX rhea: <http://rdf.rhea-db.org/>\n\nSELECT DISTINCT ?protein ?proteinName ?reaction\nWHERE {\n  # Find human proteins\n  SERVICE <https://sparql.uniprot.org/sparql> {\n    ?protein a up:Protein ;\n             up:organism taxon:9606 ; # Homo sapiens\n             rdfs:label ?proteinName .\n  }\n\n  # Find reactions catalyzed by these proteins\n  SERVICE <https://sparql.rhea-db.org/sparql> {\n    ?reaction rhea:enzyme ?protein .\n\n    # Check if the reaction involves a substrate or product with a Cholestane skeleton\n    {\n      ?reaction rhea:substrate ?substrate .\n      ?substrate chebi:is_a chebi:35516 .  # Cholestane skeleton\n    }\n    UNION\n    {\n      ?reaction rhea:product ?product .\n      ?product chebi:is_a chebi:35516 .  # Cholestane skeleton\n    }\n  }\n}",
    "predicted_endpoint": "https://sparql.uniprot.org/sparql",
    "predicted_endpoint_equal_to_target_endpoint": true,
    "predicted_endpoint_in_federates_with": false,
    "predicted_endpoint_or_federated_endpoint": true,
    "run_id_langsmith": "a5161af1-dcdd-41f1-b42f-b9aa7f306a98",
    "evaluation_timestamp": "2025-05-10T19:45:29.198114",
    "question_understanding_prompt_tokens": 296,
    "question_understanding_completion_tokens": 38,
    "question_understanding_total_tokens": 334,
    "sparql_query_construction_prompt_tokens": 3488,
    "sparql_query_construction_completion_tokens": 356,
    "sparql_query_construction_total_tokens": 3844,
    "is_valid_sparql": true,
    "sparql_syntax_error": "syntactically correct",
    "result_eval_f1_score": 0.0,
    "result_eval_precision": 0.0,
    "result_eval_recall": 0.0,
    "error_occured_at_endpoint": false,
    "predicted_query_result_is_empty": true,
    "ground_truth_query_result_is_empty": false,
    "error_occured_at_endpoint_message": "no error, but empty result"
  },
  {
    "resource": "https://sparql.uniprot.org/.well-known/sparql-examples/70_enzymes_interacting_with_molecules_similar_to_dopamine",
    "natural_language_question": "Look for enzymes catalyzing reactions with molecules similar to dopamine.",
    "ground_truth_query": "PREFIX CHEBI: <http://purl.obolibrary.org/obo/CHEBI_>\nPREFIX rh: <http://rdf.rhea-db.org/>\nPREFIX sachem: <http://bioinfo.uochb.cas.cz/rdf/v1.0/sachem#>\nPREFIX up: <http://purl.uniprot.org/core/>\n\nSELECT\n  ?protein\n  ?rhea\n  ?chebi\nWHERE {\n  # Use the smiles of dopamine CHEBI:18243\n  SERVICE <https://idsm.elixir-czech.cz/sparql/endpoint/chebi>{\n    ?chebi sachem:similarCompoundSearch [\n      sachem:query \"NCCc1ccc(O)c(O)c1\" ] .\n  }\n  GRAPH<https://sparql.rhea-db.org/rhea>{\n    ?rhea rh:side/rh:contains/rh:compound ?compound .\n    ?compound (rh:chebi|(rh:reactivePart/rh:chebi)|(rh:underlyingChebi/rh:chebi)) ?chebi .\n  }\n  ?protein up:reviewed true ;\n    up:annotation ?caa .\n  ?caa up:catalyticActivity/up:catalyzedReaction ?rhea .\n}",
    "target_endpoint": "https://sparql.uniprot.org/sparql/",
    "federates_with": [
      "https://idsm.elixir-czech.cz/sparql/endpoint/chebi"
    ],
    "endpoint_set": "Uniprot",
    "file_path": "UniProt/70_enzymes_interacting_with_molecules_similar_to_dopamine.ttl",
    "predicted_query": "# https://sparql.rhea-db.org/sparql\n# Find reactions in Rhea involving dopamine and then find the enzymes that catalyze those reactions.\nPREFIX rhea: <http://rdf.rhea-db.org/>\nPREFIX chebi: <http://purl.obolibrary.org/obo/CHEBI_>\nPREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>\n\nSELECT DISTINCT ?enzyme ?reaction\nWHERE {\n  # Find reactions in Rhea that involve dopamine as a participant.\n  {\n    SELECT DISTINCT ?reaction WHERE {\n      ?reaction rhea: Rhea_has_participant chebi:15378 .  #CHEBI ID for dopamine\n    }\n  }\n\n  # Find the enzymes that catalyze these reactions.\n  ?reaction rhea: Rhea_has_enzyme ?enzyme .\n}",
    "predicted_endpoint": "https://sparql.rhea-db.org/sparql",
    "predicted_endpoint_equal_to_target_endpoint": false,
    "predicted_endpoint_in_federates_with": false,
    "predicted_endpoint_or_federated_endpoint": false,
    "run_id_langsmith": "827e6bc9-c260-4c2d-a19a-6d49a1ff434e",
    "evaluation_timestamp": "2025-05-10T19:45:55.111251",
    "question_understanding_prompt_tokens": 253,
    "question_understanding_completion_tokens": 26,
    "question_understanding_total_tokens": 279,
    "sparql_query_construction_prompt_tokens": 2427,
    "sparql_query_construction_completion_tokens": 207,
    "sparql_query_construction_total_tokens": 2634,
    "is_valid_sparql": false,
    "sparql_syntax_error": "Lexical error at line 12, column 43.  Encountered: '32' (32), after prefix \"Rhea_has_participant\"",
    "result_eval_f1_score": 0.0,
    "result_eval_precision": 0.0,
    "result_eval_recall": 0.0,
    "error_occured_at_endpoint": false,
    "predicted_query_result_is_empty": true,
    "ground_truth_query_result_is_empty": false,
    "error_occured_at_endpoint_message": "syntactically not correct"
  },
  {
    "resource": "https://sparql.uniprot.org/.well-known/sparql-examples/38",
    "natural_language_question": "For the human entry P05067 (Amyloid-beta precursor protein) find the gene start ends in WikiData",
    "ground_truth_query": "PREFIX p: <http://www.wikidata.org/prop/>\nPREFIX pq: <http://www.wikidata.org/prop/qualifier/>\nPREFIX ps: <http://www.wikidata.org/prop/statement/>\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX uniprotkb: <http://purl.uniprot.org/uniprot/>\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\n\n\nSELECT \n\t?protein \n\t?begin\n\t?end\n\t?chromosome\n\t?assembly\nWHERE {\n    {\n        BIND(uniprotkb:P05067 AS ?proteinIRI)\n        BIND (SUBSTR(STR(?proteinIRI), STRLEN(STR(uniprotkb:))+1) AS ?protein)\n    }\n    SERVICE <https://query.wikidata.org/sparql> {\n        ?wp wdt:P352 ?protein ;\n            wdt:P702 ?wg . \n        ?wg p:P644   ?wgss .\n        ?wgss ps:P644        ?begin ;\n          pq:P1057/wdt:P1813 ?chromosome ;\n          pq:P659/rdfs:label ?assembly .\n        ?wg p:P645 ?wgse .\n        ?wgse ps:P645        ?end ;\n          pq:P1057/wdt:P1813 ?chromosome ;\n          pq:P659/rdfs:label ?assembly .\n        FILTER(lang(?assembly) = \"en\")\n  } \n}",
    "target_endpoint": "https://sparql.uniprot.org/sparql/",
    "federates_with": [
      "https://query.wikidata.org/sparql"
    ],
    "endpoint_set": "Uniprot",
    "file_path": "UniProt/38_find_gene_region_in_wikidata_for_known_entry.ttl",
    "predicted_query": "# https://sparql.uniprot.org/sparql\n# Find gene start and end positions for human Amyloid-beta precursor protein (P05067)\n\nPREFIX up: <http://purl.uniprot.org/core/>\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX uniprot: <http://purl.uniprot.org/uniprot/>\n\nSELECT ?geneName ?geneStart ?geneEnd\nWHERE {\n  # Select the UniProt entry for human Amyloid-beta precursor protein\n  VALUES (?protein) { (uniprot:P05067) }\n\n  ?protein up:gene ?gene .\n  ?gene rdfs:label ?geneName . # Get the gene name\n\n  # Access Wikidata to retrieve gene start and end positions\n  SERVICE <https://query.wikidata.org/sparql> {\n    ?geneWikidata wdt:P352 ?geneName .  # Find the Wikidata entry for the gene using the gene name\n    OPTIONAL { ?geneWikidata wdt:P597 ?geneStart . }  # Gene start position\n    OPTIONAL { ?geneWikidata wdt:P598 ?geneEnd . }    # Gene end position\n  }\n}",
    "predicted_endpoint": "https://sparql.uniprot.org/sparql",
    "predicted_endpoint_equal_to_target_endpoint": true,
    "predicted_endpoint_in_federates_with": false,
    "predicted_endpoint_or_federated_endpoint": true,
    "run_id_langsmith": "518a7414-a14a-4ea0-bbfb-feb6eb21c696",
    "evaluation_timestamp": "2025-05-10T19:46:02.407558",
    "question_understanding_prompt_tokens": 268,
    "question_understanding_completion_tokens": 50,
    "question_understanding_total_tokens": 318,
    "sparql_query_construction_prompt_tokens": 2097,
    "sparql_query_construction_completion_tokens": 0,
    "sparql_query_construction_total_tokens": 2097,
    "is_valid_sparql": false,
    "sparql_syntax_error": "Line 18, column 19: Unresolved prefixed name: wdt:P352",
    "result_eval_f1_score": 0.0,
    "result_eval_precision": 0.0,
    "result_eval_recall": 0.0,
    "error_occured_at_endpoint": false,
    "predicted_query_result_is_empty": true,
    "ground_truth_query_result_is_empty": false,
    "error_occured_at_endpoint_message": "syntactically not correct"
  },
  {
    "resource": "https://sparql.uniprot.org/.well-known/sparql-examples/117_biosodafrontend_glioblastoma_orthologs_rat",
    "natural_language_question": "Which are the proteins associated with glioblastoma and the orthologs expressed in the rat brain?",
    "ground_truth_query": "PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX obo: <http://purl.obolibrary.org/obo/>\nPREFIX orth: <http://purl.org/net/orth#>\nPREFIX sio: <http://semanticscience.org/resource/>\nPREFIX taxon: <http://purl.uniprot.org/taxonomy/>\nPREFIX up: <http://purl.uniprot.org/core/>\nPREFIX lscr: <http://purl.org/lscr#>\nPREFIX genex: <http://purl.org/genex#>\nSELECT DISTINCT ?protein ?orthologous_protein ?gene ?annotation_text WHERE {\n  {\n  \tSELECT ?protein ?annotation_text WHERE {\n      ?protein a up:Protein ;\n          up:organism taxon:9606 ;\n          up:annotation ?annotation .\n      ?annotation rdfs:comment ?annotation_text .\n      ?annotation a up:Disease_Annotation .\n      FILTER CONTAINS (?annotation_text, \"glioblastoma\")\n    }\n  }\n  SERVICE <https://sparql.omabrowser.org/sparql/> {\n    SELECT ?orthologous_protein ?protein ?gene WHERE {\n    ?protein_OMA a orth:Protein .\n    ?orthologous_protein a orth:Protein .\n    ?cluster a orth:OrthologsCluster .\n    ?cluster orth:hasHomologousMember ?node1 .\n    ?cluster\n    orth:hasHomologousMember ?node2 .\n    ?node2 orth:hasHomologousMember* ?protein_OMA .\n    ?node1 orth:hasHomologousMember* ?orthologous_protein .\n    ?orthologous_protein orth:organism/obo:RO_0002162 taxon:10116 . # rattus norvegicus\n    ?orthologous_protein sio:SIO_010079 ?gene .\n    ?protein_OMA lscr:xrefUniprot ?protein .\n    FILTER(?node1 != ?node2)\n\t\t}\n\t}\n  SERVICE <https://www.bgee.org/sparql/> {\n    ?gene genex:isExpressedIn ?a .\n    ?a rdfs:label \"brain\" .\n    ?gene orth:organism ?s . \n    ?s obo:RO_0002162 taxon:10116.\n\t}\n}",
    "target_endpoint": "https://sparql.uniprot.org/sparql",
    "federates_with": [
      "https://sparql.omabrowser.org/sparql/",
      "https://www.bgee.org/sparql/"
    ],
    "endpoint_set": "Uniprot",
    "file_path": "UniProt/117_biosodafrontend_glioblastoma_orthologs_rat.ttl",
    "predicted_query": "# https://sparql.uniprot.org/sparql\n# Prefixes for commonly used namespaces\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX up: <http://purl.uniprot.org/core/>\nPREFIX taxon: <http://purl.uniprot.org/taxonomy/>\nPREFIX uniprot: <http://purl.uniprot.org/uniprot/>\n\n# Select the protein accessions and their names\nSELECT DISTINCT ?protein ?proteinName ?ratOrthologName\nWHERE {\n  # Subquery to find proteins associated with glioblastoma\n  {\n    SELECT DISTINCT ?protein ?proteinName\n    WHERE {\n      # Query UniProt for proteins associated with the disease glioblastoma\n      SERVICE <https://sparql.uniprot.org/sparql> {\n        ?disease rdfs:label \"glioblastoma\" . # Filter for glioblastoma\n        ?protein up:annotation ?disease . # Find proteins annotated with the disease\n        ?protein a up:Protein . # Ensure it's a protein\n        ?protein rdfs:label ?proteinName . # Get the protein name\n      }\n    }\n  }\n\n  # Find orthologs of the glioblastoma-associated proteins in rat brain\n  SERVICE <https://sparql.uniprot.org/sparql> {\n    ?ratTaxon rdfs:label \"rat brain\" . # Filter for rat brain taxon\n    ?ratOrtholog up:organism ?ratTaxon . # Find proteins from rat brain\n    ?ratOrtholog a up:Protein . # Ensure it's a protein\n    ?ratOrtholog rdfs:label ?ratOrthologName . # Get the rat ortholog name\n    ?ratOrtholog up:sequence ?ratSequence . # Get the sequence of the rat ortholog\n    ?protein up:sequence ?proteinSequence . # Get the sequence of the glioblastoma protein\n\n    # Filter for orthologs based on sequence similarity (simplified assumption)\n    FILTER (strlen(str(?ratSequence)) > 0 && strlen(str(?proteinSequence)) > 0) # Ensure sequences are not empty\n  }\n}",
    "predicted_endpoint": "https://sparql.uniprot.org/sparql",
    "predicted_endpoint_equal_to_target_endpoint": true,
    "predicted_endpoint_in_federates_with": false,
    "predicted_endpoint_or_federated_endpoint": true,
    "run_id_langsmith": "d5d5f912-87c8-4e19-89d1-e4a503fe7d2c",
    "evaluation_timestamp": "2025-05-10T19:46:11.872790",
    "question_understanding_prompt_tokens": 257,
    "question_understanding_completion_tokens": 37,
    "question_understanding_total_tokens": 294,
    "sparql_query_construction_prompt_tokens": 2538,
    "sparql_query_construction_completion_tokens": 478,
    "sparql_query_construction_total_tokens": 3016,
    "is_valid_sparql": true,
    "sparql_syntax_error": "syntactically correct",
    "result_eval_f1_score": 0.0,
    "result_eval_precision": 0.0,
    "result_eval_recall": 0.0,
    "error_occured_at_endpoint": false,
    "predicted_query_result_is_empty": true,
    "ground_truth_query_result_is_empty": false,
    "error_occured_at_endpoint_message": "no error, but empty result"
  },
  {
    "resource": "https://sparql.uniprot.org/.well-known/sparql-examples/116_biosodafrontend_rabit_mouse_orthologs",
    "natural_language_question": "Rabbit's proteins encoded by genes that are orthologous to Mouse's HBB-Y gene and their cross reference links to Uniprot",
    "ground_truth_query": "PREFIX lscr: <http://purl.org/lscr#>\nPREFIX orth: <http://purl.org/net/orth#>\nPREFIX up: <http://purl.uniprot.org/core/>\nPREFIX obo: <http://purl.obolibrary.org/obo/>\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nSELECT DISTINCT ?PROTEIN_1 ?PROTEIN_2 ?UNIPROT_XREF_1 ?UNIPROT_XREF_2 WHERE {\n\t?taxon_1 up:commonName 'Mouse' .\n\t?taxon_2 up:commonName 'Rabbit' .\n\tSERVICE <https://sparql.omabrowser.org/sparql/> {\n\t\t?cluster a orth:OrthologsCluster .\n\t\t?cluster orth:hasHomologousMember ?node1 .\n\t\t?cluster orth:hasHomologousMember ?node2 .\n\t\t?node2 orth:hasHomologousMember* ?PROTEIN_2 .\n\t\t?node1 orth:hasHomologousMember* ?PROTEIN_1 .\n\t\t?PROTEIN_1 a orth:Protein .\n\t\t?PROTEIN_1 orth:organism/obo:RO_0002162 ?taxon_1 ;\n\t\t\trdfs:label 'HBB-Y' ;\n\t\t\tlscr:xrefUniprot ?UNIPROT_XREF_1 .\n\t\t?PROTEIN_2 a orth:Protein .\n\t\t?PROTEIN_2 orth:organism/obo:RO_0002162 ?taxon_2 .\n\t\t?PROTEIN_2 lscr:xrefUniprot ?UNIPROT_XREF_2 .\n\t\tFILTER ( ?node1 != ?node2 )\n\t}\n}",
    "target_endpoint": "https://sparql.uniprot.org/sparql",
    "federates_with": [
      "https://sparql.omabrowser.org/sparql/"
    ],
    "endpoint_set": "Uniprot",
    "file_path": "UniProt/116_biosodafrontend_rabit_mouse_orthologs.ttl",
    "predicted_query": "# https://sparql.uniprot.org/sparql\n# Find Rabbit proteins encoded by genes orthologous to Mouse HBB-Y gene and their UniProt cross-references.\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX up: <http://purl.uniprot.org/core/>\nPREFIX taxon: <http://purl.uniprot.org/taxonomy/>\n\nSELECT DISTINCT ?rabbitProtein ?geneName ?uniprotCrossReference\nWHERE {\n  # Find the UniProt ID for Mouse HBB-Y gene.\n  SERVICE <https://sparql.uniprot.org/sparql> {\n    SELECT ?mouseGene {\n      ?mouseGene a up:Gene .\n      ?mouseGene rdfs:label \"HBB-Y\" .\n      ?mouseGene up:organism taxon:10090 .  # Mouse NCBI Taxonomy ID\n    }\n    LIMIT 1\n  }\n\n  # Find orthologous genes in Rabbit.\n  SERVICE <https://sparql.uniprot.org/sparql> {\n    ?rabbitProtein up:encodedBy ?gene .\n    ?gene rdfs:label ?geneName .\n    ?gene up:organism taxon:9986 . # Rabbit NCBI Taxonomy ID\n    ?gene up:orthologousTo ?mouseGene .\n    \n    #OPTIONAL { ?rabbitProtein up:sequence ?sequence . } # Get the sequence\n    OPTIONAL { ?rabbitProtein up:database ?uniprotCrossReference . } # Get cross-references to other databases\n  }\n}",
    "predicted_endpoint": "https://sparql.uniprot.org/sparql",
    "predicted_endpoint_equal_to_target_endpoint": true,
    "predicted_endpoint_in_federates_with": false,
    "predicted_endpoint_or_federated_endpoint": true,
    "run_id_langsmith": "939b4172-2588-460f-b5fd-5f1d5bfb6f65",
    "evaluation_timestamp": "2025-05-10T19:46:23.749230",
    "question_understanding_prompt_tokens": 267,
    "question_understanding_completion_tokens": 49,
    "question_understanding_total_tokens": 316,
    "sparql_query_construction_prompt_tokens": 3419,
    "sparql_query_construction_completion_tokens": 355,
    "sparql_query_construction_total_tokens": 3774,
    "is_valid_sparql": true,
    "sparql_syntax_error": "syntactically correct",
    "result_eval_f1_score": 0.0,
    "result_eval_precision": 0.0,
    "result_eval_recall": 0.0,
    "error_occured_at_endpoint": false,
    "predicted_query_result_is_empty": true,
    "ground_truth_query_result_is_empty": false,
    "error_occured_at_endpoint_message": "no error, but empty result"
  },
  {
    "resource": "https://sparql.uniprot.org/.well-known/sparql-examples/29",
    "natural_language_question": "Use <a href=\"http://allie.dbcls.jp/\">ALLIE</a> a service for Abbreviation / Long Form in Japanese and English to search in UniProt using Japanese.",
    "ground_truth_query": "PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX up: <http://purl.uniprot.org/core/>\n\nSELECT ?protein ?englishLabelStr\nWHERE {\n    SERVICE <https://data.allie.dbcls.jp/sparql>{\n        ?x rdfs:label \"アミロイド前駆体タンパク質\"@ja ;\n            rdfs:label ?englishLabel .\n        FILTER(lang(?englishLabel) = \"en\")\n    }\n    BIND (STR(?englishLabel) AS ?englishLabelStr)\n    ?protein a up:Protein .\n    {\n        ?protein (up:recommendedName|up:alternativeName) ?structuredName .\n    }\n    UNION\n    {\n        VALUES(?partType){(up:domain) (up:component)}\n            ?protein ?partType ?part .\n        ?part (up:recommendedName|up:alternativeName) ?structuredName .\n    }\n    ?structuredName ?anyKindOfName  ?englishLabelStr .\n    ?anyKindOfName rdfs:subPropertyOf up:structuredNameType .\n}",
    "target_endpoint": "https://sparql.uniprot.org/sparql/",
    "federates_with": [
      "https://data.allie.dbcls.jp/sparql"
    ],
    "endpoint_set": "Uniprot",
    "file_path": "UniProt/29_search_uniprot_in_japanese_with_allie.ttl",
    "predicted_query": "",
    "predicted_endpoint": null,
    "predicted_endpoint_equal_to_target_endpoint": false,
    "predicted_endpoint_in_federates_with": false,
    "predicted_endpoint_or_federated_endpoint": false,
    "run_id_langsmith": "92813aee-9302-4a07-8a62-ec177f652b6e",
    "evaluation_timestamp": "2025-05-10T19:46:42.784193",
    "question_understanding_prompt_tokens": 278,
    "question_understanding_completion_tokens": 22,
    "question_understanding_total_tokens": 300,
    "sparql_query_construction_prompt_tokens": 1892,
    "sparql_query_construction_completion_tokens": 59,
    "sparql_query_construction_total_tokens": 1951,
    "is_valid_sparql": false,
    "sparql_syntax_error": "Encountered \"\" at line 1, column 0.\nWas expecting one of:\n    \"base\" ...\n    \"prefix\" ...\n    \"select\" ...\n    \"describe\" ...\n    \"construct\" ...\n    \"ask\" ...",
    "result_eval_f1_score": 0.0,
    "result_eval_precision": 0.0,
    "result_eval_recall": 0.0,
    "error_occured_at_endpoint": false,
    "predicted_query_result_is_empty": true,
    "ground_truth_query_result_is_empty": false,
    "error_occured_at_endpoint_message": "syntactically not correct"
  },
  {
    "resource": "https://sparql.rhea-db.org/.well-known/sparql-examples/94_Select_all_approved_reactions_with_CHEBI_or_one_of_its_descendant_optional_UniProtKB_reviewed_EC",
    "natural_language_question": "Select all approved reactions with CHEBI:17815 (a 1,2-diacyl-sn-glycerol) or one of its descendant. Display links to UniProtKB/Swiss-Prot entries via EC numbers if the link rhea-ec exists.",
    "ground_truth_query": "PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX rh:<http://rdf.rhea-db.org/>\nPREFIX CHEBI:<http://purl.obolibrary.org/obo/CHEBI_>\nPREFIX up:<http://purl.uniprot.org/core/>\n\nSELECT\n  distinct\n    ?reaction\n    ?enzyme\n    (count(distinct ?protein) as ?proteinCount)\nWHERE {\n  ?reaction rdfs:subClassOf rh:Reaction .\n  ?reaction rh:status rh:Approved .\n  ?reaction rh:side ?reactionSide .\n\n  OPTIONAL {?reaction rh:ec ?enzyme .\n    SERVICE <https://sparql.uniprot.org/sparql> {\n      ?protein up:reviewed true .\n      ?protein up:enzyme ?enzyme.\n    }\n  } .\n  ?reactionSide rh:contains ?participant .\n  ?participant rh:compound ?compound .\n  ?compound rh:chebi ?chebi .\n  ?chebi rdfs:subClassOf* CHEBI:17815 .\n}\nGROUP BY ?reaction ?enzyme\nORDER BY ?reaction\nLIMIT 985915",
    "target_endpoint": "https://sparql.rhea-db.org/sparql",
    "federates_with": [
      "https://sparql.uniprot.org/sparql"
    ],
    "endpoint_set": "Rhea",
    "file_path": "Rhea/94_Select_all_approved_reactions_with_CHEBI_or_one_of_its_descendant_optional_UniProtKB_reviewed_EC.ttl",
    "predicted_query": "# https://sparql.rhea-db.org/sparql\nPREFIX rhea: <http://rdf.rhea-db.org/>\nPREFIX chebi: <http://purl.obolibrary.org/obo/CHEBI_>\nPREFIX obo: <http://purl.obolibrary.org/obo/>\n\nSELECT DISTINCT ?reaction ?ecNumber ?uniprotLink\nWHERE {\n  # Find reactions that involve CHEBI:17815 or its descendants as a participant\n  {\n    SELECT DISTINCT ?reaction WHERE {\n      ?reaction rhea: Rhea-has-participant chebi:17815 .\n    }\n  }\n  UNION\n  {\n    SELECT DISTINCT ?reaction WHERE {\n      ?descendant rdfs:subClassOf chebi:17815 .\n      ?reaction rhea: Rhea-has-participant ?descendant .\n    }\n  }\n  \n  # Filter for approved reactions\n  ?reaction rhea:status rhea:approved .\n  \n  # Optional: Find EC numbers associated with the reaction\n  OPTIONAL {\n    ?reaction rhea:ec ?ecNumber .\n    \n    # Optional: Construct a link to UniProtKB/Swiss-Prot entries via EC numbers\n    OPTIONAL {\n      SERVICE <https://sparql.uniprot.org/sparql> {\n        # Assuming UniProtKB has a direct link from EC number to UniProt entry\n        ?uniprotLink <http://purl.uniprot.org/core/enzyme> ?ecNumber .\n      }\n    }\n  }\n}",
    "predicted_endpoint": "https://sparql.rhea-db.org/sparql",
    "predicted_endpoint_equal_to_target_endpoint": true,
    "predicted_endpoint_in_federates_with": false,
    "predicted_endpoint_or_federated_endpoint": true,
    "run_id_langsmith": "f8ab120e-dbcf-43a3-8d02-d04ce7d0ff3e",
    "evaluation_timestamp": "2025-05-10T19:46:50.784532",
    "question_understanding_prompt_tokens": 296,
    "question_understanding_completion_tokens": 88,
    "question_understanding_total_tokens": 384,
    "sparql_query_construction_prompt_tokens": 1829,
    "sparql_query_construction_completion_tokens": 0,
    "sparql_query_construction_total_tokens": 1829,
    "is_valid_sparql": false,
    "sparql_syntax_error": "Lexical error at line 11, column 43.  Encountered: '32' (32), after prefix \"Rhea-has-participant\"",
    "result_eval_f1_score": 0.0,
    "result_eval_precision": 0.0,
    "result_eval_recall": 0.0,
    "error_occured_at_endpoint": false,
    "predicted_query_result_is_empty": true,
    "ground_truth_query_result_is_empty": false,
    "error_occured_at_endpoint_message": "syntactically not correct"
  },
  {
    "resource": "https://sparql.rhea-db.org/.well-known/sparql-examples/11",
    "natural_language_question": "Distribution of reactions according to the first class of the enzyme classification (federated query)",
    "ground_truth_query": "PREFIX ec: <http://purl.uniprot.org/enzyme/>\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX rh: <http://rdf.rhea-db.org/>\nPREFIX skos: <http://www.w3.org/2004/02/skos/core#>\n\n# Query 11\n# Retrieve the count of reactions mapped to each level (main class) of the enzyme classification\n#\n# This query mimics the Filter section of the Rhea website (Browse all reactions)\n# https://www.rhea-db.org/rhea?query=\nSELECT ?ecClass (STR(?ecName) AS ?ecClassName) (COUNT(?rhea) AS ?rheaCount)\nWHERE {\n  SERVICE <https://sparql.uniprot.org/sparql> {\n    VALUES (?ecClass) { (ec:1.-.-.-)(ec:2.-.-.-)(ec:3.-.-.-)(ec:4.-.-.-)(ec:5.-.-.-) (ec:6.-.-.-) (ec:7.-.-.-)}\n    ?ecNumber rdfs:subClassOf ?ecClass .\n    ?ecClass skos:prefLabel ?ecName .\n  }\n  ?rhea rdfs:subClassOf rh:Reaction .\n  ?rhea rh:ec ?ecNumber .\n} GROUP BY ?ecClass ?ecName",
    "target_endpoint": "https://sparql.rhea-db.org/sparql",
    "federates_with": [
      "https://sparql.uniprot.org/sparql"
    ],
    "endpoint_set": "Rhea",
    "file_path": "Rhea/11.ttl",
    "predicted_query": "# https://sparql.rhea-db.org/sparql\n# Federated query to retrieve the distribution of reactions according to the first class of the enzyme classification\n\nPREFIX rhea: <http://rdf.rhea-db.org/>\nPREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\n\nSELECT ?enzymeClass (COUNT(DISTINCT ?reaction) AS ?reactionCount)\nWHERE {\n  # Query Rhea for reactions\n  SERVICE <https://sparql.rhea-db.org/sparql> {\n    ?reaction rdf:type rhea:Reaction .\n  }\n\n  # Query SwissLipids for enzymes and their EC codes\n  SERVICE <https://sparql.swisslipids.org/sparql/> {\n    ?enzyme a <http://purl.uniprot.org/core/Protein>; # Assuming enzymes are instances of Protein class\n            <http://purl.uniprot.org/core/ecNumber> ?ecCode .\n    BIND(STRBEFORE(?ecCode, \".\") AS ?enzymeClass) # Extract the first class from the EC code\n  }\n\n  # Optional: Link reactions to enzymes (this part is speculative and might need adjustment based on actual data)\n  # Assuming there's a way to link Rhea reactions to enzymes in SwissLipids or UniProt.  This is a placeholder.\n  # The exact predicate to link reactions and enzymes needs to be determined based on the actual data.\n  # This part might require additional data integration or mapping.\n  # Example:  ?reaction somePredicate ?enzyme .  Replace somePredicate with the actual property.\n  #FILTER EXISTS {\n  #  SERVICE <https://sparql.rhea-db.org/sparql> {\n  #    ?reaction rhea:enzyme ?enzyme .  # Example: Assuming rhea:enzyme links to enzyme identifiers\n  #  }\n  #}\n\n  # Query UniProt for enzyme information and EC codes\n  SERVICE <https://sparql.uniprot.org/sparql> {\n     ?enzymeUniProt a <http://purl.uniprot.org/core/Protein>;\n                    <http://purl.uniprot.org/core/ecNumber> ?ecCodeUniProt .\n     BIND(STRBEFORE(?ecCodeUniProt, \".\") AS ?enzymeClassUniProt) # Extract the first class from the EC code\n  }\n  BIND(IF(BOUND(?enzymeClass), ?enzymeClass, ?enzymeClassUniProt) AS ?enzymeClass)\n}\nGROUP BY ?enzymeClass\nORDER BY DESC(?reactionCount)",
    "predicted_endpoint": "https://sparql.rhea-db.org/sparql",
    "predicted_endpoint_equal_to_target_endpoint": true,
    "predicted_endpoint_in_federates_with": false,
    "predicted_endpoint_or_federated_endpoint": true,
    "run_id_langsmith": "983ebba0-a0aa-4b4b-9df3-66e0dc985f06",
    "evaluation_timestamp": "2025-05-10T19:46:59.690887",
    "question_understanding_prompt_tokens": 257,
    "question_understanding_completion_tokens": 25,
    "question_understanding_total_tokens": 282,
    "sparql_query_construction_prompt_tokens": 1540,
    "sparql_query_construction_completion_tokens": 684,
    "sparql_query_construction_total_tokens": 2224,
    "is_valid_sparql": false,
    "sparql_syntax_error": "BIND: Variable used when already in-scope: ?enzymeClass in BIND(if(bound(?enzymeClass), ?enzymeClass, ?enzymeClassUniProt) AS ?enzymeClass)",
    "result_eval_f1_score": 0.0,
    "result_eval_precision": 0.0,
    "result_eval_recall": 0.0,
    "error_occured_at_endpoint": false,
    "predicted_query_result_is_empty": true,
    "ground_truth_query_result_is_empty": false,
    "error_occured_at_endpoint_message": "syntactically not correct"
  },
  {
    "resource": "https://sparql.rhea-db.org/.well-known/sparql-examples/109_Distribution_of_reactions_according_to_the_first_level_of_enzyme_classification",
    "natural_language_question": "Distribution of reactions according to the first level of enzyme classification",
    "ground_truth_query": "\nPREFIX rh:<http://rdf.rhea-db.org/>\nPREFIX ec:<http://purl.uniprot.org/enzyme/>\nPREFIX rdfs:<http://www.w3.org/2000/01/rdf-schema#>\nPREFIX skos:<http://www.w3.org/2004/02/skos/core#>\n\nSELECT\n  ?ecClass\n  (str(?ecName) as ?ecClassName)\n  (count(?reaction) as ?reactionCount)\nWHERE\n{\n  SERVICE <http://sparql.uniprot.org/sparql> {\n    VALUES (?ecClass) { (ec:1.-.-.-)(ec:2.-.-.-)(ec:3.-.-.-)(ec:4.-.-.-)(ec:5.-.-.-) (ec:6.-.-.-) (ec:7.-.-.-) }\n    ?ecNumber rdfs:subClassOf ?ecClass .\n    ?ecClass skos:prefLabel ?ecName .\n  }\n  ?reaction rdfs:subClassOf rh:Reaction .\n  ?reaction rh:ec ?ecNumber .\n}\nGROUP BY ?ecClass ?ecName\n",
    "target_endpoint": "https://sparql.rhea-db.org/sparql",
    "federates_with": [
      "http://sparql.uniprot.org/sparql"
    ],
    "endpoint_set": "Rhea",
    "file_path": "Rhea/109_Distribution_of_reactions_according_to_the_first_level_of_enzyme_classification.ttl",
    "predicted_query": "# https://sparql.rhea-db.org/sparql\n# Distribution of reactions according to the first level of enzyme classification\n\nPREFIX rhea: <http://rdf.rhea-db.org/>\nPREFIX ec: <http://purl.uniprot.org/enzyme/>\nPREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\n\nSELECT ?enzymeClass (COUNT(DISTINCT ?reaction) AS ?reactionCount)\nWHERE {\n  # Access Rhea database to retrieve reactions and their associated EC numbers\n  SERVICE <https://sparql.rhea-db.org/sparql> {\n    ?reaction rhea:ec ?ecNumber .\n  }\n  \n  # Access UniProt to retrieve enzyme class based on EC number\n  SERVICE <https://sparql.uniprot.org/sparql> {\n    ?enzyme a ec:EC ; # Ensure it's an enzyme\n            rdfs:label ?enzymeClass .\n    FILTER regex(?enzymeClass, \"^[1-7]([.]){1}\") # Filter for the first level of enzyme classification\n    FILTER (STR(?enzyme) = STR(?ecNumber)) # Match EC number from Rhea with enzyme from UniProt\n  }\n}\nGROUP BY ?enzymeClass\nORDER BY DESC(?reactionCount)",
    "predicted_endpoint": "https://sparql.rhea-db.org/sparql",
    "predicted_endpoint_equal_to_target_endpoint": true,
    "predicted_endpoint_in_federates_with": false,
    "predicted_endpoint_or_federated_endpoint": true,
    "run_id_langsmith": "45b68007-aa19-4e9e-9e69-0b854c833d54",
    "evaluation_timestamp": "2025-05-10T19:47:07.067393",
    "question_understanding_prompt_tokens": 247,
    "question_understanding_completion_tokens": 26,
    "question_understanding_total_tokens": 273,
    "sparql_query_construction_prompt_tokens": 1948,
    "sparql_query_construction_completion_tokens": 327,
    "sparql_query_construction_total_tokens": 2275,
    "is_valid_sparql": true,
    "sparql_syntax_error": "syntactically correct",
    "result_eval_f1_score": 0.0,
    "result_eval_precision": 0.0,
    "result_eval_recall": 0.0,
    "error_occured_at_endpoint": false,
    "predicted_query_result_is_empty": true,
    "ground_truth_query_result_is_empty": false,
    "error_occured_at_endpoint_message": "no error, but empty result"
  },
  {
    "resource": "https://sparql.rhea-db.org/.well-known/sparql-examples/12",
    "natural_language_question": "Select all Rhea reactions linked to protein sequences (enzymes and transporters) in UniProtKB",
    "ground_truth_query": "PREFIX rh: <http://rdf.rhea-db.org/>\nPREFIX up: <http://purl.uniprot.org/core/>\n\n# Query 12\n# Select all Rhea reactions used to annotate enzyme sequences in UniProtKB\n# return the number of UniProtKB entries\n# Federated query using a service to UniProt SPARQL endpoint\n#\n# This query corresponds to the Rhea website query:\n# https://www.rhea-db.org/rhea?query=uniprot:*\n#\nSELECT ?uniprotCount ?rhea ?accession ?equation \nWHERE {\n  SERVICE <https://sparql.uniprot.org/sparql> { \n  \tSELECT ?rhea (count(?uniprot) as ?uniprotCount) {\n      ?uniprot up:annotation/up:catalyticActivity/up:catalyzedReaction ?rhea . \n  \t}\n  \tGROUP BY ?rhea\n  }\n  ?rhea rh:accession ?accession .\n  ?rhea rh:equation ?equation .\n}",
    "target_endpoint": "https://sparql.rhea-db.org/sparql",
    "federates_with": [
      "https://sparql.uniprot.org/sparql"
    ],
    "endpoint_set": "Rhea",
    "file_path": "Rhea/12.ttl",
    "predicted_query": "# https://sparql.rhea-db.org/sparql\n# Federated query to retrieve Rhea reactions linked to protein sequences in UniProtKB\n\nPREFIX rhea: <http://rdf.rhea-db.org/>\nPREFIX uniprot: <http://purl.uniprot.org/core/>\n\nSELECT DISTINCT ?rheaReaction\nWHERE {\n  # Query UniProtKB for proteins (enzymes and transporters)\n  SERVICE <https://sparql.uniprot.org/sparql> {\n    ?protein a uniprot:Protein .\n    # Assuming enzymes and transporters are linked to Rhea via some identifier\n    ?protein uniprot:database ?dbXref .\n    FILTER (CONTAINS(str(?dbXref), \"rhea\")) # Filter for Rhea xrefs\n    BIND(IRI(REPLACE(str(?dbXref), \"^rhea:(.*)\", \"http://rdf.rhea-db.org/\\\\1\")) AS ?rheaReaction)\n  }\n  \n  # Query Rhea for reaction details using the identifiers obtained from UniProtKB\n  SERVICE <https://sparql.rhea-db.org/sparql> {\n    ?rheaReaction a rhea:Reaction .\n  }\n}",
    "predicted_endpoint": "https://sparql.rhea-db.org/sparql",
    "predicted_endpoint_equal_to_target_endpoint": true,
    "predicted_endpoint_in_federates_with": false,
    "predicted_endpoint_or_federated_endpoint": true,
    "run_id_langsmith": "c91a6ce0-2d0d-4bdf-990e-2bb730ffa6f2",
    "evaluation_timestamp": "2025-05-10T19:47:17.209037",
    "question_understanding_prompt_tokens": 256,
    "question_understanding_completion_tokens": 30,
    "question_understanding_total_tokens": 286,
    "sparql_query_construction_prompt_tokens": 2003,
    "sparql_query_construction_completion_tokens": 273,
    "sparql_query_construction_total_tokens": 2276,
    "is_valid_sparql": true,
    "sparql_syntax_error": "syntactically correct",
    "result_eval_f1_score": 0.0,
    "result_eval_precision": 0.0,
    "result_eval_recall": 0.0,
    "error_occured_at_endpoint": false,
    "predicted_query_result_is_empty": true,
    "ground_truth_query_result_is_empty": false,
    "error_occured_at_endpoint_message": "no error, but empty result"
  },
  {
    "resource": "https://sparql.rhea-db.org/.well-known/sparql-examples/112_Total_number_of_reaction_ec_protein_links",
    "natural_language_question": "Total number of <reaction> <ec> <protein> links",
    "ground_truth_query": "PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX rh:<http://rdf.rhea-db.org/>\nPREFIX ec:<http://purl.uniprot.org/enzyme/>\nPREFIX up:<http://purl.uniprot.org/core/>\n\nSELECT\n  (count(?reaction) as ?reactionEcProteinLinkCount)\nWHERE {\n  ?reaction rdfs:subClassOf rh:Reaction .\n  ?reaction rh:ec ?enzyme\n  SERVICE <http://sparql.uniprot.org/sparql> {\n    ?protein up:reviewed true .\n    ?protein up:enzyme ?enzyme.\n  }\n}",
    "target_endpoint": "https://sparql.rhea-db.org/sparql",
    "federates_with": [
      "http://sparql.uniprot.org/sparql"
    ],
    "endpoint_set": "Rhea",
    "file_path": "Rhea/112_Total_number_of_reaction_ec_protein_links.ttl",
    "predicted_query": "# https://sparql.rhea-db.org/sparql\n# Federated query to count the number of reaction, protein, and EC number links.\nPREFIX rhea: <http://rdf.rhea-db.org/>\nPREFIX uniprot: <http://purl.uniprot.org/core/>\n\nSELECT (COUNT(DISTINCT ?reaction) AS ?count)\nWHERE {\n  # Find reactions in RheaDB\n  SERVICE <https://sparql.rhea-db.org/sparql> {\n    ?reaction a rhea:Reaction .\n  }\n  \n  # Find proteins associated with reactions in RheaDB\n  SERVICE <https://sparql.rhea-db.org/sparql> {\n    ?reaction rhea:equation ?equation .\n    ?equation rhea:side ?side .\n    ?side rhea:component ?component .\n    ?component rhea:accession ?protein .\n  }\n  \n  # Find EC numbers associated with proteins in UniProt\n  SERVICE <https://sparql.uniprot.org/sparql> {\n    ?protein uniprot:ecNumber ?ec .\n  }\n  \n  # Filter for reactions, proteins, and EC numbers\n  FILTER (BOUND(?reaction) && BOUND(?protein) && BOUND(?ec))\n}",
    "predicted_endpoint": "https://sparql.rhea-db.org/sparql",
    "predicted_endpoint_equal_to_target_endpoint": true,
    "predicted_endpoint_in_federates_with": false,
    "predicted_endpoint_or_federated_endpoint": true,
    "run_id_langsmith": "173e5903-0a41-45e4-837a-c13d4232646b",
    "evaluation_timestamp": "2025-05-10T19:47:28.812829",
    "question_understanding_prompt_tokens": 253,
    "question_understanding_completion_tokens": 21,
    "question_understanding_total_tokens": 274,
    "sparql_query_construction_prompt_tokens": 1926,
    "sparql_query_construction_completion_tokens": 0,
    "sparql_query_construction_total_tokens": 1926,
    "is_valid_sparql": true,
    "sparql_syntax_error": "syntactically correct",
    "result_eval_f1_score": 0.0,
    "result_eval_precision": 0.0,
    "result_eval_recall": 0.0,
    "error_occured_at_endpoint": false,
    "predicted_query_result_is_empty": false,
    "ground_truth_query_result_is_empty": false,
    "error_occured_at_endpoint_message": "no error"
  },
  {
    "resource": "https://sparql.rhea-db.org/.well-known/sparql-examples/19_draft_human_metabolome",
    "natural_language_question": "Generate a draft human metabolome",
    "ground_truth_query": "PREFIX chebislash: <http://purl.obolibrary.org/obo/chebi/>\nPREFIX rh: <http://rdf.rhea-db.org/>\nPREFIX taxon: <http://purl.uniprot.org/taxonomy/>\nPREFIX up: <http://purl.uniprot.org/core/>\n\nSELECT\n  ?uniprot ?mnemonic ?rhea ?chebi ?smiles ?inchiKey\nWHERE\n{\n  ?rhea rh:side/rh:contains/rh:compound ?compound .\n  ?compound (rh:chebi|(rh:reactivePart/rh:chebi)|(rh:underlyingChebi/rh:chebi)) ?chebi .\n  ?chebi chebislash:smiles ?smiles ;\n          chebislash:inchikey ?inchiKey .\n  SERVICE <https://sparql.uniprot.org/sparql> {\n     ?uniprot up:annotation/up:catalyticActivity/up:catalyzedReaction ?rhea ;\n                                             up:organism taxon:9606 ;\n                                             up:mnemonic ?mnemonic .\n\n   }\n}",
    "target_endpoint": "https://sparql.rhea-db.org/sparql/",
    "federates_with": [
      "https://sparql.uniprot.org/sparql"
    ],
    "endpoint_set": "Rhea",
    "file_path": "Rhea/19_draft_human_metabolome.ttl",
    "predicted_query": "# https://sparql.uniprot.org/sparql\n# This query aims to retrieve information about the human metabolome.\n# It federates with UniProt to find human-related data and potentially other relevant databases for metabolome information.\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX up: <http://purl.uniprot.org/core/>\nPREFIX taxon: <http://purl.uniprot.org/taxonomy/>\n\nSELECT DISTINCT ?metabolome ?metabolomeName\nWHERE {\n  # Find human-related entities in UniProt.\n  SERVICE <https://sparql.uniprot.org/sparql> {\n    VALUES ?taxon { taxon:9606 }  # Homo sapiens\n    ?protein up:organism ?taxon .\n    ?protein rdfs:label ?proteinName .\n    FILTER (CONTAINS(LCASE(?proteinName), \"metabolic\")) # Filter for proteins with metabolic function\n  }\n  \n  # Attempt to link to metabolome information.  This part is speculative as the direct link may not exist.\n  # It assumes that there might be a relationship between proteins and metabolome entities.\n  # This part might need adjustment based on the actual data structure.\n  BIND(IRI(CONCAT(\"http://example.org/metabolome/\", REPLACE(STR(?protein), \"http://purl.uniprot.org/uniprot/\", \"\"))) AS ?metabolome) # Create a hypothetical metabolome IRI\n  BIND(CONCAT(\"Metabolome related to \", ?proteinName) AS ?metabolomeName) # Create a hypothetical metabolome name\n  \n  #Consider federating with other databases like Rhea or SwissLipids if they contain metabolome information\n  #SERVICE <https://sparql.rhea-db.org/sparql> {\n  #  ?reaction rdfs:label ?reactionName .\n  #  FILTER (CONTAINS(LCASE(?reactionName), \"metabolism\"))\n  #}\n}",
    "predicted_endpoint": "https://sparql.uniprot.org/sparql",
    "predicted_endpoint_equal_to_target_endpoint": false,
    "predicted_endpoint_in_federates_with": true,
    "predicted_endpoint_or_federated_endpoint": true,
    "run_id_langsmith": "1b738400-9a08-4075-973b-1b105459cdc2",
    "evaluation_timestamp": "2025-05-10T19:47:42.850232",
    "question_understanding_prompt_tokens": 245,
    "question_understanding_completion_tokens": 20,
    "question_understanding_total_tokens": 265,
    "sparql_query_construction_prompt_tokens": 1299,
    "sparql_query_construction_completion_tokens": 0,
    "sparql_query_construction_total_tokens": 1299,
    "is_valid_sparql": true,
    "sparql_syntax_error": "syntactically correct",
    "result_eval_f1_score": 0.0,
    "result_eval_precision": 0.0,
    "result_eval_recall": 0.0,
    "error_occured_at_endpoint": false,
    "predicted_query_result_is_empty": true,
    "ground_truth_query_result_is_empty": false,
    "error_occured_at_endpoint_message": "no error, but empty result"
  },
  {
    "resource": "https://sparql.rhea-db.org/.well-known/sparql-examples/20_search_chemical_names_in_japanese",
    "natural_language_question": "Search for Chemical names starting in Japanese, translated to english using allie",
    "ground_truth_query": "PREFIX oboInOwl: <http://www.geneontology.org/formats/oboInOwl#>\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\n\nSELECT\n*\nWHERE {\nSERVICE <https://data.allie.dbcls.jp/sparql>{\n        ?x rdfs:label \"1,2,4-トリクロロベンゼン\"@ja ;\n            rdfs:label ?englishLabel .\n        FILTER(lang(?englishLabel) = \"en\")\n    }\n  BIND(STR(?englishLabel) AS ?englishLabelStr)\n  ?chebi rdfs:label|oboInOwl:hasSynonym ?englishLabelStr .\n}",
    "target_endpoint": "https://sparql.rhea-db.org/sparql/",
    "federates_with": [
      "https://data.allie.dbcls.jp/sparql"
    ],
    "endpoint_set": "Rhea",
    "file_path": "Rhea/20_search_chemical_names_in_japanese.ttl",
    "predicted_query": "# https://sparql.uniprot.org/sparql\n# Federated SPARQL query to search for chemical names starting with \"Japanese\" and translate them to English using Allie.\n# Note: This query assumes that there is a service called \"Allie\" that can translate chemical names.\n#       Since there is no direct translation service available in the provided endpoints, this query is based on a hypothetical scenario.\n\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX chebi: <http://purl.obolibrary.org/obo/CHEBI_>\n\nSELECT ?chemicalNameEn\nWHERE {\n  # Query Rhea for chemical entities with names starting with \"Japanese\"\n  SERVICE <https://sparql.rhea-db.org/sparql> {\n    ?chemical a chebi:CHEBI_24431 . # Assuming CHEBI_24431 represents chemical entities\n    ?chemical rdfs:label ?chemicalName .\n    FILTER STRSTARTS(?chemicalName, \"Japanese\")\n  }\n\n  # Hypothetical service to translate the chemical name to English using \"Allie\"\n  # Replace this with an actual translation service if available\n  #BIND(allie:translate(?chemicalName, \"en\") AS ?chemicalNameEn)\n  BIND (IF (LANG(?chemicalName) = 'en', ?chemicalName, \"Translation not available\") AS ?chemicalNameEn) # Placeholder if translation service is unavailable\n}",
    "predicted_endpoint": "https://sparql.uniprot.org/sparql",
    "predicted_endpoint_equal_to_target_endpoint": false,
    "predicted_endpoint_in_federates_with": false,
    "predicted_endpoint_or_federated_endpoint": false,
    "run_id_langsmith": "e2ec4184-a858-43c0-95b6-5aaffdd6ad5d",
    "evaluation_timestamp": "2025-05-10T19:47:55.346127",
    "question_understanding_prompt_tokens": 251,
    "question_understanding_completion_tokens": 23,
    "question_understanding_total_tokens": 274,
    "sparql_query_construction_prompt_tokens": 1326,
    "sparql_query_construction_completion_tokens": 0,
    "sparql_query_construction_total_tokens": 1326,
    "is_valid_sparql": true,
    "sparql_syntax_error": "syntactically correct",
    "result_eval_f1_score": 0.0,
    "result_eval_precision": 0.0,
    "result_eval_recall": 0.0,
    "error_occured_at_endpoint": false,
    "predicted_query_result_is_empty": true,
    "ground_truth_query_result_is_empty": false,
    "error_occured_at_endpoint_message": "no error, but empty result"
  },
  {
    "resource": "https://sparql.rhea-db.org/.well-known/sparql-examples/117_Retrieve_parent_reactions_and_their_catalyzing_enzymes_for_a_metabolite_that_is_not_directly_involved_in_a_reaction",
    "natural_language_question": "Retrieve parent reactions (and their catalyzing enzymes) for a metabolite that is not directly involved in a reaction (ex: CHEBI:83137).",
    "ground_truth_query": "PREFIX CHEBI: <http://purl.obolibrary.org/obo/CHEBI_>\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX rh:<http://rdf.rhea-db.org/>\nPREFIX ec:<http://purl.uniprot.org/enzyme/>\nPREFIX up:<http://purl.uniprot.org/core/>\nPREFIX taxon:<http://purl.uniprot.org/taxonomy/>\nPREFIX keywords:<http://purl.uniprot.org/keywords/>\n\nSELECT\n  ?chebi\n  ?ecNumber\n  (count(?protein) as ?proteinCount)\n  ?reaction\n  ?equation\nWHERE {\n  ?reaction rdfs:subClassOf rh:Reaction .\n  ?reaction rh:status rh:Approved .\n  ?reaction rh:equation ?equation .\n  ?reaction rh:ec ?ecNumber .\n  ?reaction rh:side ?reactionSide .\n  ?reactionSide rh:contains ?participant .\n  ?participant rh:compound ?compound .\n  ?compound rh:chebi ?chebi .\n  CHEBI:83137 rdfs:subClassOf+ ?chebi.\n\n  SERVICE <https://sparql.uniprot.org/sparql> {\n  ?protein a up:Protein .\n  ?protein up:reviewed true .\n    {?protein up:enzyme ?ecNumber}\n  UNION\n    {?protein up:domain/up:enzyme ?ecNumber}\n  UNION\n    {?protein up:component/up:enzyme ?ecNumber} .\n  }\n} \nGROUP BY ?chebi ?ecNumber ?reaction ?equation",
    "target_endpoint": "https://sparql.rhea-db.org/sparql",
    "federates_with": [
      "https://sparql.uniprot.org/sparql"
    ],
    "endpoint_set": "Rhea",
    "file_path": "Rhea/117_Retrieve_parent_reactions_and_their_catalyzing_enzymes_for_a_metabolite_that_is_not_directly_involved_in_a_reaction.ttl",
    "predicted_query": "# https://sparql.rhea-db.org/sparql\n# Federated query to find parent reactions and catalyzing enzymes for a metabolite not directly involved in a reaction.\nPREFIX rhea: <http://rdf.rhea-db.org/>\nPREFIX chebi: <http://purl.obolibrary.org/obo/CHEBI_>\nPREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\n\nSELECT DISTINCT ?reaction ?reactionLabel ?enzyme ?enzymeLabel\nWHERE {\n  # Find reactions that have CHEBI:83137 as a participant\n  {\n    SERVICE <https://sparql.rhea-db.org/sparql> {\n      VALUES ?chebi { chebi:83137 } # The metabolite of interest\n      ?reaction rhea: Rhea_has_participant ?chebi .\n      ?reaction rdfs:label ?reactionLabel .\n    }\n  }\n  # Optional: Find enzymes catalyzing the reaction from UniProt\n  OPTIONAL {\n    SERVICE <https://sparql.uniprot.org/sparql> {\n      ?enzyme rdfs:seeAlso ?reaction . # Assuming rdfs:seeAlso links to Rhea reactions\n      ?enzyme rdfs:label ?enzymeLabel .\n    }\n  }\n}",
    "predicted_endpoint": "https://sparql.rhea-db.org/sparql",
    "predicted_endpoint_equal_to_target_endpoint": true,
    "predicted_endpoint_in_federates_with": false,
    "predicted_endpoint_or_federated_endpoint": true,
    "run_id_langsmith": "e50bc1a5-f0dc-47c5-8739-747facfe2389",
    "evaluation_timestamp": "2025-05-10T19:48:04.661153",
    "question_understanding_prompt_tokens": 270,
    "question_understanding_completion_tokens": 43,
    "question_understanding_total_tokens": 313,
    "sparql_query_construction_prompt_tokens": 2478,
    "sparql_query_construction_completion_tokens": 330,
    "sparql_query_construction_total_tokens": 2808,
    "is_valid_sparql": false,
    "sparql_syntax_error": "Lexical error at line 14, column 43.  Encountered: '32' (32), after prefix \"Rhea_has_participant\"",
    "result_eval_f1_score": 0.0,
    "result_eval_precision": 0.0,
    "result_eval_recall": 0.0,
    "error_occured_at_endpoint": false,
    "predicted_query_result_is_empty": true,
    "ground_truth_query_result_is_empty": false,
    "error_occured_at_endpoint_message": "syntactically not correct"
  },
  {
    "resource": "https://sparql.rhea-db.org/.well-known/sparql-examples/18",
    "natural_language_question": "Use <a href=\"https://idsm.elixir-czech.cz/sparql\">IDSM Sachem</a> to find ChEBIs with a a <a href=\"https://www.ebi.ac.uk/chebi/searchId.do?chebiId=CHEBI:35516\">Cholestane</a> skeleton (in SMILES). Then match returned ChEBIs to Rhea undirected reactions.",
    "ground_truth_query": "PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX rh: <http://rdf.rhea-db.org/>\nPREFIX sachem: <http://bioinfo.uochb.cas.cz/rdf/v1.0/sachem#>\n\n\nSELECT \n  ?rhea \n  ?chebi\nWHERE {\n  SERVICE <https://idsm.elixir-czech.cz/sparql/endpoint/chebi> {\n    ?chebi sachem:substructureSearch [\n        sachem:query \"[C@]12(CCC3CCCC[C@]3(C)[C@@]1([H])CC[C@]1(C)[C@@]([H])([C@@](C)([H])CCCC(C)C)CC[C@@]21[H])[H]\" ].\n  }\n  ?rhea rh:side/rh:contains/rh:compound/rdfs:subClassOf ?chebi .\n}",
    "target_endpoint": "https://sparql.rhea-db.org/sparql",
    "federates_with": [
      "https://idsm.elixir-czech.cz/sparql/endpoint/chebi"
    ],
    "endpoint_set": "Rhea",
    "file_path": "Rhea/18.ttl",
    "predicted_query": "# https://sparql.rhea-db.org/sparql\n# Federated SPARQL query to find ChEBIs with a Cholestane skeleton and match them to Rhea undirected reactions.\nPREFIX rhea: <http://rdf.rhea-db.org/>\nPREFIX chebi: <http://purl.obolibrary.org/obo/CHEBI_>\nPREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>\n\nSELECT DISTINCT ?chebiEntity ?rheaReaction\nWHERE {\n  # Find ChEBI entities with a Cholestane skeleton using the IDSM Sachem endpoint.\n  SERVICE <https://idsm.elixir-czech.cz/sparql> {\n    SELECT DISTINCT ?chebiEntity WHERE {\n      ?chebiEntity a chebi:22886 .  #CHEBI:22886 is the class for chemical entity\n      ?chebiEntity chebi:35516 . #CHEBI:35516 is the entity for Cholestane skeleton\n    }\n  }\n\n  # Match the found ChEBI entities to Rhea undirected reactions using the Rhea DB endpoint.\n  SERVICE <https://sparql.rhea-db.org/sparql> {\n    ?rheaReaction rhea:equation ?equation .\n    ?equation rhea:contains ?chebiEntity .\n  }\n}",
    "predicted_endpoint": "https://sparql.rhea-db.org/sparql",
    "predicted_endpoint_equal_to_target_endpoint": true,
    "predicted_endpoint_in_federates_with": false,
    "predicted_endpoint_or_federated_endpoint": true,
    "run_id_langsmith": "75725e53-003c-44f7-873e-b3829e5a6796",
    "evaluation_timestamp": "2025-05-10T19:48:14.422633",
    "question_understanding_prompt_tokens": 332,
    "question_understanding_completion_tokens": 52,
    "question_understanding_total_tokens": 384,
    "sparql_query_construction_prompt_tokens": 2561,
    "sparql_query_construction_completion_tokens": 324,
    "sparql_query_construction_total_tokens": 2885,
    "is_valid_sparql": false,
    "sparql_syntax_error": "Encountered \" \".\" \". \"\" at line 13, column 32.\nWas expecting one of:\n     ...\n     ...\n     ...\n     ...\n     ...\n     ...\n    \"true\" ...\n    \"false\" ...\n     ...\n     ...\n     ...\n     ...\n     ...\n     ...\n     ...\n     ...\n     ...\n     ...\n     ...\n     ...\n     ...\n    \"(\" ...\n     ...\n    \"[\" ...\n     ...\n    \"<<(\" ...\n    \"<<\" ...\n    \"+\" ...\n    \"*\" ...\n    \"/\" ...\n    \"|\" ...\n    \"?\" ...",
    "result_eval_f1_score": 0.0,
    "result_eval_precision": 0.0,
    "result_eval_recall": 0.0,
    "error_occured_at_endpoint": false,
    "predicted_query_result_is_empty": true,
    "ground_truth_query_result_is_empty": false,
    "error_occured_at_endpoint_message": "syntactically not correct"
  },
  {
    "resource": "https://sparql.rhea-db.org/.well-known/sparql-examples/115_Retrieve_the_set_of_metabolites_involved_in_reactions_catalyzed_by_human_genes_HUMAN_reference_proteome",
    "natural_language_question": "Retrieve the set of metabolites involved in reactions catalyzed by human genes (HUMAN reference proteome)",
    "ground_truth_query": "\nPREFIX rh:<http://rdf.rhea-db.org/>\nPREFIX taxon:<http://purl.uniprot.org/taxonomy/>\nPREFIX ec:<http://purl.uniprot.org/enzyme/>\nPREFIX rdfs:<http://www.w3.org/2000/01/rdf-schema#>\nPREFIX up:<http://purl.uniprot.org/core/>\nPREFIX keywords:<http://purl.uniprot.org/keywords/>\n\nSELECT\n  ?chebi\n  ?reaction\n  ?ecNumber\n  ?protein\n  ?ensemblTranscript\n  ?ensemblGene\nWHERE {\n  SERVICE <https://sparql.uniprot.org/sparql> {\n    ?protein a up:Protein .\n    ?protein up:reviewed true .\n    ?protein up:organism taxon:9606 .\n    ?protein up:classifiedWith keywords:1185 .\n\n    ?protein rdfs:seeAlso ?ensemblTranscript .\n    ?ensemblTranscript a up:Transcript_Resource .\n    ?ensemblTranscript up:database <http://purl.uniprot.org/database/Ensembl> .\n    ?ensemblTranscript up:transcribedFrom ?ensemblGene .\n\n      {?protein up:enzyme ?ecNumber .}\n    UNION\n      {?protein up:domain/up:enzyme ?ecNumber .}\n    UNION\n      {?protein up:component/up:enzyme ?ecNumber .}\n  }\n\n  ?reaction rdfs:subClassOf rh:Reaction .\n  ?reaction rh:status rh:Approved .\n  ?reaction rh:ec ?ecNumber .\n  ?reaction rh:side ?reactionSide .\n  ?reactionSide rh:contains ?participant .\n  ?participant rh:compound ?compound .\n  ?compound rh:chebi ?chebi . # only considering small molecules participants\n}",
    "target_endpoint": "https://sparql.rhea-db.org/sparql",
    "federates_with": [
      "https://sparql.uniprot.org/sparql"
    ],
    "endpoint_set": "Rhea",
    "file_path": "Rhea/115_Retrieve_the_set_of_metabolites_involved_in_reactions_catalyzed_by_human_genes_HUMAN_reference_proteome.ttl",
    "predicted_query": "# https://sparql.rhea-db.org/sparql\n# Federated SPARQL query to retrieve metabolites involved in reactions catalyzed by human genes.\nPREFIX rhea: <http://rdf.rhea-db.org/>\nPREFIX chebi: <http://purl.obolibrary.org/obo/CHEBI_>\nPREFIX uniprot: <http://purl.uniprot.org/core/>\nPREFIX up: <http://purl.uniprot.org/core/>\n\nSELECT DISTINCT ?metaboliteName\nWHERE {\n  # Find human proteins (genes) in UniProt\n  SERVICE <https://sparql.uniprot.org/sparql> {\n    SELECT DISTINCT ?protein\n    WHERE {\n      ?protein a uniprot:Protein .\n      ?protein up:organism <http://purl.uniprot.org/taxonomy/9606> .  # Human\n    }\n  }\n\n  # Find Rhea reactions associated with these proteins (genes)\n  SERVICE <https://sparql.rhea-db.org/sparql> {\n    ?reaction rhea:enzyme ?protein .\n    ?reaction rhea:hasParticipant ?participant .\n    ?participant rhea:name ?metaboliteName .\n    FILTER(STRSTARTS(STR(?participant), STR(chebi:))) # Filter to only include ChEBI metabolites\n  }\n}",
    "predicted_endpoint": "https://sparql.rhea-db.org/sparql",
    "predicted_endpoint_equal_to_target_endpoint": true,
    "predicted_endpoint_in_federates_with": false,
    "predicted_endpoint_or_federated_endpoint": true,
    "run_id_langsmith": "26621df7-6cac-4682-b8c6-edb977cd5e97",
    "evaluation_timestamp": "2025-05-10T19:48:22.022604",
    "question_understanding_prompt_tokens": 255,
    "question_understanding_completion_tokens": 25,
    "question_understanding_total_tokens": 280,
    "sparql_query_construction_prompt_tokens": 2393,
    "sparql_query_construction_completion_tokens": 304,
    "sparql_query_construction_total_tokens": 2697,
    "is_valid_sparql": true,
    "sparql_syntax_error": "syntactically correct",
    "result_eval_f1_score": 0.0,
    "result_eval_precision": 0.0,
    "result_eval_recall": 0.0,
    "error_occured_at_endpoint": true,
    "predicted_query_result_is_empty": true,
    "ground_truth_query_result_is_empty": true,
    "error_occured_at_endpoint_message": "The read operation timed out"
  }
]