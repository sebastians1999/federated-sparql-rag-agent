
# Natural Language Question
# =======================
Connect patents cited in UniProtKB with those in the patent database at EPO via publication number, whose grant date is more than twenty years in the past.

# Target Endpoint
# ===============
https://sparql.uniprot.org/sparql/

# Ground Truth Query
# =================
PREFIX patent: <http://data.epo.org/linked-data/def/patent/>
PREFIX skos: <http://www.w3.org/2004/02/skos/core#>
PREFIX up: <http://purl.uniprot.org/core/>

SELECT ?grantDate ?patent ?application ?applicationNo
WHERE
{
    ?citation a up:Patent_Citation ;
  skos:exactMatch ?patent .
  BIND(SUBSTR(STR(?patent), 35) AS ?applicationNo)
  BIND(SUBSTR(STR(?patent), 33, 2) AS ?countryCode)
  SERVICE <https://data.epo.org/linked-data/query>{
    ?publication patent:publicationNumber ?applicationNo ;
      patent:application ?application .
    ?application patent:grantDate ?grantDate .
  }
  BIND((year(now()) - 20) AS ?thisYearMinusTwenty)
  BIND(year(?grantDate) AS ?grantYear)
  FILTER(?grantYear < ?thisYearMinusTwenty)
} ORDER BY ?grantYear

# Predicted Query
# ==============
# https://sparql.uniprot.org/sparql
# Federated SPARQL query to connect patents cited in UniProtKB with those in the patent database at EPO via publication number, whose grant date is more than twenty years in the past.
PREFIX up: <http://purl.uniprot.org/core/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?uniprotEntry ?patentPublicationNumber ?patentGrantDate
WHERE {
  # Query UniProtKB for entries with patent citations
  SERVICE <https://sparql.uniprot.org/sparql> {
    ?uniprotEntry a up:Protein .
    ?uniprotEntry up:citation ?citation .
    ?citation up:publication ?patent .
    ?patent rdfs:label ?patentPublicationNumber . # Assuming patent publication number is stored as label
    FILTER (REGEX(?patentPublicationNumber, "^[A-Z0-9]+$")) # Filter to ensure it looks like a patent number
  }
  
  # Query EPO for patent grant dates based on publication number
  # This assumes there is an EPO SPARQL endpoint (not provided, so this part is illustrative)
  # SERVICE <EPO_SPARQL_ENDPOINT> { # Replace with actual EPO endpoint
  #   ?patentURI a <EPO_Patent_Class> . # Replace with actual EPO patent class
  #   ?patentURI <EPO_publicationNumber_property> ?patentPublicationNumber . # Replace with actual property
  #   ?patentURI <EPO_grantDate_property> ?patentGrantDate . # Replace with actual property
  #   FILTER (?patentGrantDate < (NOW() - "P20Y"^^xsd:duration)) # Filter for patents granted more than 20 years ago
  # }
  
  #OPTIONAL {  #Illustrative example of how to include the EPO data if available
  #  SERVICE <EPO_SPARQL_ENDPOINT> {
  #    ?patentURI <EPO_publicationNumber_property> ?patentPublicationNumber .
  #    ?patentURI <EPO_grantDate_property> ?patentGrantDate .
  #  }
  #}
  
  #FILTER (BOUND(?patentGrantDate)) #Only return results where patentGrantDate is available
}
