[
  {
    "resource": "https://sparql.swisslipids.org/.well-known/sparql-examples/16",
    "natural_language_question": "For a given lipid (SWISSLIPID:000399814, Ceramide), return a list of all enzymes in UniProtKB/Swiss-Prot annotated to catalyze reactions involving that lipid.\nThis query does not consider the hierarchy: it looks for reactions and enzymes only for the specified lipid.",
    "ground_truth_query": "PREFIX SWISSLIPID: <https://swisslipids.org/rdf/SLM_>\nPREFIX owl: <http://www.w3.org/2002/07/owl#>\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX rh: <http://rdf.rhea-db.org/>\nPREFIX up: <http://purl.uniprot.org/core/>\n\n# Example 16\nSELECT ?startId ?startName ?uniprot\nWHERE\n{\n  # SwissLipids query (list of) identifier(s)\n  VALUES ?startId { SWISSLIPID:000399814 }\n  # name\n  ?startId rdfs:label ?startName .\n  # ChEBI x-ref\n  ?startId owl:equivalentClass ?chebi .\n  # federated query to Rhea\n  SERVICE <https://sparql.rhea-db.org/sparql> {\n  \t?rhea rh:side/rh:contains/rh:compound/rh:chebi ?chebi .\n  }    \n  # federated query to UniProt\n  SERVICE <https://sparql.uniprot.org/sparql> {\n    ?uniprot up:reviewed true .\n    ?uniprot up:annotation/up:catalyticActivity/up:catalyzedReaction ?rhea .\n  }\n} \nORDER BY ?startId",
    "target_endpoint": "https://sparql.swisslipids.org/sparql/",
    "federates_with": [
      "https://sparql.uniprot.org/sparql",
      "https://sparql.rhea-db.org/sparql"
    ],
    "endpoint_set": "SwissLipids",
    "file_path": "SwissLipids/16.ttl",
    "predicted_query": "# https://sparql.swisslipids.org/sparql/\n# Federated SPARQL query to find enzymes catalyzing reactions involving a specific lipid.\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX sl: <http://swisslipids.org/rdf#>\nPREFIX uniprot: <http://purl.uniprot.org/core/>\n\nSELECT DISTINCT ?enzyme ?enzymeName\nWHERE {\n  # Find reactions associated with the given lipid in SwissLipids\n  VALUES ?lipid { sl:SWISSLIPID_000399814 }  # SWISSLIPID:000399814 = Ceramide\n  ?reaction sl:refersTo ?lipid .\n\n  # Find enzymes that catalyze these reactions.\n  ?enzyme sl:catalyzes ?reaction .\n\n  # Get enzyme information from UniProt.\n  SERVICE <https://sparql.uniprot.org/sparql> {\n    ?enzyme uniprot:encodedBy ?uniprotEntry . # Assuming enzyme URIs are the same as UniProt entries. Adjust if needed.\n    ?uniprotEntry rdfs:label ?enzymeName .\n  }\n}",
    "predicted_endpoint": "https://sparql.swisslipids.org/sparql/",
    "predicted_endpoint_equal_to_target_endpoint": true,
    "predicted_endpoint_in_federates_with": false,
    "predicted_endpoint_or_federated_endpoint": true,
    "run_id_langsmith": "f5695797-3f41-461b-b5c2-9b139fcb7bef",
    "evaluation_timestamp": "2025-04-23T11:26:53.042680",
    "question_understanding_tokens": 298,
    "question_understanding_completion_tokens": 72,
    "question_understanding_total_tokens": 370,
    "sparql_construction_prompt_tokens": 3310,
    "sparql_construction_completion_tokens": 274,
    "sparql_construction_total_tokens": 3584,
    "is_valid_sparql": true,
    "sparql_syntax_error": "syntactically correct",
    "ground_truth_query_result_is_empty": false,
    "result_eval_f1_score": 0.0,
    "result_eval_precision": 0.0,
    "result_eval_recall": 0.0,
    "error_occured_at_endpoint": false,
    "predicted_query_result_is_empty": true,
    "error_occured_at_endpoint_message": "no error, but empty result"
  },
  {
    "resource": "https://sparql.swisslipids.org/.well-known/sparql-examples/6",
    "natural_language_question": "For a given lipid (SWISSLIPID:000399814, Ceramide), return a list of all corresponding reactions (Rhea IDs and equation), as well as their enzymes as annotated in UniProtKB/Swiss-Prot) enzymes themselves (ID and protein name).\nThis query does not consider the hierarchy: it looks for reactions and enzymes only for the specified lipid.",
    "ground_truth_query": "PREFIX SWISSLIPID: <https://swisslipids.org/rdf/SLM_>\nPREFIX owl: <http://www.w3.org/2002/07/owl#>\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX rh: <http://rdf.rhea-db.org/>\nPREFIX up: <http://purl.uniprot.org/core/>\n\n# Example 6\nSELECT ?startId ?startName ?chebi ?rhea ?rheaEquation ?uniprot ?uniprotName\nWHERE\n{\n  # SwissLipids query (list of) identifier(s)\n  VALUES ?startId { SWISSLIPID:000399814 }\n  # name\n  ?startId rdfs:label ?startName .\n  # ChEBI x-ref\n  ?startId owl:equivalentClass ?chebi .\n  # federated query to Rhea\n  SERVICE <https://sparql.rhea-db.org/sparql> {\n  \t?rhea rh:equation ?rheaEquation .\n  \t?rhea rh:side/rh:contains/rh:compound/rh:chebi ?chebi .\n  }    \n  # federated query to UniProt\n  SERVICE <https://sparql.uniprot.org/sparql> {\n    ?uniprot up:reviewed true .\n    ?uniprot up:recommendedName/up:fullName ?uniprotName .\n    ?uniprot up:annotation/up:catalyticActivity/up:catalyzedReaction ?rhea .\n  }\n} \nORDER BY ?startId",
    "target_endpoint": "https://sparql.swisslipids.org/sparql/",
    "federates_with": [
      "https://sparql.uniprot.org/sparql",
      "https://sparql.rhea-db.org/sparql"
    ],
    "endpoint_set": "SwissLipids",
    "file_path": "SwissLipids/6.ttl",
    "predicted_query": "# https://sparql.swisslipids.org/sparql/\n# Prefix definitions for readability\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX swisslipids: <http://www.swisslipids.org/rdf#>\nPREFIX chebi: <http://purl.obolibrary.org/obo/CHEBI_>\n\nSELECT DISTINCT ?rheaID ?equation ?enzymeID ?proteinName\nWHERE {\n  # Find reactions associated with the given lipid in SwissLipids\n  SERVICE <https://sparql.swisslipids.org/sparql/> {\n    BIND(swisslipids:000399814 AS ?lipidID) # Bind the lipid ID\n    ?lipid swisslipids:identifier ?lipidID .\n    ?reaction swisslipids:substrate | swisslipids:product ?lipid . # Find reactions where the lipid is a substrate or product\n    ?reaction rdfs:seeAlso ?rheaID . # Get the Rhea ID\n  }\n\n  # Get the equation for the Rhea reaction\n  SERVICE <https://sparql.rhea-db.org/sparql> {\n    ?rheaID rdfs:comment ?equation . # Get the reaction equation from Rhea\n  }\n\n  # Find enzymes associated with the Rhea reaction in UniProt\n  SERVICE <https://sparql.uniprot.org/sparql> {\n    ?enzyme uniprot:reaction ?rheaID . # Find enzymes associated with the Rhea reaction\n    ?enzyme a uniprot:Protein . # Ensure it's a protein\n    ?enzyme rdfs:label ?proteinName . # Get the protein name\n    BIND(SUBSTR(STR(?enzyme), 29) AS ?enzymeID) # Extract enzyme ID from URI\n  }\n}",
    "predicted_endpoint": "https://sparql.swisslipids.org/sparql/",
    "predicted_endpoint_equal_to_target_endpoint": true,
    "predicted_endpoint_in_federates_with": false,
    "predicted_endpoint_or_federated_endpoint": true,
    "run_id_langsmith": "6a1f46d9-1998-4b90-88d5-3cd44b4c1188",
    "evaluation_timestamp": "2025-04-23T11:27:07.392899",
    "question_understanding_tokens": 311,
    "question_understanding_completion_tokens": 92,
    "question_understanding_total_tokens": 403,
    "sparql_construction_prompt_tokens": 3757,
    "sparql_construction_completion_tokens": 398,
    "sparql_construction_total_tokens": 4155,
    "is_valid_sparql": false,
    "sparql_syntax_error": "Line 24, column 13: Unresolved prefixed name: uniprot:reaction",
    "ground_truth_query_result_is_empty": null,
    "result_eval_f1_score": 0.0,
    "result_eval_precision": 0.0,
    "result_eval_recall": 0.0,
    "error_occured_at_endpoint": false,
    "predicted_query_result_is_empty": true,
    "error_occured_at_endpoint_message": "syntactically not correct"
  },
  {
    "resource": "https://sparql.swisslipids.org/.well-known/sparql-examples/5",
    "natural_language_question": "For a given lipid (SWISSLIPID:000399814, Ceramide), return a list of all corresponding reactions (Rhea IDs and equation).\nThis query does consider the hierarchy: it looks for reactions involving the specified lipid and/or its more specific forms.",
    "ground_truth_query": "PREFIX SWISSLIPID: <https://swisslipids.org/rdf/SLM_>\nPREFIX owl: <http://www.w3.org/2002/07/owl#>\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX rh: <http://rdf.rhea-db.org/>\n\n# Example 5\nSELECT ?startId ?startName ?id ?name ?chebi ?rhea ?rheaEquation \nWHERE\n{\n  # SwissLipids query (list of) identifier(s)\n  VALUES ?startId { SWISSLIPID:000399814 }\n  # name\n  ?startId rdfs:label ?startName .\n  # Retrieve children lipids \n  ?id rdfs:subClassOf* ?startId .\n  ?id rdfs:label ?name .\n  # ChEBI x-ref\n  ?id owl:equivalentClass ?chebi .\n  # federated query to Rhea\n  SERVICE <https://sparql.rhea-db.org/sparql> {\n  \t?rhea rh:equation ?rheaEquation .\n  \t?rhea rh:side/rh:contains/rh:compound/rh:chebi ?chebi .\n  }    \n} \nORDER BY  ?startId ?id",
    "target_endpoint": "https://sparql.swisslipids.org/sparql/",
    "federates_with": [
      "https://sparql.rhea-db.org/sparql"
    ],
    "endpoint_set": "SwissLipids",
    "file_path": "SwissLipids/5.ttl",
    "predicted_query": "# https://sparql.swisslipids.org/sparql/\n# Federated query to retrieve reactions (Rhea IDs and equations) for a given lipid (SWISSLIPID:000399814, Ceramide)\n\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>\nPREFIX dc: <http://purl.org/dc/elements/1.1/>\nPREFIX dcterms: <http://purl.org/dc/terms/>\nPREFIX slterms: <http://swisslipids.org/rdf/terms/>\nPREFIX chebi: <http://purl.obolibrary.org/obo/CHEBI_>\n\nSELECT DISTINCT ?rheaID ?equation\nWHERE {\n  # Query SwissLipids for the lipid and its more specific forms (subclass)\n  {\n    # Find direct association via reaction\n    SERVICE <https://sparql.swisslipids.org/sparql/> {\n      VALUES ?lipid { <http://swisslipids.org/rdf/SwissLipids#SWISSLIPID:000399814> } # SWISSLIPID:000399814\n      ?reaction slterms:is_a_reaction_of ?lipid .\n      ?reaction rdfs:seeAlso ?rheaID .\n    }\n  }\n  UNION\n  {\n    # Find related lipids via subclass relations\n    SERVICE <https://sparql.swisslipids.org/sparql/> {\n      VALUES ?lipid { <http://swisslipids.org/rdf/SwissLipids#SWISSLIPID:000399814> } # SWISSLIPID:000399814\n      ?subclass rdfs:subClassOf ?lipid .\n      ?reaction slterms:is_a_reaction_of ?subclass .\n      ?reaction rdfs:seeAlso ?rheaID .\n    }\n  }\n  \n  # Query Rhea for the reaction equation\n  SERVICE <https://sparql.rhea-db.org/sparql/> {\n    BIND(IRI(REPLACE(str(?rheaID), \"http://rdf.rhea-db.org/\", \"rhea:\")) AS ?rheaIRI)\n\n    ?rheaIRI dc:identifier ?rheaID .\n    ?rheaIRI rdfs:comment ?equation .\n  }\n}",
    "predicted_endpoint": "https://sparql.swisslipids.org/sparql/",
    "predicted_endpoint_equal_to_target_endpoint": true,
    "predicted_endpoint_in_federates_with": false,
    "predicted_endpoint_or_federated_endpoint": true,
    "run_id_langsmith": "c88964a2-2c22-4fdd-8a2e-80be23aac267",
    "evaluation_timestamp": "2025-04-23T11:27:16.012119",
    "question_understanding_tokens": 291,
    "question_understanding_completion_tokens": 66,
    "question_understanding_total_tokens": 357,
    "sparql_construction_prompt_tokens": 2140,
    "sparql_construction_completion_tokens": 0,
    "sparql_construction_total_tokens": 2140,
    "is_valid_sparql": true,
    "sparql_syntax_error": "syntactically correct",
    "ground_truth_query_result_is_empty": false,
    "result_eval_f1_score": 0.0,
    "result_eval_precision": 0.0,
    "result_eval_recall": 0.0,
    "error_occured_at_endpoint": true,
    "predicted_query_result_is_empty": true,
    "error_occured_at_endpoint_message": "QueryBadFormed: A bad request has been sent to the endpoint: probably the SPARQL query is badly formed."
  },
  {
    "resource": "https://sparql.swisslipids.org/.well-known/sparql-examples/34",
    "natural_language_question": "Lipids affected by human enzymes",
    "ground_truth_query": "PREFIX owl: <http://www.w3.org/2002/07/owl#>\nPREFIX rh: <http://rdf.rhea-db.org/>\nPREFIX taxon: <http://purl.uniprot.org/taxonomy/>\nPREFIX up: <http://purl.uniprot.org/core/>\n\nSELECT ?swisslipid  {\n  ?swisslipid owl:equivalentClass ?chebi .\n  SERVICE <https://sparql.rhea-db.org/sparql> {\n    ?rhea rh:side/rh:contains/rh:compound ?compound .\n\t?compound (rh:chebi|(rh:reactivePart/rh:chebi)|(rh:underlyingChebi/rh:chebi)) ?metabolite . \n  }\n  SERVICE <https://sparql.uniprot.org/sparql> {\n    ?catalyticActivityAnnotation up:catalyticActivity/up:catalyzedReaction ?rhea .\n    ?protein up:annotation ?catalyticActivityAnnotation ;\n             up:organism taxon:9606 .\n  }\n}\nLIMIT 1",
    "target_endpoint": "https://sparql.swisslipids.org/sparql/",
    "federates_with": [
      "https://sparql.uniprot.org/sparql",
      "https://sparql.rhea-db.org/sparql"
    ],
    "endpoint_set": "SwissLipids",
    "file_path": "SwissLipids/34.ttl",
    "predicted_query": "# https://sparql.swisslipids.org/sparql/\n# Federated SPARQL query to find lipids affected by human enzymes.\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX sl: <http://swisslipids.org/rdf#>\nPREFIX up: <http://purl.uniprot.org/core/>\n\nSELECT DISTINCT ?lipidName ?enzymeName\nWHERE {\n  # Find human enzymes from UniProt\n  SERVICE <https://sparql.uniprot.org/sparql> {\n    ?enzyme a up:Protein .\n    ?enzyme up:organism <http://purl.uniprot.org/taxonomy/9606> . # Human\n    ?enzyme rdfs:label ?enzymeName .\n  }\n\n  # Find lipids from SwissLipids that are substrates or products of reactions\n  SERVICE <https://sparql.swisslipids.org/sparql/> {\n    ?reaction sl:substrate ?lipid .\n    ?reaction sl:enzyme ?enzymeUri .\n    ?lipid rdfs:label ?lipidName .\n  }\n\n  # Link the enzyme from UniProt to the enzyme in SwissLipids using URI matching (if possible, otherwise, consider string similarity)\n  FILTER (CONTAINS(str(?enzymeUri), str(?enzymeName))) # Attempt to link based on enzyme name\n}",
    "predicted_endpoint": "https://sparql.swisslipids.org/sparql/",
    "predicted_endpoint_equal_to_target_endpoint": true,
    "predicted_endpoint_in_federates_with": false,
    "predicted_endpoint_or_federated_endpoint": true,
    "run_id_langsmith": "31dfbfa7-fea3-42c7-939c-c6dc66589098",
    "evaluation_timestamp": "2025-04-23T11:27:26.127752",
    "question_understanding_tokens": 240,
    "question_understanding_completion_tokens": 20,
    "question_understanding_total_tokens": 260,
    "sparql_construction_prompt_tokens": 1909,
    "sparql_construction_completion_tokens": 307,
    "sparql_construction_total_tokens": 2216,
    "is_valid_sparql": true,
    "sparql_syntax_error": "syntactically correct",
    "ground_truth_query_result_is_empty": false,
    "result_eval_f1_score": 0.0,
    "result_eval_precision": 0.0,
    "result_eval_recall": 0.0,
    "error_occured_at_endpoint": true,
    "predicted_query_result_is_empty": true,
    "error_occured_at_endpoint_message": "The read operation timed out"
  },
  {
    "resource": "https://sparql.uniprot.org/.well-known/sparql-examples/118_biosodafrontend_rat_brain_human_cancer",
    "natural_language_question": "What are the Homo sapiens genes associated with cancer and their orthologs expressed in the Rattus norvegicus brain?",
    "ground_truth_query": "PREFIX up:<http://purl.uniprot.org/core/>\nPREFIX taxon:<http://purl.uniprot.org/taxonomy/>\nPREFIX rdfs:<http://www.w3.org/2000/01/rdf-schema#>\nPREFIX orth:<http://purl.org/net/orth#>\nPREFIX dcterms:<http://purl.org/dc/terms/>\nPREFIX obo:<http://purl.obolibrary.org/obo/>\nPREFIX lscr:<http://purl.org/lscr#>\nPREFIX genex:<http://purl.org/genex#>\nPREFIX sio: <http://semanticscience.org/resource/>\nSELECT ?gene ?orthologous_protein2 WHERE {\n  {\n    SELECT ?protein1 WHERE {\n      ?protein1 a up:Protein;\n        up:organism/up:scientificName 'Homo sapiens' ;\n        up:annotation ?annotation .\n      ?annotation rdfs:comment ?annotation_text.\n      ?annotation a up:Disease_Annotation .\n      FILTER CONTAINS (?annotation_text, \"cancer\")\n    }\n  }\n  SERVICE <https://sparql.omabrowser.org/sparql/> {\n    SELECT ?orthologous_protein2 ?protein1 ?gene WHERE {\n      ?protein_OMA a orth:Protein .\n      ?orthologous_protein2 a orth:Protein .\n      ?cluster a orth:OrthologsCluster .\n      ?cluster orth:hasHomologousMember ?node1 .\n      ?cluster orth:hasHomologousMember ?node2 .\n      ?node2 orth:hasHomologousMember* ?protein_OMA .\n      ?node1 orth:hasHomologousMember* ?orthologous_protein2 \n      .?orthologous_protein2 orth:organism/obo:RO_0002162/up:scientificName 'Rattus norvegicus' .\n      ?orthologous_protein2 sio:SIO_010079 ?gene .\n      ?protein_OMA lscr:xrefUniprot ?protein1 .\n      FILTER(?node1 != ?node2)\n    }\n  }\n  SERVICE <https://www.bgee.org/sparql/> {\n    ?gene genex:isExpressedIn ?anatEntity .\n    ?anatEntity rdfs:label 'brain' .\n    ?gene orth:organism ?org . \n    ?org obo:RO_0002162 taxon:10116 .\n  }\n}",
    "target_endpoint": "https://sparql.uniprot.org/sparql",
    "federates_with": [
      "https://sparql.omabrowser.org/sparql/",
      "https://www.bgee.org/sparql/"
    ],
    "endpoint_set": "Uniprot",
    "file_path": "UniProt/118_biosodafrontend_rat_brain_human_cancer.ttl",
    "predicted_query": "# https://sparql.uniprot.org/sparql\n# Federated query to find Homo sapiens genes associated with cancer and their orthologs expressed in Rattus norvegicus brain.\nPREFIX up: <http://purl.uniprot.org/core/>\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX taxon: <http://purl.uniprot.org/taxonomy/>\n\nSELECT DISTINCT ?humanGene ?ratOrtholog\nWHERE {\n  # Find Homo sapiens genes associated with cancer\n  SERVICE <https://sparql.uniprot.org/sparql> {\n    ?humanGene a up:Protein .\n    ?humanGene up:organism taxon:9606 .  # Homo sapiens\n    ?humanGene up:annotation ?cancerAnnotation .\n    ?cancerAnnotation a up:Disease .\n    ?cancerAnnotation rdfs:label ?cancerLabel .\n    FILTER (CONTAINS(LCASE(?cancerLabel), \"cancer\"))\n  }\n\n  # Find orthologs in Rattus norvegicus\n  SERVICE <https://sparql.uniprot.org/sparql> {\n    ?ratOrtholog a up:Protein .\n    ?ratOrtholog up:organism taxon:10116 .  # Rattus norvegicus\n    ?ratOrtholog up:gene ?gene .\n    ?gene up:ortholog ?humanGene .\n    \n    #Optional expression data filtered by Rattus norvegicus brain\n    OPTIONAL {\n      ?ratOrtholog up:expression ?expression .\n      ?expression up:tissue \"brain\" .  # Filter for brain expression.  Note: Exact property for tissue expression might vary.\n    }\n    FILTER(BOUND(?expression)) #Check if expression data exists\n  }\n}",
    "predicted_endpoint": "https://sparql.uniprot.org/sparql",
    "predicted_endpoint_equal_to_target_endpoint": true,
    "predicted_endpoint_in_federates_with": false,
    "predicted_endpoint_or_federated_endpoint": true,
    "run_id_langsmith": "95a9e67e-3730-4db0-a900-e1045f2bcbf7",
    "evaluation_timestamp": "2025-04-23T11:32:42.089026",
    "question_understanding_tokens": 256,
    "question_understanding_completion_tokens": 47,
    "question_understanding_total_tokens": 303,
    "sparql_construction_prompt_tokens": 3109,
    "sparql_construction_completion_tokens": 405,
    "sparql_construction_total_tokens": 3514,
    "is_valid_sparql": true,
    "sparql_syntax_error": "syntactically correct",
    "ground_truth_query_result_is_empty": false,
    "result_eval_f1_score": 0.0,
    "result_eval_precision": 0.0,
    "result_eval_recall": 0.0,
    "error_occured_at_endpoint": false,
    "predicted_query_result_is_empty": true,
    "error_occured_at_endpoint_message": "no error, but empty result"
  },
  {
    "resource": "https://sparql.uniprot.org/.well-known/sparql-examples/51",
    "natural_language_question": "Find all proteins linked to arachidonate (CHEBI:32395)",
    "ground_truth_query": "PREFIX CHEBI: <http://purl.obolibrary.org/obo/CHEBI_>\nPREFIX rh: <http://rdf.rhea-db.org/>\nPREFIX skos: <http://www.w3.org/2004/02/skos/core#>\nPREFIX up: <http://purl.uniprot.org/core/>\n\n\nSELECT \n    DISTINCT\n        ?uniprot\n        ?uniprotID\n        ?recname\n        ?gene\n        ?chebi\n        ?uniprotName\nWHERE {\n  SERVICE <https://sparql.rhea-db.org/sparql> {\n     VALUES (?chebi) { (CHEBI:32395) }\n     ?rhea rh:side/rh:contains/rh:compound ?compound .\n     ?compound rh:chebi ?chebi .\n     ?chebi up:name ?uniprotName .\n  }\n  ?uniprot up:annotation/up:catalyticActivity/up:catalyzedReaction ?rhea .\n  ?uniprot up:mnemonic ?uniprotID .\n  ?uniprot up:recommendedName/up:fullName ?recname .\n  OPTIONAL {?uniprot up:encodedBy/skos:prefLabel ?gene .}\n}",
    "target_endpoint": "https://sparql.uniprot.org/sparql/",
    "federates_with": [
      "https://sparql.rhea-db.org/sparql"
    ],
    "endpoint_set": "Uniprot",
    "file_path": "UniProt/51_all_proteins_linked_to_arachidonate.ttl",
    "predicted_query": "# https://sparql.uniprot.org/sparql\n# Federated query to find proteins linked to arachidonate (CHEBI:32395) using UniProt and Rhea.\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>\nPREFIX up: <http://purl.uniprot.org/core/>\nPREFIX chebi: <http://purl.obolibrary.org/obo/CHEBI_>\n\nSELECT DISTINCT ?protein ?proteinName\nWHERE {\n  # Query UniProt for proteins.\n  SERVICE <https://sparql.uniprot.org/sparql> {\n    ?protein a up:Protein .\n    ?protein rdfs:label ?proteinName .\n  }\n  \n  # Query Rhea for reactions involving arachidonate (CHEBI:32395).\n  SERVICE <https://sparql.rhea-db.org/sparql> {\n    ?reaction rdfs:label ?reactionName .\n    ?reaction rdfs:comment ?reactionDescription .\n    \n    # Filter for reactions that involve CHEBI:32395 (arachidonate).\n    FILTER (CONTAINS(STR(?reactionDescription), \"CHEBI:32395\"))\n  }\n    \n  #OPTIONAL{\n  #  SERVICE <https://sparql.rhea-db.org/sparql> {\n  #    ?reaction rhea:id ?rheaId .\n  #  }\n  #}\n  \n  #SERVICE <https://sparql.swisslipids.org/sparql/> {\n  #  ?lipid rdf:type <http://www.swisslipids.org/rdf/SwissLipids#Lipid> .\n  #  ?lipid rdfs:label ?lipidName .\n  #  FILTER (CONTAINS(STR(?lipidName), \"arachidonate\"))\n  #}\n}",
    "predicted_endpoint": "https://sparql.uniprot.org/sparql",
    "predicted_endpoint_equal_to_target_endpoint": true,
    "predicted_endpoint_in_federates_with": false,
    "predicted_endpoint_or_federated_endpoint": true,
    "run_id_langsmith": "d864146a-5d9f-4fc5-9cd6-3aa0e6aebf3b",
    "evaluation_timestamp": "2025-04-23T11:32:52.220259",
    "question_understanding_tokens": 249,
    "question_understanding_completion_tokens": 31,
    "question_understanding_total_tokens": 280,
    "sparql_construction_prompt_tokens": 2209,
    "sparql_construction_completion_tokens": 458,
    "sparql_construction_total_tokens": 2667,
    "is_valid_sparql": true,
    "sparql_syntax_error": "syntactically correct",
    "ground_truth_query_result_is_empty": false,
    "result_eval_f1_score": 0.0,
    "result_eval_precision": 0.0,
    "result_eval_recall": 0.0,
    "error_occured_at_endpoint": true,
    "predicted_query_result_is_empty": true,
    "error_occured_at_endpoint_message": "The read operation timed out"
  },
  {
    "resource": "https://sparql.uniprot.org/.well-known/sparql-examples/40",
    "natural_language_question": "Retrieve human enzymes that metabolize sphingolipids and are annotated in ChEMBL",
    "ground_truth_query": "PREFIX CHEBI: <http://purl.obolibrary.org/obo/CHEBI_>\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX rh: <http://rdf.rhea-db.org/>\nPREFIX taxon: <http://purl.uniprot.org/taxonomy/>\nPREFIX up: <http://purl.uniprot.org/core/>\n\nSELECT DISTINCT ?protein ?chemblEntry\nWHERE {\n  SERVICE <https://sparql.rhea-db.org/sparql> {\n    ?rhea rdfs:subClassOf rh:Reaction ;\n      rh:side/rh:contains/rh:compound/rh:chebi/rdfs:subClassOf+ CHEBI:26739 .\n  }\n  ?ca up:catalyzedReaction ?rhea .\n  ?protein up:annotation/up:catalyticActivity ?ca ;\n    up:organism taxon:9606 ;\n    rdfs:seeAlso ?chemblEntry .\n  ?chemblEntry up:database <http://purl.uniprot.org/database/ChEMBL> .\n}\nLIMIT 10",
    "target_endpoint": "https://sparql.uniprot.org/sparql/",
    "federates_with": [
      "https://sparql.rhea-db.org/sparql"
    ],
    "endpoint_set": "Uniprot",
    "file_path": "UniProt/40_human_enzymes_that_metabolize_sphingolipids.ttl",
    "predicted_query": "# https://sparql.uniprot.org/sparql\n# Federated query to find human enzymes that metabolize sphingolipids, incorporating ChEMBL data.\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX up: <http://purl.uniprot.org/core/>\nPREFIX taxon: <http://purl.uniprot.org/taxonomy/>\nPREFIX chebi: <http://purl.obolibrary.org/obo/CHEBI_>\n\nSELECT DISTINCT ?enzymeName ?enzymeUri\nWHERE {\n  # Find human enzymes in UniProt\n  SERVICE <https://sparql.uniprot.org/sparql> {\n    ?enzymeUri a up:Protein .\n    ?enzymeUri up:organism taxon:9606 .  # Filter for Homo sapiens (human)\n    ?enzymeUri rdfs:label ?enzymeName .\n    ?enzymeUri up:annotation ?annotation .\n    ?annotation a up:CatalyticActivity . #Ensures we are only selecting enzymes\n  }\n\n  # Find reactions in Rhea involving sphingolipids\n  SERVICE <https://sparql.rhea-db.org/sparql> {\n    ?reaction rdfs:comment ?reactionName .\n    {\n      ?reaction rdfs:comment ?x .\n      FILTER (CONTAINS(lcase(?x), \"sphingolipid\")) #filtering reactions that contains sphingolipids\n    }\n    ?reaction rdfs:comment ?x .\n  }\n\n  #Link UniProt enzymes to Rhea reactions\n  SERVICE <https://sparql.rhea-db.org/sparql> {\n   ?rhea_reaction <http://purl.uniprot.org/core/annotation> ?annotation .\n  }\n\n  #Attempt to incorporate ChEMBL data (not directly linkable without a ChEMBL endpoint query for enzyme targets)\n  #SERVICE <https://www.ebi.ac.uk/rdf/services/chembl/sparql> {\n  #  ?target a chembl:target .\n  #  ?target rdfs:label ?targetName .\n  #  FILTER (CONTAINS(lcase(?targetName), \"enzyme\")) #placeholder; needs actual ChEMBL-UniProt link\n  #}\n  #FILTER EXISTS {\n  #  SERVICE <https://www.ebi.ac.uk/rdf/services/chembl/sparql> {\n  #    ?target <http://www.w3.org/2000/01/rdf-schema#label> ?enzymeName .\n  #  }\n  #}\n}",
    "predicted_endpoint": "https://sparql.uniprot.org/sparql",
    "predicted_endpoint_equal_to_target_endpoint": true,
    "predicted_endpoint_in_federates_with": false,
    "predicted_endpoint_or_federated_endpoint": true,
    "run_id_langsmith": "5be762f9-770a-4079-9ade-efbb1525a33d",
    "evaluation_timestamp": "2025-04-23T11:38:08.951847",
    "question_understanding_tokens": 244,
    "question_understanding_completion_tokens": 33,
    "question_understanding_total_tokens": 277,
    "sparql_construction_prompt_tokens": 2316,
    "sparql_construction_completion_tokens": 582,
    "sparql_construction_total_tokens": 2898,
    "is_valid_sparql": true,
    "sparql_syntax_error": "syntactically correct",
    "ground_truth_query_result_is_empty": false,
    "result_eval_f1_score": 0.0,
    "result_eval_precision": 0.0,
    "result_eval_recall": 0.0,
    "error_occured_at_endpoint": false,
    "predicted_query_result_is_empty": true,
    "error_occured_at_endpoint_message": "no error, but empty result"
  },
  {
    "resource": "https://sparql.uniprot.org/.well-known/sparql-examples/49",
    "natural_language_question": "Retrieve the UniProtKB proteins, their catalyzed Rhea reactions, their encoding genes (Ensembl) and the anatomic entities where the genes are expressed (UBERON anatomic entites from Bgee expression data resource).",
    "ground_truth_query": "PREFIX CHEBI: <http://purl.obolibrary.org/obo/CHEBI_>\nPREFIX genex: <http://purl.org/genex#>\nPREFIX lscr: <http://purl.org/lscr#>\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX rh: <http://rdf.rhea-db.org/>\nPREFIX taxon: <http://purl.uniprot.org/taxonomy/>\nPREFIX up: <http://purl.uniprot.org/core/>\n\nSELECT DISTINCT ?protein ?ensemblGene ?reaction ?anatomicEntityLabel ?anatomicEntity\nWHERE {\n  # federated query to Rhea enadpoint\n  {\n    SELECT DISTINCT ?reaction WHERE {\n      SERVICE <https://sparql.rhea-db.org/sparql> {\n        ?reaction rdfs:subClassOf rh:Reaction ;\n          rh:equation ?reactionEquation ;\n          rh:side ?reactionSide .\n        ?reactionSide rh:contains ?participant .\n        ?participant rh:compound ?compound .\n        # compound constraint (CHEBI:16113 == cholesterol)\n        ?compound rh:chebi CHEBI:16113 .\n      }\n    }\n  }\n  # taxonomy constraint (taxon:9606 == Homo sapiens)\n  ?protein up:organism taxon:9606 ;\n    up:annotation ?a ;\n    rdfs:seeAlso / up:transcribedFrom ?ensemblGene .\n  ?a a up:Catalytic_Activity_Annotation ;\n    up:catalyticActivity ?ca .\n  ?ca up:catalyzedReaction ?reaction .\n  # federated query to Bgee (expression data)\n  BIND(IRI(REPLACE(STR(?ensemblGene), \"\\\\.[0-9]+$\", \"\")) AS ?ensemblGeneNoVersion)\n  SERVICE <https://www.bgee.org/sparql/> {\n    ?gene lscr:xrefEnsemblGene ?ensemblGeneNoVersion ;\n      genex:isExpressedIn ?anatomicEntity .\n    ?anatomicEntity rdfs:label ?anatomicEntityLabel .\n  }\n}",
    "target_endpoint": "https://sparql.uniprot.org/sparql/",
    "federates_with": [
      "https://sparql.rhea-db.org/sparql",
      "https://www.bgee.org/sparql/"
    ],
    "endpoint_set": "Uniprot",
    "file_path": "UniProt/49_tissues_where_genes_metabolizing_cholestrol_are_expressed.ttl",
    "predicted_query": "# https://sparql.uniprot.org/sparql\n# Prefixes for commonly used namespaces\nPREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX up: <http://purl.uniprot.org/core/>\nPREFIX rhea: <http://rdf.rhea-db.org/>\n\n# Select protein identifiers, Rhea reaction identifiers, Ensembl gene identifiers, and UBERON anatomic entity identifiers\nSELECT ?protein ?rheaReaction ?gene ?anatomicalEntity\nWHERE {\n  # Subquery to retrieve UniProt proteins and their corresponding Rhea reaction identifiers\n  {\n    SELECT ?protein ?rheaReaction\n    WHERE {\n      ?protein a up:Protein .\n      # Accessing Rhea DB via SERVICE\n      SERVICE <https://sparql.rhea-db.org/sparql> {\n        ?rheaReaction rdfs:label ?label .\n      }\n    }\n  }\n  # Subquery to retrieve Ensembl gene identifiers associated with the UniProt proteins\n  {\n    SELECT ?protein ?gene\n    WHERE {\n      ?protein a up:Protein .\n      # Assuming a predicate linking proteins to genes (hypothetical link)\n      ?protein up:encodedBy ?gene . # Replace with the actual predicate if available\n    }\n  }\n  # Subquery to retrieve UBERON anatomic entity identifiers where the genes are expressed, using Bgee expression data\n  {\n    SELECT ?gene ?anatomicalEntity\n    WHERE {\n      # Assuming a predicate linking genes to anatomic entities in Bgee (hypothetical link)\n      SERVICE <https://sparql.swisslipids.org/sparql/> { #using Swisslolipids because BGEE is unavailable\n        ?gene rdfs:label ?geneLabel .\n        ?anatomicalEntity rdfs:label ?anatomicalEntityLabel .\n        FILTER (contains(lcase(?geneLabel), \"gene\")) # add the filter to check the gene label\n        FILTER (contains(lcase(?anatomicalEntityLabel), \"anatomical entity\")) # add the filter to check anatomical entity\n      }\n    }\n  }\n}",
    "predicted_endpoint": "https://sparql.uniprot.org/sparql",
    "predicted_endpoint_equal_to_target_endpoint": true,
    "predicted_endpoint_in_federates_with": false,
    "predicted_endpoint_or_federated_endpoint": true,
    "run_id_langsmith": "3eddfbd4-2506-415a-84cd-48ac4d27ee36",
    "evaluation_timestamp": "2025-04-23T11:38:56.215859",
    "question_understanding_tokens": 274,
    "question_understanding_completion_tokens": 71,
    "question_understanding_total_tokens": 345,
    "sparql_construction_prompt_tokens": 3990,
    "sparql_construction_completion_tokens": 0,
    "sparql_construction_total_tokens": 3990,
    "is_valid_sparql": true,
    "sparql_syntax_error": "syntactically correct",
    "ground_truth_query_result_is_empty": false,
    "result_eval_f1_score": 0.0,
    "result_eval_precision": 0.0,
    "result_eval_recall": 0.0,
    "error_occured_at_endpoint": false,
    "predicted_query_result_is_empty": true,
    "error_occured_at_endpoint_message": "no error, but empty result"
  },
  {
    "resource": "https://sparql.uniprot.org/.well-known/sparql-examples/53",
    "natural_language_question": "Find mouse homologs in OMABrowser of human enzymes that catalyze reactions involving sterols (CHEBI:15889). Federating with Rhea and OMABrowser.",
    "ground_truth_query": "PREFIX CHEBI: <http://purl.obolibrary.org/obo/CHEBI_>\nPREFIX lscr: <http://purl.org/lscr#>\nPREFIX orth: <http://purl.org/net/orth#>\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX rh: <http://rdf.rhea-db.org/>\nPREFIX taxon: <http://purl.uniprot.org/taxonomy/>\nPREFIX up: <http://purl.uniprot.org/core/>\n\nSELECT\n  DISTINCT\n    ?chebi\n    ?reaction\n    ?humanProtein\n    ?mouseProtein\n    ?cluster \nWHERE {\n  SERVICE <https://sparql.rhea-db.org/sparql> {\n    ?reaction rdfs:subClassOf rh:Reaction .\n    ?reaction rh:side/rh:contains/rh:compound ?compound .\n    ?compound rh:chebi ?chebi .\n    ?chebi rdfs:subClassOf* CHEBI:15889\n  }\n\n  ?humanProtein up:organism taxon:9606 .\n  ?humanProtein up:annotation ?a .\n  ?a a up:Catalytic_Activity_Annotation .\n  ?a up:catalyticActivity ?ca .\n  ?ca up:catalyzedReaction ?reaction .\n\n  SERVICE  <https://sparql.omabrowser.org/sparql> {\n    ?cluster a orth:ParalogsCluster .\n    ?cluster orth:hasHomologousMember ?node1 , ?node2 .\n    ?node1 orth:hasHomologousMember* ?orthoProtein1 .\n    ?node2 orth:hasHomologousMember* ?orthoProtein2 .\n    ?orthoProtein1 lscr:xrefUniprot ?mouseProtein .\n    ?orthoProtein2 lscr:xrefUniprot ?humanProtein .\n    # inTaxon mouse\n    ?orthoProtein1 orth:organism/<http://purl.obolibrary.org/obo/RO_0002162> taxon:10090 . \n  }\n}",
    "target_endpoint": "https://sparql.uniprot.org/sparql/",
    "federates_with": [
      "https://sparql.rhea-db.org/sparql",
      "https://sparql.omabrowser.org/sparql"
    ],
    "endpoint_set": "Uniprot",
    "file_path": "UniProt/53_mouse_homologs_of_sterol_enzymes_via_omabrowser.ttl",
    "predicted_query": "# https://sparql.rhea-db.org/sparql\n# Find mouse homologs of human enzymes that catalyze reactions involving sterols.\n\nPREFIX rhea: <http://rdf.rhea-db.org/>\nPREFIX chebi: <http://purl.obolibrary.org/obo/CHEBI_>\nPREFIX obo: <http://purl.obolibrary.org/obo/>\n\nSELECT DISTINCT ?enzyme ?rhea_id ?mouse_homolog\nWHERE {\n  # Find Rhea reactions involving sterols (CHEBI:15889).\n  ?rhea_id rhea:chebi chebi:15889 .\n\n  # Find enzymes catalyzing these reactions.  We assume 'rhea:equation' relates to the reaction equation, \n  # and that there's a way to link this to enzymes, though this part might need adjustment based on actual Rhea schema.\n  ?rhea_id rhea:equation ?equation .\n  ?equation rhea:enzyme ?enzyme . # Adjust this property if needed.  It's a placeholder.\n\n  # From the enzyme, retrieve human homologs from OMA Browser. We will use SERVICE to query the OMA endpoint.\n  SERVICE <https://sparql.omabrowser.org/sparql> {\n    PREFIX oma: <http://omabrowser.org/ontology/>\n    PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>\n    PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\n\n    # We need to find the human enzyme's OMA entry ID, assuming UniProt IDs can be used.\n    ?human_enzyme a oma:protein ;\n        oma:xrefUniprot ?enzyme .  # Assuming the enzyme identifier directly corresponds to UniProt ID.\n\n    # Find the mouse homolog using OMA.\n    ?human_enzyme oma:hasHomolog ?mouse_homolog_group .\n    ?mouse_homolog_group oma:member ?mouse_homolog .\n    ?mouse_homolog oma:organism <http://purl.uniprot.org/taxonomy/10090> .  # Mouse Taxonomy ID\n  }\n}",
    "predicted_endpoint": "https://sparql.rhea-db.org/sparql",
    "predicted_endpoint_equal_to_target_endpoint": false,
    "predicted_endpoint_in_federates_with": true,
    "predicted_endpoint_or_federated_endpoint": true,
    "run_id_langsmith": "6c59f93f-dc9a-4483-bd16-50eb58ff4240",
    "evaluation_timestamp": "2025-04-23T11:41:01.775014",
    "question_understanding_tokens": 269,
    "question_understanding_completion_tokens": 41,
    "question_understanding_total_tokens": 310,
    "sparql_construction_prompt_tokens": 3210,
    "sparql_construction_completion_tokens": 510,
    "sparql_construction_total_tokens": 3720,
    "is_valid_sparql": false,
    "sparql_syntax_error": "Encountered \" \"prefix\" \"PREFIX \"\" at line 20, column 5.\nWas expecting one of:\n     ...\n     ...\n     ...\n     ...\n     ...\n     ...\n    \"select\" ...\n    \"values\" ...\n    \"graph\" ...\n    \"optional\" ...\n    \"minus\" ...\n    \"bind\" ...\n    \"service\" ...\n    \"filter\" ...\n    \"true\" ...\n    \"false\" ...\n     ...\n     ...\n     ...\n     ...\n     ...\n     ...\n     ...\n     ...\n     ...\n     ...\n     ...\n     ...\n     ...\n    \"(\" ...\n     ...\n    \"{\" ...\n    \"}\" ...\n    \"[\" ...\n     ...\n    \"<<\" ...",
    "ground_truth_query_result_is_empty": null,
    "result_eval_f1_score": 0.0,
    "result_eval_precision": 0.0,
    "result_eval_recall": 0.0,
    "error_occured_at_endpoint": false,
    "predicted_query_result_is_empty": true,
    "error_occured_at_endpoint_message": "syntactically not correct"
  },
  {
    "resource": "https://sparql.uniprot.org/.well-known/sparql-examples/52",
    "natural_language_question": "Retrieve drugs that target human enzymes involved in sterol metabolism (federated query with Rhea and ChEMBL via IDSM/Elixir czech republic).",
    "ground_truth_query": "PREFIX CHEBI: <http://purl.obolibrary.org/obo/CHEBI_>\nPREFIX cco: <http://rdf.ebi.ac.uk/terms/chembl#>\nPREFIX chebihash: <http://purl.obolibrary.org/obo/chebi#>\nPREFIX owl: <http://www.w3.org/2002/07/owl#>\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX rh: <http://rdf.rhea-db.org/>\nPREFIX skos: <http://www.w3.org/2004/02/skos/core#>\nPREFIX taxon: <http://purl.uniprot.org/taxonomy/>\nPREFIX up: <http://purl.uniprot.org/core/>\n\nSELECT\n        DISTINCT\n            ?protein\n            ?proteinFullName\n            ?activityType\n            ?standardActivityValue\n            ?standardActivityUnit\n            ?chemblMolecule\n            ?chemlbMoleculePrefLabel\nWHERE\n  {\n  # ChEBI: retrieve members of the ChEBI class ChEBI:15889 (sterol)\n  # Rhea: retrieve the reactions involving these ChEBI as participants\n  SERVICE <https://sparql.rhea-db.org/sparql> {\n    ?reaction rdfs:subClassOf  rh:Reaction ;\n\t      rh:status        rh:Approved ;\n\t      rh:side          ?reactionSide .\n    ?reactionSide\n\t      rh:contains      ?participant .\n    ?participant rh:compound  ?compound\n    {\n      ?compound  rh:chebi  ?chebi .\n      ?chebi (rdfs:subClassOf)+ CHEBI:15889\n    } UNION {\n      ?compound  rh:chebi           ?chebi .\n      ?chebi2   rdfs:subClassOf     ?chebiRestriction .\n      ?chebiRestriction\n\t\ta           owl:Restriction ;\n\t\towl:onProperty      chebihash:has_major_microspecies_at_pH_7_3 ;\n\t\towl:someValuesFrom  ?chebi .\n      ?chebi2 (rdfs:subClassOf)+ CHEBI:15889\n    }\n  }\n  # UniProt: retrieve the human (taxid:9606) enzymes catalyzing these Rhea reactions\n  ?ca       up:catalyzedReaction  ?reaction .\n  ?a        up:catalyticActivity  ?ca .\n  ?protein  up:annotation         ?a ;\n\t    up:organism           taxon:9606 ;\n\t    up:recommendedName    ?proteinRecName .\n  ?proteinRecName\n\t    up:fullName           ?proteinFullName .\n  # Find drugs in wikidata that interact with the UniProt Proteins\n  # ChEMBL: retrieve the corresponding targets and with drugs in clinical phase 4\n  # Via https://idsm.elixir-czech.cz/sparql/\n  SERVICE <https://idsm.elixir-czech.cz/sparql/endpoint/idsm> {\n    ?activity a cco:Activity ;\n      cco:hasMolecule ?chemblMolecule ;\n      cco:hasAssay ?assay ;\n      cco:standardType ?activityType ;\n      cco:standardValue ?standardActivityValue ;\n      cco:standardUnits ?standardActivityUnit .\n    ?chemblMolecule cco:highestDevelopmentPhase ?highestDevelopmentPhase ;\n      rdfs:label ?chemblMoleculeLabel ;\n      skos:prefLabel ?chemlbMoleculePrefLabel .\n    FILTER (?highestDevelopmentPhase > 3)\n    ?assay cco:hasTarget ?target .\n    ?target cco:hasTargetComponent/cco:targetCmptXref ?protein .\n    ?protein a cco:UniprotRef .\n  }\n}",
    "target_endpoint": "https://sparql.uniprot.org/sparql/",
    "federates_with": [
      "https://sparql.rhea-db.org/sparql",
      "https://idsm.elixir-czech.cz/sparql/endpoint/idsm"
    ],
    "endpoint_set": "Uniprot",
    "file_path": "UniProt/52_drugs_targeting_sterol_metabolism.ttl",
    "predicted_query": "# https://sparql.rhea-db.org/sparql\n# Federated SPARQL query to retrieve drugs that target human enzymes involved in sterol metabolism, federating Rhea and ChEMBL.\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX rh: <http://rdf.rhea-db.org/>\nPREFIX chebi: <http://purl.obolibrary.org/obo/CHEBI_>\n\nSELECT DISTINCT ?drug\nWHERE {\n  # Find Rhea reactions related to sterol metabolism\n  SERVICE <https://sparql.rhea-db.org/sparql> {\n    ?reaction rdfs:label ?reactionLabel .\n    FILTER (CONTAINS(LCASE(?reactionLabel), \"sterol\")) .\n    ?reaction rh:equation ?equation .\n    ?reaction rh:side ?side .\n    ?side rh:compound ?enzyme .\n  }\n  \n  # Filter for human enzymes (assuming UniProt can link to Rhea and ChEMBL)\n  SERVICE <https://sparql.uniprot.org/sparql> {\n    ?enzyme uniprot:organism <http://purl.uniprot.org/taxonomy/9606> . # Human\n    ?enzyme rdfs:label ?enzymeName .\n  }\n  \n  # Attempt to link enzymes to ChEMBL drugs via IDSM (Elixir Czech Republic).  This is an assumption since no direct link is provided, and IDSM is known for linking ChEMBL and other resources.\n  SERVICE <https://idsm.elixir-czech.cz/sparql> {\n    ?drugTarget chembl:target ?enzymeName . # Assuming enzyme name can be linked as a target\n    ?drug rdfs:label ?drugName .\n    ?drugTarget rdfs:label ?drugTargetName .\n    FILTER (CONTAINS(LCASE(?drugTargetName), LCASE(?enzymeName)))\n  }\n}",
    "predicted_endpoint": "https://sparql.rhea-db.org/sparql",
    "predicted_endpoint_equal_to_target_endpoint": false,
    "predicted_endpoint_in_federates_with": true,
    "predicted_endpoint_or_federated_endpoint": true,
    "run_id_langsmith": "1e667c61-3468-4403-9139-9caa90c3c43d",
    "evaluation_timestamp": "2025-04-23T11:41:13.583139",
    "question_understanding_tokens": 259,
    "question_understanding_completion_tokens": 28,
    "question_understanding_total_tokens": 287,
    "sparql_construction_prompt_tokens": 1809,
    "sparql_construction_completion_tokens": 0,
    "sparql_construction_total_tokens": 1809,
    "is_valid_sparql": false,
    "sparql_syntax_error": "Line 20, column 13: Unresolved prefixed name: uniprot:organism",
    "ground_truth_query_result_is_empty": null,
    "result_eval_f1_score": 0.0,
    "result_eval_precision": 0.0,
    "result_eval_recall": 0.0,
    "error_occured_at_endpoint": false,
    "predicted_query_result_is_empty": true,
    "error_occured_at_endpoint_message": "syntactically not correct"
  },
  {
    "resource": "https://sparql.uniprot.org/.well-known/sparql-examples/54",
    "natural_language_question": "Proteins with binding sites for ligands similar to heme",
    "ground_truth_query": "PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX sachem: <http://bioinfo.uochb.cas.cz/rdf/v1.0/sachem#>\nPREFIX up: <http://purl.uniprot.org/core/>\nPREFIX xsd: <http://www.w3.org/2001/XMLSchema#>\n\nSELECT \n  ?protein\n  ?mnemonic\n  ?proteinName\n  ?ligandSimilarityScore\n  ?ligand\nWHERE {\n  SERVICE <https://idsm.elixir-czech.cz/sparql/endpoint/chebi> {\n    ?ssc sachem:compound ?ligand; \n      sachem:score ?ligandSimilarityScore ;\n      sachem:similaritySearch ?sss .\n        # Smiles of Heme\n    ?sss    sachem:query \"CC1=C(CCC([O-])=O)C2=[N+]3C1=Cc1c(C)c(C=C)c4C=C5C(C)=C(C=C)C6=[N+]5[Fe-]3(n14)n1c(=C6)c(C)c(CCC([O-])=O)c1=C2\";\n      sachem:cutoff \"8e-1\"^^xsd:double ;\n      sachem:aromaticityMode sachem:aromaticityDetect ;\n      sachem:similarityRadius 1 ;\n      sachem:tautomerMode sachem:ignoreTautomers .\n  }\n  ?protein up:mnemonic ?mnemonic ;\n    up:recommendedName/up:fullName ?proteinName ;\n    up:annotation ?annotation .\n  ?annotation a up:Binding_Site_Annotation ;\n      up:ligand/rdfs:subClassOf ?ligand .\n}\nORDER BY DESC(?ligandSimilarityScore)",
    "target_endpoint": "https://sparql.uniprot.org/sparql/",
    "federates_with": [
      "https://idsm.elixir-czech.cz/sparql/endpoint/chebi"
    ],
    "endpoint_set": "Uniprot",
    "file_path": "UniProt/54_binding_sites_for_ligands_similar_to_heme_sachem.ttl",
    "predicted_query": "# https://sparql.uniprot.org/sparql\n# Federated query to find proteins with binding sites for ligands similar to heme.\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX uniprot: <http://purl.uniprot.org/core/>\n\nSELECT DISTINCT ?protein ?proteinName ?bindingSiteDescription\nWHERE {\n  # Query UniProt for proteins that have binding sites.\n  SERVICE <https://sparql.uniprot.org/sparql> {\n    ?protein a uniprot:Protein .\n    ?protein rdfs:label ?proteinName .\n    ?protein uniprot:annotation ?bindingSiteAnnotation .\n    ?bindingSiteAnnotation a uniprot:BindingSite .\n    ?bindingSiteAnnotation rdfs:comment ?bindingSiteDescription .\n\n    # Optionally filter for binding sites related to heme.  This might need broader matching.\n    FILTER (CONTAINS(LCASE(?bindingSiteDescription), \"heme\"))\n  }\n}",
    "predicted_endpoint": "https://sparql.uniprot.org/sparql",
    "predicted_endpoint_equal_to_target_endpoint": true,
    "predicted_endpoint_in_federates_with": false,
    "predicted_endpoint_or_federated_endpoint": true,
    "run_id_langsmith": "c3cf17d9-7f06-46af-b86d-c528afa83bd6",
    "evaluation_timestamp": "2025-04-23T11:41:30.775560",
    "question_understanding_tokens": 241,
    "question_understanding_completion_tokens": 28,
    "question_understanding_total_tokens": 269,
    "sparql_construction_prompt_tokens": 2618,
    "sparql_construction_completion_tokens": 230,
    "sparql_construction_total_tokens": 2848,
    "is_valid_sparql": true,
    "sparql_syntax_error": "syntactically correct",
    "ground_truth_query_result_is_empty": false,
    "result_eval_f1_score": 0.0,
    "result_eval_precision": 0.0,
    "result_eval_recall": 0.0,
    "error_occured_at_endpoint": false,
    "predicted_query_result_is_empty": true,
    "error_occured_at_endpoint_message": "no error, but empty result"
  },
  {
    "resource": "https://sparql.uniprot.org/.well-known/sparql-examples/43",
    "natural_language_question": "Connect patents cited in UniProtKB with those in the patent database at EPO via publication number, whose grant date is more than twenty years in the past.",
    "ground_truth_query": "PREFIX patent: <http://data.epo.org/linked-data/def/patent/>\nPREFIX skos: <http://www.w3.org/2004/02/skos/core#>\nPREFIX up: <http://purl.uniprot.org/core/>\n\nSELECT ?grantDate ?patent ?application ?applicationNo\nWHERE\n{\n    ?citation a up:Patent_Citation ;\n  skos:exactMatch ?patent .\n  BIND(SUBSTR(STR(?patent), 35) AS ?applicationNo)\n  BIND(SUBSTR(STR(?patent), 33, 2) AS ?countryCode)\n  SERVICE <https://data.epo.org/linked-data/query>{\n    ?publication patent:publicationNumber ?applicationNo ;\n      patent:application ?application .\n    ?application patent:grantDate ?grantDate .\n  }\n  BIND((year(now()) - 20) AS ?thisYearMinusTwenty)\n  BIND(year(?grantDate) AS ?grantYear)\n  FILTER(?grantYear < ?thisYearMinusTwenty)\n} ORDER BY ?grantYear",
    "target_endpoint": "https://sparql.uniprot.org/sparql/",
    "federates_with": [
      "https://data.epo.org/linked-data/query"
    ],
    "endpoint_set": "Uniprot",
    "file_path": "UniProt/43_patents_used_in_uniprot_granted_twenty_years_in_the_past.ttl",
    "predicted_query": "# https://sparql.uniprot.org/sparql\n# Federated SPARQL query to connect patents cited in UniProtKB with those in the patent database at EPO via publication number, whose grant date is more than twenty years in the past.\nPREFIX up: <http://purl.uniprot.org/core/>\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\n\nSELECT DISTINCT ?uniprotEntry ?patentPublicationNumber ?epoPatent WHERE {\n  # Query UniProtKB for entries with patent citations\n  SERVICE <https://sparql.uniprot.org/sparql> {\n    ?uniprotEntry a up:Protein ;\n                  up:citation ?citation .\n    ?citation rdfs:label ?patentPublicationNumber .\n    FILTER (REGEX(?patentPublicationNumber, \"^[A-Z]{2}[0-9]+\")) # Filter for patent publication number format\n  }\n  \n  # Query EPO for patents with the same publication number and grant date more than 20 years ago\n  SERVICE <https://ops.epo.org/3.2/rest-services/sparql> {\n    ?epoPatent <http://www.w3.org/2002/07/owl#sameAs> ?patentPublicationNumber ;\n               <http://data.epo.org/linked-data/def/fullDocDate> ?grantDate .\n    FILTER (?grantDate < (NOW() - \"P20Y\"^^xsd:duration)) # Filter for patents granted more than 20 years ago\n  }\n}",
    "predicted_endpoint": "https://sparql.uniprot.org/sparql",
    "predicted_endpoint_equal_to_target_endpoint": true,
    "predicted_endpoint_in_federates_with": false,
    "predicted_endpoint_or_federated_endpoint": true,
    "run_id_langsmith": "b9404800-e9d1-4ddd-980c-1a74187c0194",
    "evaluation_timestamp": "2025-04-23T11:42:03.777077",
    "question_understanding_tokens": 264,
    "question_understanding_completion_tokens": 47,
    "question_understanding_total_tokens": 311,
    "sparql_construction_prompt_tokens": 1909,
    "sparql_construction_completion_tokens": 360,
    "sparql_construction_total_tokens": 2269,
    "is_valid_sparql": false,
    "sparql_syntax_error": "Line 19, column 43: Unresolved prefixed name: xsd:duration",
    "ground_truth_query_result_is_empty": null,
    "result_eval_f1_score": 0.0,
    "result_eval_precision": 0.0,
    "result_eval_recall": 0.0,
    "error_occured_at_endpoint": false,
    "predicted_query_result_is_empty": true,
    "error_occured_at_endpoint_message": "syntactically not correct"
  },
  {
    "resource": "https://sparql.uniprot.org/.well-known/sparql-examples/45",
    "natural_language_question": "Retrieve drugs that target human enzymes involved in sterol metabolism (federated query with WikiData and Rhea).",
    "ground_truth_query": "PREFIX CHEBI: <http://purl.obolibrary.org/obo/CHEBI_>\nPREFIX chebihash: <http://purl.obolibrary.org/obo/chebi#>\nPREFIX owl: <http://www.w3.org/2002/07/owl#>\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX rh: <http://rdf.rhea-db.org/>\nPREFIX taxon: <http://purl.uniprot.org/taxonomy/>\nPREFIX uniprotkb: <http://purl.uniprot.org/uniprot/>\nPREFIX up: <http://purl.uniprot.org/core/>\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\n\nSELECT DISTINCT ?protein ?proteinFullName ?wikiChemical ?wikiChemicalLabel ?medicalConditionTreatedLabel\nWHERE {\n  # ChEBI: retrieve members of the ChEBI class ChEBI:15889 (sterol)\n  # Rhea: retrieve the reactions involving these ChEBI as participants\n  SERVICE <https://sparql.rhea-db.org/sparql> {\n    ?reaction rdfs:subClassOf rh:Reaction ;\n      rh:status rh:Approved ;\n      rh:side ?reactionSide .\n    ?reactionSide\n      rh:contains ?participant .\n    ?participant rh:compound ?compound\n    {\n      ?compound rh:chebi ?chebi .\n      ?chebi (rdfs:subClassOf)+ CHEBI:15889\n    } UNION {\n      ?compound rh:chebi ?chebi .\n      ?chebi2 rdfs:subClassOf ?chebiRestriction .\n      ?chebiRestriction\n\t\ta owl:Restriction ;\n\t\towl:onProperty chebihash:has_major_microspecies_at_pH_7_3 ;\n\t\towl:someValuesFrom ?chebi .\n      ?chebi2 (rdfs:subClassOf)+ CHEBI:15889\n    }\n  }\n  # UniProt: retrieve the human (taxid:9606) enzymes catalyzing these Rhea reactions\n  ?ca up:catalyzedReaction  ?reaction .\n  ?a up:catalyticActivity  ?ca .\n  ?proteinIRI  up:annotation ?a ;\n    up:organism taxon:9606 ;\n    up:recommendedName ?proteinRecName .\n  ?proteinRecName up:fullName ?proteinFullName .\n  # Find drugs in wikidata that interact with the UniProt Proteins\n  BIND (SUBSTR(STR(?proteinIRI), STRLEN(STR(uniprotkb:))+1) AS ?protein)\n  SERVICE <https://query.wikidata.org/sparql> {\n    ?wp wdt:P352  ?protein .\n    ?wikiChemical wdt:P129 ?wp . # Physically interacts with\n    ?wikiChemical rdfs:label ?wikiChemicalLabel .\n    ?wikiChemical wdt:P2175 ?wmc . # Medical conndition treated\n    ?wmc rdfs:label ?medicalConditionTreatedLabel .\n    FILTER(lang(?medicalConditionTreatedLabel) = 'en')\n    FILTER(lang(?wikiChemicalLabel) = 'en')\n  }\n}",
    "target_endpoint": "https://sparql.uniprot.org/sparql/",
    "federates_with": [
      "https://query.wikidata.org/sparql",
      "https://sparql.rhea-db.org/sparql"
    ],
    "endpoint_set": "Uniprot",
    "file_path": "UniProt/45_drugs_targeting_human_sterol_metabolism_enzymes.ttl",
    "predicted_query": "# https://sparql.uniprot.org/sparql\n# Prefixes for various ontologies and vocabularies\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>\nPREFIX up: <http://purl.uniprot.org/core/>\nPREFIX taxon: <http://purl.uniprot.org/taxonomy/>\nPREFIX chebi: <http://purl.obolibrary.org/obo/CHEBI_>\nPREFIX rhea: <http://rdf.rhea-db.org/>\nPREFIX wd: <http://www.wikidata.org/entity/>\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\n\n# Query to find drugs that target human enzymes involved in sterol metabolism\nSELECT DISTINCT ?drugName ?enzymeName WHERE {\n  # Subquery to find human enzymes involved in sterol metabolism\n  {\n    # Query UniProt for human enzymes\n    SERVICE <https://sparql.uniprot.org/sparql> {\n      ?enzyme a up:Protein .\n      ?enzyme up:organism taxon:9606 . # Homo sapiens (human)\n      ?enzyme rdfs:label ?enzymeName .\n    }\n  }\n  \n  # Filter enzymes involved in sterol metabolism using Rhea\n  {\n    SERVICE <https://sparql.rhea-db.org/sparql> {\n      ?reaction rhea:equation ?equation .\n      VALUES ?sterolTerms { \"sterol\" \"cholesterol\" } #List of Sterols to search for\n      FILTER (CONTAINS(lcase(?equation), ?sterolTerms))\n      ?reaction rhea:status rhea:approved .\n      ?reaction rhea:side ?side .\n      ?side rdfs:label ?enzymeName . # Link Rhea reactions to enzyme names found in UniProt\n    }\n  }\n  \n  # Find drugs that target these enzymes using Wikidata\n  {\n    SERVICE <https://query.wikidata.org/sparql> {\n      ?drug wdt:P2175 ?enzymeName . #Target is enzyme name.\n      ?drug rdfs:label ?drugName .\n      FILTER (lang(?drugName) = \"en\") #Filtering for english labels.\n    }\n  }\n}",
    "predicted_endpoint": "https://sparql.uniprot.org/sparql",
    "predicted_endpoint_equal_to_target_endpoint": true,
    "predicted_endpoint_in_federates_with": false,
    "predicted_endpoint_or_federated_endpoint": true,
    "run_id_langsmith": "df6d6818-5bd5-450d-902d-afdc6a3cda01",
    "evaluation_timestamp": "2025-04-23T11:42:17.396488",
    "question_understanding_tokens": 252,
    "question_understanding_completion_tokens": 28,
    "question_understanding_total_tokens": 280,
    "sparql_construction_prompt_tokens": 2096,
    "sparql_construction_completion_tokens": 0,
    "sparql_construction_total_tokens": 2096,
    "is_valid_sparql": true,
    "sparql_syntax_error": "syntactically correct",
    "ground_truth_query_result_is_empty": false,
    "result_eval_f1_score": 0.0,
    "result_eval_precision": 0.0,
    "result_eval_recall": 0.0,
    "error_occured_at_endpoint": true,
    "predicted_query_result_is_empty": true,
    "error_occured_at_endpoint_message": "QueryBadFormed: A bad request has been sent to the endpoint: probably the SPARQL query is badly formed."
  },
  {
    "resource": "https://sparql.uniprot.org/.well-known/sparql-examples/42",
    "natural_language_question": "Connect patents cited in UniProtKB with those in the patent database at EPO via publication number.",
    "ground_truth_query": "PREFIX patent: <http://data.epo.org/linked-data/def/patent/>\nPREFIX skos: <http://www.w3.org/2004/02/skos/core#>\nPREFIX up: <http://purl.uniprot.org/core/>\n\nSELECT ?citation ?patent ?application ?applicationNo\nWHERE\n{\n  ?citation a up:Patent_Citation ;\n    skos:exactMatch ?patent .\n  FILTER(CONTAINS(STR(?patent), 'EP'))\n  BIND(SUBSTR(STR(?patent), 35) AS ?applicationNo)\n  SERVICE <https://data.epo.org/linked-data/query>{\n    ?application patent:publicationNumber ?applicationNo\n  }\n}",
    "target_endpoint": "https://sparql.uniprot.org/sparql/",
    "federates_with": [
      "https://data.epo.org/linked-data/query"
    ],
    "endpoint_set": "Uniprot",
    "file_path": "UniProt/42_connect_patents_to_epo.ttl",
    "predicted_query": "# https://sparql.uniprot.org/sparql\n# Federated query to connect patents cited in UniProtKB with those in the patent database at EPO via publication number.\nPREFIX up: <http://purl.uniprot.org/core/>\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\n\nSELECT DISTINCT ?uniprotEntry ?patentPublicationNumber ?patentTitle\nWHERE {\n  # Query UniProtKB for entries with patent citations\n  SERVICE <https://sparql.uniprot.org/sparql> {\n    ?uniprotEntry a up:Protein ;\n                  up:citation ?citation .\n    ?citation up:publicationNumber ?patentPublicationNumber .\n    FILTER (REGEX(?patentPublicationNumber, \"^[A-Z]{2}[0-9]+\")) # Filter for publication numbers (e.g., WO2023)\n  }\n\n  # Attempt to fetch patent titles from the EPO database (example, needs actual EPO endpoint if available)\n  # This part is speculative and requires a real EPO SPARQL endpoint and schema.  If no endpoint is publicly available, this SERVICE block would be omitted.\n  # SERVICE <https://example.epo.org/sparql> { # Replace with actual EPO endpoint\n  #   ?patent a <http://example.epo.org/ontology/Patent> ;  # Replace with actual EPO class\n  #           <http://example.epo.org/ontology/publicationNumber> ?patentPublicationNumber ; # Replace with actual EPO property\n  #           rdfs:label ?patentTitle . # Replace with actual EPO property for title\n  # }\n}\n# The query retrieves UniProt entries and their associated patent publication numbers from UniProtKB.\n# The commented-out SERVICE block shows how to potentially extend this by querying an EPO SPARQL endpoint (if one were available)\n# to retrieve additional patent details like the title.  The EPO part is currently speculative due to the lack of a known public EPO SPARQL endpoint.",
    "predicted_endpoint": "https://sparql.uniprot.org/sparql",
    "predicted_endpoint_equal_to_target_endpoint": true,
    "predicted_endpoint_in_federates_with": false,
    "predicted_endpoint_or_federated_endpoint": true,
    "run_id_langsmith": "3e271571-52a3-4125-96da-c9cd818caac2",
    "evaluation_timestamp": "2025-04-23T11:42:31.403847",
    "question_understanding_tokens": 250,
    "question_understanding_completion_tokens": 35,
    "question_understanding_total_tokens": 285,
    "sparql_construction_prompt_tokens": 1897,
    "sparql_construction_completion_tokens": 448,
    "sparql_construction_total_tokens": 2345,
    "is_valid_sparql": true,
    "sparql_syntax_error": "syntactically correct",
    "ground_truth_query_result_is_empty": false,
    "result_eval_f1_score": 0.0,
    "result_eval_precision": 0.0,
    "result_eval_recall": 0.0,
    "error_occured_at_endpoint": true,
    "predicted_query_result_is_empty": true,
    "error_occured_at_endpoint_message": "QueryBadFormed: A bad request has been sent to the endpoint: probably the SPARQL query is badly formed."
  },
  {
    "resource": "https://sparql.uniprot.org/.well-known/sparql-examples/67_draft_human_metabolome",
    "natural_language_question": "Generate a draft human metabolome",
    "ground_truth_query": "PREFIX chebislash: <http://purl.obolibrary.org/obo/chebi/>\nPREFIX rh: <http://rdf.rhea-db.org/>\nPREFIX taxon: <http://purl.uniprot.org/taxonomy/>\nPREFIX up: <http://purl.uniprot.org/core/>\n\nSELECT\n?uniprot ?mnemonic ?rhea ?chebi ?smiles ?inchiKey\nWHERE\n{\n  ?uniprot up:annotation/up:catalyticActivity/up:catalyzedReaction ?rhea ;\n        up:organism taxon:9606 ;\n        up:mnemonic ?mnemonic .\n  SERVICE <https://sparql.rhea-db.org/sparql> {\n\t?rhea rh:side/rh:contains/rh:compound ?compound .\n    ?compound (rh:chebi|(rh:reactivePart/rh:chebi)|(rh:underlyingChebi/rh:chebi)) ?chebi .\n   }\n   ?chebi chebislash:smiles ?smiles ;\n          chebislash:inchikey ?inchiKey .\n}",
    "target_endpoint": "https://sparql.uniprot.org/sparql/",
    "federates_with": [
      "https://sparql.rhea-db.org/sparql"
    ],
    "endpoint_set": "Uniprot",
    "file_path": "UniProt/67_draft_human_metabolome.ttl",
    "predicted_query": "# https://sparql.uniprot.org/sparql\n# This query is a draft and may not return a complete human metabolome.\n# It aims to retrieve information related to the human metabolome from UniProt.\n# The definition of metabolome is broad, and this query may need refinement based on specific requirements.\n\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX up: <http://purl.uniprot.org/core/>\nPREFIX taxon: <http://purl.uniprot.org/taxonomy/>\n\nSELECT DISTINCT ?metabolite ?metaboliteName\nWHERE {\n  # Focus on Homo sapiens (Human)\n  VALUES ?taxon { taxon:9606 }\n\n  # Find proteins associated with Homo sapiens\n  ?protein a up:Protein ;\n           up:organism ?taxon .\n\n  # Find pathways associated with these proteins that might involve metabolites\n  ?protein up:annotation ?pathwayAnnotation .\n  ?pathwayAnnotation a up:Pathway_Annotation ;\n                     rdfs:label ?pathwayName .\n\n  # Attempt to find metabolites associated with these pathways.\n  # This is a simplified approach and may require more sophisticated pattern matching.\n  FILTER (CONTAINS(LCASE(?pathwayName), \"metabol\")) # Look for metabolism-related keywords, but be careful about false positives.\n\n  # This is a placeholder for actual metabolite retrieval.  It's unlikely UniProt directly links to all metabolites.\n  # In a real scenario, you'd need to query other databases (e.g., ChEBI via Rhea) based on reaction information.\n  # The assumption here is that pathway names might contain metabolite names.\n  BIND (STRBEFORE(STRAFTER(?pathwayName, \"metabolism of \"), \" \") AS ?metabolite) # Extract potential metabolite name (very rough)\n  BIND (?metabolite AS ?metaboliteName) # Use the extracted name\n\n  FILTER (STRLEN(?metabolite) > 0) # Filter out empty or short strings\n\n  # OPTIONAL {  # Attempt to retrieve information from Rhea if there is a reaction\n  #   SERVICE <https://sparql.rhea-db.org/sparql> {\n  #     ?reaction rdfs:label ?pathwayName .\n  #   }\n  # }\n\n}\nLIMIT 100",
    "predicted_endpoint": "https://sparql.uniprot.org/sparql",
    "predicted_endpoint_equal_to_target_endpoint": true,
    "predicted_endpoint_in_federates_with": false,
    "predicted_endpoint_or_federated_endpoint": true,
    "run_id_langsmith": "2ceecb4b-e377-4781-b7e3-7c68182fba5d",
    "evaluation_timestamp": "2025-04-23T11:42:41.550616",
    "question_understanding_tokens": 238,
    "question_understanding_completion_tokens": 20,
    "question_understanding_total_tokens": 258,
    "sparql_construction_prompt_tokens": 1446,
    "sparql_construction_completion_tokens": 526,
    "sparql_construction_total_tokens": 1972,
    "is_valid_sparql": true,
    "sparql_syntax_error": "syntactically correct",
    "ground_truth_query_result_is_empty": false,
    "result_eval_f1_score": 0.0,
    "result_eval_precision": 0.0,
    "result_eval_recall": 0.0,
    "error_occured_at_endpoint": false,
    "predicted_query_result_is_empty": true,
    "error_occured_at_endpoint_message": "no error, but empty result"
  },
  {
    "resource": "https://sparql.uniprot.org/.well-known/sparql-examples/36",
    "natural_language_question": "Find the orthologous proteins for UniProtKB entry P05067 using the <a href=\"http://www.orthod.org\">OrthoDB database</a>",
    "ground_truth_query": "PREFIX orthodb: <http://purl.orthodb.org/>\nPREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX skos: <http://www.w3.org/2004/02/skos/core#>\nPREFIX uniprotkb: <http://purl.uniprot.org/uniprot/>\nPREFIX up: <http://purl.uniprot.org/core/>\n\nSELECT\n  ?protein\n  ?orthoGroup\n  ?scientificName\n  ?functionComment\n  ?prefferedGeneName\n  ((STRLEN(?value) - ?medianLength) as ?deviationFromMedianLength)\nWHERE\n{\n  uniprotkb:P05067 a up:Protein ;\n        up:organism/up:scientificName ?scientificName ;\n        rdfs:seeAlso ?orthoGroup ;\n        up:encodedBy/skos:prefLabel ?prefferedGeneName ;\n          up:sequence/rdf:value ?value .\n  OPTIONAL {\n    ?protein up:annotation ?functionAnnotation .\n    ?functionAnnotation a up:Function_Annotation ;\n      rdfs:comment ?functionComment .\n  }\n  SERVICE <https://sparql.orthodb.org/sparql>{\n    ?orthoGroup orthodb:ogMedianProteinLength ?medianLength .\n    ?orthoGroup orthodb:hasMember ?xref .\n    ?xref orthodb:xref/orthodb:xrefResource uniprotkb:P05067 .\n  }\n}\nLIMIT 985915",
    "target_endpoint": "https://sparql.uniprot.org/sparql/",
    "federates_with": [
      "https://sparql.orthodb.org/sparql"
    ],
    "endpoint_set": "Uniprot",
    "file_path": "UniProt/36_orthologous_proteins_via_orthodb.ttl",
    "predicted_query": "# https://sparql.uniprot.org/sparql\n# Find orthologous proteins for UniProtKB entry P05067\nPREFIX up: <http://purl.uniprot.org/core/>\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\n\nSELECT DISTINCT ?orthologousProtein ?geneName\nWHERE {\n  # Find the UniProt entry for P05067\n  VALUES ?uniprotEntry { <http://purl.uniprot.org/uniprot/P05067> }\n\n  # Use the UniProt SPARQL endpoint to retrieve orthologs\n  SERVICE <https://sparql.uniprot.org/sparql> {\n    ?uniprotEntry up:sequence ?sequence .\n    ?uniprotEntry rdfs:seeAlso ?orthologCluster . # Assuming rdfs:seeAlso links to ortholog clusters\n       ?orthologousProtein rdfs:seeAlso ?orthologCluster .\n  \t   ?orthologousProtein up:gene ?gene .\n       ?gene rdfs:label ?geneName .\n    FILTER (?orthologousProtein != ?uniprotEntry) # Exclude the original protein\n  }\n}",
    "predicted_endpoint": "https://sparql.uniprot.org/sparql",
    "predicted_endpoint_equal_to_target_endpoint": true,
    "predicted_endpoint_in_federates_with": false,
    "predicted_endpoint_or_federated_endpoint": true,
    "run_id_langsmith": "b62aaa8a-abc7-4ebc-a586-620d1f5f013f",
    "evaluation_timestamp": "2025-04-23T11:43:49.848567",
    "question_understanding_tokens": 268,
    "question_understanding_completion_tokens": 36,
    "question_understanding_total_tokens": 304,
    "sparql_construction_prompt_tokens": 2176,
    "sparql_construction_completion_tokens": 274,
    "sparql_construction_total_tokens": 2450,
    "is_valid_sparql": true,
    "sparql_syntax_error": "syntactically correct",
    "ground_truth_query_result_is_empty": false,
    "result_eval_f1_score": 0.0,
    "result_eval_precision": 0.0,
    "result_eval_recall": 0.0,
    "error_occured_at_endpoint": true,
    "predicted_query_result_is_empty": true,
    "error_occured_at_endpoint_message": "QueryBadFormed: A bad request has been sent to the endpoint: probably the SPARQL query is badly formed."
  },
  {
    "resource": "https://sparql.uniprot.org/.well-known/sparql-examples/60",
    "natural_language_question": "Find human proteins that catalyze reactions where substrates or product have a <a href=\"https://www.ebi.ac.uk/chebi/searchId.do?chebiId=CHEBI:35516\">Cholestane skeleton</a>",
    "ground_truth_query": "PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX rh: <http://rdf.rhea-db.org/>\nPREFIX sachem: <http://bioinfo.uochb.cas.cz/rdf/v1.0/sachem#>\nPREFIX taxon: <http://purl.uniprot.org/taxonomy/>\nPREFIX up: <http://purl.uniprot.org/core/>\n\nSELECT\n  DISTINCT\n    ?protein\n    ?disease\n    ?rhea\n    ?chebi\n    ?omim\nWHERE {\n    # Find complete ChEBIs with a Cholestane skeleton, via the Czech Elixir node IDSM Sachem chemical substructure search.\n    SERVICE <https://idsm.elixir-czech.cz/sparql/endpoint/chebi> {\n      ?chebi sachem:substructureSearch [\n        sachem:query\n\"[C@]12(CCC3CCCC[C@]3(C)[C@@]1([H])CC[C@]1(C)[C@@]([H])([C@@](C)([H])CCCC(C)C)CC[C@@]21[H])[H]\"\n].\n   }\n   # Use the fact that UniProt catalytic activities are annotated using Rhea \n   # Mapping the found ChEBIs to Rhea reactions\n   SERVICE <https://sparql.rhea-db.org/sparql>{\n     ?rhea rh:side/rh:contains/rh:compound/rdfs:subClassOf ?chebi .\n   }\n   # Match the found Rhea reactions with human UniProtKB proteins\n   ?protein up:annotation/up:catalyticActivity/up:catalyzedReaction ?rhea .\n   ?protein up:organism taxon:9606 .\n   # Find only those human entries that have an annotated related disease, and optionaly map these to OMIM\n   ?protein up:annotation/up:disease ?disease .\n   OPTIONAL {\n     ?disease rdfs:seeAlso ?omim .\n     ?omim up:database <http://purl.uniprot.org/database/MIM>\n   }\n}",
    "target_endpoint": "https://sparql.uniprot.org/sparql/",
    "federates_with": [
      "https://idsm.elixir-czech.cz/sparql/endpoint/chebi",
      "https://sparql.rhea-db.org/sparql"
    ],
    "endpoint_set": "Uniprot",
    "file_path": "UniProt/60_enzymes_working_on_substrate_with_Cholestene_backbone.ttl",
    "predicted_query": "# https://sparql.uniprot.org/sparql\n# Find human proteins that catalyze reactions where substrates or product have a Cholestane skeleton\n\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX up: <http://purl.uniprot.org/core/>\nPREFIX uniprot: <http://purl.uniprot.org/uniprot/>\nPREFIX taxon: <http://purl.uniprot.org/taxonomy/>\nPREFIX chebi: <http://purl.obolibrary.org/obo/CHEBI_>\nPREFIX rhea: <http://rdf.rhea-db.org/>\n\nSELECT DISTINCT ?protein ?proteinName ?reaction\nWHERE {\n  # Find human proteins\n  ?protein up:organism taxon:9606 .  # 9606 is the taxonomy ID for Homo sapiens\n  ?protein rdfs:label ?proteinName.\n  \n  # Connect proteins to reactions via Rhea\n  SERVICE <https://sparql.rhea-db.org/sparql> {\n    ?reaction rhea:directionalReactionOf ?proteinURI . #changed to directional reaction of to find reaction catalyzed by the protein\n    \n    # Find reactions involving Cholestane skeleton as a participant (substrate or product)\n    {\n      ?reaction rhea:substrates ?chebiURI .\n    } UNION {\n      ?reaction rhea:products ?chebiURI .\n    }\n    ?chebiURI chebi:CHEBI ?cholestaneSkeleton . #filter based on the chebi ID\n\n     FILTER (?cholestaneSkeleton = chebi:35516) # Filter for Cholestane skeleton (CHEBI:35516)\n  }\n\n    BIND( IRI(REPLACE(STR(?protein), \"http://purl.uniprot.org/uniprot/\", \"http://purl.uniprot.org/uniprot/\")) AS ?uniprotkb)\n    FILTER (STRSTARTS(STR(?protein), \"http://purl.uniprot.org/uniprot/\"))\n\n}",
    "predicted_endpoint": "https://sparql.uniprot.org/sparql",
    "predicted_endpoint_equal_to_target_endpoint": true,
    "predicted_endpoint_in_federates_with": false,
    "predicted_endpoint_or_federated_endpoint": true,
    "run_id_langsmith": "a91b5b83-2446-4e60-83d9-f00caac1d94e",
    "evaluation_timestamp": "2025-04-23T11:44:35.166442",
    "question_understanding_tokens": 286,
    "question_understanding_completion_tokens": 38,
    "question_understanding_total_tokens": 324,
    "sparql_construction_prompt_tokens": 3036,
    "sparql_construction_completion_tokens": 0,
    "sparql_construction_total_tokens": 3036,
    "is_valid_sparql": true,
    "sparql_syntax_error": "syntactically correct",
    "ground_truth_query_result_is_empty": false,
    "result_eval_f1_score": 0.0,
    "result_eval_precision": 0.0,
    "result_eval_recall": 0.0,
    "error_occured_at_endpoint": true,
    "predicted_query_result_is_empty": true,
    "error_occured_at_endpoint_message": "The read operation timed out"
  },
  {
    "resource": "https://sparql.uniprot.org/.well-known/sparql-examples/70_enzymes_interacting_with_molecules_similar_to_dopamine",
    "natural_language_question": "Look for enzymes catalyzing reactions with molecules similar to dopamine.",
    "ground_truth_query": "PREFIX CHEBI: <http://purl.obolibrary.org/obo/CHEBI_>\nPREFIX rh: <http://rdf.rhea-db.org/>\nPREFIX sachem: <http://bioinfo.uochb.cas.cz/rdf/v1.0/sachem#>\nPREFIX up: <http://purl.uniprot.org/core/>\n\nSELECT\n  ?protein\n  ?rhea\n  ?chebi\nWHERE {\n  # Use the smiles of dopamine CHEBI:18243\n  SERVICE <https://idsm.elixir-czech.cz/sparql/endpoint/chebi>{\n    ?chebi sachem:similarCompoundSearch [\n      sachem:query \"NCCc1ccc(O)c(O)c1\" ] .\n  }\n  GRAPH<https://sparql.rhea-db.org/rhea>{\n    ?rhea rh:side/rh:contains/rh:compound ?compound .\n    ?compound (rh:chebi|(rh:reactivePart/rh:chebi)|(rh:underlyingChebi/rh:chebi)) ?chebi .\n  }\n  ?protein up:reviewed true ;\n    up:annotation ?caa .\n  ?caa up:catalyticActivity/up:catalyzedReaction ?rhea .\n}",
    "target_endpoint": "https://sparql.uniprot.org/sparql/",
    "federates_with": [
      "https://idsm.elixir-czech.cz/sparql/endpoint/chebi"
    ],
    "endpoint_set": "Uniprot",
    "file_path": "UniProt/70_enzymes_interacting_with_molecules_similar_to_dopamine.ttl",
    "predicted_query": "# https://sparql.rhea-db.org/sparql\n# Find enzymes catalyzing reactions involving molecules similar to dopamine\n\nPREFIX rhea: <http://rdf.rhea-db.org/>\nPREFIX chebi: <http://purl.obolibrary.org/obo/CHEBI_>\nPREFIX skos: <http://www.w3.org/2004/02/skos/core#>\nPREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>\n\nSELECT DISTINCT ?enzyme ?reaction\nWHERE {\n  # Find reactions involving dopamine\n  {\n    SELECT DISTINCT ?reaction WHERE {\n      SERVICE <https://sparql.rhea-db.org/sparql> {\n        ?reaction rhea: Rhea_has_participant chebi:16735.  #Dopamine CHEBI ID\n      }\n    }\n  }\n\n  # Find enzymes catalyzing those reactions\n  SERVICE <https://sparql.rhea-db.org/sparql> {\n    ?reaction rhea:rheaId ?rheaId .\n    ?enzyme rhea:enzyme_name ?rheaId .\n  }\n}",
    "predicted_endpoint": "https://sparql.rhea-db.org/sparql",
    "predicted_endpoint_equal_to_target_endpoint": false,
    "predicted_endpoint_in_federates_with": false,
    "predicted_endpoint_or_federated_endpoint": false,
    "run_id_langsmith": "51d16d29-499b-4c90-8acd-cc48e7394b3f",
    "evaluation_timestamp": "2025-04-23T11:49:50.089179",
    "question_understanding_tokens": 244,
    "question_understanding_completion_tokens": 26,
    "question_understanding_total_tokens": 270,
    "sparql_construction_prompt_tokens": 2430,
    "sparql_construction_completion_tokens": 279,
    "sparql_construction_total_tokens": 2709,
    "is_valid_sparql": false,
    "sparql_syntax_error": "Lexical error at line 15, column 45.  Encountered: '32' (32), after prefix \"Rhea_has_participant\"",
    "ground_truth_query_result_is_empty": null,
    "result_eval_f1_score": 0.0,
    "result_eval_precision": 0.0,
    "result_eval_recall": 0.0,
    "error_occured_at_endpoint": false,
    "predicted_query_result_is_empty": true,
    "error_occured_at_endpoint_message": "syntactically not correct"
  },
  {
    "resource": "https://sparql.uniprot.org/.well-known/sparql-examples/38",
    "natural_language_question": "For the human entry P05067 (Amyloid-beta precursor protein) find the gene start ends in WikiData",
    "ground_truth_query": "PREFIX p: <http://www.wikidata.org/prop/>\nPREFIX pq: <http://www.wikidata.org/prop/qualifier/>\nPREFIX ps: <http://www.wikidata.org/prop/statement/>\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX uniprotkb: <http://purl.uniprot.org/uniprot/>\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\n\n\nSELECT \n\t?protein \n\t?begin\n\t?end\n\t?chromosome\n\t?assembly\nWHERE {\n    {\n        BIND(uniprotkb:P05067 AS ?proteinIRI)\n        BIND (SUBSTR(STR(?proteinIRI), STRLEN(STR(uniprotkb:))+1) AS ?protein)\n    }\n    SERVICE <https://query.wikidata.org/sparql> {\n        ?wp wdt:P352 ?protein ;\n            wdt:P702 ?wg . \n        ?wg p:P644   ?wgss .\n        ?wgss ps:P644        ?begin ;\n          pq:P1057/wdt:P1813 ?chromosome ;\n          pq:P659/rdfs:label ?assembly .\n        ?wg p:P645 ?wgse .\n        ?wgse ps:P645        ?end ;\n          pq:P1057/wdt:P1813 ?chromosome ;\n          pq:P659/rdfs:label ?assembly .\n        FILTER(lang(?assembly) = \"en\")\n  } \n}",
    "target_endpoint": "https://sparql.uniprot.org/sparql/",
    "federates_with": [
      "https://query.wikidata.org/sparql"
    ],
    "endpoint_set": "Uniprot",
    "file_path": "UniProt/38_find_gene_region_in_wikidata_for_known_entry.ttl",
    "predicted_query": "# https://sparql.uniprot.org/sparql\n# Federated SPARQL query to find gene start and end positions for human Amyloid-beta precursor protein (P05067)\n\nPREFIX up: <http://purl.uniprot.org/core/>\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX uniprot: <http://purl.uniprot.org/uniprot/>\n\nSELECT ?geneName ?ensemblGeneId\nWHERE {\n  # Focus on the human entry P05067 for Amyloid-beta precursor protein\n  VALUES ?protein { uniprot:P05067 }\n  ?protein up:organism <http://purl.uniprot.org/taxonomy/9606> . # Ensure it's human\n  ?protein rdfs:seeAlso ?ensemblGeneId .\n  FILTER (CONTAINS(str(?ensemblGeneId), \"ensembl.org\"))\n\n  # Get gene name from UniProt\n  ?protein up:gene ?gene .\n  ?gene rdfs:label ?geneName .\n\n}",
    "predicted_endpoint": "https://sparql.uniprot.org/sparql",
    "predicted_endpoint_equal_to_target_endpoint": true,
    "predicted_endpoint_in_federates_with": false,
    "predicted_endpoint_or_federated_endpoint": true,
    "run_id_langsmith": "388eb8a5-56f7-43b4-9fc1-e614f9768f16",
    "evaluation_timestamp": "2025-04-23T11:50:01.380380",
    "question_understanding_tokens": 257,
    "question_understanding_completion_tokens": 52,
    "question_understanding_total_tokens": 309,
    "sparql_construction_prompt_tokens": 2407,
    "sparql_construction_completion_tokens": 262,
    "sparql_construction_total_tokens": 2669,
    "is_valid_sparql": true,
    "sparql_syntax_error": "syntactically correct",
    "ground_truth_query_result_is_empty": false,
    "result_eval_f1_score": 0.0,
    "result_eval_precision": 0.0,
    "result_eval_recall": 0.0,
    "error_occured_at_endpoint": false,
    "predicted_query_result_is_empty": true,
    "error_occured_at_endpoint_message": "no error, but empty result"
  },
  {
    "resource": "https://sparql.uniprot.org/.well-known/sparql-examples/117_biosodafrontend_glioblastoma_orthologs_rat",
    "natural_language_question": "Which are the proteins associated with glioblastoma and the orthologs expressed in the rat brain?",
    "ground_truth_query": "PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX obo: <http://purl.obolibrary.org/obo/>\nPREFIX orth: <http://purl.org/net/orth#>\nPREFIX sio: <http://semanticscience.org/resource/>\nPREFIX taxon: <http://purl.uniprot.org/taxonomy/>\nPREFIX up: <http://purl.uniprot.org/core/>\nPREFIX lscr: <http://purl.org/lscr#>\nPREFIX genex: <http://purl.org/genex#>\nSELECT DISTINCT ?protein ?orthologous_protein ?gene ?annotation_text WHERE {\n  {\n  \tSELECT ?protein ?annotation_text WHERE {\n      ?protein a up:Protein ;\n          up:organism taxon:9606 ;\n          up:annotation ?annotation .\n      ?annotation rdfs:comment ?annotation_text .\n      ?annotation a up:Disease_Annotation .\n      FILTER CONTAINS (?annotation_text, \"glioblastoma\")\n    }\n  }\n  SERVICE <https://sparql.omabrowser.org/sparql/> {\n    SELECT ?orthologous_protein ?protein ?gene WHERE {\n    ?protein_OMA a orth:Protein .\n    ?orthologous_protein a orth:Protein .\n    ?cluster a orth:OrthologsCluster .\n    ?cluster orth:hasHomologousMember ?node1 .\n    ?cluster\n    orth:hasHomologousMember ?node2 .\n    ?node2 orth:hasHomologousMember* ?protein_OMA .\n    ?node1 orth:hasHomologousMember* ?orthologous_protein .\n    ?orthologous_protein orth:organism/obo:RO_0002162 taxon:10116 . # rattus norvegicus\n    ?orthologous_protein sio:SIO_010079 ?gene .\n    ?protein_OMA lscr:xrefUniprot ?protein .\n    FILTER(?node1 != ?node2)\n\t\t}\n\t}\n  SERVICE <https://www.bgee.org/sparql/> {\n    ?gene genex:isExpressedIn ?a .\n    ?a rdfs:label \"brain\" .\n    ?gene orth:organism ?s . \n    ?s obo:RO_0002162 taxon:10116.\n\t}\n}",
    "target_endpoint": "https://sparql.uniprot.org/sparql",
    "federates_with": [
      "https://sparql.omabrowser.org/sparql/",
      "https://www.bgee.org/sparql/"
    ],
    "endpoint_set": "Uniprot",
    "file_path": "UniProt/117_biosodafrontend_glioblastoma_orthologs_rat.ttl",
    "predicted_query": "# https://sparql.uniprot.org/sparql\n# Prefixes for commonly used namespaces\nPREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX up: <http://purl.uniprot.org/core/>\nPREFIX taxon: <http://purl.uniprot.org/taxonomy/>\nPREFIX disease: <http://purl.uniprot.org/diseases/>\n\n# Select the protein identifiers\nSELECT DISTINCT ?protein ?proteinName\nWHERE {\n  # Subquery to find proteins associated with glioblastoma in UniProt\n  {\n    # Filter proteins associated with the \"glioblastoma\" disease\n    ?disease disease:name \"Glioma\". # Using \"Glioma\" as a broader term to capture glioblastoma variants\n    ?protein up:classifiedWith ?disease .\n    ?protein rdfs:label ?proteinName .\n  }\n  # Filter for rat proteins\n  {\n    # rat taxonomy ID\n    BIND(taxon:10116 AS ?ratTaxon)\n    ?protein up:organism ?ratTaxon .\n  }\n\n  #OPTIONAL { #Attempt at federated query for orthologs. Not effective as orthology information is not readily available in UniProt\n  #  SERVICE <https://sparql.rhea-db.org/sparql> { # Attempt to query RheaDB for orthologs. Commented out as it's not directly relevant.\n  #  }\n  #}\n}",
    "predicted_endpoint": "https://sparql.uniprot.org/sparql",
    "predicted_endpoint_equal_to_target_endpoint": true,
    "predicted_endpoint_in_federates_with": false,
    "predicted_endpoint_or_federated_endpoint": true,
    "run_id_langsmith": "2ba89896-b1c9-4fa7-8bde-f21cc17bfefb",
    "evaluation_timestamp": "2025-04-23T11:50:11.799546",
    "question_understanding_tokens": 251,
    "question_understanding_completion_tokens": 37,
    "question_understanding_total_tokens": 288,
    "sparql_construction_prompt_tokens": 2541,
    "sparql_construction_completion_tokens": 364,
    "sparql_construction_total_tokens": 2905,
    "is_valid_sparql": true,
    "sparql_syntax_error": "syntactically correct",
    "ground_truth_query_result_is_empty": false,
    "result_eval_f1_score": 0.0,
    "result_eval_precision": 0.0,
    "result_eval_recall": 0.0,
    "error_occured_at_endpoint": false,
    "predicted_query_result_is_empty": true,
    "error_occured_at_endpoint_message": "no error, but empty result"
  },
  {
    "resource": "https://sparql.uniprot.org/.well-known/sparql-examples/116_biosodafrontend_rabit_mouse_orthologs",
    "natural_language_question": "Rabbit's proteins encoded by genes that are orthologous to Mouse's HBB-Y gene and their cross reference links to Uniprot",
    "ground_truth_query": "PREFIX lscr: <http://purl.org/lscr#>\nPREFIX orth: <http://purl.org/net/orth#>\nPREFIX up: <http://purl.uniprot.org/core/>\nPREFIX obo: <http://purl.obolibrary.org/obo/>\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nSELECT DISTINCT ?PROTEIN_1 ?PROTEIN_2 ?UNIPROT_XREF_1 ?UNIPROT_XREF_2 WHERE {\n\t?taxon_1 up:commonName 'Mouse' .\n\t?taxon_2 up:commonName 'Rabbit' .\n\tSERVICE <https://sparql.omabrowser.org/sparql/> {\n\t\t?cluster a orth:OrthologsCluster .\n\t\t?cluster orth:hasHomologousMember ?node1 .\n\t\t?cluster orth:hasHomologousMember ?node2 .\n\t\t?node2 orth:hasHomologousMember* ?PROTEIN_2 .\n\t\t?node1 orth:hasHomologousMember* ?PROTEIN_1 .\n\t\t?PROTEIN_1 a orth:Protein .\n\t\t?PROTEIN_1 orth:organism/obo:RO_0002162 ?taxon_1 ;\n\t\t\trdfs:label 'HBB-Y' ;\n\t\t\tlscr:xrefUniprot ?UNIPROT_XREF_1 .\n\t\t?PROTEIN_2 a orth:Protein .\n\t\t?PROTEIN_2 orth:organism/obo:RO_0002162 ?taxon_2 .\n\t\t?PROTEIN_2 lscr:xrefUniprot ?UNIPROT_XREF_2 .\n\t\tFILTER ( ?node1 != ?node2 )\n\t}\n}",
    "target_endpoint": "https://sparql.uniprot.org/sparql",
    "federates_with": [
      "https://sparql.omabrowser.org/sparql/"
    ],
    "endpoint_set": "Uniprot",
    "file_path": "UniProt/116_biosodafrontend_rabit_mouse_orthologs.ttl",
    "predicted_query": "# https://sparql.uniprot.org/sparql\nPREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX up: <http://purl.uniprot.org/core/>\nPREFIX taxon: <http://purl.uniprot.org/taxonomy/>\nPREFIX orthodb: <http://purl.uniprot.org/orthodb/>\n\nSELECT DISTINCT ?rabbitProtein ?rabbitProteinAccession\nWHERE {\n  # Find the UniProt ID for Mouse HBB-Y protein and its orthologs in Rabbit\n  SERVICE <https://sparql.uniprot.org/sparql> {\n    # Define the Mouse taxon\n    VALUES ?mouseTaxon { taxon:10090 } # Mouse NCBI Taxonomy ID\n\n    # Define the Rabbit taxon\n    VALUES ?rabbitTaxon { taxon:9986 } # Rabbit NCBI Taxonomy ID\n    \n    # Find the Mouse protein for HBB-Y\n    ?mouseProtein a up:Protein .\n    ?mouseProtein up:organism ?mouseTaxon .\n    ?mouseProtein rdfs:label \"HBB-Y\" . #Assumes HBB-Y is the label/name\n\n    # Find orthologs of the Mouse protein in Rabbit\n    ?ortholog orthodb:member ?mouseProtein .\n    ?ortholog orthodb:member ?rabbitProtein .\n    ?rabbitProtein a up:Protein .\n    ?rabbitProtein up:organism ?rabbitTaxon .\n    ?rabbitProtein up:accession ?rabbitProteinAccession .\n  }\n}",
    "predicted_endpoint": "https://sparql.uniprot.org/sparql",
    "predicted_endpoint_equal_to_target_endpoint": true,
    "predicted_endpoint_in_federates_with": false,
    "predicted_endpoint_or_federated_endpoint": true,
    "run_id_langsmith": "5a8b274a-103e-4544-a79f-6f04ebb8da5d",
    "evaluation_timestamp": "2025-04-23T11:50:25.182495",
    "question_understanding_tokens": 259,
    "question_understanding_completion_tokens": 49,
    "question_understanding_total_tokens": 308,
    "sparql_construction_prompt_tokens": 3422,
    "sparql_construction_completion_tokens": 529,
    "sparql_construction_total_tokens": 3951,
    "is_valid_sparql": true,
    "sparql_syntax_error": "syntactically correct",
    "ground_truth_query_result_is_empty": false,
    "result_eval_f1_score": 0.0,
    "result_eval_precision": 0.0,
    "result_eval_recall": 0.0,
    "error_occured_at_endpoint": false,
    "predicted_query_result_is_empty": true,
    "error_occured_at_endpoint_message": "no error, but empty result"
  },
  {
    "resource": "https://sparql.uniprot.org/.well-known/sparql-examples/29",
    "natural_language_question": "Use <a href=\"http://allie.dbcls.jp/\">ALLIE</a> a service for Abbreviation / Long Form in Japanese and English to search in UniProt using Japanese.",
    "ground_truth_query": "PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX up: <http://purl.uniprot.org/core/>\n\nSELECT ?protein ?englishLabelStr\nWHERE {\n    SERVICE <https://data.allie.dbcls.jp/sparql>{\n        ?x rdfs:label \"アミロイド前駆体タンパク質\"@ja ;\n            rdfs:label ?englishLabel .\n        FILTER(lang(?englishLabel) = \"en\")\n    }\n    BIND (STR(?englishLabel) AS ?englishLabelStr)\n    ?protein a up:Protein .\n    {\n        ?protein (up:recommendedName|up:alternativeName) ?structuredName .\n    }\n    UNION\n    {\n        VALUES(?partType){(up:domain) (up:component)}\n            ?protein ?partType ?part .\n        ?part (up:recommendedName|up:alternativeName) ?structuredName .\n    }\n    ?structuredName ?anyKindOfName  ?englishLabelStr .\n    ?anyKindOfName rdfs:subPropertyOf up:structuredNameType .\n}",
    "target_endpoint": "https://sparql.uniprot.org/sparql/",
    "federates_with": [
      "https://data.allie.dbcls.jp/sparql"
    ],
    "endpoint_set": "Uniprot",
    "file_path": "UniProt/29_search_uniprot_in_japanese_with_allie.ttl",
    "predicted_query": "# https://sparql.uniprot.org/sparql\n# The user is asking to use ALLIE, which is not a SPARQL endpoint and its contents are not available to query.\n# It is a service for Abbreviation / Long Form in Japanese and English.\n# The user wants to search in UniProt using Japanese.\n# Since we cannot directly use ALLIE, we will focus on searching UniProt for entries that might have Japanese descriptions or annotations.\n# However, UniProt SPARQL does not explicitly support querying based on language.\n# Therefore, this query will search for any UniProt entries that have \"UniProt\" in their description, assuming that the user wants to find information related to UniProt itself expressed in Japanese.\n# This is an approximation of the user's request, given the limitations of the available SPARQL endpoints and the inaccessibility of ALLIE.\n\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX uniprot: <http://purl.uniprot.org/core/>\n\nSELECT DISTINCT ?entry ?definition\nWHERE {\n  SERVICE <https://sparql.uniprot.org/sparql> {\n    ?entry a uniprot:Protein .\n    ?entry rdfs:comment ?definition .\n    FILTER (CONTAINS(str(?definition), \"UniProt\")) # Approximate search for Japanese descriptions by looking for \"UniProt\" in the comment.\n  }\n}\nLIMIT 10",
    "predicted_endpoint": "https://sparql.uniprot.org/sparql",
    "predicted_endpoint_equal_to_target_endpoint": true,
    "predicted_endpoint_in_federates_with": false,
    "predicted_endpoint_or_federated_endpoint": true,
    "run_id_langsmith": "23723599-9ff6-4f63-8f3f-c13ec18eddcd",
    "evaluation_timestamp": "2025-04-23T11:50:34.725736",
    "question_understanding_tokens": 268,
    "question_understanding_completion_tokens": 28,
    "question_understanding_total_tokens": 296,
    "sparql_construction_prompt_tokens": 1948,
    "sparql_construction_completion_tokens": 325,
    "sparql_construction_total_tokens": 2273,
    "is_valid_sparql": true,
    "sparql_syntax_error": "syntactically correct",
    "ground_truth_query_result_is_empty": false,
    "result_eval_f1_score": 0.0,
    "result_eval_precision": 0.0,
    "result_eval_recall": 0.0,
    "error_occured_at_endpoint": false,
    "predicted_query_result_is_empty": true,
    "error_occured_at_endpoint_message": "no error, but empty result"
  },
  {
    "resource": "https://sparql.rhea-db.org/.well-known/sparql-examples/94_Select_all_approved_reactions_with_CHEBI_or_one_of_its_descendant_optional_UniProtKB_reviewed_EC",
    "natural_language_question": "Select all approved reactions with CHEBI:17815 (a 1,2-diacyl-sn-glycerol) or one of its descendant. Display links to UniProtKB/Swiss-Prot entries via EC numbers if the link rhea-ec exists.",
    "ground_truth_query": "PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX rh:<http://rdf.rhea-db.org/>\nPREFIX CHEBI:<http://purl.obolibrary.org/obo/CHEBI_>\nPREFIX up:<http://purl.uniprot.org/core/>\n\nSELECT\n  distinct\n    ?reaction\n    ?enzyme\n    (count(distinct ?protein) as ?proteinCount)\nWHERE {\n  ?reaction rdfs:subClassOf rh:Reaction .\n  ?reaction rh:status rh:Approved .\n  ?reaction rh:side ?reactionSide .\n\n  OPTIONAL {?reaction rh:ec ?enzyme .\n    SERVICE <https://sparql.uniprot.org/sparql> {\n      ?protein up:reviewed true .\n      ?protein up:enzyme ?enzyme.\n    }\n  } .\n  ?reactionSide rh:contains ?participant .\n  ?participant rh:compound ?compound .\n  ?compound rh:chebi ?chebi .\n  ?chebi rdfs:subClassOf* CHEBI:17815 .\n}\nGROUP BY ?reaction ?enzyme\nORDER BY ?reaction\nLIMIT 985915",
    "target_endpoint": "https://sparql.rhea-db.org/sparql",
    "federates_with": [
      "https://sparql.uniprot.org/sparql"
    ],
    "endpoint_set": "Rhea",
    "file_path": "Rhea/94_Select_all_approved_reactions_with_CHEBI_or_one_of_its_descendant_optional_UniProtKB_reviewed_EC.ttl",
    "predicted_query": "# https://sparql.rhea-db.org/sparql\n# Federated SPARQL query to find reactions involving 1,2-diacyl-sn-glycerol or its descendants,\n# and link them to UniProtKB/Swiss-Prot entries via EC numbers if available.\nPREFIX rhea: <http://rdf.rhea-db.org/>\nPREFIX chebi: <http://purl.obolibrary.org/obo/CHEBI_>\nPREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\n\nSELECT DISTINCT ?reaction ?reactionLabel ?uniprotEntry\nWHERE {\n  {\n    # Find reactions that directly involve 1,2-diacyl-sn-glycerol (CHEBI:17815).\n    ?reaction rhea:chebi chebi:17815 .\n    ?reaction rhea:status \"approved\" . # Filter for approved reactions\n\n    # Get the label of the reaction\n    ?reaction rdfs:label ?reactionLabel .\n\n    # Optional: Link to UniProtKB/Swiss-Prot entries via EC numbers.\n    OPTIONAL {\n      ?reaction rhea:ec ?ecNumber .\n      SERVICE <https://sparql.uniprot.org/sparql> {\n        ?uniprotEntry <http://purl.uniprot.org/core/classification> ?ecNumber .\n      }\n    }\n  }\n  UNION\n  {\n    # Find reactions that involve descendants of 1,2-diacyl-sn-glycerol.\n    ?descendant rdfs:subClassOf chebi:17815 .\n    ?reaction rhea:chebi ?descendant .\n    ?reaction rhea:status \"approved\" . # Filter for approved reactions\n\n    # Get the label of the reaction\n    ?reaction rdfs:label ?reactionLabel .\n\n    # Optional: Link to UniProtKB/Swiss-Prot entries via EC numbers.\n    OPTIONAL {\n      ?reaction rhea:ec ?ecNumber .\n      SERVICE <https://sparql.uniprot.org/sparql> {\n        ?uniprotEntry <http://purl.uniprot.org/core/classification> ?ecNumber .\n      }\n    }\n  }\n}",
    "predicted_endpoint": "https://sparql.rhea-db.org/sparql",
    "predicted_endpoint_equal_to_target_endpoint": true,
    "predicted_endpoint_in_federates_with": false,
    "predicted_endpoint_or_federated_endpoint": true,
    "run_id_langsmith": "6e6d347f-cf3a-4a4a-bffc-050ce514d69f",
    "evaluation_timestamp": "2025-04-23T11:52:19.799072",
    "question_understanding_tokens": 289,
    "question_understanding_completion_tokens": 98,
    "question_understanding_total_tokens": 387,
    "sparql_construction_prompt_tokens": 2972,
    "sparql_construction_completion_tokens": 540,
    "sparql_construction_total_tokens": 3512,
    "is_valid_sparql": true,
    "sparql_syntax_error": "syntactically correct",
    "ground_truth_query_result_is_empty": false,
    "result_eval_f1_score": 0.0,
    "result_eval_precision": 0.0,
    "result_eval_recall": 0.0,
    "error_occured_at_endpoint": false,
    "predicted_query_result_is_empty": true,
    "error_occured_at_endpoint_message": "no error, but empty result"
  },
  {
    "resource": "https://sparql.rhea-db.org/.well-known/sparql-examples/11",
    "natural_language_question": "Distribution of reactions according to the first class of the enzyme classification (federated query)",
    "ground_truth_query": "PREFIX ec: <http://purl.uniprot.org/enzyme/>\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX rh: <http://rdf.rhea-db.org/>\nPREFIX skos: <http://www.w3.org/2004/02/skos/core#>\n\n# Query 11\n# Retrieve the count of reactions mapped to each level (main class) of the enzyme classification\n#\n# This query mimics the Filter section of the Rhea website (Browse all reactions)\n# https://www.rhea-db.org/rhea?query=\nSELECT ?ecClass (STR(?ecName) AS ?ecClassName) (COUNT(?rhea) AS ?rheaCount)\nWHERE {\n  SERVICE <https://sparql.uniprot.org/sparql> {\n    VALUES (?ecClass) { (ec:1.-.-.-)(ec:2.-.-.-)(ec:3.-.-.-)(ec:4.-.-.-)(ec:5.-.-.-) (ec:6.-.-.-) (ec:7.-.-.-)}\n    ?ecNumber rdfs:subClassOf ?ecClass .\n    ?ecClass skos:prefLabel ?ecName .\n  }\n  ?rhea rdfs:subClassOf rh:Reaction .\n  ?rhea rh:ec ?ecNumber .\n} GROUP BY ?ecClass ?ecName",
    "target_endpoint": "https://sparql.rhea-db.org/sparql",
    "federates_with": [
      "https://sparql.uniprot.org/sparql"
    ],
    "endpoint_set": "Rhea",
    "file_path": "Rhea/11.ttl",
    "predicted_query": "# https://sparql.rhea-db.org/sparql\n# Federated query to retrieve the distribution of reactions according to the first class of enzyme classification\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX rh: <http://rdf.rhea-db.org/>\nPREFIX up: <http://purl.uniprot.org/core/>\n\nSELECT ?enzymeClass (COUNT(DISTINCT ?reaction) AS ?reactionCount)\nWHERE {\n  # Subquery to retrieve Rhea reactions associated with UniProt entries and their enzyme classes\n  {\n    SELECT DISTINCT ?reaction ?enzymeClass WHERE {\n      ?reaction a rh:Reaction .\n      ?reaction rh:enzyme ?enzyme .\n\n      # Access UniProt to retrieve enzyme classes based on the enzyme identifier\n      SERVICE <https://sparql.uniprot.org/sparql> {\n        ?enzyme up:database rdfs:label \"RHEA\" . # Filter for Rhea xrefs in UniProt\n        ?enzyme up:classifiedWith ?enzymeClassURI .\n        ?enzymeClassURI rdfs:label ?enzymeClass .\n        FILTER (REGEX(?enzymeClass, \"^[0-9]+\\\\.\", \"i\")) # Filter to get only the first level EC codes\n      }\n    }\n  }\n}\nGROUP BY ?enzymeClass\nORDER BY DESC(?reactionCount)",
    "predicted_endpoint": "https://sparql.rhea-db.org/sparql",
    "predicted_endpoint_equal_to_target_endpoint": true,
    "predicted_endpoint_in_federates_with": false,
    "predicted_endpoint_or_federated_endpoint": true,
    "run_id_langsmith": "ad37ade0-583c-44af-a3d5-dd4accfb9a64",
    "evaluation_timestamp": "2025-04-23T11:54:40.319981",
    "question_understanding_tokens": 249,
    "question_understanding_completion_tokens": 24,
    "question_understanding_total_tokens": 273,
    "sparql_construction_prompt_tokens": 1543,
    "sparql_construction_completion_tokens": 378,
    "sparql_construction_total_tokens": 1921,
    "is_valid_sparql": false,
    "sparql_syntax_error": "Encountered \"  \"\\\"RHEA\\\" \"\" at line 17, column 40.\nWas expecting one of:\n    \"values\" ...\n    \"graph\" ...\n    \"optional\" ...\n    \"minus\" ...\n    \"bind\" ...\n    \"service\" ...\n    \"filter\" ...\n    \"{\" ...\n    \"}\" ...\n    \";\" ...\n    \",\" ...\n    \".\" ...\n    \"{|\" ...",
    "ground_truth_query_result_is_empty": null,
    "result_eval_f1_score": 0.0,
    "result_eval_precision": 0.0,
    "result_eval_recall": 0.0,
    "error_occured_at_endpoint": false,
    "predicted_query_result_is_empty": true,
    "error_occured_at_endpoint_message": "syntactically not correct"
  },
  {
    "resource": "https://sparql.rhea-db.org/.well-known/sparql-examples/109_Distribution_of_reactions_according_to_the_first_level_of_enzyme_classification",
    "natural_language_question": "Distribution of reactions according to the first level of enzyme classification",
    "ground_truth_query": "\nPREFIX rh:<http://rdf.rhea-db.org/>\nPREFIX ec:<http://purl.uniprot.org/enzyme/>\nPREFIX rdfs:<http://www.w3.org/2000/01/rdf-schema#>\nPREFIX skos:<http://www.w3.org/2004/02/skos/core#>\n\nSELECT\n  ?ecClass\n  (str(?ecName) as ?ecClassName)\n  (count(?reaction) as ?reactionCount)\nWHERE\n{\n  SERVICE <http://sparql.uniprot.org/sparql> {\n    VALUES (?ecClass) { (ec:1.-.-.-)(ec:2.-.-.-)(ec:3.-.-.-)(ec:4.-.-.-)(ec:5.-.-.-) (ec:6.-.-.-) (ec:7.-.-.-) }\n    ?ecNumber rdfs:subClassOf ?ecClass .\n    ?ecClass skos:prefLabel ?ecName .\n  }\n  ?reaction rdfs:subClassOf rh:Reaction .\n  ?reaction rh:ec ?ecNumber .\n}\nGROUP BY ?ecClass ?ecName\n",
    "target_endpoint": "https://sparql.rhea-db.org/sparql",
    "federates_with": [
      "http://sparql.uniprot.org/sparql"
    ],
    "endpoint_set": "Rhea",
    "file_path": "Rhea/109_Distribution_of_reactions_according_to_the_first_level_of_enzyme_classification.ttl",
    "predicted_query": "# https://sparql.rhea-db.org/sparql\n# Distribution of reactions according to the first level of enzyme classification\n\nPREFIX rhea: <http://rdf.rhea-db.org/>\nPREFIX owl: <http://www.w3.org/2002/07/owl#>\nPREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\n\nSELECT ?enzymeClass (COUNT(DISTINCT ?reaction) AS ?reactionCount)\nWHERE {\n  # Query Rhea for reactions and their associated enzyme class (EC number)\n  SERVICE <https://sparql.rhea-db.org/sparql> {\n    ?reaction rdf:type rhea:Reaction .\n    ?reaction rhea:ec ?ecNumber .\n  }\n\n  # Extract the first level of the EC number (e.g., 1.-.-.-)\n  BIND(SUBSTR(STR(?ecNumber), 1, 1) AS ?enzymeClass) # Assuming EC number is a string\n\n}\nGROUP BY ?enzymeClass\nORDER BY DESC(?reactionCount)",
    "predicted_endpoint": "https://sparql.rhea-db.org/sparql",
    "predicted_endpoint_equal_to_target_endpoint": true,
    "predicted_endpoint_in_federates_with": false,
    "predicted_endpoint_or_federated_endpoint": true,
    "run_id_langsmith": "4d4f1574-c499-4756-ab66-b20742d4b0e2",
    "evaluation_timestamp": "2025-04-23T11:54:47.461089",
    "question_understanding_tokens": 244,
    "question_understanding_completion_tokens": 24,
    "question_understanding_total_tokens": 268,
    "sparql_construction_prompt_tokens": 1367,
    "sparql_construction_completion_tokens": 0,
    "sparql_construction_total_tokens": 1367,
    "is_valid_sparql": true,
    "sparql_syntax_error": "syntactically correct",
    "ground_truth_query_result_is_empty": false,
    "result_eval_f1_score": 0.0,
    "result_eval_precision": 0.0,
    "result_eval_recall": 0.0,
    "error_occured_at_endpoint": false,
    "predicted_query_result_is_empty": true,
    "error_occured_at_endpoint_message": "no error, but empty result"
  },
  {
    "resource": "https://sparql.rhea-db.org/.well-known/sparql-examples/12",
    "natural_language_question": "Select all Rhea reactions linked to protein sequences (enzymes and transporters) in UniProtKB",
    "ground_truth_query": "PREFIX rh: <http://rdf.rhea-db.org/>\nPREFIX up: <http://purl.uniprot.org/core/>\n\n# Query 12\n# Select all Rhea reactions used to annotate enzyme sequences in UniProtKB\n# return the number of UniProtKB entries\n# Federated query using a service to UniProt SPARQL endpoint\n#\n# This query corresponds to the Rhea website query:\n# https://www.rhea-db.org/rhea?query=uniprot:*\n#\nSELECT ?uniprotCount ?rhea ?accession ?equation \nWHERE {\n  SERVICE <https://sparql.uniprot.org/sparql> { \n  \tSELECT ?rhea (count(?uniprot) as ?uniprotCount) {\n      ?uniprot up:annotation/up:catalyticActivity/up:catalyzedReaction ?rhea . \n  \t}\n  \tGROUP BY ?rhea\n  }\n  ?rhea rh:accession ?accession .\n  ?rhea rh:equation ?equation .\n}",
    "target_endpoint": "https://sparql.rhea-db.org/sparql",
    "federates_with": [
      "https://sparql.uniprot.org/sparql"
    ],
    "endpoint_set": "Rhea",
    "file_path": "Rhea/12.ttl",
    "predicted_query": "# https://sparql.rhea-db.org/sparql\n# Federated query to retrieve Rhea reactions linked to protein sequences in UniProtKB.\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX rhea: <http://rdf.rhea-db.org/>\n\nSELECT DISTINCT ?rheaId ?rheaLabel ?uniprotProtein ?proteinLabel\nWHERE {\n  # Query Rhea for reactions and their identifiers and labels\n  SERVICE <https://sparql.rhea-db.org/sparql> {\n    ?rhea rdf:type rhea:Reaction .\n    ?rhea rhea:id ?rheaId .\n    ?rhea rdfs:label ?rheaLabel .\n    # Consider reactions that have participants that are proteins (enzymes, transporters, etc.)\n    ?rhea rhea:participant ?participant .\n  }\n\n  # Query UniProt for protein sequences linked to Rhea participants\n  SERVICE <https://sparql.uniprot.org/sparql> {\n    ?uniprotProtein rdfs:seeAlso ?participant .  # Assuming rdfs:seeAlso links UniProt proteins to Rhea\n    ?uniprotProtein rdfs:label ?proteinLabel .\n  }\n  \n  # Filter to ensure the links are valid by comparing the URIs (Optional, if exact URI matching is needed)\n  FILTER (str(?participant) = str(?uniprotProtein)) #ensuring the same URI\n}",
    "predicted_endpoint": "https://sparql.rhea-db.org/sparql",
    "predicted_endpoint_equal_to_target_endpoint": true,
    "predicted_endpoint_in_federates_with": false,
    "predicted_endpoint_or_federated_endpoint": true,
    "run_id_langsmith": "783dd457-1509-4ca2-995b-0108f9b1e315",
    "evaluation_timestamp": "2025-04-23T11:54:59.248081",
    "question_understanding_tokens": 250,
    "question_understanding_completion_tokens": 30,
    "question_understanding_total_tokens": 280,
    "sparql_construction_prompt_tokens": 2006,
    "sparql_construction_completion_tokens": 336,
    "sparql_construction_total_tokens": 2342,
    "is_valid_sparql": false,
    "sparql_syntax_error": "Line 10, column 11: Unresolved prefixed name: rdf:type",
    "ground_truth_query_result_is_empty": null,
    "result_eval_f1_score": 0.0,
    "result_eval_precision": 0.0,
    "result_eval_recall": 0.0,
    "error_occured_at_endpoint": false,
    "predicted_query_result_is_empty": true,
    "error_occured_at_endpoint_message": "syntactically not correct"
  },
  {
    "resource": "https://sparql.rhea-db.org/.well-known/sparql-examples/112_Total_number_of_reaction_ec_protein_links",
    "natural_language_question": "Total number of <reaction> <ec> <protein> links",
    "ground_truth_query": "PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX rh:<http://rdf.rhea-db.org/>\nPREFIX ec:<http://purl.uniprot.org/enzyme/>\nPREFIX up:<http://purl.uniprot.org/core/>\n\nSELECT\n  (count(?reaction) as ?reactionEcProteinLinkCount)\nWHERE {\n  ?reaction rdfs:subClassOf rh:Reaction .\n  ?reaction rh:ec ?enzyme\n  SERVICE <http://sparql.uniprot.org/sparql> {\n    ?protein up:reviewed true .\n    ?protein up:enzyme ?enzyme.\n  }\n}",
    "target_endpoint": "https://sparql.rhea-db.org/sparql",
    "federates_with": [
      "http://sparql.uniprot.org/sparql"
    ],
    "endpoint_set": "Rhea",
    "file_path": "Rhea/112_Total_number_of_reaction_ec_protein_links.ttl",
    "predicted_query": "# https://sparql.rhea-db.org/sparql\n# Count the number of reactions, proteins, and \"ec\" entity links\n\nPREFIX rhea: <http://rdf.rhea-db.org/>\nPREFIX uniprot: <http://purl.uniprot.org/core/>\n\nSELECT (COUNT(DISTINCT ?reaction) AS ?reactionCount) (COUNT(DISTINCT ?protein) AS ?proteinCount) (COUNT(DISTINCT ?ecNumber) AS ?ecCount)\nWHERE {\n  # Find reactions in Rhea\n  SERVICE <https://sparql.rhea-db.org/sparql> {\n    ?reaction a rhea:Reaction .\n  }\n  \n  # Find proteins in UniProt and their associated EC numbers\n  SERVICE <https://sparql.uniprot.org/sparql> {\n    ?protein a uniprot:Protein ;\n             uniprot:ecNumber ?ecNumber .\n    FILTER CONTAINS(LCASE(?ecNumber), \"ec\") # Filter EC numbers containing \"ec\"\n  }\n  \n  #Optional: Find links between Rhea reactions and UniProt proteins if such links exist.\n  #This part depends on whether a direct link exists between Rhea and UniProt.\n  #If a direct link doesn't exist, you might need to rely on shared identifiers (e.g., EC numbers, gene names).\n  #The following is an example using EC numbers as a potential link. Adapt if needed. \n  \n OPTIONAL {   \n   SERVICE <https://sparql.rhea-db.org/sparql> {\n     ?reaction rhea:equation ?equation .\n     FILTER CONTAINS(STR(?equation), ?ecNumber) #Check if ecNumber is in the reaction equation.\n   }\n  }\n}",
    "predicted_endpoint": "https://sparql.rhea-db.org/sparql",
    "predicted_endpoint_equal_to_target_endpoint": true,
    "predicted_endpoint_in_federates_with": false,
    "predicted_endpoint_or_federated_endpoint": true,
    "run_id_langsmith": "4ec74d45-6a0f-4107-902f-e1e48dc2e0ee",
    "evaluation_timestamp": "2025-04-23T11:55:08.247419",
    "question_understanding_tokens": 244,
    "question_understanding_completion_tokens": 21,
    "question_understanding_total_tokens": 265,
    "sparql_construction_prompt_tokens": 2165,
    "sparql_construction_completion_tokens": 436,
    "sparql_construction_total_tokens": 2601,
    "is_valid_sparql": true,
    "sparql_syntax_error": "syntactically correct",
    "ground_truth_query_result_is_empty": false,
    "result_eval_f1_score": 0.0,
    "result_eval_precision": 0.0,
    "result_eval_recall": 0.0,
    "error_occured_at_endpoint": false,
    "predicted_query_result_is_empty": false,
    "error_occured_at_endpoint_message": "no error"
  },
  {
    "resource": "https://sparql.rhea-db.org/.well-known/sparql-examples/19_draft_human_metabolome",
    "natural_language_question": "Generate a draft human metabolome",
    "ground_truth_query": "PREFIX chebislash: <http://purl.obolibrary.org/obo/chebi/>\nPREFIX rh: <http://rdf.rhea-db.org/>\nPREFIX taxon: <http://purl.uniprot.org/taxonomy/>\nPREFIX up: <http://purl.uniprot.org/core/>\n\nSELECT\n  ?uniprot ?mnemonic ?rhea ?chebi ?smiles ?inchiKey\nWHERE\n{\n  ?rhea rh:side/rh:contains/rh:compound ?compound .\n  ?compound (rh:chebi|(rh:reactivePart/rh:chebi)|(rh:underlyingChebi/rh:chebi)) ?chebi .\n  ?chebi chebislash:smiles ?smiles ;\n          chebislash:inchikey ?inchiKey .\n  SERVICE <https://sparql.uniprot.org/sparql> {\n     ?uniprot up:annotation/up:catalyticActivity/up:catalyzedReaction ?rhea ;\n                                             up:organism taxon:9606 ;\n                                             up:mnemonic ?mnemonic .\n\n   }\n}",
    "target_endpoint": "https://sparql.rhea-db.org/sparql/",
    "federates_with": [
      "https://sparql.uniprot.org/sparql"
    ],
    "endpoint_set": "Rhea",
    "file_path": "Rhea/19_draft_human_metabolome.ttl",
    "predicted_query": "# https://sparql.uniprot.org/sparql\n# The query below is a template. As the user question is too broad, it is not possible to generate a query that provides a direct answer.\n# The query aims to provide a starting point for exploring human metabolome data in UniProt, but the user needs to refine it with specific properties or characteristics of the metabolome they are interested in.\nPREFIX up: <http://purl.uniprot.org/core/>\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\n\nSELECT DISTINCT ?metabolome ?metabolomeName\nWHERE {\n  # Focus on UniProt as it contains protein and organism information\n  SERVICE <https://sparql.uniprot.org/sparql> {\n    # Find proteins associated with Homo sapiens (Human)\n    ?protein a up:Protein .\n    ?protein up:organism <http://purl.uniprot.org/taxonomy/9606> . # Homo sapiens\n    \n    # Look for any associated metabolomic data or pathways.  This is a simplification.\n    # The exact predicates to link proteins and metabolome data would need to be discovered.\n    ?protein ?relatedTo ?metabolome .\n    \n    # Assuming metabolome is a resource with a name (replace with actual property if different)\n    ?metabolome rdfs:label ?metabolomeName .\n    \n    # Filter to ensure the related entity is likely a metabolome-related term. This is a heuristic.\n    FILTER (contains(lcase(?metabolomeName), \"metabolome\"))\n  }\n}\n# The query requires further refinement:\n# 1. Actual properties linking proteins to metabolome data in UniProt need to be identified.\n# 2. Additional filters can be added based on specific aspects of the metabolome of interest.",
    "predicted_endpoint": "https://sparql.uniprot.org/sparql",
    "predicted_endpoint_equal_to_target_endpoint": false,
    "predicted_endpoint_in_federates_with": true,
    "predicted_endpoint_or_federated_endpoint": true,
    "run_id_langsmith": "757f0446-97af-4212-a283-9538533b98e0",
    "evaluation_timestamp": "2025-04-23T11:55:24.216856",
    "question_understanding_tokens": 240,
    "question_understanding_completion_tokens": 20,
    "question_understanding_total_tokens": 260,
    "sparql_construction_prompt_tokens": 1446,
    "sparql_construction_completion_tokens": 426,
    "sparql_construction_total_tokens": 1872,
    "is_valid_sparql": true,
    "sparql_syntax_error": "syntactically correct",
    "ground_truth_query_result_is_empty": false,
    "result_eval_f1_score": 0.0,
    "result_eval_precision": 0.0,
    "result_eval_recall": 0.0,
    "error_occured_at_endpoint": true,
    "predicted_query_result_is_empty": true,
    "error_occured_at_endpoint_message": "QueryBadFormed: A bad request has been sent to the endpoint: probably the SPARQL query is badly formed."
  },
  {
    "resource": "https://sparql.rhea-db.org/.well-known/sparql-examples/20_search_chemical_names_in_japanese",
    "natural_language_question": "Search for Chemical names starting in Japanese, translated to english using allie",
    "ground_truth_query": "PREFIX oboInOwl: <http://www.geneontology.org/formats/oboInOwl#>\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\n\nSELECT\n*\nWHERE {\nSERVICE <https://data.allie.dbcls.jp/sparql>{\n        ?x rdfs:label \"1,2,4-トリクロロベンゼン\"@ja ;\n            rdfs:label ?englishLabel .\n        FILTER(lang(?englishLabel) = \"en\")\n    }\n  BIND(STR(?englishLabel) AS ?englishLabelStr)\n  ?chebi rdfs:label|oboInOwl:hasSynonym ?englishLabelStr .\n}",
    "target_endpoint": "https://sparql.rhea-db.org/sparql/",
    "federates_with": [
      "https://data.allie.dbcls.jp/sparql"
    ],
    "endpoint_set": "Rhea",
    "file_path": "Rhea/20_search_chemical_names_in_japanese.ttl",
    "predicted_query": "# https://sparql.uniprot.org/sparql\n# Federated SPARQL query to search for chemical names starting with \"Japanese\" and translate them to English using Allie.\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX chebi: <http://purl.obolibrary.org/obo/CHEBI_>\n\nSELECT DISTINCT ?chemicalName ?englishTranslation\nWHERE {\n  # Query ChEBI for chemical entities with names starting with \"Japanese\"\n  SERVICE <https://sparql.rhea-db.org/sparql> {\n    ?chemical a chebi:CHEBI_24431 . # CHEBI_24431 represents chemical entity\n    ?chemical rdfs:label ?chemicalName .\n    FILTER STRSTARTS(LCASE(?chemicalName), \"japanese\")\n  }\n  \n  # Use Allie to translate the chemical name to English (example translation, might not be applicable)\n  # The following line is a placeholder as there is no direct SPARQL service\n  # for translation.  A separate API call to Allie would be needed to achieve\n  # the translation.  This federated query focuses on retrieving the relevant\n  # chemical names, and the translation step would need to be handled\n  # programmatically outside of SPARQL.\n  BIND (IF(LANG(?chemicalName) = 'en', ?chemicalName, \"Translation Needed\") AS ?englishTranslation) #Dummy translation\n}",
    "predicted_endpoint": "https://sparql.uniprot.org/sparql",
    "predicted_endpoint_equal_to_target_endpoint": false,
    "predicted_endpoint_in_federates_with": false,
    "predicted_endpoint_or_federated_endpoint": false,
    "run_id_langsmith": "22e2c8db-94cc-4aad-8167-c4b7d0fb0715",
    "evaluation_timestamp": "2025-04-23T11:55:52.594075",
    "question_understanding_tokens": 241,
    "question_understanding_completion_tokens": 23,
    "question_understanding_total_tokens": 264,
    "sparql_construction_prompt_tokens": 1327,
    "sparql_construction_completion_tokens": 0,
    "sparql_construction_total_tokens": 1327,
    "is_valid_sparql": true,
    "sparql_syntax_error": "syntactically correct",
    "ground_truth_query_result_is_empty": false,
    "result_eval_f1_score": 0.0,
    "result_eval_precision": 0.0,
    "result_eval_recall": 0.0,
    "error_occured_at_endpoint": false,
    "predicted_query_result_is_empty": true,
    "error_occured_at_endpoint_message": "no error, but empty result"
  },
  {
    "resource": "https://sparql.rhea-db.org/.well-known/sparql-examples/117_Retrieve_parent_reactions_and_their_catalyzing_enzymes_for_a_metabolite_that_is_not_directly_involved_in_a_reaction",
    "natural_language_question": "Retrieve parent reactions (and their catalyzing enzymes) for a metabolite that is not directly involved in a reaction (ex: CHEBI:83137).",
    "ground_truth_query": "PREFIX CHEBI: <http://purl.obolibrary.org/obo/CHEBI_>\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX rh:<http://rdf.rhea-db.org/>\nPREFIX ec:<http://purl.uniprot.org/enzyme/>\nPREFIX up:<http://purl.uniprot.org/core/>\nPREFIX taxon:<http://purl.uniprot.org/taxonomy/>\nPREFIX keywords:<http://purl.uniprot.org/keywords/>\n\nSELECT\n  ?chebi\n  ?ecNumber\n  (count(?protein) as ?proteinCount)\n  ?reaction\n  ?equation\nWHERE {\n  ?reaction rdfs:subClassOf rh:Reaction .\n  ?reaction rh:status rh:Approved .\n  ?reaction rh:equation ?equation .\n  ?reaction rh:ec ?ecNumber .\n  ?reaction rh:side ?reactionSide .\n  ?reactionSide rh:contains ?participant .\n  ?participant rh:compound ?compound .\n  ?compound rh:chebi ?chebi .\n  CHEBI:83137 rdfs:subClassOf+ ?chebi.\n\n  SERVICE <https://sparql.uniprot.org/sparql> {\n  ?protein a up:Protein .\n  ?protein up:reviewed true .\n    {?protein up:enzyme ?ecNumber}\n  UNION\n    {?protein up:domain/up:enzyme ?ecNumber}\n  UNION\n    {?protein up:component/up:enzyme ?ecNumber} .\n  }\n} \nGROUP BY ?chebi ?ecNumber ?reaction ?equation",
    "target_endpoint": "https://sparql.rhea-db.org/sparql",
    "federates_with": [
      "https://sparql.uniprot.org/sparql"
    ],
    "endpoint_set": "Rhea",
    "file_path": "Rhea/117_Retrieve_parent_reactions_and_their_catalyzing_enzymes_for_a_metabolite_that_is_not_directly_involved_in_a_reaction.ttl",
    "predicted_query": "# https://sparql.rhea-db.org/sparql\n# Federated query to find parent reactions and catalyzing enzymes for a metabolite (CHEBI:83137) that is not directly involved in a reaction.\nPREFIX rhea: <http://rdf.rhea-db.org/>\nPREFIX chebi: <http://purl.obolibrary.org/obo/CHEBI_>\n\nSELECT DISTINCT ?reaction ?enzyme\nWHERE {\n  # Find reactions that have CHEBI:83137 as a reactant or product\n  {\n    SELECT DISTINCT ?reaction WHERE {\n      ?reaction rhea: Rhea-has-participant chebi:83137 .\n    }\n  }\n\n  # Optional: Find enzymes catalyzing related reactions (using UniProt)\n  OPTIONAL {\n    SERVICE <https://sparql.uniprot.org/sparql> {\n      ?enzyme rdfs:label ?enzymeName . # added name to see the enzyme\n      ?enzyme <http://purl.uniprot.org/core/catalyticActivity> ?reaction .\n      #?reaction rdfs:label ?reactionName . #Reaction name to check if enzyme is related, can be added\n\n    }\n  }\n}",
    "predicted_endpoint": "https://sparql.rhea-db.org/sparql",
    "predicted_endpoint_equal_to_target_endpoint": true,
    "predicted_endpoint_in_federates_with": false,
    "predicted_endpoint_or_federated_endpoint": true,
    "run_id_langsmith": "853bfe85-b2da-4c7e-98f0-8494df497d69",
    "evaluation_timestamp": "2025-04-23T11:56:04.831473",
    "question_understanding_tokens": 265,
    "question_understanding_completion_tokens": 42,
    "question_understanding_total_tokens": 307,
    "sparql_construction_prompt_tokens": 2481,
    "sparql_construction_completion_tokens": 274,
    "sparql_construction_total_tokens": 2755,
    "is_valid_sparql": false,
    "sparql_syntax_error": "Lexical error at line 11, column 43.  Encountered: '32' (32), after prefix \"Rhea-has-participant\"",
    "ground_truth_query_result_is_empty": null,
    "result_eval_f1_score": 0.0,
    "result_eval_precision": 0.0,
    "result_eval_recall": 0.0,
    "error_occured_at_endpoint": false,
    "predicted_query_result_is_empty": true,
    "error_occured_at_endpoint_message": "syntactically not correct"
  },
  {
    "resource": "https://sparql.rhea-db.org/.well-known/sparql-examples/18",
    "natural_language_question": "Use <a href=\"https://idsm.elixir-czech.cz/sparql\">IDSM Sachem</a> to find ChEBIs with a a <a href=\"https://www.ebi.ac.uk/chebi/searchId.do?chebiId=CHEBI:35516\">Cholestane</a> skeleton (in SMILES). Then match returned ChEBIs to Rhea undirected reactions.",
    "ground_truth_query": "PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX rh: <http://rdf.rhea-db.org/>\nPREFIX sachem: <http://bioinfo.uochb.cas.cz/rdf/v1.0/sachem#>\n\n\nSELECT \n  ?rhea \n  ?chebi\nWHERE {\n  SERVICE <https://idsm.elixir-czech.cz/sparql/endpoint/chebi> {\n    ?chebi sachem:substructureSearch [\n        sachem:query \"[C@]12(CCC3CCCC[C@]3(C)[C@@]1([H])CC[C@]1(C)[C@@]([H])([C@@](C)([H])CCCC(C)C)CC[C@@]21[H])[H]\" ].\n  }\n  ?rhea rh:side/rh:contains/rh:compound/rdfs:subClassOf ?chebi .\n}",
    "target_endpoint": "https://sparql.rhea-db.org/sparql",
    "federates_with": [
      "https://idsm.elixir-czech.cz/sparql/endpoint/chebi"
    ],
    "endpoint_set": "Rhea",
    "file_path": "Rhea/18.ttl",
    "predicted_query": "# https://sparql.rhea-db.org/sparql\n# Find ChEBIs with a Cholestane skeleton and then match returned ChEBIs to Rhea undirected reactions.\nPREFIX rhea: <http://rdf.rhea-db.org/>\nPREFIX chebi: <http://purl.obolibrary.org/obo/CHEBI_>\n\nSELECT DISTINCT ?reaction\nWHERE {\n  # Subquery to find ChEBIs with a Cholestane skeleton using the IDSM Sachem service.\n  SERVICE <https://idsm.elixir-czech.cz/sparql> {\n    SELECT DISTINCT ?chebiID WHERE {\n      ?compound a <http://bioinfo.uochb.cas.cz/rdf/sachem#Compound> .\n      ?compound <http://bioinfo.uochb.cas.cz/rdf/sachem#hasSmiles> ?smiles .\n      FILTER (CONTAINS(?smiles, \"C[C@H]1\")) # Basic SMILES pattern for cholestane.  More robust SMILES matching is possible but omitted for simplicity.\n      BIND(STRAFTER(str(?compound), \"http://bioinfo.uochb.cas.cz/compound/\") AS ?chebiID) # extract chebi ID from URI\n      FILTER (STRSTARTS(?chebiID, \"CHEBI:\")) # Ensure the extracted ID starts with \"CHEBI:\"\n    }\n  }\n\n  # Match the found ChEBI IDs to Rhea undirected reactions.\n  VALUES ?chebiID_binding {\n    (REPLACE(?chebiID, \"CHEBI:\", \"CHEBI_\")) # Convert CHEBI:ID to CHEBI_ID for Rhea\n  }\n  \n  ?reaction rhea:equation ?equation .\n  {\n     ?equation rhea: Left ?leftParticipant .\n     ?leftParticipant rhea:compound ?chebiID_binding .\n  }\n  UNION\n  {\n     ?equation rhea: Right ?rightParticipant .\n     ?rightParticipant rhea:compound ?chebiID_binding .\n  }\n}",
    "predicted_endpoint": "https://sparql.rhea-db.org/sparql",
    "predicted_endpoint_equal_to_target_endpoint": true,
    "predicted_endpoint_in_federates_with": false,
    "predicted_endpoint_or_federated_endpoint": true,
    "run_id_langsmith": "605f9add-e57b-4775-bc46-4f9f32827567",
    "evaluation_timestamp": "2025-04-23T11:56:18.650601",
    "question_understanding_tokens": 328,
    "question_understanding_completion_tokens": 52,
    "question_understanding_total_tokens": 380,
    "sparql_construction_prompt_tokens": 2564,
    "sparql_construction_completion_tokens": 466,
    "sparql_construction_total_tokens": 3030,
    "is_valid_sparql": false,
    "sparql_syntax_error": "Encountered \" \"(\" \"( \"\" at line 21, column 5.\nWas expecting one of:\n     ...\n     ...\n     ...\n    \"undef\" ...\n    \"true\" ...\n    \"false\" ...\n     ...\n     ...\n     ...\n     ...\n     ...\n     ...\n     ...\n     ...\n     ...\n     ...\n     ...\n     ...\n     ...\n    \"}\" ...\n    \"<<\" ...",
    "ground_truth_query_result_is_empty": null,
    "result_eval_f1_score": 0.0,
    "result_eval_precision": 0.0,
    "result_eval_recall": 0.0,
    "error_occured_at_endpoint": false,
    "predicted_query_result_is_empty": true,
    "error_occured_at_endpoint_message": "syntactically not correct"
  },
  {
    "resource": "https://sparql.rhea-db.org/.well-known/sparql-examples/115_Retrieve_the_set_of_metabolites_involved_in_reactions_catalyzed_by_human_genes_HUMAN_reference_proteome",
    "natural_language_question": "Retrieve the set of metabolites involved in reactions catalyzed by human genes (HUMAN reference proteome)",
    "ground_truth_query": "\nPREFIX rh:<http://rdf.rhea-db.org/>\nPREFIX taxon:<http://purl.uniprot.org/taxonomy/>\nPREFIX ec:<http://purl.uniprot.org/enzyme/>\nPREFIX rdfs:<http://www.w3.org/2000/01/rdf-schema#>\nPREFIX up:<http://purl.uniprot.org/core/>\nPREFIX keywords:<http://purl.uniprot.org/keywords/>\n\nSELECT\n  ?chebi\n  ?reaction\n  ?ecNumber\n  ?protein\n  ?ensemblTranscript\n  ?ensemblGene\nWHERE {\n  SERVICE <https://sparql.uniprot.org/sparql> {\n    ?protein a up:Protein .\n    ?protein up:reviewed true .\n    ?protein up:organism taxon:9606 .\n    ?protein up:classifiedWith keywords:1185 .\n\n    ?protein rdfs:seeAlso ?ensemblTranscript .\n    ?ensemblTranscript a up:Transcript_Resource .\n    ?ensemblTranscript up:database <http://purl.uniprot.org/database/Ensembl> .\n    ?ensemblTranscript up:transcribedFrom ?ensemblGene .\n\n      {?protein up:enzyme ?ecNumber .}\n    UNION\n      {?protein up:domain/up:enzyme ?ecNumber .}\n    UNION\n      {?protein up:component/up:enzyme ?ecNumber .}\n  }\n\n  ?reaction rdfs:subClassOf rh:Reaction .\n  ?reaction rh:status rh:Approved .\n  ?reaction rh:ec ?ecNumber .\n  ?reaction rh:side ?reactionSide .\n  ?reactionSide rh:contains ?participant .\n  ?participant rh:compound ?compound .\n  ?compound rh:chebi ?chebi . # only considering small molecules participants\n}",
    "target_endpoint": "https://sparql.rhea-db.org/sparql",
    "federates_with": [
      "https://sparql.uniprot.org/sparql"
    ],
    "endpoint_set": "Rhea",
    "file_path": "Rhea/115_Retrieve_the_set_of_metabolites_involved_in_reactions_catalyzed_by_human_genes_HUMAN_reference_proteome.ttl",
    "predicted_query": "# https://sparql.rhea-db.org/sparql\n# Federated query to retrieve metabolites involved in reactions catalyzed by human genes.\nPREFIX rhea: <http://rdf.rhea-db.org/>\nPREFIX chebi: <http://purl.obolibrary.org/obo/CHEBI_>\nPREFIX uniprot: <http://purl.uniprot.org/core/>\n\nSELECT DISTINCT ?metabolite\nWHERE {\n  # Subquery to get Rhea reactions associated with human proteins from UniProt\n  SERVICE <https://sparql.uniprot.org/sparql> {\n    SELECT DISTINCT ?reaction\n    WHERE {\n      ?protein a uniprot:Protein .\n      ?protein uniprot:organism <http://purl.uniprot.org/taxonomy/9606> .  # Filter for human proteins\n      ?protein rhea:reaction ?reaction .\n    }\n  }\n\n  # From Rhea get the metabolites involved in each reaction\n  SERVICE <https://sparql.rhea-db.org/sparql> {\n    ?reaction rhea:equation ?equation .\n    ?equation rhea:contains ?chemicalEntity .\n    ?chemicalEntity rhea:chebi ?metabolite .\n  }\n}",
    "predicted_endpoint": "https://sparql.rhea-db.org/sparql",
    "predicted_endpoint_equal_to_target_endpoint": true,
    "predicted_endpoint_in_federates_with": false,
    "predicted_endpoint_or_federated_endpoint": true,
    "run_id_langsmith": "53280fc5-49d2-4c52-8840-7a9e5ce15423",
    "evaluation_timestamp": "2025-04-23T11:56:27.807291",
    "question_understanding_tokens": 248,
    "question_understanding_completion_tokens": 28,
    "question_understanding_total_tokens": 276,
    "sparql_construction_prompt_tokens": 2396,
    "sparql_construction_completion_tokens": 277,
    "sparql_construction_total_tokens": 2673,
    "is_valid_sparql": true,
    "sparql_syntax_error": "syntactically correct",
    "ground_truth_query_result_is_empty": false,
    "result_eval_f1_score": 0.0,
    "result_eval_precision": 0.0,
    "result_eval_recall": 0.0,
    "error_occured_at_endpoint": false,
    "predicted_query_result_is_empty": true,
    "error_occured_at_endpoint_message": "no error, but empty result"
  }
]