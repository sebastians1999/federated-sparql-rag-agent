[
  {
    "resource": "https://sparql.swisslipids.org/.well-known/sparql-examples/16",
    "natural_language_question": "For a given lipid (SWISSLIPID:000399814, Ceramide), return a list of all enzymes in UniProtKB/Swiss-Prot annotated to catalyze reactions involving that lipid.\nThis query does not consider the hierarchy: it looks for reactions and enzymes only for the specified lipid.",
    "ground_truth_query": "PREFIX SWISSLIPID: <https://swisslipids.org/rdf/SLM_>\nPREFIX owl: <http://www.w3.org/2002/07/owl#>\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX rh: <http://rdf.rhea-db.org/>\nPREFIX up: <http://purl.uniprot.org/core/>\n\n# Example 16\nSELECT ?startId ?startName ?uniprot\nWHERE\n{\n  # SwissLipids query (list of) identifier(s)\n  VALUES ?startId { SWISSLIPID:000399814 }\n  # name\n  ?startId rdfs:label ?startName .\n  # ChEBI x-ref\n  ?startId owl:equivalentClass ?chebi .\n  # federated query to Rhea\n  SERVICE <https://sparql.rhea-db.org/sparql> {\n  \t?rhea rh:side/rh:contains/rh:compound/rh:chebi ?chebi .\n  }    \n  # federated query to UniProt\n  SERVICE <https://sparql.uniprot.org/sparql> {\n    ?uniprot up:reviewed true .\n    ?uniprot up:annotation/up:catalyticActivity/up:catalyzedReaction ?rhea .\n  }\n} \nORDER BY ?startId",
    "target_endpoint": "https://sparql.swisslipids.org/sparql/",
    "federates_with": [
      "https://sparql.uniprot.org/sparql",
      "https://sparql.rhea-db.org/sparql"
    ],
    "endpoint_set": "SwissLipids",
    "file_path": "SwissLipids/16.ttl",
    "predicted_query": "# https://sparql.swisslipids.org/sparql/\n# Find enzymes in UniProtKB/Swiss-Prot annotated to catalyze reactions involving a specific lipid (SWISSLIPID:000399814, Ceramide).\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>\nPREFIX slterms: <http://www.swisslipids.org/rdf/terms/>\n\nSELECT DISTINCT ?enzyme ?reaction\nWHERE {\n  # Find reactions associated with the given lipid in SwissLipids\n  VALUES ?lipid { <http://www.swisslipids.org/rdf/lipid/SWISSLIPID:000399814> } #SWISSLIPID:000399814 and Ceramide\n  ?reaction slterms:refersToLipid ?lipid .\n\n  #Federate with UniProt to find enzymes catalyzing those reactions\n  SERVICE <https://sparql.uniprot.org/sparql> {\n    ?enzyme rdfs:seeAlso ?reaction . # Assuming rdfs:seeAlso links to Rhea reactions.  Other predicates might be more appropriate depending on the exact UniProt schema.\n    ?enzyme rdf:type <http://purl.uniprot.org/core/Protein> . #Ensuring that the result of the query is a protein.\n  }\n}",
    "predicted_endpoint": "https://sparql.swisslipids.org/sparql/",
    "predicted_endpoint_equal_to_target_endpoint": true,
    "predicted_endpoint_in_federates_with": false,
    "predicted_endpoint_or_federated_endpoint": true,
    "run_id_langsmith": "20fa3471-2269-4ec2-9030-da2748767812",
    "evaluation_timestamp": "2025-04-22T19:28:23.811084",
    "question_understanding_tokens": 299,
    "question_understanding_completion_tokens": 72,
    "question_understanding_total_tokens": 371,
    "sparql_construction_prompt_tokens": 3296,
    "sparql_construction_completion_tokens": 604,
    "sparql_construction_total_tokens": 3900,
    "is_valid_sparql": true,
    "sparql_syntax_error": "syntactically correct",
    "ground_truth_query_result_is_empty": false,
    "result_eval_f1_score": 0.0,
    "result_eval_precision": 0.0,
    "result_eval_recall": 0.0,
    "error_occured_at_endpoint": false,
    "predicted_query_result_is_empty": true,
    "error_occured_at_endpoint_message": "no error, but empty result"
  },
  {
    "resource": "https://sparql.swisslipids.org/.well-known/sparql-examples/6",
    "natural_language_question": "For a given lipid (SWISSLIPID:000399814, Ceramide), return a list of all corresponding reactions (Rhea IDs and equation), as well as their enzymes as annotated in UniProtKB/Swiss-Prot) enzymes themselves (ID and protein name).\nThis query does not consider the hierarchy: it looks for reactions and enzymes only for the specified lipid.",
    "ground_truth_query": "PREFIX SWISSLIPID: <https://swisslipids.org/rdf/SLM_>\nPREFIX owl: <http://www.w3.org/2002/07/owl#>\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX rh: <http://rdf.rhea-db.org/>\nPREFIX up: <http://purl.uniprot.org/core/>\n\n# Example 6\nSELECT ?startId ?startName ?chebi ?rhea ?rheaEquation ?uniprot ?uniprotName\nWHERE\n{\n  # SwissLipids query (list of) identifier(s)\n  VALUES ?startId { SWISSLIPID:000399814 }\n  # name\n  ?startId rdfs:label ?startName .\n  # ChEBI x-ref\n  ?startId owl:equivalentClass ?chebi .\n  # federated query to Rhea\n  SERVICE <https://sparql.rhea-db.org/sparql> {\n  \t?rhea rh:equation ?rheaEquation .\n  \t?rhea rh:side/rh:contains/rh:compound/rh:chebi ?chebi .\n  }    \n  # federated query to UniProt\n  SERVICE <https://sparql.uniprot.org/sparql> {\n    ?uniprot up:reviewed true .\n    ?uniprot up:recommendedName/up:fullName ?uniprotName .\n    ?uniprot up:annotation/up:catalyticActivity/up:catalyzedReaction ?rhea .\n  }\n} \nORDER BY ?startId",
    "target_endpoint": "https://sparql.swisslipids.org/sparql/",
    "federates_with": [
      "https://sparql.uniprot.org/sparql",
      "https://sparql.rhea-db.org/sparql"
    ],
    "endpoint_set": "SwissLipids",
    "file_path": "SwissLipids/6.ttl",
    "predicted_query": "# https://sparql.swisslipids.org/sparql/\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>\nPREFIX swisslipids: <http://www.swisslipids.org/rdf#>\n\nSELECT DISTINCT ?lipid ?rheaID ?equation ?uniprotID ?proteinName\nWHERE {\n  # Find lipids that match the identifier and name.\n  VALUES ?lipidName {\"Ceramide\"}\n  VALUES ?lipidID { \"SWISSLIPID:000399814\" }\n\n  ?lipid a swisslipids:Lipid ;\n         rdfs:label ?lipidName .\n  FILTER(REGEX(STR(?lipid), ?lipidID, \"i\"))\n\n  # Find reactions associated with the lipid in SwissLipids\n  ?reaction swisslipids:refersToLipid ?lipid .\n\n  # Query Rhea for reaction details (ID and equation)\n  SERVICE <https://sparql.rhea-db.org/sparql> {\n    ?rheaReaction rdfs:sameAs ?reaction ;\n                  rdfs:label ?equation .\n    BIND(STRAFTER(STR(?rheaReaction), \"http://rdf.rhea-db.org/\") AS ?rheaID)\n  }\n\n  # Query UniProt for enzyme details (ID and protein name)\n  SERVICE <https://sparql.uniprot.org/sparql> {\n    ?uniprotID <http://purl.uniprot.org/core/catalyticActivity> ?rheaReaction ;\n               rdfs:label ?proteinName .\n  }\n}",
    "predicted_endpoint": "https://sparql.swisslipids.org/sparql/",
    "predicted_endpoint_equal_to_target_endpoint": true,
    "predicted_endpoint_in_federates_with": false,
    "predicted_endpoint_or_federated_endpoint": true,
    "run_id_langsmith": "45cfdde5-1457-491c-a79c-5820652bfb76",
    "evaluation_timestamp": "2025-04-22T19:28:34.660556",
    "question_understanding_tokens": 309,
    "question_understanding_completion_tokens": 94,
    "question_understanding_total_tokens": 403,
    "sparql_construction_prompt_tokens": 3311,
    "sparql_construction_completion_tokens": 593,
    "sparql_construction_total_tokens": 3904,
    "is_valid_sparql": true,
    "sparql_syntax_error": "syntactically correct",
    "ground_truth_query_result_is_empty": false,
    "result_eval_f1_score": 0.0,
    "result_eval_precision": 0.0,
    "result_eval_recall": 0.0,
    "error_occured_at_endpoint": false,
    "predicted_query_result_is_empty": true,
    "error_occured_at_endpoint_message": "no error, but empty result"
  },
  {
    "resource": "https://sparql.swisslipids.org/.well-known/sparql-examples/5",
    "natural_language_question": "For a given lipid (SWISSLIPID:000399814, Ceramide), return a list of all corresponding reactions (Rhea IDs and equation).\nThis query does consider the hierarchy: it looks for reactions involving the specified lipid and/or its more specific forms.",
    "ground_truth_query": "PREFIX SWISSLIPID: <https://swisslipids.org/rdf/SLM_>\nPREFIX owl: <http://www.w3.org/2002/07/owl#>\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX rh: <http://rdf.rhea-db.org/>\n\n# Example 5\nSELECT ?startId ?startName ?id ?name ?chebi ?rhea ?rheaEquation \nWHERE\n{\n  # SwissLipids query (list of) identifier(s)\n  VALUES ?startId { SWISSLIPID:000399814 }\n  # name\n  ?startId rdfs:label ?startName .\n  # Retrieve children lipids \n  ?id rdfs:subClassOf* ?startId .\n  ?id rdfs:label ?name .\n  # ChEBI x-ref\n  ?id owl:equivalentClass ?chebi .\n  # federated query to Rhea\n  SERVICE <https://sparql.rhea-db.org/sparql> {\n  \t?rhea rh:equation ?rheaEquation .\n  \t?rhea rh:side/rh:contains/rh:compound/rh:chebi ?chebi .\n  }    \n} \nORDER BY  ?startId ?id",
    "target_endpoint": "https://sparql.swisslipids.org/sparql/",
    "federates_with": [
      "https://sparql.rhea-db.org/sparql"
    ],
    "endpoint_set": "SwissLipids",
    "file_path": "SwissLipids/5.ttl",
    "predicted_query": "# https://sparql.swisslipids.org/sparql/\n# Query SwissLipids for reactions involving the specified lipid or its subtypes, then federate with Rhea to get the reaction equations.\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX sl: <http://www.swisslipids.org/rdf#>\n\nSELECT DISTINCT ?rheaId ?equation\nWHERE {\n  {\n    # Find reactions directly associated with the given lipid\n    VALUES ?lipid { <http://www.swisslipids.org/rdf/SWISSLIPID:000399814> }\n    ?reaction sl:reaction_participant ?lipid .\n    ?reaction sl:rhea_id ?rheaId .\n  }\n  UNION\n  {\n    # Consider reactions associated with *any* Ceramide\n    VALUES ?ceramideName { \"Ceramide\" }\n    ?lipid sl:name ?ceramideName .\n    ?reaction sl:reaction_participant ?lipid .\n    ?reaction sl:rhea_id ?rheaId .\n  }\n  UNION\n  {\n   # Find reactions associated with subtypes of the given lipid\n   VALUES ?lipid { <http://www.swisslipids.org/rdf/SWISSLIPID:000399814> }\n   ?sublipid rdfs:subClassOf ?lipid .\n   ?reaction sl:reaction_participant ?sublipid .\n   ?reaction sl:rhea_id ?rheaId .\n  }\n  \n  SERVICE <https://sparql.rhea-db.org/sparql> {\n    # Query Rhea for the reaction equation\n    BIND (IRI(CONCAT(\"http://rdf.rhea-db.org/\", ?rheaId)) AS ?rheaReaction)\n    ?rheaReaction rdfs:comment ?equation . # Assuming rdfs:comment holds the equation\n  }\n}",
    "predicted_endpoint": "https://sparql.swisslipids.org/sparql/",
    "predicted_endpoint_equal_to_target_endpoint": true,
    "predicted_endpoint_in_federates_with": false,
    "predicted_endpoint_or_federated_endpoint": true,
    "run_id_langsmith": "0324cb52-ec2a-43b2-8cc8-b04c4a155634",
    "evaluation_timestamp": "2025-04-22T19:28:45.763079",
    "question_understanding_tokens": 291,
    "question_understanding_completion_tokens": 63,
    "question_understanding_total_tokens": 354,
    "sparql_construction_prompt_tokens": 2124,
    "sparql_construction_completion_tokens": 0,
    "sparql_construction_total_tokens": 2124,
    "is_valid_sparql": true,
    "sparql_syntax_error": "syntactically correct",
    "ground_truth_query_result_is_empty": false,
    "result_eval_f1_score": 0.0,
    "result_eval_precision": 0.0,
    "result_eval_recall": 0.0,
    "error_occured_at_endpoint": false,
    "predicted_query_result_is_empty": true,
    "error_occured_at_endpoint_message": "no error, but empty result"
  },
  {
    "resource": "https://sparql.swisslipids.org/.well-known/sparql-examples/34",
    "natural_language_question": "Lipids affected by human enzymes",
    "ground_truth_query": "PREFIX owl: <http://www.w3.org/2002/07/owl#>\nPREFIX rh: <http://rdf.rhea-db.org/>\nPREFIX taxon: <http://purl.uniprot.org/taxonomy/>\nPREFIX up: <http://purl.uniprot.org/core/>\n\nSELECT ?swisslipid  {\n  ?swisslipid owl:equivalentClass ?chebi .\n  SERVICE <https://sparql.rhea-db.org/sparql> {\n    ?rhea rh:side/rh:contains/rh:compound ?compound .\n\t?compound (rh:chebi|(rh:reactivePart/rh:chebi)|(rh:underlyingChebi/rh:chebi)) ?metabolite . \n  }\n  SERVICE <https://sparql.uniprot.org/sparql> {\n    ?catalyticActivityAnnotation up:catalyticActivity/up:catalyzedReaction ?rhea .\n    ?protein up:annotation ?catalyticActivityAnnotation ;\n             up:organism taxon:9606 .\n  }\n}\nLIMIT 1",
    "target_endpoint": "https://sparql.swisslipids.org/sparql/",
    "federates_with": [
      "https://sparql.uniprot.org/sparql",
      "https://sparql.rhea-db.org/sparql"
    ],
    "endpoint_set": "SwissLipids",
    "file_path": "SwissLipids/34.ttl",
    "predicted_query": "# https://sparql.uniprot.org/sparql\n# Find lipids affected by human enzymes\n\nSELECT DISTINCT ?lipidName ?enzymeName\nWHERE {\n  # Find human enzymes in UniProt\n  SERVICE <https://sparql.uniprot.org/sparql> {\n    ?enzyme a <http://purl.uniprot.org/core/Protein> .\n    ?enzyme <http://purl.uniprot.org/core/organism> <http://purl.uniprot.org/taxonomy/9606> . # Homo sapiens\n    ?enzyme <http://purl.uniprot.org/core/recommendedName> ?recName .\n        ?recName <http://purl.uniprot.org/core/ecNumber> ?ecNumber .\n    BIND(STR(?recName) AS ?enzymeName)\n  }\n\n  # Find reactions in Rhea DB that involve the enzyme\n  SERVICE <https://sparql.rhea-db.org/sparql/> {\n    ?reaction rdfs:label ?reactionName .\n    ?reaction rhea:equation ?equation .\n    ?reaction rhea:status rhea:approved .\n    ?reaction rhea:ec ?ecNumber .\n    ?reaction rhea:has_participant ?participant .\n\n    # Filter for reactions involving lipids (ChEBI ontology)\n    ?participant chebi:chebi_name ?lipidName .\n    FILTER (CONTAINS(LCASE(?lipidName), \"lipid\"))\n\n  }\n  #Optional get the swisslipids id\n  SERVICE <https://sparql.swisslipids.org/sparql/> {\n      ?lipid sl:name ?lipidName .\n      ?lipid a sl:Lipid .\n  }\n\n}\nLIMIT 100",
    "predicted_endpoint": "https://sparql.uniprot.org/sparql",
    "predicted_endpoint_equal_to_target_endpoint": false,
    "predicted_endpoint_in_federates_with": true,
    "predicted_endpoint_or_federated_endpoint": true,
    "run_id_langsmith": "8cc93a5b-d42a-41a7-91b4-13dd02c8557d",
    "evaluation_timestamp": "2025-04-22T19:28:56.011812",
    "question_understanding_tokens": 239,
    "question_understanding_completion_tokens": 20,
    "question_understanding_total_tokens": 259,
    "sparql_construction_prompt_tokens": 1671,
    "sparql_construction_completion_tokens": 0,
    "sparql_construction_total_tokens": 1671,
    "is_valid_sparql": false,
    "sparql_syntax_error": "Line 17, column 15: Unresolved prefixed name: rdfs:label",
    "ground_truth_query_result_is_empty": null,
    "result_eval_f1_score": 0.0,
    "result_eval_precision": 0.0,
    "result_eval_recall": 0.0,
    "error_occured_at_endpoint": true,
    "predicted_query_result_is_empty": true,
    "error_occured_at_endpoint_message": "Line 17, column 15: Unresolved prefixed name: rdfs:label"
  },
  {
    "resource": "https://sparql.uniprot.org/.well-known/sparql-examples/118_biosodafrontend_rat_brain_human_cancer",
    "natural_language_question": "What are the Homo sapiens genes associated with cancer and their orthologs expressed in the Rattus norvegicus brain?",
    "ground_truth_query": "PREFIX up:<http://purl.uniprot.org/core/>\nPREFIX taxon:<http://purl.uniprot.org/taxonomy/>\nPREFIX rdfs:<http://www.w3.org/2000/01/rdf-schema#>\nPREFIX orth:<http://purl.org/net/orth#>\nPREFIX dcterms:<http://purl.org/dc/terms/>\nPREFIX obo:<http://purl.obolibrary.org/obo/>\nPREFIX lscr:<http://purl.org/lscr#>\nPREFIX genex:<http://purl.org/genex#>\nPREFIX sio: <http://semanticscience.org/resource/>\nSELECT ?gene ?orthologous_protein2 WHERE {\n  {\n    SELECT ?protein1 WHERE {\n      ?protein1 a up:Protein;\n        up:organism/up:scientificName 'Homo sapiens' ;\n        up:annotation ?annotation .\n      ?annotation rdfs:comment ?annotation_text.\n      ?annotation a up:Disease_Annotation .\n      FILTER CONTAINS (?annotation_text, \"cancer\")\n    }\n  }\n  SERVICE <https://sparql.omabrowser.org/sparql/> {\n    SELECT ?orthologous_protein2 ?protein1 ?gene WHERE {\n      ?protein_OMA a orth:Protein .\n      ?orthologous_protein2 a orth:Protein .\n      ?cluster a orth:OrthologsCluster .\n      ?cluster orth:hasHomologousMember ?node1 .\n      ?cluster orth:hasHomologousMember ?node2 .\n      ?node2 orth:hasHomologousMember* ?protein_OMA .\n      ?node1 orth:hasHomologousMember* ?orthologous_protein2 \n      .?orthologous_protein2 orth:organism/obo:RO_0002162/up:scientificName 'Rattus norvegicus' .\n      ?orthologous_protein2 sio:SIO_010079 ?gene .\n      ?protein_OMA lscr:xrefUniprot ?protein1 .\n      FILTER(?node1 != ?node2)\n    }\n  }\n  SERVICE <https://www.bgee.org/sparql/> {\n    ?gene genex:isExpressedIn ?anatEntity .\n    ?anatEntity rdfs:label 'brain' .\n    ?gene orth:organism ?org . \n    ?org obo:RO_0002162 taxon:10116 .\n  }\n}",
    "target_endpoint": "https://sparql.uniprot.org/sparql",
    "federates_with": [
      "https://sparql.omabrowser.org/sparql/",
      "https://www.bgee.org/sparql/"
    ],
    "endpoint_set": "Uniprot",
    "file_path": "UniProt/118_biosodafrontend_rat_brain_human_cancer.ttl",
    "predicted_query": "# https://sparql.uniprot.org/sparql\n# Find Homo sapiens genes associated with cancer and their Rattus norvegicus orthologs.\nPREFIX up: <http://purl.uniprot.org/core/>\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX taxon: <http://purl.uniprot.org/taxonomy/>\nPREFIX dcterms: <http://purl.org/dc/terms/>\n\nSELECT DISTINCT ?humanGene ?humanGeneName ?ratOrtholog ?ratOrthologName\nWHERE {\n  # Find Homo sapiens genes associated with cancer\n  SERVICE <https://sparql.uniprot.org/sparql> {\n    ?humanGene a up:Protein ;\n               up:organism taxon:9606 ; # Homo sapiens\n               rdfs:label ?humanGeneName .\n    ?humanGene dcterms:references ?disease .\n    ?disease rdfs:label ?diseaseName .\n    FILTER (CONTAINS(LCASE(?diseaseName), \"cancer\"))\n  }\n\n  # Find orthologs in Rattus norvegicus\n  SERVICE <https://sparql.uniprot.org/sparql> {\n    ?ratOrtholog a up:Protein ;\n                 up:organism taxon:10116 ; # Rattus norvegicus\n                 rdfs:label ?ratOrthologName ;\n                 up:sequence ?ratSequence . # Ensure it's a real protein to avoid other types.\n\n    ?ratOrtholog up:gene ?ratGene .\n    ?humanGene up:gene ?humanGeneSymbol .\n    ?ratGene up:xref ?orthologRelationship .\n\n    ?orthologRelationship a up:Protein ;\n                           up:organism taxon:9606 . # Link to human protein to specify orthology.\n\n    FILTER EXISTS {\n      ?orthologRelationship up:mnemonic ?humanGeneSymbol . #Check that the relationship exists\n\n      FILTER(STRSTARTS(str(?orthologRelationship ), str(?humanGene)))\n    }\n  }\n}",
    "predicted_endpoint": "https://sparql.uniprot.org/sparql",
    "predicted_endpoint_equal_to_target_endpoint": true,
    "predicted_endpoint_in_federates_with": false,
    "predicted_endpoint_or_federated_endpoint": true,
    "run_id_langsmith": "f1b3933c-b633-4feb-8c61-a41b8457214c",
    "evaluation_timestamp": "2025-04-22T19:29:16.520929",
    "question_understanding_tokens": 255,
    "question_understanding_completion_tokens": 51,
    "question_understanding_total_tokens": 306,
    "sparql_construction_prompt_tokens": 2690,
    "sparql_construction_completion_tokens": 0,
    "sparql_construction_total_tokens": 2690,
    "is_valid_sparql": true,
    "sparql_syntax_error": "syntactically correct",
    "ground_truth_query_result_is_empty": false,
    "result_eval_f1_score": 0.0,
    "result_eval_precision": 0.0,
    "result_eval_recall": 0.0,
    "error_occured_at_endpoint": true,
    "predicted_query_result_is_empty": true,
    "error_occured_at_endpoint_message": "QueryBadFormed: A bad request has been sent to the endpoint: probably the SPARQL query is badly formed."
  },
  {
    "resource": "https://sparql.uniprot.org/.well-known/sparql-examples/51",
    "natural_language_question": "Find all proteins linked to arachidonate (CHEBI:32395)",
    "ground_truth_query": "PREFIX CHEBI: <http://purl.obolibrary.org/obo/CHEBI_>\nPREFIX rh: <http://rdf.rhea-db.org/>\nPREFIX skos: <http://www.w3.org/2004/02/skos/core#>\nPREFIX up: <http://purl.uniprot.org/core/>\n\n\nSELECT \n    DISTINCT\n        ?uniprot\n        ?uniprotID\n        ?recname\n        ?gene\n        ?chebi\n        ?uniprotName\nWHERE {\n  SERVICE <https://sparql.rhea-db.org/sparql> {\n     VALUES (?chebi) { (CHEBI:32395) }\n     ?rhea rh:side/rh:contains/rh:compound ?compound .\n     ?compound rh:chebi ?chebi .\n     ?chebi up:name ?uniprotName .\n  }\n  ?uniprot up:annotation/up:catalyticActivity/up:catalyzedReaction ?rhea .\n  ?uniprot up:mnemonic ?uniprotID .\n  ?uniprot up:recommendedName/up:fullName ?recname .\n  OPTIONAL {?uniprot up:encodedBy/skos:prefLabel ?gene .}\n}",
    "target_endpoint": "https://sparql.uniprot.org/sparql/",
    "federates_with": [
      "https://sparql.rhea-db.org/sparql"
    ],
    "endpoint_set": "Uniprot",
    "file_path": "UniProt/51_all_proteins_linked_to_arachidonate.ttl",
    "predicted_query": "# https://sparql.uniprot.org/sparql\n# Find all proteins linked to arachidonate (CHEBI:32395)\n\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX up: <http://purl.uniprot.org/core/>\nPREFIX chebi: <http://purl.obolibrary.org/obo/>\n\nSELECT DISTINCT ?protein ?proteinName\nWHERE {\n  # Query UniProt for proteins\n  SERVICE <https://sparql.uniprot.org/sparql> {\n    ?protein a up:Protein .\n    ?protein rdfs:label ?proteinName .\n    # Optional: Find any cross-references to CHEBI, though direct links are not guaranteed\n    OPTIONAL {\n      ?protein up:database ?dbXref .\n      ?dbXref rdfs:seeAlso chebi:CHEBI_32395 . #CHEBI:32395 is the identifier for arachidonate.\n    }\n  }\n  \n  # Query Rhea for reactions involving arachidonate (CHEBI:32395)\n  SERVICE <https://sparql.rhea-db.org/sparql> {\n    ?reaction rdfs:label ?reactionName .\n    ?reaction rdfs:comment ?comment .\n    VALUES ?arachidonate { <http://purl.obolibrary.org/obo/CHEBI_32395> } # Explicitly define arachidonate\n    \n    # Find reactions that have arachidonate as an input or output\n    { ?reaction rhea:input ?arachidonate . }\n    UNION\n    { ?reaction rhea:output ?arachidonate . }\n    \n    #Attempt to link reactions back to proteins (this part might be weak without a direct link in Rhea)\n    OPTIONAL {\n      ?reaction rhea:enzyme ?enzyme . #Enzymes that catalyze the reaction\n      ?enzyme rdfs:seeAlso ?protein . #See if the enzyme is the same as the protein from UniProt\n    }\n  }\n}",
    "predicted_endpoint": "https://sparql.uniprot.org/sparql",
    "predicted_endpoint_equal_to_target_endpoint": true,
    "predicted_endpoint_in_federates_with": false,
    "predicted_endpoint_or_federated_endpoint": true,
    "run_id_langsmith": "6bb63b19-3109-44f9-903f-0798e2b80e5d",
    "evaluation_timestamp": "2025-04-22T19:29:29.182020",
    "question_understanding_tokens": 252,
    "question_understanding_completion_tokens": 31,
    "question_understanding_total_tokens": 283,
    "sparql_construction_prompt_tokens": 2195,
    "sparql_construction_completion_tokens": 679,
    "sparql_construction_total_tokens": 2874,
    "is_valid_sparql": false,
    "sparql_syntax_error": "Line 28, column 17: Unresolved prefixed name: rhea:input",
    "ground_truth_query_result_is_empty": null,
    "result_eval_f1_score": 0.0,
    "result_eval_precision": 0.0,
    "result_eval_recall": 0.0,
    "error_occured_at_endpoint": true,
    "predicted_query_result_is_empty": true,
    "error_occured_at_endpoint_message": "Line 28, column 17: Unresolved prefixed name: rhea:input"
  },
  {
    "resource": "https://sparql.uniprot.org/.well-known/sparql-examples/40",
    "natural_language_question": "Retrieve human enzymes that metabolize sphingolipids and are annotated in ChEMBL",
    "ground_truth_query": "PREFIX CHEBI: <http://purl.obolibrary.org/obo/CHEBI_>\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX rh: <http://rdf.rhea-db.org/>\nPREFIX taxon: <http://purl.uniprot.org/taxonomy/>\nPREFIX up: <http://purl.uniprot.org/core/>\n\nSELECT DISTINCT ?protein ?chemblEntry\nWHERE {\n  SERVICE <https://sparql.rhea-db.org/sparql> {\n    ?rhea rdfs:subClassOf rh:Reaction ;\n      rh:side/rh:contains/rh:compound/rh:chebi/rdfs:subClassOf+ CHEBI:26739 .\n  }\n  ?ca up:catalyzedReaction ?rhea .\n  ?protein up:annotation/up:catalyticActivity ?ca ;\n    up:organism taxon:9606 ;\n    rdfs:seeAlso ?chemblEntry .\n  ?chemblEntry up:database <http://purl.uniprot.org/database/ChEMBL> .\n}\nLIMIT 10",
    "target_endpoint": "https://sparql.uniprot.org/sparql/",
    "federates_with": [
      "https://sparql.rhea-db.org/sparql"
    ],
    "endpoint_set": "Uniprot",
    "file_path": "UniProt/40_human_enzymes_that_metabolize_sphingolipids.ttl",
    "predicted_query": "# https://sparql.uniprot.org/sparql\n# Find human enzymes that metabolize sphingolipids and are annotated in ChEMBL\n\nPREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX up: <http://purl.uniprot.org/core/>\nPREFIX taxon: <http://purl.uniprot.org/taxonomy/>\n\nSELECT DISTINCT ?enzyme ?enzymeName ?geneName\nWHERE {\n  # Find human proteins\n  ?enzyme a up:Protein .\n  ?enzyme up:organism taxon:9606 . # Homo sapiens\n\n  # Filter for enzymes (EC number annotation)\n  ?enzyme up:annotation ?annotation .\n  ?annotation a up:EC_Annotation .\n\n  # Get enzyme name\n  ?enzyme rdfs:label ?enzymeName .\n\n  # Get gene name\n  ?enzyme up:encodedBy ?gene .\n  ?gene rdfs:label ?geneName .\n\n  # Filter for enzymes related to sphingolipids (text annotation)\n  FILTER (CONTAINS(LCASE(?enzymeName), \"sphingolipid\")) .\n\n  # Filter for enzymes that have external ChEMBL annotation\n  ?enzyme up:database ?chembl_db .\n  ?chembl_db up:DatabaseType up:ChEMBL .\n}",
    "predicted_endpoint": "https://sparql.uniprot.org/sparql",
    "predicted_endpoint_equal_to_target_endpoint": true,
    "predicted_endpoint_in_federates_with": false,
    "predicted_endpoint_or_federated_endpoint": true,
    "run_id_langsmith": "750e3fea-55c4-4bbd-9e17-cecde596ab8c",
    "evaluation_timestamp": "2025-04-22T19:29:40.003709",
    "question_understanding_tokens": 249,
    "question_understanding_completion_tokens": 33,
    "question_understanding_total_tokens": 282,
    "sparql_construction_prompt_tokens": 2020,
    "sparql_construction_completion_tokens": 0,
    "sparql_construction_total_tokens": 2020,
    "is_valid_sparql": true,
    "sparql_syntax_error": "syntactically correct",
    "ground_truth_query_result_is_empty": false,
    "result_eval_f1_score": 0.0,
    "result_eval_precision": 0.0,
    "result_eval_recall": 0.0,
    "error_occured_at_endpoint": false,
    "predicted_query_result_is_empty": true,
    "error_occured_at_endpoint_message": "no error, but empty result"
  },
  {
    "resource": "https://sparql.uniprot.org/.well-known/sparql-examples/49",
    "natural_language_question": "Retrieve the UniProtKB proteins, their catalyzed Rhea reactions, their encoding genes (Ensembl) and the anatomic entities where the genes are expressed (UBERON anatomic entites from Bgee expression data resource).",
    "ground_truth_query": "PREFIX CHEBI: <http://purl.obolibrary.org/obo/CHEBI_>\nPREFIX genex: <http://purl.org/genex#>\nPREFIX lscr: <http://purl.org/lscr#>\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX rh: <http://rdf.rhea-db.org/>\nPREFIX taxon: <http://purl.uniprot.org/taxonomy/>\nPREFIX up: <http://purl.uniprot.org/core/>\n\nSELECT DISTINCT ?protein ?ensemblGene ?reaction ?anatomicEntityLabel ?anatomicEntity\nWHERE {\n  # federated query to Rhea enadpoint\n  {\n    SELECT DISTINCT ?reaction WHERE {\n      SERVICE <https://sparql.rhea-db.org/sparql> {\n        ?reaction rdfs:subClassOf rh:Reaction ;\n          rh:equation ?reactionEquation ;\n          rh:side ?reactionSide .\n        ?reactionSide rh:contains ?participant .\n        ?participant rh:compound ?compound .\n        # compound constraint (CHEBI:16113 == cholesterol)\n        ?compound rh:chebi CHEBI:16113 .\n      }\n    }\n  }\n  # taxonomy constraint (taxon:9606 == Homo sapiens)\n  ?protein up:organism taxon:9606 ;\n    up:annotation ?a ;\n    rdfs:seeAlso / up:transcribedFrom ?ensemblGene .\n  ?a a up:Catalytic_Activity_Annotation ;\n    up:catalyticActivity ?ca .\n  ?ca up:catalyzedReaction ?reaction .\n  # federated query to Bgee (expression data)\n  BIND(IRI(REPLACE(STR(?ensemblGene), \"\\\\.[0-9]+$\", \"\")) AS ?ensemblGeneNoVersion)\n  SERVICE <https://www.bgee.org/sparql/> {\n    ?gene lscr:xrefEnsemblGene ?ensemblGeneNoVersion ;\n      genex:isExpressedIn ?anatomicEntity .\n    ?anatomicEntity rdfs:label ?anatomicEntityLabel .\n  }\n}",
    "target_endpoint": "https://sparql.uniprot.org/sparql/",
    "federates_with": [
      "https://sparql.rhea-db.org/sparql",
      "https://www.bgee.org/sparql/"
    ],
    "endpoint_set": "Uniprot",
    "file_path": "UniProt/49_tissues_where_genes_metabolizing_cholestrol_are_expressed.ttl",
    "predicted_query": "# https://sparql.uniprot.org/sparql\n# Retrieve UniProtKB proteins, their catalyzed Rhea reactions, their encoding genes (Ensembl) and the anatomic entities where the genes are expressed (UBERON anatomic entites from Bgee expression data resource).\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\n\nSELECT DISTINCT ?uniprotProtein ?rheaReaction ?ensemblGene ?anatomicalEntity\nWHERE {\n  # Query UniProt for proteins\n  SERVICE <https://sparql.uniprot.org/sparql> {\n    ?uniprotProtein a <http://purl.uniprot.org/core/Protein>; # Assuming a Protein class exists.  Adjust if needed.\n    rdfs:seeAlso ?rheaReaction . # Assuming rdfs:seeAlso links to Rhea.  Adjust if needed.\n    # Assuming some predicate links to Ensembl gene IDs.  Adjust if needed.\n    ?uniprotProtein <http://purl.uniprot.org/core/encodedBy> ?ensemblGene .\n  }\n\n  # Query Rhea for reactions (verify the link from UniProt)\n  SERVICE <https://sparql.rhea-db.org/sparql> {\n    ?rheaReaction a <http://rdf.rhea-db.org/Reaction> . # Assuming a Reaction class exists. Adjust if needed.\n  }\n\n  #Query Bgee for anatomical entities, using the Ensembl gene\n  SERVICE <https://sparql.swisslipids.org/sparql/> { #I assumed this endpoint could provide the anatomical entities, could be another one.\n      ?geneExpression <http://example.org/gene> ?ensemblGene ; #Assuming a gene property exists.\n      <http://example.org/expressedIn> ?anatomicalEntity . #Assuming an expressedIn property exists\n  }\n}",
    "predicted_endpoint": "https://sparql.uniprot.org/sparql",
    "predicted_endpoint_equal_to_target_endpoint": true,
    "predicted_endpoint_in_federates_with": false,
    "predicted_endpoint_or_federated_endpoint": true,
    "run_id_langsmith": "5b5bd71c-280b-4d6b-b027-32e0433ce8ea",
    "evaluation_timestamp": "2025-04-22T19:29:55.009279",
    "question_understanding_tokens": 273,
    "question_understanding_completion_tokens": 71,
    "question_understanding_total_tokens": 344,
    "sparql_construction_prompt_tokens": 3974,
    "sparql_construction_completion_tokens": 0,
    "sparql_construction_total_tokens": 3974,
    "is_valid_sparql": true,
    "sparql_syntax_error": "syntactically correct",
    "ground_truth_query_result_is_empty": false,
    "result_eval_f1_score": 0.0,
    "result_eval_precision": 0.0,
    "result_eval_recall": 0.0,
    "error_occured_at_endpoint": true,
    "predicted_query_result_is_empty": true,
    "error_occured_at_endpoint_message": "QueryBadFormed: A bad request has been sent to the endpoint: probably the SPARQL query is badly formed."
  },
  {
    "resource": "https://sparql.uniprot.org/.well-known/sparql-examples/53",
    "natural_language_question": "Find mouse homologs in OMABrowser of human enzymes that catalyze reactions involving sterols (CHEBI:15889). Federating with Rhea and OMABrowser.",
    "ground_truth_query": "PREFIX CHEBI: <http://purl.obolibrary.org/obo/CHEBI_>\nPREFIX lscr: <http://purl.org/lscr#>\nPREFIX orth: <http://purl.org/net/orth#>\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX rh: <http://rdf.rhea-db.org/>\nPREFIX taxon: <http://purl.uniprot.org/taxonomy/>\nPREFIX up: <http://purl.uniprot.org/core/>\n\nSELECT\n  DISTINCT\n    ?chebi\n    ?reaction\n    ?humanProtein\n    ?mouseProtein\n    ?cluster \nWHERE {\n  SERVICE <https://sparql.rhea-db.org/sparql> {\n    ?reaction rdfs:subClassOf rh:Reaction .\n    ?reaction rh:side/rh:contains/rh:compound ?compound .\n    ?compound rh:chebi ?chebi .\n    ?chebi rdfs:subClassOf* CHEBI:15889\n  }\n\n  ?humanProtein up:organism taxon:9606 .\n  ?humanProtein up:annotation ?a .\n  ?a a up:Catalytic_Activity_Annotation .\n  ?a up:catalyticActivity ?ca .\n  ?ca up:catalyzedReaction ?reaction .\n\n  SERVICE  <https://sparql.omabrowser.org/sparql> {\n    ?cluster a orth:ParalogsCluster .\n    ?cluster orth:hasHomologousMember ?node1 , ?node2 .\n    ?node1 orth:hasHomologousMember* ?orthoProtein1 .\n    ?node2 orth:hasHomologousMember* ?orthoProtein2 .\n    ?orthoProtein1 lscr:xrefUniprot ?mouseProtein .\n    ?orthoProtein2 lscr:xrefUniprot ?humanProtein .\n    # inTaxon mouse\n    ?orthoProtein1 orth:organism/<http://purl.obolibrary.org/obo/RO_0002162> taxon:10090 . \n  }\n}",
    "target_endpoint": "https://sparql.uniprot.org/sparql/",
    "federates_with": [
      "https://sparql.rhea-db.org/sparql",
      "https://sparql.omabrowser.org/sparql"
    ],
    "endpoint_set": "Uniprot",
    "file_path": "UniProt/53_mouse_homologs_of_sterol_enzymes_via_omabrowser.ttl",
    "predicted_query": "# https://sparql.uniprot.org/sparql\n# Find mouse homologs in OMABrowser of human enzymes that catalyze reactions involving sterols (CHEBI:15889).\n\nPREFIX rhea: <http://rdf.rhea-db.org/>\nPREFIX chebi: <http://purl.obolibrary.org/obo/CHEBI_>\nPREFIX uniprot: <http://purl.uniprot.org/core/>\nPREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\n\nSELECT DISTINCT ?humanEnzyme ?mouseHomolog\nWHERE {\n  # Find Rhea reactions involving sterols (CHEBI:15889)\n  SERVICE <https://sparql.rhea-db.org/sparql> {\n    SELECT DISTINCT ?reaction WHERE {\n      ?reaction rhea: Rhea_has_reactant chebi:15889 . # sterols\n    }\n  }\n\n  # Find enzymes (UniProt IDs) that catalyze those reactions\n  SERVICE <https://sparql.rhea-db.org/sparql> {\n     ?reaction rhea: Rhea_has_enzyme ?enzyme .\n     ?enzyme rdfs:label ?enzymeName .\n  }\n\n  # Find corresponding UniProt entries for the enzymes\n  ?enzyme uniprot:enzyme ?humanEnzyme .\n  ?humanEnzyme a uniprot:Protein .\n\n  # Find mouse homologs of the human enzymes using SERVICE to UniProt SPARQL endpoint.\n  SERVICE <https://sparql.uniprot.org/sparql> {\n    ?humanEnzyme uniprot:sequence ?humanSequence .\n     # Query UniProt for mouse homologs\n    ?mouseEnzyme rdfs:seeAlso ?omaBrowserEntry .\n    ?mouseEnzyme a uniprot:Protein .\n    ?mouseEnzyme uniprot:organism <http://purl.uniprot.org/taxonomy/10090> . # Mouse NCBI Taxonomy ID\n    ?mouseEnzyme uniprot:sequence ?mouseSequence .\n\n    FILTER (strlen(?humanSequence) > 0 && strlen(?mouseSequence) > 0) #Ensure there is a sequence\n    FILTER (?humanSequence = ?mouseSequence) #Ensure it is the same sequence so homolog\n    BIND (?mouseEnzyme AS ?mouseHomolog)\n  }\n}",
    "predicted_endpoint": "https://sparql.uniprot.org/sparql",
    "predicted_endpoint_equal_to_target_endpoint": true,
    "predicted_endpoint_in_federates_with": false,
    "predicted_endpoint_or_federated_endpoint": true,
    "run_id_langsmith": "87414d29-3c80-45b7-b67e-ee6643dc368b",
    "evaluation_timestamp": "2025-04-22T19:30:10.689196",
    "question_understanding_tokens": 269,
    "question_understanding_completion_tokens": 41,
    "question_understanding_total_tokens": 310,
    "sparql_construction_prompt_tokens": 2726,
    "sparql_construction_completion_tokens": 0,
    "sparql_construction_total_tokens": 2726,
    "is_valid_sparql": false,
    "sparql_syntax_error": "Lexical error at line 15, column 40.  Encountered: '32' (32), after prefix \"Rhea_has_reactant\"",
    "ground_truth_query_result_is_empty": null,
    "result_eval_f1_score": 0.0,
    "result_eval_precision": 0.0,
    "result_eval_recall": 0.0,
    "error_occured_at_endpoint": true,
    "predicted_query_result_is_empty": true,
    "error_occured_at_endpoint_message": "Lexical error at line 15, column 40.  Encountered: '32' (32), after prefix \"Rhea_has_reactant\""
  },
  {
    "resource": "https://sparql.uniprot.org/.well-known/sparql-examples/52",
    "natural_language_question": "Retrieve drugs that target human enzymes involved in sterol metabolism (federated query with Rhea and ChEMBL via IDSM/Elixir czech republic).",
    "ground_truth_query": "PREFIX CHEBI: <http://purl.obolibrary.org/obo/CHEBI_>\nPREFIX cco: <http://rdf.ebi.ac.uk/terms/chembl#>\nPREFIX chebihash: <http://purl.obolibrary.org/obo/chebi#>\nPREFIX owl: <http://www.w3.org/2002/07/owl#>\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX rh: <http://rdf.rhea-db.org/>\nPREFIX skos: <http://www.w3.org/2004/02/skos/core#>\nPREFIX taxon: <http://purl.uniprot.org/taxonomy/>\nPREFIX up: <http://purl.uniprot.org/core/>\n\nSELECT\n        DISTINCT\n            ?protein\n            ?proteinFullName\n            ?activityType\n            ?standardActivityValue\n            ?standardActivityUnit\n            ?chemblMolecule\n            ?chemlbMoleculePrefLabel\nWHERE\n  {\n  # ChEBI: retrieve members of the ChEBI class ChEBI:15889 (sterol)\n  # Rhea: retrieve the reactions involving these ChEBI as participants\n  SERVICE <https://sparql.rhea-db.org/sparql> {\n    ?reaction rdfs:subClassOf  rh:Reaction ;\n\t      rh:status        rh:Approved ;\n\t      rh:side          ?reactionSide .\n    ?reactionSide\n\t      rh:contains      ?participant .\n    ?participant rh:compound  ?compound\n    {\n      ?compound  rh:chebi  ?chebi .\n      ?chebi (rdfs:subClassOf)+ CHEBI:15889\n    } UNION {\n      ?compound  rh:chebi           ?chebi .\n      ?chebi2   rdfs:subClassOf     ?chebiRestriction .\n      ?chebiRestriction\n\t\ta           owl:Restriction ;\n\t\towl:onProperty      chebihash:has_major_microspecies_at_pH_7_3 ;\n\t\towl:someValuesFrom  ?chebi .\n      ?chebi2 (rdfs:subClassOf)+ CHEBI:15889\n    }\n  }\n  # UniProt: retrieve the human (taxid:9606) enzymes catalyzing these Rhea reactions\n  ?ca       up:catalyzedReaction  ?reaction .\n  ?a        up:catalyticActivity  ?ca .\n  ?protein  up:annotation         ?a ;\n\t    up:organism           taxon:9606 ;\n\t    up:recommendedName    ?proteinRecName .\n  ?proteinRecName\n\t    up:fullName           ?proteinFullName .\n  # Find drugs in wikidata that interact with the UniProt Proteins\n  # ChEMBL: retrieve the corresponding targets and with drugs in clinical phase 4\n  # Via https://idsm.elixir-czech.cz/sparql/\n  SERVICE <https://idsm.elixir-czech.cz/sparql/endpoint/idsm> {\n    ?activity a cco:Activity ;\n      cco:hasMolecule ?chemblMolecule ;\n      cco:hasAssay ?assay ;\n      cco:standardType ?activityType ;\n      cco:standardValue ?standardActivityValue ;\n      cco:standardUnits ?standardActivityUnit .\n    ?chemblMolecule cco:highestDevelopmentPhase ?highestDevelopmentPhase ;\n      rdfs:label ?chemblMoleculeLabel ;\n      skos:prefLabel ?chemlbMoleculePrefLabel .\n    FILTER (?highestDevelopmentPhase > 3)\n    ?assay cco:hasTarget ?target .\n    ?target cco:hasTargetComponent/cco:targetCmptXref ?protein .\n    ?protein a cco:UniprotRef .\n  }\n}",
    "target_endpoint": "https://sparql.uniprot.org/sparql/",
    "federates_with": [
      "https://sparql.rhea-db.org/sparql",
      "https://idsm.elixir-czech.cz/sparql/endpoint/idsm"
    ],
    "endpoint_set": "Uniprot",
    "file_path": "UniProt/52_drugs_targeting_sterol_metabolism.ttl",
    "predicted_query": "# https://sparql.rhea-db.org/sparql\n# Find Rhea reactions related to sterol metabolism, then enzymes for those reactions, and finally drugs that target the enzymes using IDSM/Elixir.\n\nPREFIX rhea: <http://rdf.rhea-db.org/>\nPREFIX chebi: <http://purl.obolibrary.org/obo/CHEBI_>\nPREFIX dc: <http://purl.org/dc/elements/1.1/>\n\nSELECT DISTINCT ?drugbankID ?drugName ?enzymeURI ?enzymeName\nWHERE {\n  # Find reactions in Rhea related to sterol\n  {\n    SELECT DISTINCT ?reaction {\n      ?reaction dc:description ?description .\n      FILTER (CONTAINS(LCASE(?description), \"sterol\")) # reactions about sterol metabolism\n    }\n  }\n\n  # Find the enzyme (UniProt ID) that catalyzes the reaction\n  ?reaction rhea:equation ?equation . # Get the equation of the reaction\n  ?reaction rhea:status \"approved\" .\n  ?equation rhea:directionalReaction ?directionalReaction .\n  ?directionalReaction rhea:catalyzedBy ?enzymeURI .\n\n  # BIND(STRAFTER(str(?enzymeURI), \"uniprot/\") AS ?uniprotID) # Extract UniProt ID from URI\n\n  # Get Enzyme name\n  ?enzymeURI dc:description ?enzymeName .\n\n  # Access IDSM/Elixir Czech Republic to find drugs targeting the enzyme\n  SERVICE <https://idsm.elixir-czech.cz/sparql> {\n    PREFIX ids:<https://idsm.elixir-czech.cz/vocab/>\n    PREFIX skos:<http://www.w3.org/2004/02/skos/core#>\n    ?drug ids:target ?enzymeURI . # Find drugs that target the enzyme from Rhea using UniProt ID\n    ?drug ids:drugbankId ?drugbankID .\n    ?drug skos:prefLabel ?drugName .\n  }\n}\nLIMIT 10",
    "predicted_endpoint": "https://sparql.rhea-db.org/sparql",
    "predicted_endpoint_equal_to_target_endpoint": false,
    "predicted_endpoint_in_federates_with": true,
    "predicted_endpoint_or_federated_endpoint": true,
    "run_id_langsmith": "71fd0b55-78d0-48ad-a2ba-5c04dd54d1f1",
    "evaluation_timestamp": "2025-04-22T19:30:20.250090",
    "question_understanding_tokens": 263,
    "question_understanding_completion_tokens": 28,
    "question_understanding_total_tokens": 291,
    "sparql_construction_prompt_tokens": 1794,
    "sparql_construction_completion_tokens": 0,
    "sparql_construction_total_tokens": 1794,
    "is_valid_sparql": false,
    "sparql_syntax_error": "Encountered \" \"prefix\" \"PREFIX \"\" at line 31, column 5.\nWas expecting one of:\n     ...\n     ...\n     ...\n     ...\n     ...\n     ...\n    \"select\" ...\n    \"values\" ...\n    \"graph\" ...\n    \"optional\" ...\n    \"minus\" ...\n    \"bind\" ...\n    \"service\" ...\n    \"filter\" ...\n    \"true\" ...\n    \"false\" ...\n     ...\n     ...\n     ...\n     ...\n     ...\n     ...\n     ...\n     ...\n     ...\n     ...\n     ...\n     ...\n     ...\n    \"(\" ...\n     ...\n    \"{\" ...\n    \"}\" ...\n    \"[\" ...\n     ...\n    \"<<\" ...",
    "ground_truth_query_result_is_empty": null,
    "result_eval_f1_score": 0.0,
    "result_eval_precision": 0.0,
    "result_eval_recall": 0.0,
    "error_occured_at_endpoint": true,
    "predicted_query_result_is_empty": true,
    "error_occured_at_endpoint_message": "Encountered \" \"prefix\" \"PREFIX \"\" at line 31, column 5.\nWas expecting one of:\n     ...\n     ...\n     ...\n     ...\n     ...\n     ...\n    \"select\" ...\n    \"values\" ...\n    \"graph\" ...\n    \"optional\" ...\n    \"minus\" ...\n    \"bind\" ...\n    \"service\" ...\n    \"filter\" ...\n    \"true\" ...\n    \"false\" ...\n     ...\n     ...\n     ...\n     ...\n     ...\n     ...\n     ...\n     ...\n     ...\n     ...\n     ...\n     ...\n     ...\n    \"(\" ...\n     ...\n    \"{\" ...\n    \"}\" ...\n    \"[\" ...\n     ...\n    \"<<\" ..."
  },
  {
    "resource": "https://sparql.uniprot.org/.well-known/sparql-examples/54",
    "natural_language_question": "Proteins with binding sites for ligands similar to heme",
    "ground_truth_query": "PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX sachem: <http://bioinfo.uochb.cas.cz/rdf/v1.0/sachem#>\nPREFIX up: <http://purl.uniprot.org/core/>\nPREFIX xsd: <http://www.w3.org/2001/XMLSchema#>\n\nSELECT \n  ?protein\n  ?mnemonic\n  ?proteinName\n  ?ligandSimilarityScore\n  ?ligand\nWHERE {\n  SERVICE <https://idsm.elixir-czech.cz/sparql/endpoint/chebi> {\n    ?ssc sachem:compound ?ligand; \n      sachem:score ?ligandSimilarityScore ;\n      sachem:similaritySearch ?sss .\n        # Smiles of Heme\n    ?sss    sachem:query \"CC1=C(CCC([O-])=O)C2=[N+]3C1=Cc1c(C)c(C=C)c4C=C5C(C)=C(C=C)C6=[N+]5[Fe-]3(n14)n1c(=C6)c(C)c(CCC([O-])=O)c1=C2\";\n      sachem:cutoff \"8e-1\"^^xsd:double ;\n      sachem:aromaticityMode sachem:aromaticityDetect ;\n      sachem:similarityRadius 1 ;\n      sachem:tautomerMode sachem:ignoreTautomers .\n  }\n  ?protein up:mnemonic ?mnemonic ;\n    up:recommendedName/up:fullName ?proteinName ;\n    up:annotation ?annotation .\n  ?annotation a up:Binding_Site_Annotation ;\n      up:ligand/rdfs:subClassOf ?ligand .\n}\nORDER BY DESC(?ligandSimilarityScore)",
    "target_endpoint": "https://sparql.uniprot.org/sparql/",
    "federates_with": [
      "https://idsm.elixir-czech.cz/sparql/endpoint/chebi"
    ],
    "endpoint_set": "Uniprot",
    "file_path": "UniProt/54_binding_sites_for_ligands_similar_to_heme_sachem.ttl",
    "predicted_query": "# https://sparql.uniprot.org/sparql\n# Find proteins in UniProt that have binding sites for ligands similar to Heme\n\nSELECT DISTINCT ?protein ?proteinName\nWHERE {\n  ?protein a <http://purl.uniprot.org/core/Protein> .\n  ?protein rdfs:label ?proteinName .\n\n  # Find binding sites associated with the protein\n  ?protein <http://purl.uniprot.org/core/bindingSite> ?bindingSite .\n\n  # Find ligands that bind to the binding site\n  ?bindingSite <http://purl.uniprot.org/core/ligand> ?ligand .\n\n  # Filter for ligands similar to Heme.\n  # Assuming there's a property 'similarTo' or equivalent for ligand similarity.\n  # Replace with appropriate property if available.\n  ?ligand <http://purl.uniprot.org/core/similarTo> ?heme .\n  ?heme rdfs:label \"Heme\" . # Match heme entity\n\n  #OPTIONAL { #Federating with RheaDB to get Chebi ID if UniProt doesn't have similarity links. This part could be complex and might not yield results.\n  #  SERVICE <https://sparql.rhea-db.org/sparql> {\n  #    ?rheaReaction rdfs:label ?reactionLabel .\n  #    ?rheaReaction rhea:chebi ?chebiHeme .\n  #    ?chebiHeme rdfs:label \"Heme\" . #Find Heme in RheaDB\n  #\n  #    ?chebiSimilar chebi:is_a ?chebiHeme . #Find similar compounds using chebi:is_a\n  #    ?chebiSimilar rdfs:label ?similarCompound .\n  #  }\n  #}\n}",
    "predicted_endpoint": "https://sparql.uniprot.org/sparql",
    "predicted_endpoint_equal_to_target_endpoint": true,
    "predicted_endpoint_in_federates_with": false,
    "predicted_endpoint_or_federated_endpoint": true,
    "run_id_langsmith": "718d60e9-250c-4290-83d3-6b506ce2ac64",
    "evaluation_timestamp": "2025-04-22T19:30:31.024593",
    "question_understanding_tokens": 241,
    "question_understanding_completion_tokens": 29,
    "question_understanding_total_tokens": 270,
    "sparql_construction_prompt_tokens": 2305,
    "sparql_construction_completion_tokens": 0,
    "sparql_construction_total_tokens": 2305,
    "is_valid_sparql": false,
    "sparql_syntax_error": "Line 7, column 12: Unresolved prefixed name: rdfs:label",
    "ground_truth_query_result_is_empty": null,
    "result_eval_f1_score": 0.0,
    "result_eval_precision": 0.0,
    "result_eval_recall": 0.0,
    "error_occured_at_endpoint": true,
    "predicted_query_result_is_empty": true,
    "error_occured_at_endpoint_message": "Line 7, column 12: Unresolved prefixed name: rdfs:label"
  },
  {
    "resource": "https://sparql.uniprot.org/.well-known/sparql-examples/43",
    "natural_language_question": "Connect patents cited in UniProtKB with those in the patent database at EPO via publication number, whose grant date is more than twenty years in the past.",
    "ground_truth_query": "PREFIX patent: <http://data.epo.org/linked-data/def/patent/>\nPREFIX skos: <http://www.w3.org/2004/02/skos/core#>\nPREFIX up: <http://purl.uniprot.org/core/>\n\nSELECT ?grantDate ?patent ?application ?applicationNo\nWHERE\n{\n    ?citation a up:Patent_Citation ;\n  skos:exactMatch ?patent .\n  BIND(SUBSTR(STR(?patent), 35) AS ?applicationNo)\n  BIND(SUBSTR(STR(?patent), 33, 2) AS ?countryCode)\n  SERVICE <https://data.epo.org/linked-data/query>{\n    ?publication patent:publicationNumber ?applicationNo ;\n      patent:application ?application .\n    ?application patent:grantDate ?grantDate .\n  }\n  BIND((year(now()) - 20) AS ?thisYearMinusTwenty)\n  BIND(year(?grantDate) AS ?grantYear)\n  FILTER(?grantYear < ?thisYearMinusTwenty)\n} ORDER BY ?grantYear",
    "target_endpoint": "https://sparql.uniprot.org/sparql/",
    "federates_with": [
      "https://data.epo.org/linked-data/query"
    ],
    "endpoint_set": "Uniprot",
    "file_path": "UniProt/43_patents_used_in_uniprot_granted_twenty_years_in_the_past.ttl",
    "predicted_query": "# https://sparql.uniprot.org/sparql\n# This query retrieves patent identifiers from UniProtKB. Since there is no EPO endpoint available, the connection and date filtering cannot be performed.\nSELECT DISTINCT ?patent\nWHERE {\n  SERVICE <https://sparql.uniprot.org/sparql> {\n    ?protein a uniprot:Protein .\n    ?protein rdfs:seeAlso ?patent . # Assuming rdfs:seeAlso links to external resources like patents.  Adjust if the actual property is different.\n    FILTER CONTAINS(STR(?patent), \"patent\") # Filter to only include resources that contain the word \"patent\" for simplicity. Adapt based on actual URI patterns.\n  }\n}",
    "predicted_endpoint": "https://sparql.uniprot.org/sparql",
    "predicted_endpoint_equal_to_target_endpoint": true,
    "predicted_endpoint_in_federates_with": false,
    "predicted_endpoint_or_federated_endpoint": true,
    "run_id_langsmith": "303073c1-9097-4249-9dfd-676e316662c2",
    "evaluation_timestamp": "2025-04-22T19:30:42.874847",
    "question_understanding_tokens": 263,
    "question_understanding_completion_tokens": 47,
    "question_understanding_total_tokens": 310,
    "sparql_construction_prompt_tokens": 1669,
    "sparql_construction_completion_tokens": 0,
    "sparql_construction_total_tokens": 1669,
    "is_valid_sparql": false,
    "sparql_syntax_error": "Line 6, column 16: Unresolved prefixed name: uniprot:Protein",
    "ground_truth_query_result_is_empty": null,
    "result_eval_f1_score": 0.0,
    "result_eval_precision": 0.0,
    "result_eval_recall": 0.0,
    "error_occured_at_endpoint": true,
    "predicted_query_result_is_empty": true,
    "error_occured_at_endpoint_message": "Line 6, column 16: Unresolved prefixed name: uniprot:Protein"
  },
  {
    "resource": "https://sparql.uniprot.org/.well-known/sparql-examples/45",
    "natural_language_question": "Retrieve drugs that target human enzymes involved in sterol metabolism (federated query with WikiData and Rhea).",
    "ground_truth_query": "PREFIX CHEBI: <http://purl.obolibrary.org/obo/CHEBI_>\nPREFIX chebihash: <http://purl.obolibrary.org/obo/chebi#>\nPREFIX owl: <http://www.w3.org/2002/07/owl#>\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX rh: <http://rdf.rhea-db.org/>\nPREFIX taxon: <http://purl.uniprot.org/taxonomy/>\nPREFIX uniprotkb: <http://purl.uniprot.org/uniprot/>\nPREFIX up: <http://purl.uniprot.org/core/>\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\n\nSELECT DISTINCT ?protein ?proteinFullName ?wikiChemical ?wikiChemicalLabel ?medicalConditionTreatedLabel\nWHERE {\n  # ChEBI: retrieve members of the ChEBI class ChEBI:15889 (sterol)\n  # Rhea: retrieve the reactions involving these ChEBI as participants\n  SERVICE <https://sparql.rhea-db.org/sparql> {\n    ?reaction rdfs:subClassOf rh:Reaction ;\n      rh:status rh:Approved ;\n      rh:side ?reactionSide .\n    ?reactionSide\n      rh:contains ?participant .\n    ?participant rh:compound ?compound\n    {\n      ?compound rh:chebi ?chebi .\n      ?chebi (rdfs:subClassOf)+ CHEBI:15889\n    } UNION {\n      ?compound rh:chebi ?chebi .\n      ?chebi2 rdfs:subClassOf ?chebiRestriction .\n      ?chebiRestriction\n\t\ta owl:Restriction ;\n\t\towl:onProperty chebihash:has_major_microspecies_at_pH_7_3 ;\n\t\towl:someValuesFrom ?chebi .\n      ?chebi2 (rdfs:subClassOf)+ CHEBI:15889\n    }\n  }\n  # UniProt: retrieve the human (taxid:9606) enzymes catalyzing these Rhea reactions\n  ?ca up:catalyzedReaction  ?reaction .\n  ?a up:catalyticActivity  ?ca .\n  ?proteinIRI  up:annotation ?a ;\n    up:organism taxon:9606 ;\n    up:recommendedName ?proteinRecName .\n  ?proteinRecName up:fullName ?proteinFullName .\n  # Find drugs in wikidata that interact with the UniProt Proteins\n  BIND (SUBSTR(STR(?proteinIRI), STRLEN(STR(uniprotkb:))+1) AS ?protein)\n  SERVICE <https://query.wikidata.org/sparql> {\n    ?wp wdt:P352  ?protein .\n    ?wikiChemical wdt:P129 ?wp . # Physically interacts with\n    ?wikiChemical rdfs:label ?wikiChemicalLabel .\n    ?wikiChemical wdt:P2175 ?wmc . # Medical conndition treated\n    ?wmc rdfs:label ?medicalConditionTreatedLabel .\n    FILTER(lang(?medicalConditionTreatedLabel) = 'en')\n    FILTER(lang(?wikiChemicalLabel) = 'en')\n  }\n}",
    "target_endpoint": "https://sparql.uniprot.org/sparql/",
    "federates_with": [
      "https://query.wikidata.org/sparql",
      "https://sparql.rhea-db.org/sparql"
    ],
    "endpoint_set": "Uniprot",
    "file_path": "UniProt/45_drugs_targeting_human_sterol_metabolism_enzymes.ttl",
    "predicted_query": "# https://sparql.rhea-db.org/sparql\n# Find Rhea reactions related to sterol metabolism\nSELECT DISTINCT ?drug ?enzymeName WHERE {\n  SERVICE <https://sparql.rhea-db.org/sparql> {\n    ?reaction rdfs:comment ?comment .\n    FILTER (CONTAINS(LCASE(?comment), \"sterol metabolism\")) .\n    ?reaction rhea:equation ?equation .\n    ?equation rdfs:label ?enzymeName . # Assuming enzyme name is in the label of the equation. This is a simplification.\n  }\n\n  # Find corresponding UniProt ID for human enzymes\n  SERVICE <https://sparql.uniprot.org/sparql> {\n    ?enzyme uniprot:recommendedName ?recommendedName .\n    FILTER (CONTAINS(LCASE(?recommendedName), LCASE(?enzymeName))) . # Link enzyme name from Rhea to UniProt\n    ?enzyme a uniprot:Protein .\n    ?enzyme dcterms:source uniprot:taxonomy_9606 . # Human enzymes\n    BIND(STR(replace(STR(?enzyme), \"http://purl.uniprot.org/uniprot/\", \"\")) AS ?uniprotID) # Extract UniProt ID\n  }\n\n  # Find drugs targeting these human enzymes in Wikidata\n  SERVICE <https://query.wikidata.org/sparql> {\n    ?drug wdt:P2175 ?uniprotID . # Drug targets UniProt ID\n    ?drug wdt:P31 wd:Q12140 . # Drug is an instance of drug\n  }\n}",
    "predicted_endpoint": "https://sparql.rhea-db.org/sparql",
    "predicted_endpoint_equal_to_target_endpoint": false,
    "predicted_endpoint_in_federates_with": true,
    "predicted_endpoint_or_federated_endpoint": true,
    "run_id_langsmith": "ea844a9a-57ba-4828-9678-8d6d0c676247",
    "evaluation_timestamp": "2025-04-22T19:30:53.760047",
    "question_understanding_tokens": 251,
    "question_understanding_completion_tokens": 31,
    "question_understanding_total_tokens": 282,
    "sparql_construction_prompt_tokens": 2081,
    "sparql_construction_completion_tokens": 0,
    "sparql_construction_total_tokens": 2081,
    "is_valid_sparql": false,
    "sparql_syntax_error": "Line 5, column 15: Unresolved prefixed name: rdfs:comment",
    "ground_truth_query_result_is_empty": null,
    "result_eval_f1_score": 0.0,
    "result_eval_precision": 0.0,
    "result_eval_recall": 0.0,
    "error_occured_at_endpoint": true,
    "predicted_query_result_is_empty": true,
    "error_occured_at_endpoint_message": "Line 5, column 15: Unresolved prefixed name: rdfs:comment"
  },
  {
    "resource": "https://sparql.uniprot.org/.well-known/sparql-examples/42",
    "natural_language_question": "Connect patents cited in UniProtKB with those in the patent database at EPO via publication number.",
    "ground_truth_query": "PREFIX patent: <http://data.epo.org/linked-data/def/patent/>\nPREFIX skos: <http://www.w3.org/2004/02/skos/core#>\nPREFIX up: <http://purl.uniprot.org/core/>\n\nSELECT ?citation ?patent ?application ?applicationNo\nWHERE\n{\n  ?citation a up:Patent_Citation ;\n    skos:exactMatch ?patent .\n  FILTER(CONTAINS(STR(?patent), 'EP'))\n  BIND(SUBSTR(STR(?patent), 35) AS ?applicationNo)\n  SERVICE <https://data.epo.org/linked-data/query>{\n    ?application patent:publicationNumber ?applicationNo\n  }\n}",
    "target_endpoint": "https://sparql.uniprot.org/sparql/",
    "federates_with": [
      "https://data.epo.org/linked-data/query"
    ],
    "endpoint_set": "Uniprot",
    "file_path": "UniProt/42_connect_patents_to_epo.ttl",
    "predicted_query": "# https://sparql.uniprot.org/sparql\n# Retrieve patent identifiers from UniProtKB entries.\n# This query assumes that UniProtKB entries may have associated patent identifiers.\nSELECT DISTINCT ?uniprotID ?patentIdentifier\nWHERE {\n  ?uniprotID rdf:type up:Protein . # Assuming up:Protein is the class for proteins in UniProt\n  ?uniprotID rdfs:seeAlso ?patentIdentifier . # Assuming rdfs:seeAlso or similar property links to external resources\n  FILTER (REGEX(str(?patentIdentifier), \"^US[0-9]+[A-Z]?[0-9]?$|^EP[0-9]+[A-Z]?[0-9]?$|^WO[0-9]+[A-Z]?[0-9]?$\")) # Filter for common patent formats (US, EP, WO)\n\n}\nLIMIT 100",
    "predicted_endpoint": "https://sparql.uniprot.org/sparql",
    "predicted_endpoint_equal_to_target_endpoint": true,
    "predicted_endpoint_in_federates_with": false,
    "predicted_endpoint_or_federated_endpoint": true,
    "run_id_langsmith": "2c0f6b64-a825-4ec0-8d32-20190f519d2a",
    "evaluation_timestamp": "2025-04-22T19:31:01.601766",
    "question_understanding_tokens": 251,
    "question_understanding_completion_tokens": 35,
    "question_understanding_total_tokens": 286,
    "sparql_construction_prompt_tokens": 1657,
    "sparql_construction_completion_tokens": 0,
    "sparql_construction_total_tokens": 1657,
    "is_valid_sparql": false,
    "sparql_syntax_error": "Line 6, column 14: Unresolved prefixed name: rdf:type",
    "ground_truth_query_result_is_empty": null,
    "result_eval_f1_score": 0.0,
    "result_eval_precision": 0.0,
    "result_eval_recall": 0.0,
    "error_occured_at_endpoint": true,
    "predicted_query_result_is_empty": true,
    "error_occured_at_endpoint_message": "Line 6, column 14: Unresolved prefixed name: rdf:type"
  },
  {
    "resource": "https://sparql.uniprot.org/.well-known/sparql-examples/67_draft_human_metabolome",
    "natural_language_question": "Generate a draft human metabolome",
    "ground_truth_query": "PREFIX chebislash: <http://purl.obolibrary.org/obo/chebi/>\nPREFIX rh: <http://rdf.rhea-db.org/>\nPREFIX taxon: <http://purl.uniprot.org/taxonomy/>\nPREFIX up: <http://purl.uniprot.org/core/>\n\nSELECT\n?uniprot ?mnemonic ?rhea ?chebi ?smiles ?inchiKey\nWHERE\n{\n  ?uniprot up:annotation/up:catalyticActivity/up:catalyzedReaction ?rhea ;\n        up:organism taxon:9606 ;\n        up:mnemonic ?mnemonic .\n  SERVICE <https://sparql.rhea-db.org/sparql> {\n\t?rhea rh:side/rh:contains/rh:compound ?compound .\n    ?compound (rh:chebi|(rh:reactivePart/rh:chebi)|(rh:underlyingChebi/rh:chebi)) ?chebi .\n   }\n   ?chebi chebislash:smiles ?smiles ;\n          chebislash:inchikey ?inchiKey .\n}",
    "target_endpoint": "https://sparql.uniprot.org/sparql/",
    "federates_with": [
      "https://sparql.rhea-db.org/sparql"
    ],
    "endpoint_set": "Uniprot",
    "file_path": "UniProt/67_draft_human_metabolome.ttl",
    "predicted_query": "# https://sparql.uniprot.org/sparql\n# Draft query to generate a human metabolome by retrieving human proteins from UniProt related to metabolism\n\nSELECT DISTINCT ?protein ?proteinName\nWHERE {\n  # Find proteins associated with Homo sapiens (Human)\n  SERVICE <https://sparql.uniprot.org/sparql> {\n    ?protein a <http://purl.uniprot.org/core/Protein>;\n             <http://purl.uniprot.org/core/organism> <http://purl.uniprot.org/taxonomy/9606>;\n             <http://purl.uniprot.org/core/recommendedName> ?recName .\n    ?recName <http://purl.uniprot.org/core/fullName> ?proteinName .\n\n    # Filter for proteins involved in metabolic processes (broad term)\n    # This is a basic filter; more specific terms could be used if needed.\n    FILTER (contains(lcase(?proteinName), \"metabolic\") || contains(lcase(?proteinName), \"metabolism\"))\n  }\n}",
    "predicted_endpoint": "https://sparql.uniprot.org/sparql",
    "predicted_endpoint_equal_to_target_endpoint": true,
    "predicted_endpoint_in_federates_with": false,
    "predicted_endpoint_or_federated_endpoint": true,
    "run_id_langsmith": "9576155e-8006-4471-9373-c1a7c86c61fa",
    "evaluation_timestamp": "2025-04-22T19:31:09.816284",
    "question_understanding_tokens": 239,
    "question_understanding_completion_tokens": 20,
    "question_understanding_total_tokens": 259,
    "sparql_construction_prompt_tokens": 1286,
    "sparql_construction_completion_tokens": 0,
    "sparql_construction_total_tokens": 1286,
    "is_valid_sparql": true,
    "sparql_syntax_error": "syntactically correct",
    "ground_truth_query_result_is_empty": false,
    "result_eval_f1_score": 0.0,
    "result_eval_precision": 0.0,
    "result_eval_recall": 0.0,
    "error_occured_at_endpoint": false,
    "predicted_query_result_is_empty": false,
    "error_occured_at_endpoint_message": "no error"
  },
  {
    "resource": "https://sparql.uniprot.org/.well-known/sparql-examples/36",
    "natural_language_question": "Find the orthologous proteins for UniProtKB entry P05067 using the <a href=\"http://www.orthod.org\">OrthoDB database</a>",
    "ground_truth_query": "PREFIX orthodb: <http://purl.orthodb.org/>\nPREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX skos: <http://www.w3.org/2004/02/skos/core#>\nPREFIX uniprotkb: <http://purl.uniprot.org/uniprot/>\nPREFIX up: <http://purl.uniprot.org/core/>\n\nSELECT\n  ?protein\n  ?orthoGroup\n  ?scientificName\n  ?functionComment\n  ?prefferedGeneName\n  ((STRLEN(?value) - ?medianLength) as ?deviationFromMedianLength)\nWHERE\n{\n  uniprotkb:P05067 a up:Protein ;\n        up:organism/up:scientificName ?scientificName ;\n        rdfs:seeAlso ?orthoGroup ;\n        up:encodedBy/skos:prefLabel ?prefferedGeneName ;\n          up:sequence/rdf:value ?value .\n  OPTIONAL {\n    ?protein up:annotation ?functionAnnotation .\n    ?functionAnnotation a up:Function_Annotation ;\n      rdfs:comment ?functionComment .\n  }\n  SERVICE <https://sparql.orthodb.org/sparql>{\n    ?orthoGroup orthodb:ogMedianProteinLength ?medianLength .\n    ?orthoGroup orthodb:hasMember ?xref .\n    ?xref orthodb:xref/orthodb:xrefResource uniprotkb:P05067 .\n  }\n}\nLIMIT 985915",
    "target_endpoint": "https://sparql.uniprot.org/sparql/",
    "federates_with": [
      "https://sparql.orthodb.org/sparql"
    ],
    "endpoint_set": "Uniprot",
    "file_path": "UniProt/36_orthologous_proteins_via_orthodb.ttl",
    "predicted_query": "# https://sparql.uniprot.org/sparql\n# Find orthologous proteins for UniProtKB entry P05067\n\nSELECT DISTINCT ?orthologousProtein ?geneName ?organismName\nWHERE {\n  # Find proteins that are related to P05067\n  VALUES ?uniprotID { \"P05067\" }\n  SERVICE <https://sparql.uniprot.org/sparql> {\n    ?protein a up:Protein ;\n             rdfs:seeAlso ?orthologousProtein . # Look for related proteins\n\n    ?protein up:database ?dbRef .\n    ?dbRef rdfs:label ?dbName .\n    FILTER (CONTAINS(LCASE(?dbName), \"orthodb\")) # Filter for orthodb related entries\n\n    #Get gene name and organism\n    ?protein up:gene ?gene .\n    ?gene up:geneName ?geneName .\n    ?protein up:organism ?organism .\n    ?organism rdfs:label ?organismName .\n\n    FILTER regex(str(?protein), ?uniprotID) #Filter for the uniprot id\n  }\n\n}\nLIMIT 100",
    "predicted_endpoint": "https://sparql.uniprot.org/sparql",
    "predicted_endpoint_equal_to_target_endpoint": true,
    "predicted_endpoint_in_federates_with": false,
    "predicted_endpoint_or_federated_endpoint": true,
    "run_id_langsmith": "261b1156-2fdc-406d-b369-fb17d2288bb7",
    "evaluation_timestamp": "2025-04-22T19:31:34.199452",
    "question_understanding_tokens": 267,
    "question_understanding_completion_tokens": 44,
    "question_understanding_total_tokens": 311,
    "sparql_construction_prompt_tokens": 2462,
    "sparql_construction_completion_tokens": 0,
    "sparql_construction_total_tokens": 2462,
    "is_valid_sparql": false,
    "sparql_syntax_error": "Line 9, column 16: Unresolved prefixed name: up:Protein",
    "ground_truth_query_result_is_empty": null,
    "result_eval_f1_score": 0.0,
    "result_eval_precision": 0.0,
    "result_eval_recall": 0.0,
    "error_occured_at_endpoint": true,
    "predicted_query_result_is_empty": true,
    "error_occured_at_endpoint_message": "Line 9, column 16: Unresolved prefixed name: up:Protein"
  },
  {
    "resource": "https://sparql.uniprot.org/.well-known/sparql-examples/60",
    "natural_language_question": "Find human proteins that catalyze reactions where substrates or product have a <a href=\"https://www.ebi.ac.uk/chebi/searchId.do?chebiId=CHEBI:35516\">Cholestane skeleton</a>",
    "ground_truth_query": "PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX rh: <http://rdf.rhea-db.org/>\nPREFIX sachem: <http://bioinfo.uochb.cas.cz/rdf/v1.0/sachem#>\nPREFIX taxon: <http://purl.uniprot.org/taxonomy/>\nPREFIX up: <http://purl.uniprot.org/core/>\n\nSELECT\n  DISTINCT\n    ?protein\n    ?disease\n    ?rhea\n    ?chebi\n    ?omim\nWHERE {\n    # Find complete ChEBIs with a Cholestane skeleton, via the Czech Elixir node IDSM Sachem chemical substructure search.\n    SERVICE <https://idsm.elixir-czech.cz/sparql/endpoint/chebi> {\n      ?chebi sachem:substructureSearch [\n        sachem:query\n\"[C@]12(CCC3CCCC[C@]3(C)[C@@]1([H])CC[C@]1(C)[C@@]([H])([C@@](C)([H])CCCC(C)C)CC[C@@]21[H])[H]\"\n].\n   }\n   # Use the fact that UniProt catalytic activities are annotated using Rhea \n   # Mapping the found ChEBIs to Rhea reactions\n   SERVICE <https://sparql.rhea-db.org/sparql>{\n     ?rhea rh:side/rh:contains/rh:compound/rdfs:subClassOf ?chebi .\n   }\n   # Match the found Rhea reactions with human UniProtKB proteins\n   ?protein up:annotation/up:catalyticActivity/up:catalyzedReaction ?rhea .\n   ?protein up:organism taxon:9606 .\n   # Find only those human entries that have an annotated related disease, and optionaly map these to OMIM\n   ?protein up:annotation/up:disease ?disease .\n   OPTIONAL {\n     ?disease rdfs:seeAlso ?omim .\n     ?omim up:database <http://purl.uniprot.org/database/MIM>\n   }\n}",
    "target_endpoint": "https://sparql.uniprot.org/sparql/",
    "federates_with": [
      "https://idsm.elixir-czech.cz/sparql/endpoint/chebi",
      "https://sparql.rhea-db.org/sparql"
    ],
    "endpoint_set": "Uniprot",
    "file_path": "UniProt/60_enzymes_working_on_substrate_with_Cholestene_backbone.ttl",
    "predicted_query": "# https://sparql.uniprot.org/sparql\nPREFIX rhea: <http://rdf.rhea-db.org/>\nPREFIX chebi: <http://purl.obolibrary.org/obo/CHEBI_>\nPREFIX up: <http://purl.uniprot.org/core/>\n\nSELECT DISTINCT ?protein ?proteinName ?reaction\nWHERE {\n  # Find human proteins in UniProt\n  SERVICE <https://sparql.uniprot.org/sparql> {\n    ?protein a up:Protein .\n    ?protein up:organism <http://purl.uniprot.org/taxonomy/9606> . # human\n    ?protein rdfs:label ?proteinName .\n  }\n\n  # Link to reactions in Rhea\n  SERVICE <https://sparql.rhea-db.org/sparql> {\n    ?reaction rhea:direction rhea:bidirectional ;\n              rhea:status rhea:approved ;\n              rhea:substrate ?substrate ;\n              rhea:product ?product .\n    \n    #Filter for proteins that participate in a reaction as catalyst\n    ?protein rhea:enzyme ?reaction .\n    \n    #Check if the substrate or product has the desired ChEBI ID\n    FILTER ( ?substrate = chebi:35516  || ?product = chebi:35516 )\n  }\n}",
    "predicted_endpoint": "https://sparql.uniprot.org/sparql",
    "predicted_endpoint_equal_to_target_endpoint": true,
    "predicted_endpoint_in_federates_with": false,
    "predicted_endpoint_or_federated_endpoint": true,
    "run_id_langsmith": "8f8fe24d-7c41-44a5-a98e-1a86eed7b7e3",
    "evaluation_timestamp": "2025-04-22T19:31:48.792106",
    "question_understanding_tokens": 286,
    "question_understanding_completion_tokens": 38,
    "question_understanding_total_tokens": 324,
    "sparql_construction_prompt_tokens": 3477,
    "sparql_construction_completion_tokens": 549,
    "sparql_construction_total_tokens": 4026,
    "is_valid_sparql": false,
    "sparql_syntax_error": "Line 12, column 14: Unresolved prefixed name: rdfs:label",
    "ground_truth_query_result_is_empty": null,
    "result_eval_f1_score": 0.0,
    "result_eval_precision": 0.0,
    "result_eval_recall": 0.0,
    "error_occured_at_endpoint": true,
    "predicted_query_result_is_empty": true,
    "error_occured_at_endpoint_message": "Line 12, column 14: Unresolved prefixed name: rdfs:label"
  },
  {
    "resource": "https://sparql.uniprot.org/.well-known/sparql-examples/70_enzymes_interacting_with_molecules_similar_to_dopamine",
    "natural_language_question": "Look for enzymes catalyzing reactions with molecules similar to dopamine.",
    "ground_truth_query": "PREFIX CHEBI: <http://purl.obolibrary.org/obo/CHEBI_>\nPREFIX rh: <http://rdf.rhea-db.org/>\nPREFIX sachem: <http://bioinfo.uochb.cas.cz/rdf/v1.0/sachem#>\nPREFIX up: <http://purl.uniprot.org/core/>\n\nSELECT\n  ?protein\n  ?rhea\n  ?chebi\nWHERE {\n  # Use the smiles of dopamine CHEBI:18243\n  SERVICE <https://idsm.elixir-czech.cz/sparql/endpoint/chebi>{\n    ?chebi sachem:similarCompoundSearch [\n      sachem:query \"NCCc1ccc(O)c(O)c1\" ] .\n  }\n  GRAPH<https://sparql.rhea-db.org/rhea>{\n    ?rhea rh:side/rh:contains/rh:compound ?compound .\n    ?compound (rh:chebi|(rh:reactivePart/rh:chebi)|(rh:underlyingChebi/rh:chebi)) ?chebi .\n  }\n  ?protein up:reviewed true ;\n    up:annotation ?caa .\n  ?caa up:catalyticActivity/up:catalyzedReaction ?rhea .\n}",
    "target_endpoint": "https://sparql.uniprot.org/sparql/",
    "federates_with": [
      "https://idsm.elixir-czech.cz/sparql/endpoint/chebi"
    ],
    "endpoint_set": "Uniprot",
    "file_path": "UniProt/70_enzymes_interacting_with_molecules_similar_to_dopamine.ttl",
    "predicted_query": "# https://sparql.rhea-db.org/sparql\nPREFIX rhea: <http://rdf.rhea-db.org/>\nPREFIX chebi: <http://purl.obolibrary.org/obo/CHEBI_>\nPREFIX uniprot: <http://purl.uniprot.org/core/>\n\nSELECT DISTINCT ?enzyme ?enzymeName ?reaction\nWHERE {\n  # Query Rhea for reactions involving dopamine or similar molecules\n  SERVICE <https://sparql.rhea-db.org/sparql> {\n    ?reaction a rhea:Reaction .\n    ?reaction rhea:hasParticipant ?participant .\n\n    # Find reactions with dopamine as a participant\n    {\n      ?participant chebi:CHEBI_ID \"CHEBI:17553\" . # Dopamine CHEBI ID\n    }\n    UNION\n    {\n       #Find reactions with molecules similar to dopamine (e.g., using a broader search for catecholamines)\n       ?participant chebi:is_a  chebi:CHEBI_13291 . # Catecholamine CHEBI ID\n    }\n\n    ?reaction rhea:catalyzedBy ?enzymeUri .\n  }\n\n  #Federate with UniProt to get enzyme names/identifiers\n  SERVICE <https://sparql.uniprot.org/sparql> {\n    ?enzymeUri a uniprot:Protein ;\n               uniprot:recommendedName ?recName .\n    ?recName uniprot:fullName ?enzymeName .\n    BIND(strafter(str(?enzymeUri), \"protein/\") AS ?enzyme) #Extract UniProt accession from URI\n  }\n}",
    "predicted_endpoint": "https://sparql.rhea-db.org/sparql",
    "predicted_endpoint_equal_to_target_endpoint": false,
    "predicted_endpoint_in_federates_with": false,
    "predicted_endpoint_or_federated_endpoint": false,
    "run_id_langsmith": "d76aeaea-9283-44b7-8546-42c354633016",
    "evaluation_timestamp": "2025-04-22T19:31:58.961840",
    "question_understanding_tokens": 243,
    "question_understanding_completion_tokens": 26,
    "question_understanding_total_tokens": 269,
    "sparql_construction_prompt_tokens": 2084,
    "sparql_construction_completion_tokens": 0,
    "sparql_construction_total_tokens": 2084,
    "is_valid_sparql": true,
    "sparql_syntax_error": "syntactically correct",
    "ground_truth_query_result_is_empty": false,
    "result_eval_f1_score": 0.0,
    "result_eval_precision": 0.0,
    "result_eval_recall": 0.0,
    "error_occured_at_endpoint": false,
    "predicted_query_result_is_empty": true,
    "error_occured_at_endpoint_message": "no error, but empty result"
  },
  {
    "resource": "https://sparql.uniprot.org/.well-known/sparql-examples/38",
    "natural_language_question": "For the human entry P05067 (Amyloid-beta precursor protein) find the gene start ends in WikiData",
    "ground_truth_query": "PREFIX p: <http://www.wikidata.org/prop/>\nPREFIX pq: <http://www.wikidata.org/prop/qualifier/>\nPREFIX ps: <http://www.wikidata.org/prop/statement/>\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX uniprotkb: <http://purl.uniprot.org/uniprot/>\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\n\n\nSELECT \n\t?protein \n\t?begin\n\t?end\n\t?chromosome\n\t?assembly\nWHERE {\n    {\n        BIND(uniprotkb:P05067 AS ?proteinIRI)\n        BIND (SUBSTR(STR(?proteinIRI), STRLEN(STR(uniprotkb:))+1) AS ?protein)\n    }\n    SERVICE <https://query.wikidata.org/sparql> {\n        ?wp wdt:P352 ?protein ;\n            wdt:P702 ?wg . \n        ?wg p:P644   ?wgss .\n        ?wgss ps:P644        ?begin ;\n          pq:P1057/wdt:P1813 ?chromosome ;\n          pq:P659/rdfs:label ?assembly .\n        ?wg p:P645 ?wgse .\n        ?wgse ps:P645        ?end ;\n          pq:P1057/wdt:P1813 ?chromosome ;\n          pq:P659/rdfs:label ?assembly .\n        FILTER(lang(?assembly) = \"en\")\n  } \n}",
    "target_endpoint": "https://sparql.uniprot.org/sparql/",
    "federates_with": [
      "https://query.wikidata.org/sparql"
    ],
    "endpoint_set": "Uniprot",
    "file_path": "UniProt/38_find_gene_region_in_wikidata_for_known_entry.ttl",
    "predicted_query": "# https://sparql.uniprot.org/sparql\n# Find the gene start and end positions for the human protein P05067 (Amyloid-beta precursor protein)\nPREFIX up: <http://purl.uniprot.org/core/>\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\n\nSELECT ?protein ?gene ?geneStart ?geneEnd\nWHERE {\n  # Filter for the specific UniProt protein entry\n  VALUES ?protein { <http://purl.uniprot.org/uniprot/P05067> }\n\n  # Find the corresponding gene\n  ?protein a up:Protein ;\n           up:encodedBy ?gene .\n\n  # Attempt to retrieve gene start and end positions.\n  # This part might require further refinement based on the actual data structure in UniProt.\n  # If UniProt doesn't directly expose gene start/end, we might need to explore cross-references\n  # to other databases (e.g., via up:database or similar properties) and federate with them.\n\n  OPTIONAL {\n    ?gene up:geneLocationStart ?geneStart ;\n          up:geneLocationEnd ?geneEnd .\n  }\n  # Placeholder for potential federation with other databases if the above fails.\n  # Example:\n  # SERVICE <https://query.wikidata.org/sparql> {\n  #   ?wikidataGene wdt:P352 ?gene . # Example property, adjust if needed\n  #   ?wikidataGene wdt:PXXX ?geneStart . # Example property, adjust if needed\n  #   ?wikidataGene wdt:PYYY ?geneEnd . # Example property, adjust if needed\n  #   FILTER(STR(?gene) = \"some_gene_identifier\") # Replace with actual gene identifier from UniProt\n  # }\n}",
    "predicted_endpoint": "https://sparql.uniprot.org/sparql",
    "predicted_endpoint_equal_to_target_endpoint": true,
    "predicted_endpoint_in_federates_with": false,
    "predicted_endpoint_or_federated_endpoint": true,
    "run_id_langsmith": "fb638729-ea64-425a-a373-d68e3614d681",
    "evaluation_timestamp": "2025-04-22T19:32:13.406028",
    "question_understanding_tokens": 256,
    "question_understanding_completion_tokens": 50,
    "question_understanding_total_tokens": 306,
    "sparql_construction_prompt_tokens": 2084,
    "sparql_construction_completion_tokens": 0,
    "sparql_construction_total_tokens": 2084,
    "is_valid_sparql": true,
    "sparql_syntax_error": "syntactically correct",
    "ground_truth_query_result_is_empty": false,
    "result_eval_f1_score": 0.0,
    "result_eval_precision": 0.0,
    "result_eval_recall": 0.0,
    "error_occured_at_endpoint": false,
    "predicted_query_result_is_empty": false,
    "error_occured_at_endpoint_message": "no error"
  },
  {
    "resource": "https://sparql.uniprot.org/.well-known/sparql-examples/117_biosodafrontend_glioblastoma_orthologs_rat",
    "natural_language_question": "Which are the proteins associated with glioblastoma and the orthologs expressed in the rat brain?",
    "ground_truth_query": "PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX obo: <http://purl.obolibrary.org/obo/>\nPREFIX orth: <http://purl.org/net/orth#>\nPREFIX sio: <http://semanticscience.org/resource/>\nPREFIX taxon: <http://purl.uniprot.org/taxonomy/>\nPREFIX up: <http://purl.uniprot.org/core/>\nPREFIX lscr: <http://purl.org/lscr#>\nPREFIX genex: <http://purl.org/genex#>\nSELECT DISTINCT ?protein ?orthologous_protein ?gene ?annotation_text WHERE {\n  {\n  \tSELECT ?protein ?annotation_text WHERE {\n      ?protein a up:Protein ;\n          up:organism taxon:9606 ;\n          up:annotation ?annotation .\n      ?annotation rdfs:comment ?annotation_text .\n      ?annotation a up:Disease_Annotation .\n      FILTER CONTAINS (?annotation_text, \"glioblastoma\")\n    }\n  }\n  SERVICE <https://sparql.omabrowser.org/sparql/> {\n    SELECT ?orthologous_protein ?protein ?gene WHERE {\n    ?protein_OMA a orth:Protein .\n    ?orthologous_protein a orth:Protein .\n    ?cluster a orth:OrthologsCluster .\n    ?cluster orth:hasHomologousMember ?node1 .\n    ?cluster\n    orth:hasHomologousMember ?node2 .\n    ?node2 orth:hasHomologousMember* ?protein_OMA .\n    ?node1 orth:hasHomologousMember* ?orthologous_protein .\n    ?orthologous_protein orth:organism/obo:RO_0002162 taxon:10116 . # rattus norvegicus\n    ?orthologous_protein sio:SIO_010079 ?gene .\n    ?protein_OMA lscr:xrefUniprot ?protein .\n    FILTER(?node1 != ?node2)\n\t\t}\n\t}\n  SERVICE <https://www.bgee.org/sparql/> {\n    ?gene genex:isExpressedIn ?a .\n    ?a rdfs:label \"brain\" .\n    ?gene orth:organism ?s . \n    ?s obo:RO_0002162 taxon:10116.\n\t}\n}",
    "target_endpoint": "https://sparql.uniprot.org/sparql",
    "federates_with": [
      "https://sparql.omabrowser.org/sparql/",
      "https://www.bgee.org/sparql/"
    ],
    "endpoint_set": "Uniprot",
    "file_path": "UniProt/117_biosodafrontend_glioblastoma_orthologs_rat.ttl",
    "predicted_query": "# https://sparql.uniprot.org/sparql\n# Find proteins associated with glioblastoma and the orthologs expressed in the rat brain\n\nSELECT DISTINCT ?protein ?proteinName ?geneName\nWHERE {\n  # Find proteins associated with glioblastoma\n  VALUES ?disease { <http://purl.uniprot.org/diseases/2566> } # Glioma disease URI\n  ?protein wdt:disease ?disease .\n  ?protein rdfs:label ?proteinName .\n  ?protein wdt:gene ?gene .\n  ?gene rdfs:label ?geneName .\n\n  # Filter by proteins expressed in rat brain (Rattus norvegicus) and find orthologs\n  VALUES ?taxon { <http://purl.uniprot.org/taxonomy/10116> }  # Rattus norvegicus taxonomy URI\n  ?protein wdt:organism ?taxon .\n\n  # Optional: Further filter for proteins that are orthologs (if the data model explicitly links orthologs)\n  #Might need additional SERVICE clause if ortholog relationship is in another database and not directly linked in UniProt.\n  \n}",
    "predicted_endpoint": "https://sparql.uniprot.org/sparql",
    "predicted_endpoint_equal_to_target_endpoint": true,
    "predicted_endpoint_in_federates_with": false,
    "predicted_endpoint_or_federated_endpoint": true,
    "run_id_langsmith": "cdf96c90-5a76-40fd-b2f1-32d0f6a0a478",
    "evaluation_timestamp": "2025-04-22T19:32:30.077182",
    "question_understanding_tokens": 250,
    "question_understanding_completion_tokens": 37,
    "question_understanding_total_tokens": 287,
    "sparql_construction_prompt_tokens": 2527,
    "sparql_construction_completion_tokens": 413,
    "sparql_construction_total_tokens": 2940,
    "is_valid_sparql": false,
    "sparql_syntax_error": "Line 8, column 12: Unresolved prefixed name: wdt:disease",
    "ground_truth_query_result_is_empty": null,
    "result_eval_f1_score": 0.0,
    "result_eval_precision": 0.0,
    "result_eval_recall": 0.0,
    "error_occured_at_endpoint": true,
    "predicted_query_result_is_empty": true,
    "error_occured_at_endpoint_message": "Line 8, column 12: Unresolved prefixed name: wdt:disease"
  },
  {
    "resource": "https://sparql.uniprot.org/.well-known/sparql-examples/116_biosodafrontend_rabit_mouse_orthologs",
    "natural_language_question": "Rabbit's proteins encoded by genes that are orthologous to Mouse's HBB-Y gene and their cross reference links to Uniprot",
    "ground_truth_query": "PREFIX lscr: <http://purl.org/lscr#>\nPREFIX orth: <http://purl.org/net/orth#>\nPREFIX up: <http://purl.uniprot.org/core/>\nPREFIX obo: <http://purl.obolibrary.org/obo/>\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nSELECT DISTINCT ?PROTEIN_1 ?PROTEIN_2 ?UNIPROT_XREF_1 ?UNIPROT_XREF_2 WHERE {\n\t?taxon_1 up:commonName 'Mouse' .\n\t?taxon_2 up:commonName 'Rabbit' .\n\tSERVICE <https://sparql.omabrowser.org/sparql/> {\n\t\t?cluster a orth:OrthologsCluster .\n\t\t?cluster orth:hasHomologousMember ?node1 .\n\t\t?cluster orth:hasHomologousMember ?node2 .\n\t\t?node2 orth:hasHomologousMember* ?PROTEIN_2 .\n\t\t?node1 orth:hasHomologousMember* ?PROTEIN_1 .\n\t\t?PROTEIN_1 a orth:Protein .\n\t\t?PROTEIN_1 orth:organism/obo:RO_0002162 ?taxon_1 ;\n\t\t\trdfs:label 'HBB-Y' ;\n\t\t\tlscr:xrefUniprot ?UNIPROT_XREF_1 .\n\t\t?PROTEIN_2 a orth:Protein .\n\t\t?PROTEIN_2 orth:organism/obo:RO_0002162 ?taxon_2 .\n\t\t?PROTEIN_2 lscr:xrefUniprot ?UNIPROT_XREF_2 .\n\t\tFILTER ( ?node1 != ?node2 )\n\t}\n}",
    "target_endpoint": "https://sparql.uniprot.org/sparql",
    "federates_with": [
      "https://sparql.omabrowser.org/sparql/"
    ],
    "endpoint_set": "Uniprot",
    "file_path": "UniProt/116_biosodafrontend_rabit_mouse_orthologs.ttl",
    "predicted_query": "# https://sparql.uniprot.org/sparql\n# Find Rabbit proteins that are encoded by genes orthologous to Mouse HBB-Y gene and retrieve their UniProt cross-references.\nPREFIX up: <http://purl.uniprot.org/core/>\nPREFIX taxon: <http://purl.uniprot.org/taxonomy/>\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\n\nSELECT DISTINCT ?rabbitProtein ?geneName ?crossRefDb ?crossRefId\nWHERE {\n  # Find Rabbit proteins\n  ?rabbitProtein a up:Protein .\n  ?rabbitProtein up:organism taxon:2697570 . # Rabbit Taxonomy ID\n\n  # Get the gene name associated with the protein\n  ?rabbitProtein up:encodedBy ?gene .\n  ?gene rdfs:label ?geneName .\n\n  # Attempt to find a direct orthology link (This assumes UniProt might have some orthology data, which is unlikely but we check)\n  #OPTIONAL {\n  #  ?gene up:orthologousTo ?mouseGene .\n  #  ?mouseGene rdfs:label \"HBB-Y\" .  # Assuming \"HBB-Y\" is the gene symbol\n  #}\n\n  # Find cross-references\n  ?rabbitProtein up:database ?crossRef .\n  ?crossRef rdfs:label ?crossRefDb .\n  ?crossRef up:identifier ?crossRefId .\n\n  # SERVICE <external_orthology_db_endpoint> {  # If an external orthology DB is available\n  #   # Query the external DB to link Rabbit genes to Mouse HBB-Y gene\n  #   ?rabbitGene equivalentTo ?mouseGene .\n  #   ?mouseGene rdfs:label \"HBB-Y\" .\n  #   ?rabbitGene rdfs:label ?geneName .\n  # }\n\n  #FILTER EXISTS {  # This is a placeholder; replace with actual orthology query if possible\n  #  # Logic to check for genes orthologous to Mouse HBB-Y\n  #  # Requires a service call to an external orthology database (e.g., eggNOG, OrthoDB)\n  #  # For example (hypothetical):\n  #  # SERVICE <orthology_db_endpoint> {\n  #  #   ?rabbitGene orthologousTo ?mouseHBBYGene .\n  #  #   ?mouseHBBYGene rdfs:label \"HBB-Y\" .\n  #  #   ?rabbitGeneEquivalent uniprot:gene .  # Assuming a link to UniProt gene\n  #  #   FILTER (?rabbitGeneEquivalent = ?gene)\n  #  # }\n  #}\n\n  FILTER (CONTAINS(lcase(?geneName), \"hbb\")) # Very broad filter as a placeholder.\n}",
    "predicted_endpoint": "https://sparql.uniprot.org/sparql",
    "predicted_endpoint_equal_to_target_endpoint": true,
    "predicted_endpoint_in_federates_with": false,
    "predicted_endpoint_or_federated_endpoint": true,
    "run_id_langsmith": "e857e2c0-08b8-422f-b1ef-feed2b3e6146",
    "evaluation_timestamp": "2025-04-22T19:32:53.280881",
    "question_understanding_tokens": 261,
    "question_understanding_completion_tokens": 49,
    "question_understanding_total_tokens": 310,
    "sparql_construction_prompt_tokens": 3408,
    "sparql_construction_completion_tokens": 832,
    "sparql_construction_total_tokens": 4240,
    "is_valid_sparql": true,
    "sparql_syntax_error": "syntactically correct",
    "ground_truth_query_result_is_empty": false,
    "result_eval_f1_score": 0.0,
    "result_eval_precision": 0.0,
    "result_eval_recall": 0.0,
    "error_occured_at_endpoint": false,
    "predicted_query_result_is_empty": true,
    "error_occured_at_endpoint_message": "no error, but empty result"
  },
  {
    "resource": "https://sparql.uniprot.org/.well-known/sparql-examples/29",
    "natural_language_question": "Use <a href=\"http://allie.dbcls.jp/\">ALLIE</a> a service for Abbreviation / Long Form in Japanese and English to search in UniProt using Japanese.",
    "ground_truth_query": "PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX up: <http://purl.uniprot.org/core/>\n\nSELECT ?protein ?englishLabelStr\nWHERE {\n    SERVICE <https://data.allie.dbcls.jp/sparql>{\n        ?x rdfs:label \"アミロイド前駆体タンパク質\"@ja ;\n            rdfs:label ?englishLabel .\n        FILTER(lang(?englishLabel) = \"en\")\n    }\n    BIND (STR(?englishLabel) AS ?englishLabelStr)\n    ?protein a up:Protein .\n    {\n        ?protein (up:recommendedName|up:alternativeName) ?structuredName .\n    }\n    UNION\n    {\n        VALUES(?partType){(up:domain) (up:component)}\n            ?protein ?partType ?part .\n        ?part (up:recommendedName|up:alternativeName) ?structuredName .\n    }\n    ?structuredName ?anyKindOfName  ?englishLabelStr .\n    ?anyKindOfName rdfs:subPropertyOf up:structuredNameType .\n}",
    "target_endpoint": "https://sparql.uniprot.org/sparql/",
    "federates_with": [
      "https://data.allie.dbcls.jp/sparql"
    ],
    "endpoint_set": "Uniprot",
    "file_path": "UniProt/29_search_uniprot_in_japanese_with_allie.ttl",
    "predicted_query": "# https://sparql.uniprot.org/sparql\n# Attempting to find UniProt entries that might have Japanese related information.\n# This query assumes that there might be labels or comments in Japanese.\n# Note: This is a general approach as direct ALLIE integration is not possible via SPARQL.\n\nSELECT DISTINCT ?entity ?label\nWHERE {\n  # Search for any entity in UniProt with a label.\n  ?entity rdfs:label ?label .\n  \n  # Filter for labels that are likely in Japanese.\n  # This is a basic filter and might need refinement based on actual data.\n  FILTER (lang(?label) = \"ja\")\n}\nLIMIT 100",
    "predicted_endpoint": "https://sparql.uniprot.org/sparql",
    "predicted_endpoint_equal_to_target_endpoint": true,
    "predicted_endpoint_in_federates_with": false,
    "predicted_endpoint_or_federated_endpoint": true,
    "run_id_langsmith": "d9f84c58-215a-4030-9a3b-cff3fbbe102f",
    "evaluation_timestamp": "2025-04-22T19:33:04.450326",
    "question_understanding_tokens": 272,
    "question_understanding_completion_tokens": 27,
    "question_understanding_total_tokens": 299,
    "sparql_construction_prompt_tokens": 1708,
    "sparql_construction_completion_tokens": 0,
    "sparql_construction_total_tokens": 1708,
    "is_valid_sparql": false,
    "sparql_syntax_error": "Line 9, column 11: Unresolved prefixed name: rdfs:label",
    "ground_truth_query_result_is_empty": null,
    "result_eval_f1_score": 0.0,
    "result_eval_precision": 0.0,
    "result_eval_recall": 0.0,
    "error_occured_at_endpoint": true,
    "predicted_query_result_is_empty": true,
    "error_occured_at_endpoint_message": "Line 9, column 11: Unresolved prefixed name: rdfs:label"
  },
  {
    "resource": "https://sparql.rhea-db.org/.well-known/sparql-examples/94_Select_all_approved_reactions_with_CHEBI_or_one_of_its_descendant_optional_UniProtKB_reviewed_EC",
    "natural_language_question": "Select all approved reactions with CHEBI:17815 (a 1,2-diacyl-sn-glycerol) or one of its descendant. Display links to UniProtKB/Swiss-Prot entries via EC numbers if the link rhea-ec exists.",
    "ground_truth_query": "PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX rh:<http://rdf.rhea-db.org/>\nPREFIX CHEBI:<http://purl.obolibrary.org/obo/CHEBI_>\nPREFIX up:<http://purl.uniprot.org/core/>\n\nSELECT\n  distinct\n    ?reaction\n    ?enzyme\n    (count(distinct ?protein) as ?proteinCount)\nWHERE {\n  ?reaction rdfs:subClassOf rh:Reaction .\n  ?reaction rh:status rh:Approved .\n  ?reaction rh:side ?reactionSide .\n\n  OPTIONAL {?reaction rh:ec ?enzyme .\n    SERVICE <https://sparql.uniprot.org/sparql> {\n      ?protein up:reviewed true .\n      ?protein up:enzyme ?enzyme.\n    }\n  } .\n  ?reactionSide rh:contains ?participant .\n  ?participant rh:compound ?compound .\n  ?compound rh:chebi ?chebi .\n  ?chebi rdfs:subClassOf* CHEBI:17815 .\n}\nGROUP BY ?reaction ?enzyme\nORDER BY ?reaction\nLIMIT 985915",
    "target_endpoint": "https://sparql.rhea-db.org/sparql",
    "federates_with": [
      "https://sparql.uniprot.org/sparql"
    ],
    "endpoint_set": "Rhea",
    "file_path": "Rhea/94_Select_all_approved_reactions_with_CHEBI_or_one_of_its_descendant_optional_UniProtKB_reviewed_EC.ttl",
    "predicted_query": "# https://sparql.rhea-db.org/sparql\n# Find reactions in RheaDB involving CHEBI:17815 or its descendants, and link to UniProtKB/Swiss-Prot entries via EC numbers.\nPREFIX rhea: <http://rdf.rhea-db.org/>\n\n\nSELECT DISTINCT ?reaction ?reactionName ?uniprotLink\nWHERE {\n  # Find CHEBI descendants of CHEBI:17815\n  SERVICE <https://sparql.rhea-db.org/sparql> {\n    VALUES ?chebiParent { <http://purl.obolibrary.org/obo/CHEBI_17815> } #CHEBI:17815\n    ?chebi a rhea:Chebi ;\n           rhea:chebiId ?chebiParent .\n    # Find reactions involving the CHEBI entity or its descendants.\n      ?reaction rhea:has_reactant ?chebi ;\n                rhea:equation ?reactionName .\n\n      FILTER regex(?reactionName, \"approved\", \"i\") #Filter for approved reactions\n      OPTIONAL {\n        ?reaction rhea:ec ?ec . # Get EC number if available\n      }\n  }\n  # Link to UniProtKB/Swiss-Prot via EC numbers\n  OPTIONAL {\n    SERVICE <https://sparql.uniprot.org/sparql> {\n      ?uniprotLink <http://purl.uniprot.org/core/annotation> ?annot .\n      ?annot <http://purl.uniprot.org/core/classifiedWith> ?ec .\n    }\n  }\n}",
    "predicted_endpoint": "https://sparql.rhea-db.org/sparql",
    "predicted_endpoint_equal_to_target_endpoint": true,
    "predicted_endpoint_in_federates_with": false,
    "predicted_endpoint_or_federated_endpoint": true,
    "run_id_langsmith": "aa5cb6e9-8660-41cd-bbf9-65f5add0eaf3",
    "evaluation_timestamp": "2025-04-22T19:33:16.477107",
    "question_understanding_tokens": 288,
    "question_understanding_completion_tokens": 71,
    "question_understanding_total_tokens": 359,
    "sparql_construction_prompt_tokens": 1815,
    "sparql_construction_completion_tokens": 0,
    "sparql_construction_total_tokens": 1815,
    "is_valid_sparql": true,
    "sparql_syntax_error": "syntactically correct",
    "ground_truth_query_result_is_empty": false,
    "result_eval_f1_score": 0.0,
    "result_eval_precision": 0.0,
    "result_eval_recall": 0.0,
    "error_occured_at_endpoint": true,
    "predicted_query_result_is_empty": true,
    "error_occured_at_endpoint_message": "QueryBadFormed: A bad request has been sent to the endpoint: probably the SPARQL query is badly formed."
  },
  {
    "resource": "https://sparql.rhea-db.org/.well-known/sparql-examples/11",
    "natural_language_question": "Distribution of reactions according to the first class of the enzyme classification (federated query)",
    "ground_truth_query": "PREFIX ec: <http://purl.uniprot.org/enzyme/>\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX rh: <http://rdf.rhea-db.org/>\nPREFIX skos: <http://www.w3.org/2004/02/skos/core#>\n\n# Query 11\n# Retrieve the count of reactions mapped to each level (main class) of the enzyme classification\n#\n# This query mimics the Filter section of the Rhea website (Browse all reactions)\n# https://www.rhea-db.org/rhea?query=\nSELECT ?ecClass (STR(?ecName) AS ?ecClassName) (COUNT(?rhea) AS ?rheaCount)\nWHERE {\n  SERVICE <https://sparql.uniprot.org/sparql> {\n    VALUES (?ecClass) { (ec:1.-.-.-)(ec:2.-.-.-)(ec:3.-.-.-)(ec:4.-.-.-)(ec:5.-.-.-) (ec:6.-.-.-) (ec:7.-.-.-)}\n    ?ecNumber rdfs:subClassOf ?ecClass .\n    ?ecClass skos:prefLabel ?ecName .\n  }\n  ?rhea rdfs:subClassOf rh:Reaction .\n  ?rhea rh:ec ?ecNumber .\n} GROUP BY ?ecClass ?ecName",
    "target_endpoint": "https://sparql.rhea-db.org/sparql",
    "federates_with": [
      "https://sparql.uniprot.org/sparql"
    ],
    "endpoint_set": "Rhea",
    "file_path": "Rhea/11.ttl",
    "predicted_query": "# https://sparql.uniprot.org/sparql\n# Query to find the distribution of reactions according to the first class of the enzyme classification\n\nSELECT ?firstECClass (COUNT(DISTINCT ?reaction) AS ?reactionCount)\nWHERE {\n  # Get enzyme - EC class from Uniprot\n  SERVICE <https://sparql.uniprot.org/sparql> {\n    ?enzyme uniprot:enzymeEC1stLevel ?firstECClass .\n  }\n  # Get reaction - enzyme from Rhea\n  SERVICE <https://sparql.rhea-db.org/sparql> {\n    ?reaction rhea:enzyme ?enzyme .\n  }\n}\nGROUP BY ?firstECClass\nORDER BY DESC(?reactionCount)",
    "predicted_endpoint": "https://sparql.uniprot.org/sparql",
    "predicted_endpoint_equal_to_target_endpoint": false,
    "predicted_endpoint_in_federates_with": true,
    "predicted_endpoint_or_federated_endpoint": true,
    "run_id_langsmith": "cf3e4f7a-df52-4666-8247-e30318b84085",
    "evaluation_timestamp": "2025-04-22T19:33:26.002176",
    "question_understanding_tokens": 246,
    "question_understanding_completion_tokens": 26,
    "question_understanding_total_tokens": 272,
    "sparql_construction_prompt_tokens": 1351,
    "sparql_construction_completion_tokens": 0,
    "sparql_construction_total_tokens": 1351,
    "is_valid_sparql": false,
    "sparql_syntax_error": "Line 8, column 13: Unresolved prefixed name: uniprot:enzymeEC1stLevel",
    "ground_truth_query_result_is_empty": null,
    "result_eval_f1_score": 0.0,
    "result_eval_precision": 0.0,
    "result_eval_recall": 0.0,
    "error_occured_at_endpoint": true,
    "predicted_query_result_is_empty": true,
    "error_occured_at_endpoint_message": "Line 8, column 13: Unresolved prefixed name: uniprot:enzymeEC1stLevel"
  },
  {
    "resource": "https://sparql.rhea-db.org/.well-known/sparql-examples/109_Distribution_of_reactions_according_to_the_first_level_of_enzyme_classification",
    "natural_language_question": "Distribution of reactions according to the first level of enzyme classification",
    "ground_truth_query": "\nPREFIX rh:<http://rdf.rhea-db.org/>\nPREFIX ec:<http://purl.uniprot.org/enzyme/>\nPREFIX rdfs:<http://www.w3.org/2000/01/rdf-schema#>\nPREFIX skos:<http://www.w3.org/2004/02/skos/core#>\n\nSELECT\n  ?ecClass\n  (str(?ecName) as ?ecClassName)\n  (count(?reaction) as ?reactionCount)\nWHERE\n{\n  SERVICE <http://sparql.uniprot.org/sparql> {\n    VALUES (?ecClass) { (ec:1.-.-.-)(ec:2.-.-.-)(ec:3.-.-.-)(ec:4.-.-.-)(ec:5.-.-.-) (ec:6.-.-.-) (ec:7.-.-.-) }\n    ?ecNumber rdfs:subClassOf ?ecClass .\n    ?ecClass skos:prefLabel ?ecName .\n  }\n  ?reaction rdfs:subClassOf rh:Reaction .\n  ?reaction rh:ec ?ecNumber .\n}\nGROUP BY ?ecClass ?ecName\n",
    "target_endpoint": "https://sparql.rhea-db.org/sparql",
    "federates_with": [
      "http://sparql.uniprot.org/sparql"
    ],
    "endpoint_set": "Rhea",
    "file_path": "Rhea/109_Distribution_of_reactions_according_to_the_first_level_of_enzyme_classification.ttl",
    "predicted_query": "# https://sparql.rhea-db.org/sparql\n# Querying Rhea DB to find reactions and link them to enzyme classifications, if available.\nPREFIX rhea: <http://rdf.rhea-db.org/>\nPREFIX chebi: <http://purl.obolibrary.org/obo/CHEBI_>\nPREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>\nPREFIX ec: <http://purl.uniprot.org/enzyme/>\n\nSELECT (COUNT(DISTINCT ?reaction) AS ?reactionCount) ?enzymeClass\nWHERE {\n  # Query Rhea for reactions\n  SERVICE <https://sparql.rhea-db.org/sparql> {\n    ?reaction a rhea:Reaction .\n    ?reaction rhea:equation ?equation .\n  }\n  \n  # Attempt to link reactions to UniProt via Rhea's cross-references (if available)\n  OPTIONAL {\n    SERVICE <https://sparql.uniprot.org/sparql> {\n       ?uniprot rdf:type <http://purl.uniprot.org/core/Protein> .\n       ?uniprot <http://purl.uniprot.org/core/enzymeClassification> ?enzymeClass .\n       # Use a FILTER to link UniProt entries to Rhea reactions (hypothetical link via CHEBI, needs verification)\n       #FILTER EXISTS { ?reaction rhea:hasChEBIEntity ?chebiEntity . ?chebiEntity chebi:is_conjugate_acid_of ?uniprot . }  \n    }\n  }\n\n  #If no direct link, try to find EnzymeClassification via Rhea participants and ChEBI\n  OPTIONAL{\n     SERVICE <https://sparql.uniprot.org/sparql>{\n        ?uniprot rdf:type <http://purl.uniprot.org/core/Protein> .\n        ?uniprot <http://purl.uniprot.org/core/enzymeClassification> ?enzymeClass .\n       \n        #Attempt 1\n        #FILTER EXISTS {?reaction rhea:hasChEBIEntity ?chebiEntity . ?chebiEntity chebi:is_a ?uniprot .}\n\n        #Attempt 2\n        #FILTER EXISTS {?reaction rhea:hasInvolved ?chebiEntity . ?chebiEntity chebi:is_a ?uniprot .}\n       \n     }\n  }\n  \n  FILTER (STRSTARTS(str(?enzymeClass), \"http://purl.uniprot.org/enzyme/\")) # Ensure the enzymeClass is from UniProt\n}\nGROUP BY ?enzymeClass\nORDER BY DESC(?reactionCount)",
    "predicted_endpoint": "https://sparql.rhea-db.org/sparql",
    "predicted_endpoint_equal_to_target_endpoint": true,
    "predicted_endpoint_in_federates_with": false,
    "predicted_endpoint_or_federated_endpoint": true,
    "run_id_langsmith": "dcc3eb2a-691a-4df7-aff3-18a9d57b4167",
    "evaluation_timestamp": "2025-04-22T19:33:37.089972",
    "question_understanding_tokens": 243,
    "question_understanding_completion_tokens": 26,
    "question_understanding_total_tokens": 269,
    "sparql_construction_prompt_tokens": 1937,
    "sparql_construction_completion_tokens": 841,
    "sparql_construction_total_tokens": 2778,
    "is_valid_sparql": true,
    "sparql_syntax_error": "syntactically correct",
    "ground_truth_query_result_is_empty": false,
    "result_eval_f1_score": 0.0,
    "result_eval_precision": 0.0,
    "result_eval_recall": 0.0,
    "error_occured_at_endpoint": false,
    "predicted_query_result_is_empty": true,
    "error_occured_at_endpoint_message": "no error, but empty result"
  },
  {
    "resource": "https://sparql.rhea-db.org/.well-known/sparql-examples/12",
    "natural_language_question": "Select all Rhea reactions linked to protein sequences (enzymes and transporters) in UniProtKB",
    "ground_truth_query": "PREFIX rh: <http://rdf.rhea-db.org/>\nPREFIX up: <http://purl.uniprot.org/core/>\n\n# Query 12\n# Select all Rhea reactions used to annotate enzyme sequences in UniProtKB\n# return the number of UniProtKB entries\n# Federated query using a service to UniProt SPARQL endpoint\n#\n# This query corresponds to the Rhea website query:\n# https://www.rhea-db.org/rhea?query=uniprot:*\n#\nSELECT ?uniprotCount ?rhea ?accession ?equation \nWHERE {\n  SERVICE <https://sparql.uniprot.org/sparql> { \n  \tSELECT ?rhea (count(?uniprot) as ?uniprotCount) {\n      ?uniprot up:annotation/up:catalyticActivity/up:catalyzedReaction ?rhea . \n  \t}\n  \tGROUP BY ?rhea\n  }\n  ?rhea rh:accession ?accession .\n  ?rhea rh:equation ?equation .\n}",
    "target_endpoint": "https://sparql.rhea-db.org/sparql",
    "federates_with": [
      "https://sparql.uniprot.org/sparql"
    ],
    "endpoint_set": "Rhea",
    "file_path": "Rhea/12.ttl",
    "predicted_query": "# https://sparql.uniprot.org/sparql\n# Retrieve Rhea reactions linked to protein sequences in UniProtKB\n\nSELECT DISTINCT ?protein ?rheaReaction\nWHERE {\n  ?protein a <http://purl.uniprot.org/core/Protein> . # Select only proteins\n  ?protein rdfs:seeAlso ?rheaID . # Look for cross-references.  Adapt the property if needed.\n\n  # Query the Rhea endpoint to retrieve reaction information\n  SERVICE <https://sparql.rhea-db.org/sparql> {\n    ?rheaReaction rdfs:seeAlso ?rheaID . # Find Rhea reactions by identifier\n  }\n}",
    "predicted_endpoint": "https://sparql.uniprot.org/sparql",
    "predicted_endpoint_equal_to_target_endpoint": false,
    "predicted_endpoint_in_federates_with": true,
    "predicted_endpoint_or_federated_endpoint": true,
    "run_id_langsmith": "b675557c-f16d-42fc-a465-5ad30e62a124",
    "evaluation_timestamp": "2025-04-22T19:33:50.606995",
    "question_understanding_tokens": 250,
    "question_understanding_completion_tokens": 30,
    "question_understanding_total_tokens": 280,
    "sparql_construction_prompt_tokens": 1773,
    "sparql_construction_completion_tokens": 0,
    "sparql_construction_total_tokens": 1773,
    "is_valid_sparql": false,
    "sparql_syntax_error": "Line 7, column 12: Unresolved prefixed name: rdfs:seeAlso",
    "ground_truth_query_result_is_empty": null,
    "result_eval_f1_score": 0.0,
    "result_eval_precision": 0.0,
    "result_eval_recall": 0.0,
    "error_occured_at_endpoint": true,
    "predicted_query_result_is_empty": true,
    "error_occured_at_endpoint_message": "Line 7, column 12: Unresolved prefixed name: rdfs:seeAlso"
  },
  {
    "resource": "https://sparql.rhea-db.org/.well-known/sparql-examples/112_Total_number_of_reaction_ec_protein_links",
    "natural_language_question": "Total number of <reaction> <ec> <protein> links",
    "ground_truth_query": "PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX rh:<http://rdf.rhea-db.org/>\nPREFIX ec:<http://purl.uniprot.org/enzyme/>\nPREFIX up:<http://purl.uniprot.org/core/>\n\nSELECT\n  (count(?reaction) as ?reactionEcProteinLinkCount)\nWHERE {\n  ?reaction rdfs:subClassOf rh:Reaction .\n  ?reaction rh:ec ?enzyme\n  SERVICE <http://sparql.uniprot.org/sparql> {\n    ?protein up:reviewed true .\n    ?protein up:enzyme ?enzyme.\n  }\n}",
    "target_endpoint": "https://sparql.rhea-db.org/sparql",
    "federates_with": [
      "http://sparql.uniprot.org/sparql"
    ],
    "endpoint_set": "Rhea",
    "file_path": "Rhea/112_Total_number_of_reaction_ec_protein_links.ttl",
    "predicted_query": "# https://sparql.rhea-db.org/sparql\n# Count the number of reactions, proteins and EC number links.\nSELECT (COUNT(DISTINCT ?rhea_reaction) AS ?totalReactions)\nWHERE {\n  # Find Rhea reactions that have EC number annotations.\n  ?rhea_reaction rdfs:subClassOf* rhea:Reaction .\n  SERVICE <https://sparql.uniprot.org/sparql> {\n    # Find proteins that have EC number annotations and link them to Rhea reactions via EC number.\n    ?protein rdfs:label ?ecNumber . # Assuming rdfs:label holds the EC number.  May need to adjust based on UniProt schema.\n    ?protein a up:Protein . # Ensure we are dealing with proteins.\n    FILTER (REGEX(?ecNumber, \"^[0-9]+\\\\.[0-9]+\\\\.[0-9]+\\\\.[0-9]+$\")) #EC numbers have this format\n  }\n  ?rhea_reaction rhea:ec ?ecNumber . # Link Rhea reactions to EC numbers.\n}",
    "predicted_endpoint": "https://sparql.rhea-db.org/sparql",
    "predicted_endpoint_equal_to_target_endpoint": true,
    "predicted_endpoint_in_federates_with": false,
    "predicted_endpoint_or_federated_endpoint": true,
    "run_id_langsmith": "312b7a8b-3289-49c3-8ac5-60d4041d7eeb",
    "evaluation_timestamp": "2025-04-22T19:34:09.295195",
    "question_understanding_tokens": 241,
    "question_understanding_completion_tokens": 21,
    "question_understanding_total_tokens": 262,
    "sparql_construction_prompt_tokens": 1913,
    "sparql_construction_completion_tokens": 0,
    "sparql_construction_total_tokens": 1913,
    "is_valid_sparql": false,
    "sparql_syntax_error": "Line 6, column 18: Unresolved prefixed name: rdfs:subClassOf",
    "ground_truth_query_result_is_empty": null,
    "result_eval_f1_score": 0.0,
    "result_eval_precision": 0.0,
    "result_eval_recall": 0.0,
    "error_occured_at_endpoint": true,
    "predicted_query_result_is_empty": true,
    "error_occured_at_endpoint_message": "Line 6, column 18: Unresolved prefixed name: rdfs:subClassOf"
  },
  {
    "resource": "https://sparql.rhea-db.org/.well-known/sparql-examples/19_draft_human_metabolome",
    "natural_language_question": "Generate a draft human metabolome",
    "ground_truth_query": "PREFIX chebislash: <http://purl.obolibrary.org/obo/chebi/>\nPREFIX rh: <http://rdf.rhea-db.org/>\nPREFIX taxon: <http://purl.uniprot.org/taxonomy/>\nPREFIX up: <http://purl.uniprot.org/core/>\n\nSELECT\n  ?uniprot ?mnemonic ?rhea ?chebi ?smiles ?inchiKey\nWHERE\n{\n  ?rhea rh:side/rh:contains/rh:compound ?compound .\n  ?compound (rh:chebi|(rh:reactivePart/rh:chebi)|(rh:underlyingChebi/rh:chebi)) ?chebi .\n  ?chebi chebislash:smiles ?smiles ;\n          chebislash:inchikey ?inchiKey .\n  SERVICE <https://sparql.uniprot.org/sparql> {\n     ?uniprot up:annotation/up:catalyticActivity/up:catalyzedReaction ?rhea ;\n                                             up:organism taxon:9606 ;\n                                             up:mnemonic ?mnemonic .\n\n   }\n}",
    "target_endpoint": "https://sparql.rhea-db.org/sparql/",
    "federates_with": [
      "https://sparql.uniprot.org/sparql"
    ],
    "endpoint_set": "Rhea",
    "file_path": "Rhea/19_draft_human_metabolome.ttl",
    "predicted_query": "# https://sparql.uniprot.org/sparql\n# This query retrieves metabolites associated with human proteins and their reactions.\nSELECT DISTINCT ?metabolite ?reaction\nWHERE {\n  # Find human proteins (Homo sapiens)\n  SERVICE <https://sparql.uniprot.org/sparql> {\n    SELECT DISTINCT ?protein\n    WHERE {\n      ?protein a <http://purl.uniprot.org/core/Protein> .\n      ?protein <http://purl.uniprot.org/core/organism> ?organism .\n      ?organism <http://purl.uniprot.org/core/scientificName> \"Homo sapiens\" .\n    }\n  }\n  \n  # Connect proteins to metabolites (This is a simplified example, might need further refinement)\n  # This part assumes a direct link between proteins and metabolites, which might not be directly available in UniProt.\n  # A more accurate approach would involve querying for enzymes and then their substrates/products.\n  # The following triples are placeholders and need to be adjusted based on the actual UniProt schema.\n  \n  # SERVICE <https://sparql.uniprot.org/sparql> {\n  #   ?protein <http://example.org/interactsWith> ?metabolite .  # Replace with the actual property\n  # }\n  \n  # Use Rhea to find reactions involving these metabolites (This requires linking metabolites to Rhea IDs)\n  SERVICE <https://sparql.rhea-db.org/sparql> {\n    # This is a placeholder and needs to be adjusted based on how metabolites are represented in Rhea.\n    # It assumes a direct link between metabolite names and Rhea reactions.\n    ?reaction rdfs:label ?reactionLabel .\n    FILTER (contains(lcase(?reactionLabel), lcase(?metabolite))) # approximate filtering, needs better mapping\n  }\n  \n  # OPTIONAL: Include lipid-related metabolites from SwissLipids (if applicable)\n  # SERVICE <https://sparql.swisslipids.org/sparql/> {\n  #   ?lipid a <http://www.swisslipids.org/rdf/SwissLipids#Lipid> .\n  #   FILTER (contains(lcase(?lipid), lcase(?metabolite)))\n  # }\n  \n  BIND (\"unknown metabolite\" AS ?metabolite) # place holder because uniprot doesnt have direct metabolite annotations.\n}",
    "predicted_endpoint": "https://sparql.uniprot.org/sparql",
    "predicted_endpoint_equal_to_target_endpoint": false,
    "predicted_endpoint_in_federates_with": true,
    "predicted_endpoint_or_federated_endpoint": true,
    "run_id_langsmith": "7135862c-f923-487c-865a-b263e3f0dc19",
    "evaluation_timestamp": "2025-04-22T19:34:24.056589",
    "question_understanding_tokens": 236,
    "question_understanding_completion_tokens": 20,
    "question_understanding_total_tokens": 256,
    "sparql_construction_prompt_tokens": 1286,
    "sparql_construction_completion_tokens": 0,
    "sparql_construction_total_tokens": 1286,
    "is_valid_sparql": false,
    "sparql_syntax_error": "Line 28, column 15: Unresolved prefixed name: rdfs:label",
    "ground_truth_query_result_is_empty": null,
    "result_eval_f1_score": 0.0,
    "result_eval_precision": 0.0,
    "result_eval_recall": 0.0,
    "error_occured_at_endpoint": true,
    "predicted_query_result_is_empty": true,
    "error_occured_at_endpoint_message": "Line 28, column 15: Unresolved prefixed name: rdfs:label"
  },
  {
    "resource": "https://sparql.rhea-db.org/.well-known/sparql-examples/20_search_chemical_names_in_japanese",
    "natural_language_question": "Search for Chemical names starting in Japanese, translated to english using allie",
    "ground_truth_query": "PREFIX oboInOwl: <http://www.geneontology.org/formats/oboInOwl#>\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\n\nSELECT\n*\nWHERE {\nSERVICE <https://data.allie.dbcls.jp/sparql>{\n        ?x rdfs:label \"1,2,4-トリクロロベンゼン\"@ja ;\n            rdfs:label ?englishLabel .\n        FILTER(lang(?englishLabel) = \"en\")\n    }\n  BIND(STR(?englishLabel) AS ?englishLabelStr)\n  ?chebi rdfs:label|oboInOwl:hasSynonym ?englishLabelStr .\n}",
    "target_endpoint": "https://sparql.rhea-db.org/sparql/",
    "federates_with": [
      "https://data.allie.dbcls.jp/sparql"
    ],
    "endpoint_set": "Rhea",
    "file_path": "Rhea/20_search_chemical_names_in_japanese.ttl",
    "predicted_query": "# https://sparql.uniprot.org/sparql\n# Search for chemicals with names starting with \"Japanese\" and attempt to retrieve English translations\n\nSELECT DISTINCT ?chebiNameEn ?chebiURI\nWHERE {\n  {\n    SERVICE <https://sparql.rhea-db.org/sparql> {\n      ?chebiURI rdf:type <http://purl.obolibrary.org/obo/CHEBI_24431> . # Focus on chemical entities\n      ?chebiURI rdfs:label ?chebiName .\n      FILTER STRSTARTS(lcase(?chebiName), \"japanese\") # Filter names starting with \"Japanese\" (case-insensitive)\n      hint:Prioritized  rdfs:label ?chebiNameEn . # Retrieve prioritized English labels using hint:Prioritized\n    }\n  }\n  UNION\n  {\n    SERVICE <https://sparql.swisslipids.org/sparql/> {\n      ?lipidURI rdf:type <http://www.swisslipids.org/rdf/SwissLipids#Lipid> . # Focus on lipids\n      ?lipidURI rdfs:label ?lipidName .\n      FILTER STRSTARTS(lcase(?lipidName), \"japanese\") # Filter names starting with \"Japanese\" (case-insensitive)\n      hint:Prioritized  rdfs:label ?chebiNameEn . # Retrieve prioritized English labels using hint:Prioritized\n       BIND (?lipidURI AS ?chebiURI)\n    }\n  }\n}\nLIMIT 100",
    "predicted_endpoint": "https://sparql.uniprot.org/sparql",
    "predicted_endpoint_equal_to_target_endpoint": false,
    "predicted_endpoint_in_federates_with": false,
    "predicted_endpoint_or_federated_endpoint": false,
    "run_id_langsmith": "36dc6d6b-3072-46b8-9b73-a6e05985a940",
    "evaluation_timestamp": "2025-04-22T19:34:35.936658",
    "question_understanding_tokens": 242,
    "question_understanding_completion_tokens": 23,
    "question_understanding_total_tokens": 265,
    "sparql_construction_prompt_tokens": 1313,
    "sparql_construction_completion_tokens": 0,
    "sparql_construction_total_tokens": 1313,
    "is_valid_sparql": false,
    "sparql_syntax_error": "Line 8, column 17: Unresolved prefixed name: rdf:type",
    "ground_truth_query_result_is_empty": null,
    "result_eval_f1_score": 0.0,
    "result_eval_precision": 0.0,
    "result_eval_recall": 0.0,
    "error_occured_at_endpoint": true,
    "predicted_query_result_is_empty": true,
    "error_occured_at_endpoint_message": "Line 8, column 17: Unresolved prefixed name: rdf:type"
  },
  {
    "resource": "https://sparql.rhea-db.org/.well-known/sparql-examples/117_Retrieve_parent_reactions_and_their_catalyzing_enzymes_for_a_metabolite_that_is_not_directly_involved_in_a_reaction",
    "natural_language_question": "Retrieve parent reactions (and their catalyzing enzymes) for a metabolite that is not directly involved in a reaction (ex: CHEBI:83137).",
    "ground_truth_query": "PREFIX CHEBI: <http://purl.obolibrary.org/obo/CHEBI_>\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX rh:<http://rdf.rhea-db.org/>\nPREFIX ec:<http://purl.uniprot.org/enzyme/>\nPREFIX up:<http://purl.uniprot.org/core/>\nPREFIX taxon:<http://purl.uniprot.org/taxonomy/>\nPREFIX keywords:<http://purl.uniprot.org/keywords/>\n\nSELECT\n  ?chebi\n  ?ecNumber\n  (count(?protein) as ?proteinCount)\n  ?reaction\n  ?equation\nWHERE {\n  ?reaction rdfs:subClassOf rh:Reaction .\n  ?reaction rh:status rh:Approved .\n  ?reaction rh:equation ?equation .\n  ?reaction rh:ec ?ecNumber .\n  ?reaction rh:side ?reactionSide .\n  ?reactionSide rh:contains ?participant .\n  ?participant rh:compound ?compound .\n  ?compound rh:chebi ?chebi .\n  CHEBI:83137 rdfs:subClassOf+ ?chebi.\n\n  SERVICE <https://sparql.uniprot.org/sparql> {\n  ?protein a up:Protein .\n  ?protein up:reviewed true .\n    {?protein up:enzyme ?ecNumber}\n  UNION\n    {?protein up:domain/up:enzyme ?ecNumber}\n  UNION\n    {?protein up:component/up:enzyme ?ecNumber} .\n  }\n} \nGROUP BY ?chebi ?ecNumber ?reaction ?equation",
    "target_endpoint": "https://sparql.rhea-db.org/sparql",
    "federates_with": [
      "https://sparql.uniprot.org/sparql"
    ],
    "endpoint_set": "Rhea",
    "file_path": "Rhea/117_Retrieve_parent_reactions_and_their_catalyzing_enzymes_for_a_metabolite_that_is_not_directly_involved_in_a_reaction.ttl",
    "predicted_query": "# https://sparql.rhea-db.org/sparql\n# Find reactions where CHEBI:83137 is NOT a reactant or product, and optionally find catalyzing enzymes from UniProt.\nPREFIX rhea: <http://rdf.rhea-db.org/>\nPREFIX chebi: <http://purl.obolibrary.org/obo/CHEBI_>\nPREFIX uniprot: <http://purl.uniprot.org/core/>\n\nSELECT DISTINCT ?reaction ?reactionID ?enzyme ?enzymeName\nWHERE {\n  # Find reactions that do NOT have CHEBI:83137 as a participant (reactant or product)\n  ?reaction a rhea:Reaction .\n  ?reaction rhea:id ?reactionID .\n\n  FILTER NOT EXISTS {\n    { ?reaction rhea: Rhea_has_a_reactant chebi:83137 . }\n    UNION\n    { ?reaction rhea: Rhea_has_a_product chebi:83137 . }\n  }\n\n  # Optionally find catalyzing enzymes for the reaction in UniProt\n  OPTIONAL {\n    SERVICE <https://sparql.uniprot.org/sparql> {\n      ?enzyme uniprot:catalyticActivity ?reactionID .  # Assuming uniprot:catalyticActivity links to Rhea reaction IDs\n      ?enzyme rdfs:label ?enzymeName .\n    }\n  }\n}",
    "predicted_endpoint": "https://sparql.rhea-db.org/sparql",
    "predicted_endpoint_equal_to_target_endpoint": true,
    "predicted_endpoint_in_federates_with": false,
    "predicted_endpoint_or_federated_endpoint": true,
    "run_id_langsmith": "f89992d7-e819-49dc-ab05-3e630644f2cb",
    "evaluation_timestamp": "2025-04-22T19:34:56.660030",
    "question_understanding_tokens": 261,
    "question_understanding_completion_tokens": 42,
    "question_understanding_total_tokens": 303,
    "sparql_construction_prompt_tokens": 2467,
    "sparql_construction_completion_tokens": 485,
    "sparql_construction_total_tokens": 2952,
    "is_valid_sparql": false,
    "sparql_syntax_error": "Lexical error at line 14, column 42.  Encountered: '32' (32), after prefix \"Rhea_has_a_reactant\"",
    "ground_truth_query_result_is_empty": null,
    "result_eval_f1_score": 0.0,
    "result_eval_precision": 0.0,
    "result_eval_recall": 0.0,
    "error_occured_at_endpoint": true,
    "predicted_query_result_is_empty": true,
    "error_occured_at_endpoint_message": "Lexical error at line 14, column 42.  Encountered: '32' (32), after prefix \"Rhea_has_a_reactant\""
  },
  {
    "resource": "https://sparql.rhea-db.org/.well-known/sparql-examples/18",
    "natural_language_question": "Use <a href=\"https://idsm.elixir-czech.cz/sparql\">IDSM Sachem</a> to find ChEBIs with a a <a href=\"https://www.ebi.ac.uk/chebi/searchId.do?chebiId=CHEBI:35516\">Cholestane</a> skeleton (in SMILES). Then match returned ChEBIs to Rhea undirected reactions.",
    "ground_truth_query": "PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX rh: <http://rdf.rhea-db.org/>\nPREFIX sachem: <http://bioinfo.uochb.cas.cz/rdf/v1.0/sachem#>\n\n\nSELECT \n  ?rhea \n  ?chebi\nWHERE {\n  SERVICE <https://idsm.elixir-czech.cz/sparql/endpoint/chebi> {\n    ?chebi sachem:substructureSearch [\n        sachem:query \"[C@]12(CCC3CCCC[C@]3(C)[C@@]1([H])CC[C@]1(C)[C@@]([H])([C@@](C)([H])CCCC(C)C)CC[C@@]21[H])[H]\" ].\n  }\n  ?rhea rh:side/rh:contains/rh:compound/rdfs:subClassOf ?chebi .\n}",
    "target_endpoint": "https://sparql.rhea-db.org/sparql",
    "federates_with": [
      "https://idsm.elixir-czech.cz/sparql/endpoint/chebi"
    ],
    "endpoint_set": "Rhea",
    "file_path": "Rhea/18.ttl",
    "predicted_query": "# https://idsm.elixir-czech.cz/sparql\n# Find ChEBIs with a Cholestane skeleton (CHEBI:35516) from IDSM Sachem and then match to Rhea undirected reactions.\nSELECT DISTINCT ?reaction\nWHERE {\n  # Query IDSM Sachem to find ChEBIs with the specified SMILES structure\n  SERVICE <https://idsm.elixir-czech.cz/sparql> {\n    SELECT DISTINCT ?chebi_id WHERE {\n      ?structure a <http://www.w3.org/2004/02/skos/core#Concept> .\n      ?structure <http://www.w3.org/2004/02/skos/core#exactMatch> <http://purl.obolibrary.org/obo/CHEBI_35516> . # Cholestane\n      BIND(STRAFTER(STR(?structure), 'CHEBI_') AS ?chebi_id)\n    }\n  }\n\n  # Use the found ChEBI IDs to query Rhea for reactions\n  SERVICE <https://sparql.rhea-db.org/sparql> {\n    ?reaction rdfs:type <http://rdf.rhea-db.org/Reaction> .\n    ?reaction rhea:equation ?equation .\n    ?equation rhea:hasPart ?participant .\n    ?participant rhea:hasChEBI  ?chebi .\n    FILTER(STR(?chebi) = concat(\"http://purl.obolibrary.org/obo/CHEBI_\", ?chebi_id))\n   }\n}",
    "predicted_endpoint": "https://idsm.elixir-czech.cz/sparql",
    "predicted_endpoint_equal_to_target_endpoint": false,
    "predicted_endpoint_in_federates_with": false,
    "predicted_endpoint_or_federated_endpoint": false,
    "run_id_langsmith": "7f6f39e8-ad16-421c-8b8f-5bda2b6a270e",
    "evaluation_timestamp": "2025-04-22T19:35:14.218107",
    "question_understanding_tokens": 325,
    "question_understanding_completion_tokens": 51,
    "question_understanding_total_tokens": 376,
    "sparql_construction_prompt_tokens": 2240,
    "sparql_construction_completion_tokens": 0,
    "sparql_construction_total_tokens": 2240,
    "is_valid_sparql": false,
    "sparql_syntax_error": "Line 16, column 15: Unresolved prefixed name: rdfs:type",
    "ground_truth_query_result_is_empty": null,
    "result_eval_f1_score": 0.0,
    "result_eval_precision": 0.0,
    "result_eval_recall": 0.0,
    "error_occured_at_endpoint": true,
    "predicted_query_result_is_empty": true,
    "error_occured_at_endpoint_message": "Line 16, column 15: Unresolved prefixed name: rdfs:type"
  },
  {
    "resource": "https://sparql.rhea-db.org/.well-known/sparql-examples/115_Retrieve_the_set_of_metabolites_involved_in_reactions_catalyzed_by_human_genes_HUMAN_reference_proteome",
    "natural_language_question": "Retrieve the set of metabolites involved in reactions catalyzed by human genes (HUMAN reference proteome)",
    "ground_truth_query": "\nPREFIX rh:<http://rdf.rhea-db.org/>\nPREFIX taxon:<http://purl.uniprot.org/taxonomy/>\nPREFIX ec:<http://purl.uniprot.org/enzyme/>\nPREFIX rdfs:<http://www.w3.org/2000/01/rdf-schema#>\nPREFIX up:<http://purl.uniprot.org/core/>\nPREFIX keywords:<http://purl.uniprot.org/keywords/>\n\nSELECT\n  ?chebi\n  ?reaction\n  ?ecNumber\n  ?protein\n  ?ensemblTranscript\n  ?ensemblGene\nWHERE {\n  SERVICE <https://sparql.uniprot.org/sparql> {\n    ?protein a up:Protein .\n    ?protein up:reviewed true .\n    ?protein up:organism taxon:9606 .\n    ?protein up:classifiedWith keywords:1185 .\n\n    ?protein rdfs:seeAlso ?ensemblTranscript .\n    ?ensemblTranscript a up:Transcript_Resource .\n    ?ensemblTranscript up:database <http://purl.uniprot.org/database/Ensembl> .\n    ?ensemblTranscript up:transcribedFrom ?ensemblGene .\n\n      {?protein up:enzyme ?ecNumber .}\n    UNION\n      {?protein up:domain/up:enzyme ?ecNumber .}\n    UNION\n      {?protein up:component/up:enzyme ?ecNumber .}\n  }\n\n  ?reaction rdfs:subClassOf rh:Reaction .\n  ?reaction rh:status rh:Approved .\n  ?reaction rh:ec ?ecNumber .\n  ?reaction rh:side ?reactionSide .\n  ?reactionSide rh:contains ?participant .\n  ?participant rh:compound ?compound .\n  ?compound rh:chebi ?chebi . # only considering small molecules participants\n}",
    "target_endpoint": "https://sparql.rhea-db.org/sparql",
    "federates_with": [
      "https://sparql.uniprot.org/sparql"
    ],
    "endpoint_set": "Rhea",
    "file_path": "Rhea/115_Retrieve_the_set_of_metabolites_involved_in_reactions_catalyzed_by_human_genes_HUMAN_reference_proteome.ttl",
    "predicted_query": "# https://sparql.uniprot.org/sparql\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX up: <http://purl.uniprot.org/core/>\nPREFIX uniprot: <http://purl.uniprot.org/uniprot/>\n\nSELECT DISTINCT ?metabolite ?reaction\nWHERE {\n  # Find human proteins in UniProt\n  SERVICE <https://sparql.uniprot.org/sparql> {\n    ?protein a up:Protein ;\n             up:organism uniprot:9606 .  # 9606 is the UniProt taxonomy ID for Homo sapiens (human)\n    ?protein rdfs:seeAlso ?rhea .        # Link to Rhea ID\n    FILTER (CONTAINS(str(?rhea), \"rhea.db.org\")) # Ensure it's a Rhea URI\n  }\n\n  # From Rhea, get the metabolites involved in the reaction\n  SERVICE <https://sparql.rhea-db.org/sparql> {\n    BIND (IRI(REPLACE(str(?rhea), \"http://purl.uniprot.org/database/RheaID-\", \"http://rdf.rhea-db.org/\")) AS ?reaction) # Construct the Rhea reaction URI\n    ?reaction rdfs:comment ?metabolite .  # Get metabolites associated with the reaction.  This assumes that metabolites are described in the rdfs:comment\n  }\n}",
    "predicted_endpoint": "https://sparql.uniprot.org/sparql",
    "predicted_endpoint_equal_to_target_endpoint": false,
    "predicted_endpoint_in_federates_with": true,
    "predicted_endpoint_or_federated_endpoint": true,
    "run_id_langsmith": "b2b1d237-dd87-44c6-a425-b45c2f7ce142",
    "evaluation_timestamp": "2025-04-22T19:35:26.993515",
    "question_understanding_tokens": 250,
    "question_understanding_completion_tokens": 28,
    "question_understanding_total_tokens": 278,
    "sparql_construction_prompt_tokens": 2382,
    "sparql_construction_completion_tokens": 485,
    "sparql_construction_total_tokens": 2867,
    "is_valid_sparql": true,
    "sparql_syntax_error": "syntactically correct",
    "ground_truth_query_result_is_empty": false,
    "result_eval_f1_score": 0.0,
    "result_eval_precision": 0.0,
    "result_eval_recall": 0.0,
    "error_occured_at_endpoint": true,
    "predicted_query_result_is_empty": true,
    "error_occured_at_endpoint_message": "QueryBadFormed: A bad request has been sent to the endpoint: probably the SPARQL query is badly formed."
  }
]