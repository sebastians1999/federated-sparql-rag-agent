
# Natural Language Question
# =======================
Select all Rhea reactions linked to protein sequences (enzymes and transporters) in UniProtKB

# Target Endpoint
# ===============
https://sparql.rhea-db.org/sparql

# Ground Truth Query
# =================
PREFIX rh: <http://rdf.rhea-db.org/>
PREFIX up: <http://purl.uniprot.org/core/>

# Query 12
# Select all Rhea reactions used to annotate enzyme sequences in UniProtKB
# return the number of UniProtKB entries
# Federated query using a service to UniProt SPARQL endpoint
#
# This query corresponds to the Rhea website query:
# https://www.rhea-db.org/rhea?query=uniprot:*
#
SELECT ?uniprotCount ?rhea ?accession ?equation 
WHERE {
  SERVICE <https://sparql.uniprot.org/sparql> { 
  	SELECT ?rhea (count(?uniprot) as ?uniprotCount) {
      ?uniprot up:annotation/up:catalyticActivity/up:catalyzedReaction ?rhea . 
  	}
  	GROUP BY ?rhea
  }
  ?rhea rh:accession ?accession .
  ?rhea rh:equation ?equation .
}

# Predicted Query
# ==============
# https://sparql.rhea-db.org/sparql
PREFIX rhea: <http://rdf.rhea-db.org/>
PREFIX uniprot: <http://purl.uniprot.org/core/>

SELECT DISTINCT ?rheaReaction
WHERE {
  SERVICE <https://sparql.rhea-db.org/sparql> {
    ?rheaReaction a rhea:Reaction .
    # Link Rhea reactions to UniProt proteins via enzyme annotation.  This assumes a direct link exists.
    ?rheaReaction rhea:enzyme ?enzyme . # Assuming rhea:enzyme links to enzyme information.  Adjust if needed.

    SERVICE <https://sparql.uniprot.org/sparql> {
      ?enzyme a uniprot:Protein . # Ensure it's a protein.
      # Further refine to enzymes or transporters if possible using UniProt properties.
      # Example:  FILTER (EXISTS { ?enzyme uniprot:classifiedWith <http://purl.uniprot.org/keywords/KW-0244> . })  # Enzyme keyword.  Adjust as needed.
      # Example:  FILTER (EXISTS { ?enzyme uniprot:classifiedWith <http://purl.uniprot.org/keywords/KW-0813> . })  # Transporter keyword. Adjust as needed.
    }
  }
}
