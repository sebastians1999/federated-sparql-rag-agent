
# Natural Language Question
# =======================
Connect patents cited in UniProtKB with those in the patent database at EPO via publication number.

# Target Endpoint
# ===============
https://sparql.uniprot.org/sparql/

# Ground Truth Query
# =================
PREFIX patent: <http://data.epo.org/linked-data/def/patent/>
PREFIX skos: <http://www.w3.org/2004/02/skos/core#>
PREFIX up: <http://purl.uniprot.org/core/>

SELECT ?citation ?patent ?application ?applicationNo
WHERE
{
  ?citation a up:Patent_Citation ;
    skos:exactMatch ?patent .
  FILTER(CONTAINS(STR(?patent), 'EP'))
  BIND(SUBSTR(STR(?patent), 35) AS ?applicationNo)
  SERVICE <https://data.epo.org/linked-data/query>{
    ?application patent:publicationNumber ?applicationNo
  }
}

# Predicted Query
# ==============
# https://sparql.uniprot.org/sparql
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
PREFIX up: <http://purl.uniprot.org/core/>

SELECT ?uniprotEntry ?patentPublicationNumber ?epoPatent
WHERE {
  # Query UniProtKB for entries and their cited patents
  SERVICE <https://sparql.uniprot.org/sparql> {
    ?uniprotEntry a up:Protein .
    ?uniprotEntry up:citation ?citation .
    ?citation rdfs:comment ?patentPublicationNumber . # Assuming rdfs:comment holds the patent publication number.  This might need adjustment based on the actual UniProt schema.
    FILTER (REGEX(?patentPublicationNumber, "^[A-Z0-9]+$")) # Filter to ensure it looks like a patent number
  }

  # Query the EPO endpoint using the patent publication number
  SERVICE <http://example.org/epo/sparql> {  # Placeholder EPO endpoint.  Replace with the actual EPO SPARQL endpoint if available.
    ?epoPatent <http://example.org/epo/schema/publicationNumber> ?patentPublicationNumber . # Assuming this property links to the publication number.  Adjust based on the actual EPO schema.
  }
}
