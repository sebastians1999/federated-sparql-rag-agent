[
  {
    "resource": "https://sparql.swisslipids.org/.well-known/sparql-examples/16",
    "natural_language_question": "For a given lipid (SWISSLIPID:000399814, Ceramide), return a list of all enzymes in UniProtKB/Swiss-Prot annotated to catalyze reactions involving that lipid.\nThis query does not consider the hierarchy: it looks for reactions and enzymes only for the specified lipid.",
    "ground_truth_query": "PREFIX SWISSLIPID: <https://swisslipids.org/rdf/SLM_>\nPREFIX owl: <http://www.w3.org/2002/07/owl#>\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX rh: <http://rdf.rhea-db.org/>\nPREFIX up: <http://purl.uniprot.org/core/>\n\n# Example 16\nSELECT ?startId ?startName ?uniprot\nWHERE\n{\n  # SwissLipids query (list of) identifier(s)\n  VALUES ?startId { SWISSLIPID:000399814 }\n  # name\n  ?startId rdfs:label ?startName .\n  # ChEBI x-ref\n  ?startId owl:equivalentClass ?chebi .\n  # federated query to Rhea\n  SERVICE <https://sparql.rhea-db.org/sparql> {\n  \t?rhea rh:side/rh:contains/rh:compound/rh:chebi ?chebi .\n  }    \n  # federated query to UniProt\n  SERVICE <https://sparql.uniprot.org/sparql> {\n    ?uniprot up:reviewed true .\n    ?uniprot up:annotation/up:catalyticActivity/up:catalyzedReaction ?rhea .\n  }\n} \nORDER BY ?startId",
    "target_endpoint": "https://sparql.swisslipids.org/sparql/",
    "federates_with": [
      "https://sparql.uniprot.org/sparql",
      "https://sparql.rhea-db.org/sparql"
    ],
    "endpoint_set": "SwissLipids",
    "file_path": "SwissLipids/16.ttl",
    "predicted_query": "# https://sparql.uniprot.org/sparql\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX up: <http://purl.uniprot.org/core/>\n\nSELECT DISTINCT ?enzyme ?enzymeName\nWHERE {\n  # Query SwissLipids to find reactions associated with the lipid identifier\n  SERVICE <https://sparql.swisslipids.org/sparql/> {\n    ?lipid a <http://www.swisslipids.org/rdf/SwissLipids#Lipid> .\n    FILTER (?lipid = <http://www.swisslipids.org/rdf/SwissLipids#SWISSLIPID:000399814>) . # Filter for the specific lipid identifier\n    ?reaction <http://www.swisslipids.org/rdf/SwissLipids#is_reaction_of> ?lipid .\n    ?reaction rdfs:label ?reactionName .\n  }\n\n  # Query Rhea to find reactions associated with the lipid name\n  SERVICE <https://sparql.rhea-db.org/sparql/> {\n    ?rheaReaction rdfs:label ?ceramideReactionName .\n    FILTER (contains(lcase(?ceramideReactionName), \"ceramide\")) # Filter for reactions containing \"ceramide\"\n  }\n\n  # Link reactions to UniProt to find enzymes\n  ?enzyme up:catalyticActivity ?reactionName . # Reactions from SwissLipids\n  ?enzyme rdfs:label ?enzymeName .\n  \n  #Alternative link to UniProt via Rhea\n  ?enzyme up:catalyticActivity ?ceramideReactionName . # Reactions from Rhea\n  \n}",
    "predicted_endpoint": "https://sparql.uniprot.org/sparql",
    "predicted_endpoint_equal_to_target_endpoint": false,
    "predicted_endpoint_in_federates_with": true,
    "predicted_endpoint_or_federated_endpoint": true,
    "run_id_langsmith": "688317e8-192b-449f-8a75-16c9a173b2e4",
    "evaluation_timestamp": "2025-05-11T00:29:08.348083",
    "question_understanding_prompt_tokens": 308,
    "question_understanding_completion_tokens": 42,
    "question_understanding_total_tokens": 350,
    "sparql_query_construction_prompt_tokens": 2503,
    "sparql_query_construction_completion_tokens": 0,
    "sparql_query_construction_total_tokens": 2503,
    "is_valid_sparql": true,
    "sparql_syntax_error": "syntactically correct",
    "result_eval_f1_score": 0.0,
    "result_eval_precision": 0.0,
    "result_eval_recall": 0.0,
    "error_occured_at_endpoint": true,
    "predicted_query_result_is_empty": true,
    "ground_truth_query_result_is_empty": true,
    "error_occured_at_endpoint_message": "QueryBadFormed: A bad request has been sent to the endpoint: probably the SPARQL query is badly formed."
  },
  {
    "resource": "https://sparql.swisslipids.org/.well-known/sparql-examples/6",
    "natural_language_question": "For a given lipid (SWISSLIPID:000399814, Ceramide), return a list of all corresponding reactions (Rhea IDs and equation), as well as their enzymes as annotated in UniProtKB/Swiss-Prot) enzymes themselves (ID and protein name).\nThis query does not consider the hierarchy: it looks for reactions and enzymes only for the specified lipid.",
    "ground_truth_query": "PREFIX SWISSLIPID: <https://swisslipids.org/rdf/SLM_>\nPREFIX owl: <http://www.w3.org/2002/07/owl#>\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX rh: <http://rdf.rhea-db.org/>\nPREFIX up: <http://purl.uniprot.org/core/>\n\n# Example 6\nSELECT ?startId ?startName ?chebi ?rhea ?rheaEquation ?uniprot ?uniprotName\nWHERE\n{\n  # SwissLipids query (list of) identifier(s)\n  VALUES ?startId { SWISSLIPID:000399814 }\n  # name\n  ?startId rdfs:label ?startName .\n  # ChEBI x-ref\n  ?startId owl:equivalentClass ?chebi .\n  # federated query to Rhea\n  SERVICE <https://sparql.rhea-db.org/sparql> {\n  \t?rhea rh:equation ?rheaEquation .\n  \t?rhea rh:side/rh:contains/rh:compound/rh:chebi ?chebi .\n  }    \n  # federated query to UniProt\n  SERVICE <https://sparql.uniprot.org/sparql> {\n    ?uniprot up:reviewed true .\n    ?uniprot up:recommendedName/up:fullName ?uniprotName .\n    ?uniprot up:annotation/up:catalyticActivity/up:catalyzedReaction ?rhea .\n  }\n} \nORDER BY ?startId",
    "target_endpoint": "https://sparql.swisslipids.org/sparql/",
    "federates_with": [
      "https://sparql.uniprot.org/sparql",
      "https://sparql.rhea-db.org/sparql"
    ],
    "endpoint_set": "SwissLipids",
    "file_path": "SwissLipids/6.ttl",
    "predicted_query": "# https://sparql.swisslipids.org/sparql/\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>\nPREFIX sl: <http://www.swisslipids.org/rdf#>\nPREFIX rhea: <http://rdf.rhea-db.org/>\nPREFIX uniprot: <http://purl.uniprot.org/core/>\n\nSELECT DISTINCT ?rheaID ?equation ?enzymeID ?proteinName\nWHERE {\n  # Query SwissLipids to find reactions associated with the given lipid\n  SERVICE <https://sparql.swisslipids.org/sparql/> {\n    BIND (sl:SWISSLIPID_000399814 AS ?lipid) # SWISSLIPID:000399814\n    ?lipid sl:participates_in ?reaction .\n    ?reaction rdfs:seeAlso ?rheaID .\n    FILTER (STRSTARTS(STR(?rheaID), \"http://rdf.rhea-db.org/\"))\n  }\n\n  # Query Rhea to retrieve the reaction equation\n  SERVICE <https://sparql.rhea-db.org/sparql/> {\n    BIND (IRI(STR(?rheaID)) AS ?rheaIRI)\n    ?rheaIRI rhea:equation ?equation .\n  }\n\n  # Query UniProt to retrieve the enzyme IDs and protein names associated with the reactions\n  SERVICE <https://sparql.uniprot.org/sparql/> {\n    ?enzyme uniprot:catalyticActivity ?rheaID .\n    ?enzyme a uniprot:Protein .\n    ?enzyme rdfs:label ?proteinName .\n    BIND(SUBSTR(STR(?enzyme), 32) AS ?enzymeID) # Extracting enzyme ID from URI\n  }\n}",
    "predicted_endpoint": "https://sparql.swisslipids.org/sparql/",
    "predicted_endpoint_equal_to_target_endpoint": true,
    "predicted_endpoint_in_federates_with": false,
    "predicted_endpoint_or_federated_endpoint": true,
    "run_id_langsmith": "7d8dba95-c463-440a-848c-eace1157b1ab",
    "evaluation_timestamp": "2025-05-11T00:29:20.242367",
    "question_understanding_prompt_tokens": 320,
    "question_understanding_completion_tokens": 94,
    "question_understanding_total_tokens": 414,
    "sparql_query_construction_prompt_tokens": 2862,
    "sparql_query_construction_completion_tokens": 0,
    "sparql_query_construction_total_tokens": 2862,
    "is_valid_sparql": true,
    "sparql_syntax_error": "syntactically correct",
    "result_eval_f1_score": 0.0,
    "result_eval_precision": 0.0,
    "result_eval_recall": 0.0,
    "error_occured_at_endpoint": false,
    "predicted_query_result_is_empty": true,
    "ground_truth_query_result_is_empty": false,
    "error_occured_at_endpoint_message": "no error, but empty result"
  },
  {
    "resource": "https://sparql.swisslipids.org/.well-known/sparql-examples/5",
    "natural_language_question": "For a given lipid (SWISSLIPID:000399814, Ceramide), return a list of all corresponding reactions (Rhea IDs and equation).\nThis query does consider the hierarchy: it looks for reactions involving the specified lipid and/or its more specific forms.",
    "ground_truth_query": "PREFIX SWISSLIPID: <https://swisslipids.org/rdf/SLM_>\nPREFIX owl: <http://www.w3.org/2002/07/owl#>\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX rh: <http://rdf.rhea-db.org/>\n\n# Example 5\nSELECT ?startId ?startName ?id ?name ?chebi ?rhea ?rheaEquation \nWHERE\n{\n  # SwissLipids query (list of) identifier(s)\n  VALUES ?startId { SWISSLIPID:000399814 }\n  # name\n  ?startId rdfs:label ?startName .\n  # Retrieve children lipids \n  ?id rdfs:subClassOf* ?startId .\n  ?id rdfs:label ?name .\n  # ChEBI x-ref\n  ?id owl:equivalentClass ?chebi .\n  # federated query to Rhea\n  SERVICE <https://sparql.rhea-db.org/sparql> {\n  \t?rhea rh:equation ?rheaEquation .\n  \t?rhea rh:side/rh:contains/rh:compound/rh:chebi ?chebi .\n  }    \n} \nORDER BY  ?startId ?id",
    "target_endpoint": "https://sparql.swisslipids.org/sparql/",
    "federates_with": [
      "https://sparql.rhea-db.org/sparql"
    ],
    "endpoint_set": "SwissLipids",
    "file_path": "SwissLipids/5.ttl",
    "predicted_query": "# https://sparql.swisslipids.org/sparql/\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>\nPREFIX sl: <http://swisslipids.org/rdf#>\nPREFIX chebi: <http://purl.obolibrary.org/obo/CHEBI_>\n\nSELECT DISTINCT ?rheaId ?equation\nWHERE {\n  # Query SwissLipids for the lipid and its subclasses\n  {\n    SELECT DISTINCT ?lipid\n    WHERE {\n      VALUES ?lipidID { \"SWISSLIPID:000399814\" }  # The given lipid ID\n      ?lipid sl:identifier ?lipidID .\n      ?lipid rdfs:subClassOf* ?ceramide . # Include subclasses of ceramide\n      ?ceramide rdfs:label \"Ceramide\"@en .\n    }\n  }\n\n  # Query Rhea for reactions involving the lipid or its subclasses\n  SERVICE <https://sparql.rhea-db.org/sparql> {\n    ?reaction rdfs:label ?equation ;\n              <http://purl.obolibrary.org/obo/rhea# Rhea_has_participant> ?participant .\n    ?participant <http://purl.obolibrary.org/obo/rhea# Rhea_has_structure> ?lipid .\n    BIND(STRAFTER(STR(?reaction), \"http://rdf.rhea-db.org/\") AS ?rheaId) # Extract Rhea ID\n  }\n}",
    "predicted_endpoint": "https://sparql.swisslipids.org/sparql/",
    "predicted_endpoint_equal_to_target_endpoint": true,
    "predicted_endpoint_in_federates_with": false,
    "predicted_endpoint_or_federated_endpoint": true,
    "run_id_langsmith": "08fb8f50-4a43-497d-b9dc-881fd8f291e5",
    "evaluation_timestamp": "2025-05-11T00:29:29.577156",
    "question_understanding_prompt_tokens": 297,
    "question_understanding_completion_tokens": 64,
    "question_understanding_total_tokens": 361,
    "sparql_query_construction_prompt_tokens": 2143,
    "sparql_query_construction_completion_tokens": 0,
    "sparql_query_construction_total_tokens": 2143,
    "is_valid_sparql": false,
    "sparql_syntax_error": "Encountered \" \"<\" \"< \"\" at line 23, column 15.\nWas expecting one of:\n     ...\n     ...\n     ...\n     ...\n     ...\n    \"a\" ...\n    \"values\" ...\n    \"graph\" ...\n    \"optional\" ...\n    \"minus\" ...\n    \"bind\" ...\n    \"service\" ...\n    \"filter\" ...\n    \"(\" ...\n    \"{\" ...\n    \"}\" ...\n    \";\" ...\n    \".\" ...\n    \"!\" ...\n    \"^\" ...",
    "result_eval_f1_score": 0.0,
    "result_eval_precision": 0.0,
    "result_eval_recall": 0.0,
    "error_occured_at_endpoint": false,
    "predicted_query_result_is_empty": true,
    "ground_truth_query_result_is_empty": false,
    "error_occured_at_endpoint_message": "syntactically not correct"
  },
  {
    "resource": "https://sparql.swisslipids.org/.well-known/sparql-examples/34",
    "natural_language_question": "Lipids affected by human enzymes",
    "ground_truth_query": "PREFIX owl: <http://www.w3.org/2002/07/owl#>\nPREFIX rh: <http://rdf.rhea-db.org/>\nPREFIX taxon: <http://purl.uniprot.org/taxonomy/>\nPREFIX up: <http://purl.uniprot.org/core/>\n\nSELECT ?swisslipid  {\n  ?swisslipid owl:equivalentClass ?chebi .\n  SERVICE <https://sparql.rhea-db.org/sparql> {\n    ?rhea rh:side/rh:contains/rh:compound ?compound .\n\t?compound (rh:chebi|(rh:reactivePart/rh:chebi)|(rh:underlyingChebi/rh:chebi)) ?metabolite . \n  }\n  SERVICE <https://sparql.uniprot.org/sparql> {\n    ?catalyticActivityAnnotation up:catalyticActivity/up:catalyzedReaction ?rhea .\n    ?protein up:annotation ?catalyticActivityAnnotation ;\n             up:organism taxon:9606 .\n  }\n}\nLIMIT 1",
    "target_endpoint": "https://sparql.swisslipids.org/sparql/",
    "federates_with": [
      "https://sparql.uniprot.org/sparql",
      "https://sparql.rhea-db.org/sparql"
    ],
    "endpoint_set": "SwissLipids",
    "file_path": "SwissLipids/34.ttl",
    "predicted_query": "# https://sparql.swisslipids.org/sparql/\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX sl: <http://swisslipids.org/rdf#>\nPREFIX rh: <http://rdf.rhea-db.org/>\nPREFIX up: <http://purl.uniprot.org/core/>\nPREFIX taxon: <http://purl.uniprot.org/taxonomy/>\n\nSELECT DISTINCT ?lipidName ?enzymeName\nWHERE {\n  # Query SwissLipids for lipids\n  SERVICE <https://sparql.swisslipids.org/sparql/> {\n    ?lipid a sl:Lipid ;\n           rdfs:label ?lipidName .\n    # Link lipids to Rhea reactions\n    ?reaction sl:participates ?lipid .\n  }\n\n  # Query Rhea for reactions and link to UniProt enzymes\n  SERVICE <https://sparql.rhea-db.org/sparql> {\n    ?reaction a rh:Reaction .\n    ?reaction rh:enzyme ?enzymeResource .\n  }\n\n  # Query UniProt for human enzymes\n  SERVICE <https://sparql.uniprot.org/sparql> {\n    ?enzymeResource rdfs:label ?enzymeName ;\n                    up:organism taxon:9606 .  # 9606 is the NCBI taxonomy ID for Homo sapiens (Human)\n  }\n}",
    "predicted_endpoint": "https://sparql.swisslipids.org/sparql/",
    "predicted_endpoint_equal_to_target_endpoint": true,
    "predicted_endpoint_in_federates_with": false,
    "predicted_endpoint_or_federated_endpoint": true,
    "run_id_langsmith": "1a35a4dd-6bc7-470e-a783-1142c58e147f",
    "evaluation_timestamp": "2025-05-11T00:29:36.226511",
    "question_understanding_prompt_tokens": 242,
    "question_understanding_completion_tokens": 20,
    "question_understanding_total_tokens": 262,
    "sparql_query_construction_prompt_tokens": 1690,
    "sparql_query_construction_completion_tokens": 0,
    "sparql_query_construction_total_tokens": 1690,
    "is_valid_sparql": true,
    "sparql_syntax_error": "syntactically correct",
    "result_eval_f1_score": 0.0,
    "result_eval_precision": 0.0,
    "result_eval_recall": 0.0,
    "error_occured_at_endpoint": false,
    "predicted_query_result_is_empty": true,
    "ground_truth_query_result_is_empty": false,
    "error_occured_at_endpoint_message": "no error, but empty result"
  },
  {
    "resource": "https://sparql.uniprot.org/.well-known/sparql-examples/118_biosodafrontend_rat_brain_human_cancer",
    "natural_language_question": "What are the Homo sapiens genes associated with cancer and their orthologs expressed in the Rattus norvegicus brain?",
    "ground_truth_query": "PREFIX up:<http://purl.uniprot.org/core/>\nPREFIX taxon:<http://purl.uniprot.org/taxonomy/>\nPREFIX rdfs:<http://www.w3.org/2000/01/rdf-schema#>\nPREFIX orth:<http://purl.org/net/orth#>\nPREFIX dcterms:<http://purl.org/dc/terms/>\nPREFIX obo:<http://purl.obolibrary.org/obo/>\nPREFIX lscr:<http://purl.org/lscr#>\nPREFIX genex:<http://purl.org/genex#>\nPREFIX sio: <http://semanticscience.org/resource/>\nSELECT ?gene ?orthologous_protein2 WHERE {\n  {\n    SELECT ?protein1 WHERE {\n      ?protein1 a up:Protein;\n        up:organism/up:scientificName 'Homo sapiens' ;\n        up:annotation ?annotation .\n      ?annotation rdfs:comment ?annotation_text.\n      ?annotation a up:Disease_Annotation .\n      FILTER CONTAINS (?annotation_text, \"cancer\")\n    }\n  }\n  SERVICE <https://sparql.omabrowser.org/sparql/> {\n    SELECT ?orthologous_protein2 ?protein1 ?gene WHERE {\n      ?protein_OMA a orth:Protein .\n      ?orthologous_protein2 a orth:Protein .\n      ?cluster a orth:OrthologsCluster .\n      ?cluster orth:hasHomologousMember ?node1 .\n      ?cluster orth:hasHomologousMember ?node2 .\n      ?node2 orth:hasHomologousMember* ?protein_OMA .\n      ?node1 orth:hasHomologousMember* ?orthologous_protein2 \n      .?orthologous_protein2 orth:organism/obo:RO_0002162/up:scientificName 'Rattus norvegicus' .\n      ?orthologous_protein2 sio:SIO_010079 ?gene .\n      ?protein_OMA lscr:xrefUniprot ?protein1 .\n      FILTER(?node1 != ?node2)\n    }\n  }\n  SERVICE <https://www.bgee.org/sparql/> {\n    ?gene genex:isExpressedIn ?anatEntity .\n    ?anatEntity rdfs:label 'brain' .\n    ?gene orth:organism ?org . \n    ?org obo:RO_0002162 taxon:10116 .\n  }\n}",
    "target_endpoint": "https://sparql.uniprot.org/sparql",
    "federates_with": [
      "https://sparql.omabrowser.org/sparql/",
      "https://www.bgee.org/sparql/"
    ],
    "endpoint_set": "Uniprot",
    "file_path": "UniProt/118_biosodafrontend_rat_brain_human_cancer.ttl",
    "predicted_query": "# https://sparql.uniprot.org/sparql\nPREFIX up: <http://purl.uniprot.org/core/>\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX taxon: <http://purl.uniprot.org/taxonomy/>\nPREFIX obo: <http://purl.obolibrary.org/obo/>\n\nSELECT DISTINCT ?humanGene ?humanGeneName ?ratOrtholog ?ratOrthologName\nWHERE {\n  # Find human genes associated with cancer\n  SERVICE <https://sparql.uniprot.org/sparql> {\n    ?humanGene a up:Protein .\n    ?humanGene up:organism taxon:9606 .  # Homo sapiens\n    ?humanGene rdfs:label ?humanGeneName .\n    ?humanGene up:annotation ?diseaseAnnotation .\n    ?diseaseAnnotation a up:Disease_Annotation .\n    ?diseaseAnnotation rdfs:label ?diseaseName .\n    FILTER (CONTAINS(LCASE(?diseaseName), \"cancer\"))\n  }\n\n  # Find orthologs of the human gene\n  SERVICE <https://sparql.uniprot.org/sparql> {\n    ?ratOrtholog obo:RO_0002434 ?humanGene . # RO_0002434 is the 'orthologous to' relation\n    ?ratOrtholog a up:Protein .\n    ?ratOrtholog up:organism taxon:10116 . # Rattus norvegicus\n    ?ratOrtholog rdfs:label ?ratOrthologName .\n  }\n  #Assumption: Expression data in brain is not available in UniProt.\n}",
    "predicted_endpoint": "https://sparql.uniprot.org/sparql",
    "predicted_endpoint_equal_to_target_endpoint": true,
    "predicted_endpoint_in_federates_with": false,
    "predicted_endpoint_or_federated_endpoint": true,
    "run_id_langsmith": "96950390-9fc5-4280-bdab-fe03d8973154",
    "evaluation_timestamp": "2025-05-11T00:29:50.530743",
    "question_understanding_prompt_tokens": 263,
    "question_understanding_completion_tokens": 47,
    "question_understanding_total_tokens": 310,
    "sparql_query_construction_prompt_tokens": 2709,
    "sparql_query_construction_completion_tokens": 0,
    "sparql_query_construction_total_tokens": 2709,
    "is_valid_sparql": true,
    "sparql_syntax_error": "syntactically correct",
    "result_eval_f1_score": 0.0,
    "result_eval_precision": 0.0,
    "result_eval_recall": 0.0,
    "error_occured_at_endpoint": false,
    "predicted_query_result_is_empty": true,
    "ground_truth_query_result_is_empty": false,
    "error_occured_at_endpoint_message": "no error, but empty result"
  },
  {
    "resource": "https://sparql.uniprot.org/.well-known/sparql-examples/51",
    "natural_language_question": "Find all proteins linked to arachidonate (CHEBI:32395)",
    "ground_truth_query": "PREFIX CHEBI: <http://purl.obolibrary.org/obo/CHEBI_>\nPREFIX rh: <http://rdf.rhea-db.org/>\nPREFIX skos: <http://www.w3.org/2004/02/skos/core#>\nPREFIX up: <http://purl.uniprot.org/core/>\n\n\nSELECT \n    DISTINCT\n        ?uniprot\n        ?uniprotID\n        ?recname\n        ?gene\n        ?chebi\n        ?uniprotName\nWHERE {\n  SERVICE <https://sparql.rhea-db.org/sparql> {\n     VALUES (?chebi) { (CHEBI:32395) }\n     ?rhea rh:side/rh:contains/rh:compound ?compound .\n     ?compound rh:chebi ?chebi .\n     ?chebi up:name ?uniprotName .\n  }\n  ?uniprot up:annotation/up:catalyticActivity/up:catalyzedReaction ?rhea .\n  ?uniprot up:mnemonic ?uniprotID .\n  ?uniprot up:recommendedName/up:fullName ?recname .\n  OPTIONAL {?uniprot up:encodedBy/skos:prefLabel ?gene .}\n}",
    "target_endpoint": "https://sparql.uniprot.org/sparql/",
    "federates_with": [
      "https://sparql.rhea-db.org/sparql"
    ],
    "endpoint_set": "Uniprot",
    "file_path": "UniProt/51_all_proteins_linked_to_arachidonate.ttl",
    "predicted_query": "# https://sparql.uniprot.org/sparql\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX up: <http://purl.uniprot.org/core/>\nPREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>\n\nSELECT DISTINCT ?protein ?proteinName\nWHERE {\n  # Query UniProt for proteins\n  SERVICE <https://sparql.uniprot.org/sparql> {\n    ?protein a up:Protein .\n    ?protein rdfs:label ?proteinName .\n  }\n\n  # Query RheaDB for reactions involving arachidonate (CHEBI:32395)\n  SERVICE <https://sparql.rhea-db.org/sparql> {\n    PREFIX rhea: <http://rdf.rhea-db.org/>\n    PREFIX chebi: <http://purl.obolibrary.org/obo/>\n\n    ?reaction rhea: Rhea_has_participant chebi:CHEBI_32395 . # arachidonate\n    ?reaction rdfs:label ?reactionLabel .\n  }\n\n  # Attempt to link UniProt proteins to RheaDB reactions.  This is the tricky part, as there's no direct link.\n  # We'll use a FILTER to check if the protein name appears in the reaction label. This is a heuristic and might not be perfect.\n  FILTER (CONTAINS(LCASE(?reactionLabel), LCASE(?proteinName)))\n}",
    "predicted_endpoint": "https://sparql.uniprot.org/sparql",
    "predicted_endpoint_equal_to_target_endpoint": true,
    "predicted_endpoint_in_federates_with": false,
    "predicted_endpoint_or_federated_endpoint": true,
    "run_id_langsmith": "f6478f10-43fb-40cb-a516-8b096b6fa2cf",
    "evaluation_timestamp": "2025-05-11T00:30:02.870683",
    "question_understanding_prompt_tokens": 258,
    "question_understanding_completion_tokens": 31,
    "question_understanding_total_tokens": 289,
    "sparql_query_construction_prompt_tokens": 1980,
    "sparql_query_construction_completion_tokens": 0,
    "sparql_query_construction_total_tokens": 1980,
    "is_valid_sparql": false,
    "sparql_syntax_error": "Encountered \" \"prefix\" \"PREFIX \"\" at line 16, column 5.\nWas expecting one of:\n     ...\n     ...\n     ...\n     ...\n     ...\n     ...\n    \"select\" ...\n    \"values\" ...\n    \"graph\" ...\n    \"optional\" ...\n    \"minus\" ...\n    \"bind\" ...\n    \"service\" ...\n    \"filter\" ...\n    \"true\" ...\n    \"false\" ...\n     ...\n     ...\n     ...\n     ...\n     ...\n     ...\n     ...\n     ...\n     ...\n     ...\n     ...\n     ...\n     ...\n    \"(\" ...\n     ...\n    \"{\" ...\n    \"}\" ...\n    \"[\" ...\n     ...\n    \"<<(\" ...\n    \"<<\" ...",
    "result_eval_f1_score": 0.0,
    "result_eval_precision": 0.0,
    "result_eval_recall": 0.0,
    "error_occured_at_endpoint": false,
    "predicted_query_result_is_empty": true,
    "ground_truth_query_result_is_empty": false,
    "error_occured_at_endpoint_message": "syntactically not correct"
  },
  {
    "resource": "https://sparql.uniprot.org/.well-known/sparql-examples/40",
    "natural_language_question": "Retrieve human enzymes that metabolize sphingolipids and are annotated in ChEMBL",
    "ground_truth_query": "PREFIX CHEBI: <http://purl.obolibrary.org/obo/CHEBI_>\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX rh: <http://rdf.rhea-db.org/>\nPREFIX taxon: <http://purl.uniprot.org/taxonomy/>\nPREFIX up: <http://purl.uniprot.org/core/>\n\nSELECT DISTINCT ?protein ?chemblEntry\nWHERE {\n  SERVICE <https://sparql.rhea-db.org/sparql> {\n    ?rhea rdfs:subClassOf rh:Reaction ;\n      rh:side/rh:contains/rh:compound/rh:chebi/rdfs:subClassOf+ CHEBI:26739 .\n  }\n  ?ca up:catalyzedReaction ?rhea .\n  ?protein up:annotation/up:catalyticActivity ?ca ;\n    up:organism taxon:9606 ;\n    rdfs:seeAlso ?chemblEntry .\n  ?chemblEntry up:database <http://purl.uniprot.org/database/ChEMBL> .\n}\nLIMIT 10",
    "target_endpoint": "https://sparql.uniprot.org/sparql/",
    "federates_with": [
      "https://sparql.rhea-db.org/sparql"
    ],
    "endpoint_set": "Uniprot",
    "file_path": "UniProt/40_human_enzymes_that_metabolize_sphingolipids.ttl",
    "predicted_query": "# https://sparql.uniprot.org/sparql\nPREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX up: <http://purl.uniprot.org/core/>\nPREFIX taxon: <http://purl.uniprot.org/taxonomy/>\n\nSELECT DISTINCT ?enzyme ?enzymeName\nWHERE {\n  # Find human proteins that are enzymes\n  ?enzyme a up:Protein .\n  ?enzyme up:organism taxon:9606 .  # 9606 is the NCBI taxonomy ID for Homo sapiens\n  ?enzyme rdfs:label ?enzymeName .\n  ?enzyme up:classifiedWith <http://purl.uniprot.org/uniprot/P00734> . #Enzyme EC:3.1.4.11\n\n  # Subquery to find enzymes that metabolize sphingolipids from SwissLipids\n  SERVICE <https://sparql.swisslipids.org/sparql/> {\n    PREFIX sl: <http://www.swisslipids.org/rdf#>\n    PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\n\n    ?lipid sl:name \"sphingolipids\" . # Find sphingolipids\n    ?reaction sl:substrate ?lipid . # Find reactions where sphingolipids are substrates\n    ?reaction sl:enzyme ?uniprotID . # Find enzymes involved in these reactions\n    FILTER (STR(?uniprotID) = STR(?enzyme)) # Link to the main query using the UniProt ID\n  }\n}",
    "predicted_endpoint": "https://sparql.uniprot.org/sparql",
    "predicted_endpoint_equal_to_target_endpoint": true,
    "predicted_endpoint_in_federates_with": false,
    "predicted_endpoint_or_federated_endpoint": true,
    "run_id_langsmith": "ce766f16-1a81-41a8-8a5a-a4977fe012f6",
    "evaluation_timestamp": "2025-05-11T00:30:14.372950",
    "question_understanding_prompt_tokens": 254,
    "question_understanding_completion_tokens": 33,
    "question_understanding_total_tokens": 287,
    "sparql_query_construction_prompt_tokens": 2039,
    "sparql_query_construction_completion_tokens": 0,
    "sparql_query_construction_total_tokens": 2039,
    "is_valid_sparql": false,
    "sparql_syntax_error": "Encountered \" \"prefix\" \"PREFIX \"\" at line 17, column 5.\nWas expecting one of:\n     ...\n     ...\n     ...\n     ...\n     ...\n     ...\n    \"select\" ...\n    \"values\" ...\n    \"graph\" ...\n    \"optional\" ...\n    \"minus\" ...\n    \"bind\" ...\n    \"service\" ...\n    \"filter\" ...\n    \"true\" ...\n    \"false\" ...\n     ...\n     ...\n     ...\n     ...\n     ...\n     ...\n     ...\n     ...\n     ...\n     ...\n     ...\n     ...\n     ...\n    \"(\" ...\n     ...\n    \"{\" ...\n    \"}\" ...\n    \"[\" ...\n     ...\n    \"<<(\" ...\n    \"<<\" ...",
    "result_eval_f1_score": 0.0,
    "result_eval_precision": 0.0,
    "result_eval_recall": 0.0,
    "error_occured_at_endpoint": false,
    "predicted_query_result_is_empty": true,
    "ground_truth_query_result_is_empty": false,
    "error_occured_at_endpoint_message": "syntactically not correct"
  },
  {
    "resource": "https://sparql.uniprot.org/.well-known/sparql-examples/49",
    "natural_language_question": "Retrieve the UniProtKB proteins, their catalyzed Rhea reactions, their encoding genes (Ensembl) and the anatomic entities where the genes are expressed (UBERON anatomic entites from Bgee expression data resource).",
    "ground_truth_query": "PREFIX CHEBI: <http://purl.obolibrary.org/obo/CHEBI_>\nPREFIX genex: <http://purl.org/genex#>\nPREFIX lscr: <http://purl.org/lscr#>\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX rh: <http://rdf.rhea-db.org/>\nPREFIX taxon: <http://purl.uniprot.org/taxonomy/>\nPREFIX up: <http://purl.uniprot.org/core/>\n\nSELECT DISTINCT ?protein ?ensemblGene ?reaction ?anatomicEntityLabel ?anatomicEntity\nWHERE {\n  # federated query to Rhea enadpoint\n  {\n    SELECT DISTINCT ?reaction WHERE {\n      SERVICE <https://sparql.rhea-db.org/sparql> {\n        ?reaction rdfs:subClassOf rh:Reaction ;\n          rh:equation ?reactionEquation ;\n          rh:side ?reactionSide .\n        ?reactionSide rh:contains ?participant .\n        ?participant rh:compound ?compound .\n        # compound constraint (CHEBI:16113 == cholesterol)\n        ?compound rh:chebi CHEBI:16113 .\n      }\n    }\n  }\n  # taxonomy constraint (taxon:9606 == Homo sapiens)\n  ?protein up:organism taxon:9606 ;\n    up:annotation ?a ;\n    rdfs:seeAlso / up:transcribedFrom ?ensemblGene .\n  ?a a up:Catalytic_Activity_Annotation ;\n    up:catalyticActivity ?ca .\n  ?ca up:catalyzedReaction ?reaction .\n  # federated query to Bgee (expression data)\n  BIND(IRI(REPLACE(STR(?ensemblGene), \"\\\\.[0-9]+$\", \"\")) AS ?ensemblGeneNoVersion)\n  SERVICE <https://www.bgee.org/sparql/> {\n    ?gene lscr:xrefEnsemblGene ?ensemblGeneNoVersion ;\n      genex:isExpressedIn ?anatomicEntity .\n    ?anatomicEntity rdfs:label ?anatomicEntityLabel .\n  }\n}",
    "target_endpoint": "https://sparql.uniprot.org/sparql/",
    "federates_with": [
      "https://sparql.rhea-db.org/sparql",
      "https://www.bgee.org/sparql/"
    ],
    "endpoint_set": "Uniprot",
    "file_path": "UniProt/49_tissues_where_genes_metabolizing_cholestrol_are_expressed.ttl",
    "predicted_query": "# https://sparql.uniprot.org/sparql\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX up: <http://purl.uniprot.org/core/>\nPREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>\n\nSELECT DISTINCT ?protein ?proteinName ?rheaReaction ?gene ?anatomicalEntity\nWHERE {\n  # Get UniProtKB proteins and their names\n  SERVICE <https://sparql.uniprot.org/sparql> {\n    ?protein a up:Protein .\n    ?protein rdfs:label ?proteinName .\n    # Link to Rhea reactions\n    OPTIONAL { ?protein up:catalyticActivity ?rheaReaction . }\n    # Link to Ensembl genes\n    OPTIONAL { ?protein up:encodedBy ?gene . }\n  }\n\n  # Get Rhea reaction details (if available)\n  SERVICE <https://sparql.rhea-db.org/sparql> {\n    OPTIONAL {\n      ?rheaReaction rdfs:label ?rheaReactionName .\n    }\n  }\n\n  # Get anatomical entities from Bgee where the genes are expressed\n  SERVICE <https://bgee.org/sparql/> {\n    OPTIONAL {\n      ?gene bgee:expressedIn ?anatomicalEntity .\n    }\n  }\n\n  # Get UBERON labels for anatomical entities\n  SERVICE <https://uberongraph.org/sparql> {\n    OPTIONAL {\n      ?anatomicalEntity rdfs:label ?anatomicalEntityName .\n    }\n  }\n}",
    "predicted_endpoint": "https://sparql.uniprot.org/sparql",
    "predicted_endpoint_equal_to_target_endpoint": true,
    "predicted_endpoint_in_federates_with": false,
    "predicted_endpoint_or_federated_endpoint": true,
    "run_id_langsmith": "cb86bf0f-9e34-408e-ba93-7f74bdfb4db9",
    "evaluation_timestamp": "2025-05-11T00:30:32.315233",
    "question_understanding_prompt_tokens": 280,
    "question_understanding_completion_tokens": 70,
    "question_understanding_total_tokens": 350,
    "sparql_query_construction_prompt_tokens": 3993,
    "sparql_query_construction_completion_tokens": 0,
    "sparql_query_construction_total_tokens": 3993,
    "is_valid_sparql": false,
    "sparql_syntax_error": "Line 28, column 13: Unresolved prefixed name: bgee:expressedIn",
    "result_eval_f1_score": 0.0,
    "result_eval_precision": 0.0,
    "result_eval_recall": 0.0,
    "error_occured_at_endpoint": false,
    "predicted_query_result_is_empty": true,
    "ground_truth_query_result_is_empty": false,
    "error_occured_at_endpoint_message": "syntactically not correct"
  },
  {
    "resource": "https://sparql.uniprot.org/.well-known/sparql-examples/53",
    "natural_language_question": "Find mouse homologs in OMABrowser of human enzymes that catalyze reactions involving sterols (CHEBI:15889). Federating with Rhea and OMABrowser.",
    "ground_truth_query": "PREFIX CHEBI: <http://purl.obolibrary.org/obo/CHEBI_>\nPREFIX lscr: <http://purl.org/lscr#>\nPREFIX orth: <http://purl.org/net/orth#>\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX rh: <http://rdf.rhea-db.org/>\nPREFIX taxon: <http://purl.uniprot.org/taxonomy/>\nPREFIX up: <http://purl.uniprot.org/core/>\n\nSELECT\n  DISTINCT\n    ?chebi\n    ?reaction\n    ?humanProtein\n    ?mouseProtein\n    ?cluster \nWHERE {\n  SERVICE <https://sparql.rhea-db.org/sparql> {\n    ?reaction rdfs:subClassOf rh:Reaction .\n    ?reaction rh:side/rh:contains/rh:compound ?compound .\n    ?compound rh:chebi ?chebi .\n    ?chebi rdfs:subClassOf* CHEBI:15889\n  }\n\n  ?humanProtein up:organism taxon:9606 .\n  ?humanProtein up:annotation ?a .\n  ?a a up:Catalytic_Activity_Annotation .\n  ?a up:catalyticActivity ?ca .\n  ?ca up:catalyzedReaction ?reaction .\n\n  SERVICE  <https://sparql.omabrowser.org/sparql> {\n    ?cluster a orth:ParalogsCluster .\n    ?cluster orth:hasHomologousMember ?node1 , ?node2 .\n    ?node1 orth:hasHomologousMember* ?orthoProtein1 .\n    ?node2 orth:hasHomologousMember* ?orthoProtein2 .\n    ?orthoProtein1 lscr:xrefUniprot ?mouseProtein .\n    ?orthoProtein2 lscr:xrefUniprot ?humanProtein .\n    # inTaxon mouse\n    ?orthoProtein1 orth:organism/<http://purl.obolibrary.org/obo/RO_0002162> taxon:10090 . \n  }\n}",
    "target_endpoint": "https://sparql.uniprot.org/sparql/",
    "federates_with": [
      "https://sparql.rhea-db.org/sparql",
      "https://sparql.omabrowser.org/sparql"
    ],
    "endpoint_set": "Uniprot",
    "file_path": "UniProt/53_mouse_homologs_of_sterol_enzymes_via_omabrowser.ttl",
    "predicted_query": "# https://sparql.rhea-db.org/sparql/\nPREFIX rhea: <http://rdf.rhea-db.org/>\nPREFIX chebi: <http://purl.obolibrary.org/obo/CHEBI_>\nPREFIX uniprot: <http://purl.uniprot.org/core/>\nPREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>\nPREFIX oma: <http://purl.obolibrary.org/obo/OMA_>\n\nSELECT DISTINCT ?mouse_homolog ?enzyme_name\nWHERE {\n  # Find reactions in Rhea that involve sterols (CHEBI:15889)\n  ?reaction rhea: Rhea_has_reactant chebi:15889 .\n\n  # Find enzymes that catalyze those reactions\n  ?reaction rhea: Rhea_has_enzyme ?enzyme_uri .\n  ?enzyme_uri rdfs:label ?enzyme_name .\n\n  # Find the UniProt ID of the enzyme using a subquery against UniProt\n  SERVICE <https://sparql.uniprot.org/sparql> {\n    ?enzyme uniprot:recommendedName ?name .\n    ?enzyme rdfs:label ?enzyme_name .\n    FILTER (CONTAINS(STR(?enzyme), \"uniprotkb\"))\n  }\n  BIND(STRAFTER(STR(?enzyme), \"uniprotkb/\") AS ?uniprot_id)\n\n  # Find human and mouse homologs in OMA\n  SERVICE <http://sparql.omabrowser.org/sparql> {\n    # Find the OMA group for the human protein\n    ?human_oma_group oma:hasHomolog <http://purl.uniprot.org/uniprot/?uniprot_id> .\n    ?human_oma_group rdf:type oma:OMA_Group .\n\n    # Find the mouse homolog in the same OMA group\n    ?mouse_oma_group oma:hasHomolog ?mouse_homolog .\n    ?mouse_oma_group rdf:type oma:OMA_Group .\n    FILTER (?mouse_oma_group = ?human_oma_group)\n\n    # Filter for mouse proteins\n    ?mouse_homolog a uniprot:Protein .\n    ?mouse_homolog uniprot:organism <http://purl.uniprot.org/taxonomy/10090> . # Mouse taxonomy ID\n  }\n}",
    "predicted_endpoint": "https://sparql.rhea-db.org/sparql/",
    "predicted_endpoint_equal_to_target_endpoint": false,
    "predicted_endpoint_in_federates_with": true,
    "predicted_endpoint_or_federated_endpoint": true,
    "run_id_langsmith": "35c2e596-ab55-4ad0-9ecc-f5abb4f11e95",
    "evaluation_timestamp": "2025-05-11T00:30:49.662721",
    "question_understanding_prompt_tokens": 275,
    "question_understanding_completion_tokens": 41,
    "question_understanding_total_tokens": 316,
    "sparql_query_construction_prompt_tokens": 2745,
    "sparql_query_construction_completion_tokens": 0,
    "sparql_query_construction_total_tokens": 2745,
    "is_valid_sparql": false,
    "sparql_syntax_error": "Lexical error at line 11, column 36.  Encountered: '32' (32), after prefix \"Rhea_has_reactant\"",
    "result_eval_f1_score": 0.0,
    "result_eval_precision": 0.0,
    "result_eval_recall": 0.0,
    "error_occured_at_endpoint": false,
    "predicted_query_result_is_empty": true,
    "ground_truth_query_result_is_empty": false,
    "error_occured_at_endpoint_message": "syntactically not correct"
  },
  {
    "resource": "https://sparql.uniprot.org/.well-known/sparql-examples/52",
    "natural_language_question": "Retrieve drugs that target human enzymes involved in sterol metabolism (federated query with Rhea and ChEMBL via IDSM/Elixir czech republic).",
    "ground_truth_query": "PREFIX CHEBI: <http://purl.obolibrary.org/obo/CHEBI_>\nPREFIX cco: <http://rdf.ebi.ac.uk/terms/chembl#>\nPREFIX chebihash: <http://purl.obolibrary.org/obo/chebi#>\nPREFIX owl: <http://www.w3.org/2002/07/owl#>\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX rh: <http://rdf.rhea-db.org/>\nPREFIX skos: <http://www.w3.org/2004/02/skos/core#>\nPREFIX taxon: <http://purl.uniprot.org/taxonomy/>\nPREFIX up: <http://purl.uniprot.org/core/>\n\nSELECT\n        DISTINCT\n            ?protein\n            ?proteinFullName\n            ?activityType\n            ?standardActivityValue\n            ?standardActivityUnit\n            ?chemblMolecule\n            ?chemlbMoleculePrefLabel\nWHERE\n  {\n  # ChEBI: retrieve members of the ChEBI class ChEBI:15889 (sterol)\n  # Rhea: retrieve the reactions involving these ChEBI as participants\n  SERVICE <https://sparql.rhea-db.org/sparql> {\n    ?reaction rdfs:subClassOf  rh:Reaction ;\n\t      rh:status        rh:Approved ;\n\t      rh:side          ?reactionSide .\n    ?reactionSide\n\t      rh:contains      ?participant .\n    ?participant rh:compound  ?compound\n    {\n      ?compound  rh:chebi  ?chebi .\n      ?chebi (rdfs:subClassOf)+ CHEBI:15889\n    } UNION {\n      ?compound  rh:chebi           ?chebi .\n      ?chebi2   rdfs:subClassOf     ?chebiRestriction .\n      ?chebiRestriction\n\t\ta           owl:Restriction ;\n\t\towl:onProperty      chebihash:has_major_microspecies_at_pH_7_3 ;\n\t\towl:someValuesFrom  ?chebi .\n      ?chebi2 (rdfs:subClassOf)+ CHEBI:15889\n    }\n  }\n  # UniProt: retrieve the human (taxid:9606) enzymes catalyzing these Rhea reactions\n  ?ca       up:catalyzedReaction  ?reaction .\n  ?a        up:catalyticActivity  ?ca .\n  ?protein  up:annotation         ?a ;\n\t    up:organism           taxon:9606 ;\n\t    up:recommendedName    ?proteinRecName .\n  ?proteinRecName\n\t    up:fullName           ?proteinFullName .\n  # Find drugs in wikidata that interact with the UniProt Proteins\n  # ChEMBL: retrieve the corresponding targets and with drugs in clinical phase 4\n  # Via https://idsm.elixir-czech.cz/sparql/\n  SERVICE <https://idsm.elixir-czech.cz/sparql/endpoint/idsm> {\n    ?activity a cco:Activity ;\n      cco:hasMolecule ?chemblMolecule ;\n      cco:hasAssay ?assay ;\n      cco:standardType ?activityType ;\n      cco:standardValue ?standardActivityValue ;\n      cco:standardUnits ?standardActivityUnit .\n    ?chemblMolecule cco:highestDevelopmentPhase ?highestDevelopmentPhase ;\n      rdfs:label ?chemblMoleculeLabel ;\n      skos:prefLabel ?chemlbMoleculePrefLabel .\n    FILTER (?highestDevelopmentPhase > 3)\n    ?assay cco:hasTarget ?target .\n    ?target cco:hasTargetComponent/cco:targetCmptXref ?protein .\n    ?protein a cco:UniprotRef .\n  }\n}",
    "target_endpoint": "https://sparql.uniprot.org/sparql/",
    "federates_with": [
      "https://sparql.rhea-db.org/sparql",
      "https://idsm.elixir-czech.cz/sparql/endpoint/idsm"
    ],
    "endpoint_set": "Uniprot",
    "file_path": "UniProt/52_drugs_targeting_sterol_metabolism.ttl",
    "predicted_query": "# https://sparql.rhea-db.org/sparql\nPREFIX rhea: <http://rdf.rhea-db.org/>\nPREFIX chebi: <http://purl.obolibrary.org/obo/CHEBI_>\nPREFIX dc: <http://purl.org/dc/elements/1.1/>\n\nSELECT DISTINCT ?drug ?enzymeName ?reaction\nWHERE {\n  # Find reactions in Rhea related to sterol metabolism\n  SERVICE <https://sparql.rhea-db.org/sparql> {\n    ?reaction rhea:equation ?equation .\n    ?reaction dc:description ?description .\n    FILTER (CONTAINS(LCASE(?description), \"sterol\")) . #Reactions containing sterols\n\n    # Find the enzyme(s) involved in the reaction\n    ?reaction rhea:hasParticipant ?participant .\n    ?participant rhea:role rhea:enzyme .\n    ?enzyme chebi:chebiId ?enzymeID .\n    ?enzyme a rhea:Protein.\n    ?enzyme rhea:name ?enzymeName.\n  }\n\n  #Federate with IDSM/Elixir czech republic to find drugs that target the enzymes\n  SERVICE <https://idsm.elixir-czech.cz/sparql> {\n    ?drugTarget a <http://www.w3.org/2002/07/owl#Class>;\n                <http://www.w3.org/2000/01/rdf-schema#label> ?enzymeName .\n    ?drug <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://bio2rdf.org/drugbank_vocabulary:drug> ;\n          <http://bio2rdf.org/drugbank_vocabulary:enzyme> ?drugTarget.\n  }\n}",
    "predicted_endpoint": "https://sparql.rhea-db.org/sparql",
    "predicted_endpoint_equal_to_target_endpoint": false,
    "predicted_endpoint_in_federates_with": true,
    "predicted_endpoint_or_federated_endpoint": true,
    "run_id_langsmith": "a3f4eaa6-6f09-4863-994d-b50f9a4d562a",
    "evaluation_timestamp": "2025-05-11T00:30:58.320956",
    "question_understanding_prompt_tokens": 269,
    "question_understanding_completion_tokens": 28,
    "question_understanding_total_tokens": 297,
    "sparql_query_construction_prompt_tokens": 2052,
    "sparql_query_construction_completion_tokens": 637,
    "sparql_query_construction_total_tokens": 2689,
    "is_valid_sparql": true,
    "sparql_syntax_error": "syntactically correct",
    "result_eval_f1_score": 0.0,
    "result_eval_precision": 0.0,
    "result_eval_recall": 0.0,
    "error_occured_at_endpoint": true,
    "predicted_query_result_is_empty": true,
    "ground_truth_query_result_is_empty": true,
    "error_occured_at_endpoint_message": "QueryBadFormed: A bad request has been sent to the endpoint: probably the SPARQL query is badly formed."
  },
  {
    "resource": "https://sparql.uniprot.org/.well-known/sparql-examples/54",
    "natural_language_question": "Proteins with binding sites for ligands similar to heme",
    "ground_truth_query": "PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX sachem: <http://bioinfo.uochb.cas.cz/rdf/v1.0/sachem#>\nPREFIX up: <http://purl.uniprot.org/core/>\nPREFIX xsd: <http://www.w3.org/2001/XMLSchema#>\n\nSELECT \n  ?protein\n  ?mnemonic\n  ?proteinName\n  ?ligandSimilarityScore\n  ?ligand\nWHERE {\n  SERVICE <https://idsm.elixir-czech.cz/sparql/endpoint/chebi> {\n    ?ssc sachem:compound ?ligand; \n      sachem:score ?ligandSimilarityScore ;\n      sachem:similaritySearch ?sss .\n        # Smiles of Heme\n    ?sss    sachem:query \"CC1=C(CCC([O-])=O)C2=[N+]3C1=Cc1c(C)c(C=C)c4C=C5C(C)=C(C=C)C6=[N+]5[Fe-]3(n14)n1c(=C6)c(C)c(CCC([O-])=O)c1=C2\";\n      sachem:cutoff \"8e-1\"^^xsd:double ;\n      sachem:aromaticityMode sachem:aromaticityDetect ;\n      sachem:similarityRadius 1 ;\n      sachem:tautomerMode sachem:ignoreTautomers .\n  }\n  ?protein up:mnemonic ?mnemonic ;\n    up:recommendedName/up:fullName ?proteinName ;\n    up:annotation ?annotation .\n  ?annotation a up:Binding_Site_Annotation ;\n      up:ligand/rdfs:subClassOf ?ligand .\n}\nORDER BY DESC(?ligandSimilarityScore)",
    "target_endpoint": "https://sparql.uniprot.org/sparql/",
    "federates_with": [
      "https://idsm.elixir-czech.cz/sparql/endpoint/chebi"
    ],
    "endpoint_set": "Uniprot",
    "file_path": "UniProt/54_binding_sites_for_ligands_similar_to_heme_sachem.ttl",
    "predicted_query": "# https://sparql.uniprot.org/sparql\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX uniprot: <http://purl.uniprot.org/core/>\nPREFIX chebi: <http://purl.obolibrary.org/obo/>\n\nSELECT DISTINCT ?protein ?proteinName ?bindingSiteDescription ?ligand ?ligandName\nWHERE {\n  # Query UniProt for proteins with binding sites\n  SERVICE <https://sparql.uniprot.org/sparql> {\n    ?protein a uniprot:Protein .\n    ?protein rdfs:label ?proteinName .\n    ?protein uniprot:annotation ?bindingSiteAnnotation .\n    ?bindingSiteAnnotation a uniprot:BindingSite .\n    ?bindingSiteAnnotation rdfs:comment ?bindingSiteDescription .\n  }\n\n  # Query ChEBI for Heme and similar ligands.  This part is simplified, as direct similarity queries in ChEBI SPARQL are complex.\n  # We'll just look for heme itself for now.  A more sophisticated approach would involve querying for chemical structures\n  # and similarity metrics, which is beyond the scope of this example.\n  SERVICE <https://sparql.rhea-db.org/sparql> {\n      VALUES ?ligand { chebi:CHEBI_24893 }  #Heme\n      ?ligand rdfs:label ?ligandName .\n  }\n\n  # Filter for proteins that have binding sites that mention ligands (simplified).\n  # This is a very basic filter.  Ideally, we'd have a more precise way to link the binding site description\n  # to the specific ligand.  This requires more sophisticated text analysis or structured data.\n  FILTER (contains(lcase(?bindingSiteDescription), lcase(?ligandName)))\n}",
    "predicted_endpoint": "https://sparql.uniprot.org/sparql",
    "predicted_endpoint_equal_to_target_endpoint": true,
    "predicted_endpoint_in_federates_with": false,
    "predicted_endpoint_or_federated_endpoint": true,
    "run_id_langsmith": "b32295c9-2dc6-48bc-840d-4df5bc941838",
    "evaluation_timestamp": "2025-05-11T00:31:10.190997",
    "question_understanding_prompt_tokens": 249,
    "question_understanding_completion_tokens": 29,
    "question_understanding_total_tokens": 278,
    "sparql_query_construction_prompt_tokens": 2324,
    "sparql_query_construction_completion_tokens": 0,
    "sparql_query_construction_total_tokens": 2324,
    "is_valid_sparql": true,
    "sparql_syntax_error": "syntactically correct",
    "result_eval_f1_score": 0.0,
    "result_eval_precision": 0.0,
    "result_eval_recall": 0.0,
    "error_occured_at_endpoint": false,
    "predicted_query_result_is_empty": true,
    "ground_truth_query_result_is_empty": false,
    "error_occured_at_endpoint_message": "no error, but empty result"
  },
  {
    "resource": "https://sparql.uniprot.org/.well-known/sparql-examples/43",
    "natural_language_question": "Connect patents cited in UniProtKB with those in the patent database at EPO via publication number, whose grant date is more than twenty years in the past.",
    "ground_truth_query": "PREFIX patent: <http://data.epo.org/linked-data/def/patent/>\nPREFIX skos: <http://www.w3.org/2004/02/skos/core#>\nPREFIX up: <http://purl.uniprot.org/core/>\n\nSELECT ?grantDate ?patent ?application ?applicationNo\nWHERE\n{\n    ?citation a up:Patent_Citation ;\n  skos:exactMatch ?patent .\n  BIND(SUBSTR(STR(?patent), 35) AS ?applicationNo)\n  BIND(SUBSTR(STR(?patent), 33, 2) AS ?countryCode)\n  SERVICE <https://data.epo.org/linked-data/query>{\n    ?publication patent:publicationNumber ?applicationNo ;\n      patent:application ?application .\n    ?application patent:grantDate ?grantDate .\n  }\n  BIND((year(now()) - 20) AS ?thisYearMinusTwenty)\n  BIND(year(?grantDate) AS ?grantYear)\n  FILTER(?grantYear < ?thisYearMinusTwenty)\n} ORDER BY ?grantYear",
    "target_endpoint": "https://sparql.uniprot.org/sparql/",
    "federates_with": [
      "https://data.epo.org/linked-data/query"
    ],
    "endpoint_set": "Uniprot",
    "file_path": "UniProt/43_patents_used_in_uniprot_granted_twenty_years_in_the_past.ttl",
    "predicted_query": "# https://sparql.uniprot.org/sparql\n# Find UniProt entries with patent citations\n\nPREFIX up: <http://purl.uniprot.org/core/>\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\n\nSELECT DISTINCT ?uniprotEntry ?patentCitation\nWHERE {\n  # Query UniProt for entries with patent citations\n  SERVICE <https://sparql.uniprot.org/sparql> {\n    ?uniprotEntry a up:Protein ; # Assuming UniProt entries are of type Protein\n                  up:citation ?citation . # Get the citation\n\n    ?citation rdfs:label ?patentCitation . # Assuming the patent citation is the label of the citation resource.  This might need adjustment based on the actual UniProt schema.\n    FILTER CONTAINS(str(?patentCitation), \"Patent\") # Filter to ensure the citation is a patent\n  }\n  #Since there is no EPO endpoint provided, I will skip this part.\n  #SERVICE <EPO_ENDPOINT_URI> {\n  #  ?epoPatent <some_property_linking_to_publication_number> ?patentCitation .\n  #  ?epoPatent <property_for_grant_date> ?grantDate .\n  #  FILTER (year(NOW()) - year(?grantDate) > 20)\n  #}\n}",
    "predicted_endpoint": "https://sparql.uniprot.org/sparql",
    "predicted_endpoint_equal_to_target_endpoint": true,
    "predicted_endpoint_in_federates_with": false,
    "predicted_endpoint_or_federated_endpoint": true,
    "run_id_langsmith": "b8594756-80f5-407f-839f-88da30bb0a56",
    "evaluation_timestamp": "2025-05-11T00:31:32.790544",
    "question_understanding_prompt_tokens": 269,
    "question_understanding_completion_tokens": 47,
    "question_understanding_total_tokens": 316,
    "sparql_query_construction_prompt_tokens": 1688,
    "sparql_query_construction_completion_tokens": 0,
    "sparql_query_construction_total_tokens": 1688,
    "is_valid_sparql": true,
    "sparql_syntax_error": "syntactically correct",
    "result_eval_f1_score": 0.0,
    "result_eval_precision": 0.0,
    "result_eval_recall": 0.0,
    "error_occured_at_endpoint": false,
    "predicted_query_result_is_empty": true,
    "ground_truth_query_result_is_empty": false,
    "error_occured_at_endpoint_message": "no error, but empty result"
  },
  {
    "resource": "https://sparql.uniprot.org/.well-known/sparql-examples/45",
    "natural_language_question": "Retrieve drugs that target human enzymes involved in sterol metabolism (federated query with WikiData and Rhea).",
    "ground_truth_query": "PREFIX CHEBI: <http://purl.obolibrary.org/obo/CHEBI_>\nPREFIX chebihash: <http://purl.obolibrary.org/obo/chebi#>\nPREFIX owl: <http://www.w3.org/2002/07/owl#>\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX rh: <http://rdf.rhea-db.org/>\nPREFIX taxon: <http://purl.uniprot.org/taxonomy/>\nPREFIX uniprotkb: <http://purl.uniprot.org/uniprot/>\nPREFIX up: <http://purl.uniprot.org/core/>\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\n\nSELECT DISTINCT ?protein ?proteinFullName ?wikiChemical ?wikiChemicalLabel ?medicalConditionTreatedLabel\nWHERE {\n  # ChEBI: retrieve members of the ChEBI class ChEBI:15889 (sterol)\n  # Rhea: retrieve the reactions involving these ChEBI as participants\n  SERVICE <https://sparql.rhea-db.org/sparql> {\n    ?reaction rdfs:subClassOf rh:Reaction ;\n      rh:status rh:Approved ;\n      rh:side ?reactionSide .\n    ?reactionSide\n      rh:contains ?participant .\n    ?participant rh:compound ?compound\n    {\n      ?compound rh:chebi ?chebi .\n      ?chebi (rdfs:subClassOf)+ CHEBI:15889\n    } UNION {\n      ?compound rh:chebi ?chebi .\n      ?chebi2 rdfs:subClassOf ?chebiRestriction .\n      ?chebiRestriction\n\t\ta owl:Restriction ;\n\t\towl:onProperty chebihash:has_major_microspecies_at_pH_7_3 ;\n\t\towl:someValuesFrom ?chebi .\n      ?chebi2 (rdfs:subClassOf)+ CHEBI:15889\n    }\n  }\n  # UniProt: retrieve the human (taxid:9606) enzymes catalyzing these Rhea reactions\n  ?ca up:catalyzedReaction  ?reaction .\n  ?a up:catalyticActivity  ?ca .\n  ?proteinIRI  up:annotation ?a ;\n    up:organism taxon:9606 ;\n    up:recommendedName ?proteinRecName .\n  ?proteinRecName up:fullName ?proteinFullName .\n  # Find drugs in wikidata that interact with the UniProt Proteins\n  BIND (SUBSTR(STR(?proteinIRI), STRLEN(STR(uniprotkb:))+1) AS ?protein)\n  SERVICE <https://query.wikidata.org/sparql> {\n    ?wp wdt:P352  ?protein .\n    ?wikiChemical wdt:P129 ?wp . # Physically interacts with\n    ?wikiChemical rdfs:label ?wikiChemicalLabel .\n    ?wikiChemical wdt:P2175 ?wmc . # Medical conndition treated\n    ?wmc rdfs:label ?medicalConditionTreatedLabel .\n    FILTER(lang(?medicalConditionTreatedLabel) = 'en')\n    FILTER(lang(?wikiChemicalLabel) = 'en')\n  }\n}",
    "target_endpoint": "https://sparql.uniprot.org/sparql/",
    "federates_with": [
      "https://query.wikidata.org/sparql",
      "https://sparql.rhea-db.org/sparql"
    ],
    "endpoint_set": "Uniprot",
    "file_path": "UniProt/45_drugs_targeting_human_sterol_metabolism_enzymes.ttl",
    "predicted_query": "# https://sparql.rhea-db.org/sparql\nPREFIX rhea: <http://rdf.rhea-db.org/>\nPREFIX chebi: <http://purl.obolibrary.org/obo/CHEBI_>\nPREFIX uniprot: <http://purl.uniprot.org/core/>\nPREFIX taxon: <http://purl.uniprot.org/taxonomy/>\nPREFIX wd: <http://www.wikidata.org/entity/>\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\nPREFIX biocyc: <http://identifiers.org/biocyc/>\n\nSELECT DISTINCT ?drug ?enzymeLabel ?rheaReaction ?drugLabel\nWHERE {\n  # Find Rhea reactions related to sterol metabolism\n  SERVICE <https://sparql.rhea-db.org/sparql> {\n    ?rheaReaction rhea: Rhea_text \"sterol metabolism\"@en .\n    ?rheaReaction rhea:equation ?equation .\n    ?rheaReaction rhea:side ?side .\n    ?side rhea:contains ?participant .\n    ?participant rhea:accession ?chebi .\n  }\n\n  # Find UniProt entries for human enzymes involved in these reactions\n  SERVICE <https://sparql.uniprot.org/sparql> {\n    ?enzyme uniprot:catalyticActivity ?rheaReaction .\n    ?enzyme uniprot:organism taxon:9606 .  # Homo sapiens (human)\n    ?enzyme rdfs:label ?enzymeLabel .\n  }\n\n  # Find Wikidata entries for drugs that target these enzymes\n  SERVICE <https://query.wikidata.org/sparql> {\n    ?drug wdt:P2175 ?enzymeAccession .  # P2175:  pharmacological target\n    ?enzymeAccession biocyc: ?enzyme . #Link UniProt ID to Wikidata\n    ?drug rdfs:label ?drugLabel .\n    FILTER (LANG(?drugLabel) = \"en\")\n  }\n}",
    "predicted_endpoint": "https://sparql.rhea-db.org/sparql",
    "predicted_endpoint_equal_to_target_endpoint": false,
    "predicted_endpoint_in_federates_with": true,
    "predicted_endpoint_or_federated_endpoint": true,
    "run_id_langsmith": "71241201-91f7-4789-a28a-80160a6f4326",
    "evaluation_timestamp": "2025-05-11T00:32:05.307727",
    "question_understanding_prompt_tokens": 262,
    "question_understanding_completion_tokens": 31,
    "question_understanding_total_tokens": 293,
    "sparql_query_construction_prompt_tokens": 2408,
    "sparql_query_construction_completion_tokens": 550,
    "sparql_query_construction_total_tokens": 2958,
    "is_valid_sparql": false,
    "sparql_syntax_error": "Lexical error at line 14, column 34.  Encountered: '32' (32), after prefix \"Rhea_text\"",
    "result_eval_f1_score": 0.0,
    "result_eval_precision": 0.0,
    "result_eval_recall": 0.0,
    "error_occured_at_endpoint": false,
    "predicted_query_result_is_empty": true,
    "ground_truth_query_result_is_empty": false,
    "error_occured_at_endpoint_message": "syntactically not correct"
  },
  {
    "resource": "https://sparql.uniprot.org/.well-known/sparql-examples/42",
    "natural_language_question": "Connect patents cited in UniProtKB with those in the patent database at EPO via publication number.",
    "ground_truth_query": "PREFIX patent: <http://data.epo.org/linked-data/def/patent/>\nPREFIX skos: <http://www.w3.org/2004/02/skos/core#>\nPREFIX up: <http://purl.uniprot.org/core/>\n\nSELECT ?citation ?patent ?application ?applicationNo\nWHERE\n{\n  ?citation a up:Patent_Citation ;\n    skos:exactMatch ?patent .\n  FILTER(CONTAINS(STR(?patent), 'EP'))\n  BIND(SUBSTR(STR(?patent), 35) AS ?applicationNo)\n  SERVICE <https://data.epo.org/linked-data/query>{\n    ?application patent:publicationNumber ?applicationNo\n  }\n}",
    "target_endpoint": "https://sparql.uniprot.org/sparql/",
    "federates_with": [
      "https://data.epo.org/linked-data/query"
    ],
    "endpoint_set": "Uniprot",
    "file_path": "UniProt/42_connect_patents_to_epo.ttl",
    "predicted_query": "# https://sparql.uniprot.org/sparql\n# Retrieve UniProtKB entries and their associated patent identifiers.\nPREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX up: <http://purl.uniprot.org/core/>\n\nSELECT ?uniprotEntry ?patentIdentifier\nWHERE {\n  ?uniprotEntry a up:Protein .  # Select UniProt entries that are proteins.\n  \n  # Look for potential patent identifiers.  This might need adjustment based on the actual property used in UniProt.\n  OPTIONAL { ?uniprotEntry up:citation ?citation .  # Check for citations\n             ?citation rdfs:comment ?patentIdentifier . # Assuming patent ID is in the comment.  This is an assumption.\n             FILTER CONTAINS(LCASE(?patentIdentifier), \"patent\")  # Filter for comments containing \"patent\"\n           }\n  \n  #Alternative way to look for patent identifiers using database cross-references\n  OPTIONAL {\n    ?uniprotEntry up:database ?dbReference .\n    ?dbReference rdfs:label ?dbName .\n    ?dbReference up:identifier ?patentIdentifier .\n    FILTER CONTAINS(LCASE(?dbName), \"patent\") #Filter for database names containing \"patent\"\n  }\n}\n#The query retrieves UniProt entries and attempts to extract patent identifiers from citation comments or database cross-references.\n#Since there is no direct EPO endpoint, the patent identifiers retrieved here can be used in a separate query against the EPO database.",
    "predicted_endpoint": "https://sparql.uniprot.org/sparql",
    "predicted_endpoint_equal_to_target_endpoint": true,
    "predicted_endpoint_in_federates_with": false,
    "predicted_endpoint_or_federated_endpoint": true,
    "run_id_langsmith": "fa57df46-89a1-44f6-ba06-d1a8dfc22e33",
    "evaluation_timestamp": "2025-05-11T00:32:12.817833",
    "question_understanding_prompt_tokens": 257,
    "question_understanding_completion_tokens": 35,
    "question_understanding_total_tokens": 292,
    "sparql_query_construction_prompt_tokens": 1900,
    "sparql_query_construction_completion_tokens": 579,
    "sparql_query_construction_total_tokens": 2479,
    "is_valid_sparql": true,
    "sparql_syntax_error": "syntactically correct",
    "result_eval_f1_score": 0.0,
    "result_eval_precision": 0.0,
    "result_eval_recall": 0.0,
    "error_occured_at_endpoint": true,
    "predicted_query_result_is_empty": true,
    "ground_truth_query_result_is_empty": true,
    "error_occured_at_endpoint_message": "The read operation timed out"
  },
  {
    "resource": "https://sparql.uniprot.org/.well-known/sparql-examples/67_draft_human_metabolome",
    "natural_language_question": "Generate a draft human metabolome",
    "ground_truth_query": "PREFIX chebislash: <http://purl.obolibrary.org/obo/chebi/>\nPREFIX rh: <http://rdf.rhea-db.org/>\nPREFIX taxon: <http://purl.uniprot.org/taxonomy/>\nPREFIX up: <http://purl.uniprot.org/core/>\n\nSELECT\n?uniprot ?mnemonic ?rhea ?chebi ?smiles ?inchiKey\nWHERE\n{\n  ?uniprot up:annotation/up:catalyticActivity/up:catalyzedReaction ?rhea ;\n        up:organism taxon:9606 ;\n        up:mnemonic ?mnemonic .\n  SERVICE <https://sparql.rhea-db.org/sparql> {\n\t?rhea rh:side/rh:contains/rh:compound ?compound .\n    ?compound (rh:chebi|(rh:reactivePart/rh:chebi)|(rh:underlyingChebi/rh:chebi)) ?chebi .\n   }\n   ?chebi chebislash:smiles ?smiles ;\n          chebislash:inchikey ?inchiKey .\n}",
    "target_endpoint": "https://sparql.uniprot.org/sparql/",
    "federates_with": [
      "https://sparql.rhea-db.org/sparql"
    ],
    "endpoint_set": "Uniprot",
    "file_path": "UniProt/67_draft_human_metabolome.ttl",
    "predicted_query": "# https://sparql.uniprot.org/sparql\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX up: <http://purl.uniprot.org/core/>\nPREFIX taxon: <http://purl.uniprot.org/taxonomy/>\n\nSELECT DISTINCT ?metaboliteName\nWHERE {\n  # Find proteins associated with Homo sapiens in UniProt\n  SERVICE <https://sparql.uniprot.org/sparql> {\n    SELECT DISTINCT ?protein ?gene ?organism\n    WHERE {\n      ?protein a up:Protein .\n      ?protein up:organism taxon:9606 . # Homo sapiens\n      ?protein up:encodedBy ?gene.\n      #OPTIONAL { ?protein rdfs:label ?proteinName . }\n    }\n  }\n\n  # Attempt to link to Rhea to find associated reactions and metabolites\n  OPTIONAL {\n    SERVICE <https://sparql.rhea-db.org/sparql> {\n      ?reaction rdfs:label ?reactionName .\n      # Assuming some link between UniProt protein and Rhea reaction exists.  This is a simplification.\n      # This part needs to be adjusted based on actual Rhea schema if a direct link exists.\n      #FILTER (CONTAINS(STR(?reactionName), STR(?gene))) # Attempt to link by gene name.  Crude.\n      ?reaction rdfs:comment ?comment.\n      FILTER (CONTAINS(STR(?comment), STR(?gene))) # Attempt to link by gene name.  Crude.\n      ?reaction <http://purl.obolibrary.org/obo/RO_0002356> ?participant . #has reactant\n      ?participant rdfs:label ?metaboliteName .\n    }\n  }\n  \n  #Optional link to SwissLipids.  This is speculative as a direct link is unlikely.\n  #SERVICE <https://sparql.swisslipids.org/sparql/> {\n  #  ?lipid a <http://www.swisslipids.org/rdf/SwissLipids#Lipid> .\n  #  ?lipid rdfs:label ?metaboliteName .\n  #  FILTER (CONTAINS(STR(?metaboliteName), \"lipid\"))\n  #}\n\n  FILTER (BOUND(?metaboliteName)) # Ensure we have a metabolite name\n}",
    "predicted_endpoint": "https://sparql.uniprot.org/sparql",
    "predicted_endpoint_equal_to_target_endpoint": true,
    "predicted_endpoint_in_federates_with": false,
    "predicted_endpoint_or_federated_endpoint": true,
    "run_id_langsmith": "b57e7759-f58e-4ce1-805d-a52f98df5c03",
    "evaluation_timestamp": "2025-05-11T00:42:22.598114",
    "question_understanding_prompt_tokens": 244,
    "question_understanding_completion_tokens": 20,
    "question_understanding_total_tokens": 264,
    "sparql_query_construction_prompt_tokens": 1305,
    "sparql_query_construction_completion_tokens": 0,
    "sparql_query_construction_total_tokens": 1305,
    "is_valid_sparql": true,
    "sparql_syntax_error": "syntactically correct",
    "result_eval_f1_score": 0.0,
    "result_eval_precision": 0.0,
    "result_eval_recall": 0.0,
    "error_occured_at_endpoint": false,
    "predicted_query_result_is_empty": true,
    "ground_truth_query_result_is_empty": false,
    "error_occured_at_endpoint_message": "no error, but empty result"
  },
  {
    "resource": "https://sparql.uniprot.org/.well-known/sparql-examples/36",
    "natural_language_question": "Find the orthologous proteins for UniProtKB entry P05067 using the <a href=\"http://www.orthod.org\">OrthoDB database</a>",
    "ground_truth_query": "PREFIX orthodb: <http://purl.orthodb.org/>\nPREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX skos: <http://www.w3.org/2004/02/skos/core#>\nPREFIX uniprotkb: <http://purl.uniprot.org/uniprot/>\nPREFIX up: <http://purl.uniprot.org/core/>\n\nSELECT\n  ?protein\n  ?orthoGroup\n  ?scientificName\n  ?functionComment\n  ?prefferedGeneName\n  ((STRLEN(?value) - ?medianLength) as ?deviationFromMedianLength)\nWHERE\n{\n  uniprotkb:P05067 a up:Protein ;\n        up:organism/up:scientificName ?scientificName ;\n        rdfs:seeAlso ?orthoGroup ;\n        up:encodedBy/skos:prefLabel ?prefferedGeneName ;\n          up:sequence/rdf:value ?value .\n  OPTIONAL {\n    ?protein up:annotation ?functionAnnotation .\n    ?functionAnnotation a up:Function_Annotation ;\n      rdfs:comment ?functionComment .\n  }\n  SERVICE <https://sparql.orthodb.org/sparql>{\n    ?orthoGroup orthodb:ogMedianProteinLength ?medianLength .\n    ?orthoGroup orthodb:hasMember ?xref .\n    ?xref orthodb:xref/orthodb:xrefResource uniprotkb:P05067 .\n  }\n}\nLIMIT 985915",
    "target_endpoint": "https://sparql.uniprot.org/sparql/",
    "federates_with": [
      "https://sparql.orthodb.org/sparql"
    ],
    "endpoint_set": "Uniprot",
    "file_path": "UniProt/36_orthologous_proteins_via_orthodb.ttl",
    "predicted_query": "# https://sparql.uniprot.org/sparql\nPREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX up: <http://purl.uniprot.org/core/>\n\nSELECT DISTINCT ?protein ?gene ?organism\nWHERE {\n  # Find the UniProt entry for P05067\n  VALUES ?uniprotID { \"P05067\" }\n  ?protein a up:Protein ;\n           up:accession ?uniprotID ;\n           up:gene ?geneResource ;\n           up:organism ?organismResource .\n\n  ?geneResource rdfs:label ?gene .\n  ?organismResource rdfs:label ?organism .\n\n  #OPTIONAL {\n  #  ?protein up:ortholog ?ortholog .  #This is a placeholder, UniProt might not have direct ortholog links\n  #  ?ortholog rdfs:label ?orthologLabel .\n  #}\n  # Consider federating if there was a service linking to OrthoDB\n  # SERVICE <some_orthodb_bridge_endpoint> {\n  #   ?orthologLink <some_property_linking_to_uniprot> ?protein .\n  #   ?orthologLink <some_property_linking_to_orthodb> ?orthodbEntry .\n  #   ?orthodbEntry rdfs:label ?orthodbLabel .\n  # }\n}",
    "predicted_endpoint": "https://sparql.uniprot.org/sparql",
    "predicted_endpoint_equal_to_target_endpoint": true,
    "predicted_endpoint_in_federates_with": false,
    "predicted_endpoint_or_federated_endpoint": true,
    "run_id_langsmith": "deeb4628-6023-45eb-9954-4c22f2432ac8",
    "evaluation_timestamp": "2025-05-11T00:42:49.496621",
    "question_understanding_prompt_tokens": 277,
    "question_understanding_completion_tokens": 43,
    "question_understanding_total_tokens": 320,
    "sparql_query_construction_prompt_tokens": 2576,
    "sparql_query_construction_completion_tokens": 619,
    "sparql_query_construction_total_tokens": 3195,
    "is_valid_sparql": true,
    "sparql_syntax_error": "syntactically correct",
    "result_eval_f1_score": 0.0,
    "result_eval_precision": 0.0,
    "result_eval_recall": 0.0,
    "error_occured_at_endpoint": false,
    "predicted_query_result_is_empty": true,
    "ground_truth_query_result_is_empty": false,
    "error_occured_at_endpoint_message": "no error, but empty result"
  },
  {
    "resource": "https://sparql.uniprot.org/.well-known/sparql-examples/60",
    "natural_language_question": "Find human proteins that catalyze reactions where substrates or product have a <a href=\"https://www.ebi.ac.uk/chebi/searchId.do?chebiId=CHEBI:35516\">Cholestane skeleton</a>",
    "ground_truth_query": "PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX rh: <http://rdf.rhea-db.org/>\nPREFIX sachem: <http://bioinfo.uochb.cas.cz/rdf/v1.0/sachem#>\nPREFIX taxon: <http://purl.uniprot.org/taxonomy/>\nPREFIX up: <http://purl.uniprot.org/core/>\n\nSELECT\n  DISTINCT\n    ?protein\n    ?disease\n    ?rhea\n    ?chebi\n    ?omim\nWHERE {\n    # Find complete ChEBIs with a Cholestane skeleton, via the Czech Elixir node IDSM Sachem chemical substructure search.\n    SERVICE <https://idsm.elixir-czech.cz/sparql/endpoint/chebi> {\n      ?chebi sachem:substructureSearch [\n        sachem:query\n\"[C@]12(CCC3CCCC[C@]3(C)[C@@]1([H])CC[C@]1(C)[C@@]([H])([C@@](C)([H])CCCC(C)C)CC[C@@]21[H])[H]\"\n].\n   }\n   # Use the fact that UniProt catalytic activities are annotated using Rhea \n   # Mapping the found ChEBIs to Rhea reactions\n   SERVICE <https://sparql.rhea-db.org/sparql>{\n     ?rhea rh:side/rh:contains/rh:compound/rdfs:subClassOf ?chebi .\n   }\n   # Match the found Rhea reactions with human UniProtKB proteins\n   ?protein up:annotation/up:catalyticActivity/up:catalyzedReaction ?rhea .\n   ?protein up:organism taxon:9606 .\n   # Find only those human entries that have an annotated related disease, and optionaly map these to OMIM\n   ?protein up:annotation/up:disease ?disease .\n   OPTIONAL {\n     ?disease rdfs:seeAlso ?omim .\n     ?omim up:database <http://purl.uniprot.org/database/MIM>\n   }\n}",
    "target_endpoint": "https://sparql.uniprot.org/sparql/",
    "federates_with": [
      "https://idsm.elixir-czech.cz/sparql/endpoint/chebi",
      "https://sparql.rhea-db.org/sparql"
    ],
    "endpoint_set": "Uniprot",
    "file_path": "UniProt/60_enzymes_working_on_substrate_with_Cholestene_backbone.ttl",
    "predicted_query": "# https://sparql.uniprot.org/sparql\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX up: <http://purl.uniprot.org/core/>\nPREFIX uniprot: <http://purl.uniprot.org/uniprot/>\nPREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>\n\nSELECT DISTINCT ?protein ?proteinName ?reaction ?chebiName\nWHERE {\n  # Find human proteins in UniProt\n  SERVICE <https://sparql.uniprot.org/sparql> {\n    ?protein a up:Protein .\n    ?protein up:organism <http://purl.uniprot.org/taxonomy/9606> . # Human\n    ?protein rdfs:label ?proteinName .\n  }\n\n  # Link to Rhea to find reactions catalyzed by the protein\n  SERVICE <https://sparql.rhea-db.org/sparql> {\n    ?reaction rdfs:label ?reactionName .\n    ?reaction <http://purl.obolibrary.org/obo/RO_0002333> ?proteinUri . # Catalyzed by\n    BIND( IRI(REPLACE(STR(?protein), \"http://purl.uniprot.org/uniprot/\", \"http://purl.uniprot.org/uniprot/Protein/\")) AS ?proteinUri)\n\n    {\n      # Check if the reaction has a substrate with the Cholestane skeleton\n      ?reaction rhea:has_reactant ?substrate .\n      ?substrate chebi:is_a <http://purl.obolibrary.org/obo/CHEBI_35516> . # Cholestane skeleton\n      ?substrate rdfs:label ?chebiName .\n    }\n    UNION\n    {\n      # Check if the reaction has a product with the Cholestane skeleton\n      ?reaction rhea:has_product ?product .\n      ?product chebi:is_a <http://purl.obolibrary.org/obo/CHEBI_35516> . # Cholestane skeleton\n      ?product rdfs:label ?chebiName .\n    }\n  }\n}",
    "predicted_endpoint": "https://sparql.uniprot.org/sparql",
    "predicted_endpoint_equal_to_target_endpoint": true,
    "predicted_endpoint_in_federates_with": false,
    "predicted_endpoint_or_federated_endpoint": true,
    "run_id_langsmith": "83b892f5-d9d9-4204-8884-380e252776f1",
    "evaluation_timestamp": "2025-05-11T00:43:09.776617",
    "question_understanding_prompt_tokens": 292,
    "question_understanding_completion_tokens": 38,
    "question_understanding_total_tokens": 330,
    "sparql_query_construction_prompt_tokens": 3040,
    "sparql_query_construction_completion_tokens": 0,
    "sparql_query_construction_total_tokens": 3040,
    "is_valid_sparql": false,
    "sparql_syntax_error": "Line 24, column 17: Unresolved prefixed name: rhea:has_reactant",
    "result_eval_f1_score": 0.0,
    "result_eval_precision": 0.0,
    "result_eval_recall": 0.0,
    "error_occured_at_endpoint": false,
    "predicted_query_result_is_empty": true,
    "ground_truth_query_result_is_empty": false,
    "error_occured_at_endpoint_message": "syntactically not correct"
  },
  {
    "resource": "https://sparql.uniprot.org/.well-known/sparql-examples/70_enzymes_interacting_with_molecules_similar_to_dopamine",
    "natural_language_question": "Look for enzymes catalyzing reactions with molecules similar to dopamine.",
    "ground_truth_query": "PREFIX CHEBI: <http://purl.obolibrary.org/obo/CHEBI_>\nPREFIX rh: <http://rdf.rhea-db.org/>\nPREFIX sachem: <http://bioinfo.uochb.cas.cz/rdf/v1.0/sachem#>\nPREFIX up: <http://purl.uniprot.org/core/>\n\nSELECT\n  ?protein\n  ?rhea\n  ?chebi\nWHERE {\n  # Use the smiles of dopamine CHEBI:18243\n  SERVICE <https://idsm.elixir-czech.cz/sparql/endpoint/chebi>{\n    ?chebi sachem:similarCompoundSearch [\n      sachem:query \"NCCc1ccc(O)c(O)c1\" ] .\n  }\n  GRAPH<https://sparql.rhea-db.org/rhea>{\n    ?rhea rh:side/rh:contains/rh:compound ?compound .\n    ?compound (rh:chebi|(rh:reactivePart/rh:chebi)|(rh:underlyingChebi/rh:chebi)) ?chebi .\n  }\n  ?protein up:reviewed true ;\n    up:annotation ?caa .\n  ?caa up:catalyticActivity/up:catalyzedReaction ?rhea .\n}",
    "target_endpoint": "https://sparql.uniprot.org/sparql/",
    "federates_with": [
      "https://idsm.elixir-czech.cz/sparql/endpoint/chebi"
    ],
    "endpoint_set": "Uniprot",
    "file_path": "UniProt/70_enzymes_interacting_with_molecules_similar_to_dopamine.ttl",
    "predicted_query": "# https://sparql.rhea-db.org/sparql\nPREFIX rhea: <http://rdf.rhea-db.org/>\nPREFIX chebi: <http://purl.obolibrary.org/obo/CHEBI_>\nPREFIX uniprot: <http://purl.uniprot.org/core/>\nPREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\n\nSELECT DISTINCT ?enzyme ?reaction ?reactionLabel ?dopamineLikeMolecule ?dopamineLikeMoleculeLabel\nWHERE {\n  # Find reactions in Rhea involving dopamine\n  SERVICE <https://sparql.rhea-db.org/sparql> {\n    ?reaction rhea: Rhea_has_participant chebi:CHEBI_17553 .  # Dopamine CHEBI ID\n    ?reaction rdfs:label ?reactionLabel .\n    ?reaction rhea: Rhea_has_participant ?dopamineLikeMolecule .\n    FILTER (?dopamineLikeMolecule != chebi:CHEBI_17553) #Exclude dopamine itself\n    ?dopamineLikeMolecule rdfs:label ?dopamineLikeMoleculeLabel .\n  }\n  \n  # Find enzymes in UniProt that catalyze these reactions\n  SERVICE <https://sparql.uniprot.org/sparql> {\n    ?enzyme uniprot:catalyticActivity ?reactionLabel . # Link enzyme to reaction via catalytic activity\n    ?enzyme rdf:type uniprot:Protein . # Ensure it's a protein (enzyme)\n  }\n}",
    "predicted_endpoint": "https://sparql.rhea-db.org/sparql",
    "predicted_endpoint_equal_to_target_endpoint": false,
    "predicted_endpoint_in_federates_with": false,
    "predicted_endpoint_or_federated_endpoint": false,
    "run_id_langsmith": "c5884458-a3e9-4384-ac0c-7ee67f150faa",
    "evaluation_timestamp": "2025-05-11T00:43:19.399544",
    "question_understanding_prompt_tokens": 253,
    "question_understanding_completion_tokens": 26,
    "question_understanding_total_tokens": 279,
    "sparql_query_construction_prompt_tokens": 2103,
    "sparql_query_construction_completion_tokens": 0,
    "sparql_query_construction_total_tokens": 2103,
    "is_valid_sparql": false,
    "sparql_syntax_error": "Lexical error at line 12, column 41.  Encountered: '32' (32), after prefix \"Rhea_has_participant\"",
    "result_eval_f1_score": 0.0,
    "result_eval_precision": 0.0,
    "result_eval_recall": 0.0,
    "error_occured_at_endpoint": false,
    "predicted_query_result_is_empty": true,
    "ground_truth_query_result_is_empty": false,
    "error_occured_at_endpoint_message": "syntactically not correct"
  },
  {
    "resource": "https://sparql.uniprot.org/.well-known/sparql-examples/38",
    "natural_language_question": "For the human entry P05067 (Amyloid-beta precursor protein) find the gene start ends in WikiData",
    "ground_truth_query": "PREFIX p: <http://www.wikidata.org/prop/>\nPREFIX pq: <http://www.wikidata.org/prop/qualifier/>\nPREFIX ps: <http://www.wikidata.org/prop/statement/>\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX uniprotkb: <http://purl.uniprot.org/uniprot/>\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\n\n\nSELECT \n\t?protein \n\t?begin\n\t?end\n\t?chromosome\n\t?assembly\nWHERE {\n    {\n        BIND(uniprotkb:P05067 AS ?proteinIRI)\n        BIND (SUBSTR(STR(?proteinIRI), STRLEN(STR(uniprotkb:))+1) AS ?protein)\n    }\n    SERVICE <https://query.wikidata.org/sparql> {\n        ?wp wdt:P352 ?protein ;\n            wdt:P702 ?wg . \n        ?wg p:P644   ?wgss .\n        ?wgss ps:P644        ?begin ;\n          pq:P1057/wdt:P1813 ?chromosome ;\n          pq:P659/rdfs:label ?assembly .\n        ?wg p:P645 ?wgse .\n        ?wgse ps:P645        ?end ;\n          pq:P1057/wdt:P1813 ?chromosome ;\n          pq:P659/rdfs:label ?assembly .\n        FILTER(lang(?assembly) = \"en\")\n  } \n}",
    "target_endpoint": "https://sparql.uniprot.org/sparql/",
    "federates_with": [
      "https://query.wikidata.org/sparql"
    ],
    "endpoint_set": "Uniprot",
    "file_path": "UniProt/38_find_gene_region_in_wikidata_for_known_entry.ttl",
    "predicted_query": "# https://sparql.uniprot.org/sparql\nPREFIX up: <http://purl.uniprot.org/core/>\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX uniprot: <http://purl.uniprot.org/uniprot/>\n\nSELECT ?gene ?geneStart ?geneEnd\nWHERE {\n  # Select the UniProt entry for Amyloid-beta precursor protein (P05067)\n  VALUES (?protein) { (uniprot:P05067) }\n\n  ?protein up:encodedBy ?gene .\n  # Optional filter for human taxon\n  ?protein up:organism <http://purl.uniprot.org/taxonomy/9606> .\n\n  #Federate with WikiData to retrieve gene start and end positions\n  SERVICE <https://query.wikidata.org/sparql> {\n    ?gene wdt:P639 ?uniprotGene . # Link to UniProt via P639\n    FILTER (?uniprotGene = \"P05067\") # Filter for the specific UniProt ID\n\n    OPTIONAL { ?gene wdt:P580 ?geneStart . } # Property for start time\n    OPTIONAL { ?gene wdt:P582 ?geneEnd . }   # Property for end time\n  }\n}",
    "predicted_endpoint": "https://sparql.uniprot.org/sparql",
    "predicted_endpoint_equal_to_target_endpoint": true,
    "predicted_endpoint_in_federates_with": false,
    "predicted_endpoint_or_federated_endpoint": true,
    "run_id_langsmith": "28921891-cba6-4ae6-b894-38eeaa754081",
    "evaluation_timestamp": "2025-05-11T00:43:29.020413",
    "question_understanding_prompt_tokens": 267,
    "question_understanding_completion_tokens": 42,
    "question_understanding_total_tokens": 309,
    "sparql_query_construction_prompt_tokens": 2410,
    "sparql_query_construction_completion_tokens": 500,
    "sparql_query_construction_total_tokens": 2910,
    "is_valid_sparql": false,
    "sparql_syntax_error": "Line 17, column 11: Unresolved prefixed name: wdt:P639",
    "result_eval_f1_score": 0.0,
    "result_eval_precision": 0.0,
    "result_eval_recall": 0.0,
    "error_occured_at_endpoint": false,
    "predicted_query_result_is_empty": true,
    "ground_truth_query_result_is_empty": false,
    "error_occured_at_endpoint_message": "syntactically not correct"
  },
  {
    "resource": "https://sparql.uniprot.org/.well-known/sparql-examples/117_biosodafrontend_glioblastoma_orthologs_rat",
    "natural_language_question": "Which are the proteins associated with glioblastoma and the orthologs expressed in the rat brain?",
    "ground_truth_query": "PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX obo: <http://purl.obolibrary.org/obo/>\nPREFIX orth: <http://purl.org/net/orth#>\nPREFIX sio: <http://semanticscience.org/resource/>\nPREFIX taxon: <http://purl.uniprot.org/taxonomy/>\nPREFIX up: <http://purl.uniprot.org/core/>\nPREFIX lscr: <http://purl.org/lscr#>\nPREFIX genex: <http://purl.org/genex#>\nSELECT DISTINCT ?protein ?orthologous_protein ?gene ?annotation_text WHERE {\n  {\n  \tSELECT ?protein ?annotation_text WHERE {\n      ?protein a up:Protein ;\n          up:organism taxon:9606 ;\n          up:annotation ?annotation .\n      ?annotation rdfs:comment ?annotation_text .\n      ?annotation a up:Disease_Annotation .\n      FILTER CONTAINS (?annotation_text, \"glioblastoma\")\n    }\n  }\n  SERVICE <https://sparql.omabrowser.org/sparql/> {\n    SELECT ?orthologous_protein ?protein ?gene WHERE {\n    ?protein_OMA a orth:Protein .\n    ?orthologous_protein a orth:Protein .\n    ?cluster a orth:OrthologsCluster .\n    ?cluster orth:hasHomologousMember ?node1 .\n    ?cluster\n    orth:hasHomologousMember ?node2 .\n    ?node2 orth:hasHomologousMember* ?protein_OMA .\n    ?node1 orth:hasHomologousMember* ?orthologous_protein .\n    ?orthologous_protein orth:organism/obo:RO_0002162 taxon:10116 . # rattus norvegicus\n    ?orthologous_protein sio:SIO_010079 ?gene .\n    ?protein_OMA lscr:xrefUniprot ?protein .\n    FILTER(?node1 != ?node2)\n\t\t}\n\t}\n  SERVICE <https://www.bgee.org/sparql/> {\n    ?gene genex:isExpressedIn ?a .\n    ?a rdfs:label \"brain\" .\n    ?gene orth:organism ?s . \n    ?s obo:RO_0002162 taxon:10116.\n\t}\n}",
    "target_endpoint": "https://sparql.uniprot.org/sparql",
    "federates_with": [
      "https://sparql.omabrowser.org/sparql/",
      "https://www.bgee.org/sparql/"
    ],
    "endpoint_set": "Uniprot",
    "file_path": "UniProt/117_biosodafrontend_glioblastoma_orthologs_rat.ttl",
    "predicted_query": "# https://sparql.uniprot.org/sparql\nPREFIX up: <http://purl.uniprot.org/core/>\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX taxon: <http://purl.uniprot.org/taxonomy/>\n\nSELECT DISTINCT ?protein ?proteinName ?organismName\nWHERE {\n  # Find proteins associated with glioblastoma\n  {\n    SELECT DISTINCT ?protein\n    WHERE {\n      ?disease rdfs:label \"glioblastoma\" . #Match the glioblastoma label\n      ?protein up:annotation ?disease .\n    }\n  }\n\n  # Find orthologs of those proteins expressed in rat brain\n  SERVICE <https://sparql.uniprot.org/sparql> {\n    ?protein up:scientificName ?proteinName .\n    ?protein up:organism taxon:10116 . # Rat taxonomy ID\n    taxon:10116 rdfs:label ?organismName .\n  }\n}",
    "predicted_endpoint": "https://sparql.uniprot.org/sparql",
    "predicted_endpoint_equal_to_target_endpoint": true,
    "predicted_endpoint_in_federates_with": false,
    "predicted_endpoint_or_federated_endpoint": true,
    "run_id_langsmith": "a8a636ec-cbbf-4ae2-a43b-0a26f81c17bb",
    "evaluation_timestamp": "2025-05-11T00:43:37.112011",
    "question_understanding_prompt_tokens": 258,
    "question_understanding_completion_tokens": 40,
    "question_understanding_total_tokens": 298,
    "sparql_query_construction_prompt_tokens": 2263,
    "sparql_query_construction_completion_tokens": 0,
    "sparql_query_construction_total_tokens": 2263,
    "is_valid_sparql": true,
    "sparql_syntax_error": "syntactically correct",
    "result_eval_f1_score": 0.0,
    "result_eval_precision": 0.0,
    "result_eval_recall": 0.0,
    "error_occured_at_endpoint": false,
    "predicted_query_result_is_empty": true,
    "ground_truth_query_result_is_empty": false,
    "error_occured_at_endpoint_message": "no error, but empty result"
  },
  {
    "resource": "https://sparql.uniprot.org/.well-known/sparql-examples/116_biosodafrontend_rabit_mouse_orthologs",
    "natural_language_question": "Rabbit's proteins encoded by genes that are orthologous to Mouse's HBB-Y gene and their cross reference links to Uniprot",
    "ground_truth_query": "PREFIX lscr: <http://purl.org/lscr#>\nPREFIX orth: <http://purl.org/net/orth#>\nPREFIX up: <http://purl.uniprot.org/core/>\nPREFIX obo: <http://purl.obolibrary.org/obo/>\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nSELECT DISTINCT ?PROTEIN_1 ?PROTEIN_2 ?UNIPROT_XREF_1 ?UNIPROT_XREF_2 WHERE {\n\t?taxon_1 up:commonName 'Mouse' .\n\t?taxon_2 up:commonName 'Rabbit' .\n\tSERVICE <https://sparql.omabrowser.org/sparql/> {\n\t\t?cluster a orth:OrthologsCluster .\n\t\t?cluster orth:hasHomologousMember ?node1 .\n\t\t?cluster orth:hasHomologousMember ?node2 .\n\t\t?node2 orth:hasHomologousMember* ?PROTEIN_2 .\n\t\t?node1 orth:hasHomologousMember* ?PROTEIN_1 .\n\t\t?PROTEIN_1 a orth:Protein .\n\t\t?PROTEIN_1 orth:organism/obo:RO_0002162 ?taxon_1 ;\n\t\t\trdfs:label 'HBB-Y' ;\n\t\t\tlscr:xrefUniprot ?UNIPROT_XREF_1 .\n\t\t?PROTEIN_2 a orth:Protein .\n\t\t?PROTEIN_2 orth:organism/obo:RO_0002162 ?taxon_2 .\n\t\t?PROTEIN_2 lscr:xrefUniprot ?UNIPROT_XREF_2 .\n\t\tFILTER ( ?node1 != ?node2 )\n\t}\n}",
    "target_endpoint": "https://sparql.uniprot.org/sparql",
    "federates_with": [
      "https://sparql.omabrowser.org/sparql/"
    ],
    "endpoint_set": "Uniprot",
    "file_path": "UniProt/116_biosodafrontend_rabit_mouse_orthologs.ttl",
    "predicted_query": "# https://sparql.uniprot.org/sparql\nPREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX up: <http://purl.uniprot.org/core/>\nPREFIX taxon: <http://purl.uniprot.org/taxonomy/>\n\nSELECT DISTINCT ?rabbitProtein ?rabbitProteinName ?uniprotCrossReference\nWHERE {\n  # Find Rabbit proteins\n  ?rabbitProtein a up:Protein ;\n                 up:organism taxon:9986 ;  # Rabbit taxon ID\n                 rdfs:label ?rabbitProteinName .\n\n  # Find Mouse HBB-Y gene (using a SERVICE clause to query UniProt for Mouse)\n  SERVICE <https://sparql.uniprot.org/sparql> {\n    SELECT ?mouseGene WHERE {\n      ?mouseGene a up:Protein ;\n                 up:organism taxon:10090 ;  # Mouse taxon ID\n                 rdfs:label \"HBB-Y\" . # HBB-Y gene name\n    }\n  }\n\n  # Assuming orthology is indicated via a cross-reference or related property within UniProt\n  # This part might need adjustment based on the actual data model in UniProt\n  ?rabbitProtein up:sequence ?sequence . # Added to ensure that the rabbit protein has a sequence\n\n  # Find cross-references to UniProt\n  OPTIONAL { ?rabbitProtein up:database ?uniprotCrossReference . }\n  \n  # Filter for orthologous proteins (this is a simplification, adjust as needed)\n  FILTER EXISTS {\n    ?rabbitProtein up:gene ?gene .\n    ?gene up:orthologousTo ?mouseGene . # Assuming orthology is represented by orthologousTo property\n  }\n}",
    "predicted_endpoint": "https://sparql.uniprot.org/sparql",
    "predicted_endpoint_equal_to_target_endpoint": true,
    "predicted_endpoint_in_federates_with": false,
    "predicted_endpoint_or_federated_endpoint": true,
    "run_id_langsmith": "ed748bcb-7f82-48fd-a57a-8e7b6684a0cf",
    "evaluation_timestamp": "2025-05-11T00:43:55.338282",
    "question_understanding_prompt_tokens": 266,
    "question_understanding_completion_tokens": 49,
    "question_understanding_total_tokens": 315,
    "sparql_query_construction_prompt_tokens": 3425,
    "sparql_query_construction_completion_tokens": 652,
    "sparql_query_construction_total_tokens": 4077,
    "is_valid_sparql": true,
    "sparql_syntax_error": "syntactically correct",
    "result_eval_f1_score": 0.0,
    "result_eval_precision": 0.0,
    "result_eval_recall": 0.0,
    "error_occured_at_endpoint": false,
    "predicted_query_result_is_empty": true,
    "ground_truth_query_result_is_empty": false,
    "error_occured_at_endpoint_message": "no error, but empty result"
  },
  {
    "resource": "https://sparql.uniprot.org/.well-known/sparql-examples/29",
    "natural_language_question": "Use <a href=\"http://allie.dbcls.jp/\">ALLIE</a> a service for Abbreviation / Long Form in Japanese and English to search in UniProt using Japanese.",
    "ground_truth_query": "PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX up: <http://purl.uniprot.org/core/>\n\nSELECT ?protein ?englishLabelStr\nWHERE {\n    SERVICE <https://data.allie.dbcls.jp/sparql>{\n        ?x rdfs:label \"アミロイド前駆体タンパク質\"@ja ;\n            rdfs:label ?englishLabel .\n        FILTER(lang(?englishLabel) = \"en\")\n    }\n    BIND (STR(?englishLabel) AS ?englishLabelStr)\n    ?protein a up:Protein .\n    {\n        ?protein (up:recommendedName|up:alternativeName) ?structuredName .\n    }\n    UNION\n    {\n        VALUES(?partType){(up:domain) (up:component)}\n            ?protein ?partType ?part .\n        ?part (up:recommendedName|up:alternativeName) ?structuredName .\n    }\n    ?structuredName ?anyKindOfName  ?englishLabelStr .\n    ?anyKindOfName rdfs:subPropertyOf up:structuredNameType .\n}",
    "target_endpoint": "https://sparql.uniprot.org/sparql/",
    "federates_with": [
      "https://data.allie.dbcls.jp/sparql"
    ],
    "endpoint_set": "Uniprot",
    "file_path": "UniProt/29_search_uniprot_in_japanese_with_allie.ttl",
    "predicted_query": "# https://sparql.uniprot.org/sparql\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX up: <http://purl.uniprot.org/core/>\nPREFIX skos: <http://www.w3.org/2004/02/skos/core#>\n\n# Query UniProt for entries related to terms potentially obtained from ALLIE.\n# Since I don't have direct access to ALLIE, I'm assuming the user provides relevant terms.\n# This query searches for these terms within UniProt properties like rdfs:label, up:scientificName, or skos:prefLabel.\nSELECT DISTINCT ?entity ?label\nWHERE {\n  ?entity a up:Protein .  # Assuming we are interested in proteins.  Adjust if needed.\n  ?entity rdfs:label ?label .\n  # Example: Search for proteins with labels containing \"provided_term_from_ALLIE\".\n  # Replace \"provided_term_from_ALLIE\" with the actual term you get from ALLIE.\n  FILTER (CONTAINS(LCASE(?label), \"provided_term_from_ALLIE\"))\n  # You can add more FILTER clauses to search in other properties, e.g., scientific name:\n  # OPTIONAL { ?entity up:scientificName ?scientificName . }\n  # FILTER (CONTAINS(LCASE(?scientificName), \"another_term_from_ALLIE\"))\n}\n# The query can be expanded to include more properties and FILTER conditions as needed.",
    "predicted_endpoint": "https://sparql.uniprot.org/sparql",
    "predicted_endpoint_equal_to_target_endpoint": true,
    "predicted_endpoint_in_federates_with": false,
    "predicted_endpoint_or_federated_endpoint": true,
    "run_id_langsmith": "72675aaf-b158-4e73-b69b-d101f8607321",
    "evaluation_timestamp": "2025-05-11T00:44:16.380300",
    "question_understanding_prompt_tokens": 274,
    "question_understanding_completion_tokens": 22,
    "question_understanding_total_tokens": 296,
    "sparql_query_construction_prompt_tokens": 1682,
    "sparql_query_construction_completion_tokens": 0,
    "sparql_query_construction_total_tokens": 1682,
    "is_valid_sparql": true,
    "sparql_syntax_error": "syntactically correct",
    "result_eval_f1_score": 0.0,
    "result_eval_precision": 0.0,
    "result_eval_recall": 0.0,
    "error_occured_at_endpoint": true,
    "predicted_query_result_is_empty": true,
    "ground_truth_query_result_is_empty": true,
    "error_occured_at_endpoint_message": "The read operation timed out"
  },
  {
    "resource": "https://sparql.rhea-db.org/.well-known/sparql-examples/94_Select_all_approved_reactions_with_CHEBI_or_one_of_its_descendant_optional_UniProtKB_reviewed_EC",
    "natural_language_question": "Select all approved reactions with CHEBI:17815 (a 1,2-diacyl-sn-glycerol) or one of its descendant. Display links to UniProtKB/Swiss-Prot entries via EC numbers if the link rhea-ec exists.",
    "ground_truth_query": "PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX rh:<http://rdf.rhea-db.org/>\nPREFIX CHEBI:<http://purl.obolibrary.org/obo/CHEBI_>\nPREFIX up:<http://purl.uniprot.org/core/>\n\nSELECT\n  distinct\n    ?reaction\n    ?enzyme\n    (count(distinct ?protein) as ?proteinCount)\nWHERE {\n  ?reaction rdfs:subClassOf rh:Reaction .\n  ?reaction rh:status rh:Approved .\n  ?reaction rh:side ?reactionSide .\n\n  OPTIONAL {?reaction rh:ec ?enzyme .\n    SERVICE <https://sparql.uniprot.org/sparql> {\n      ?protein up:reviewed true .\n      ?protein up:enzyme ?enzyme.\n    }\n  } .\n  ?reactionSide rh:contains ?participant .\n  ?participant rh:compound ?compound .\n  ?compound rh:chebi ?chebi .\n  ?chebi rdfs:subClassOf* CHEBI:17815 .\n}\nGROUP BY ?reaction ?enzyme\nORDER BY ?reaction\nLIMIT 985915",
    "target_endpoint": "https://sparql.rhea-db.org/sparql",
    "federates_with": [
      "https://sparql.uniprot.org/sparql"
    ],
    "endpoint_set": "Rhea",
    "file_path": "Rhea/94_Select_all_approved_reactions_with_CHEBI_or_one_of_its_descendant_optional_UniProtKB_reviewed_EC.ttl",
    "predicted_query": "# https://sparql.rhea-db.org/sparql\nPREFIX rhea: <http://rdf.rhea-db.org/>\nPREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX chebi: <http://purl.obolibrary.org/obo/CHEBI_>\n\nSELECT DISTINCT ?reaction ?reactionName ?uniprotLink\nWHERE {\n  # Find reactions involving CHEBI:17815 or its descendants\n  {\n    VALUES ?chebiEntity { chebi:17815 }  #CHEBI:17815\n    ?chebiEntity rdfs:subClassOf* ?chemical .\n  }\n  ?reaction rhea: Rhea_has_a_participant ?chemical .\n  ?reaction rdf:type rhea:Reaction .\n\n  # Filter for approved reactions\n  ?reaction rhea:status \"approved\" .\n  ?reaction rdfs:label ?reactionName .\n\n  # Find EC numbers associated with the reaction\n  OPTIONAL {\n    ?reaction rhea:ec ?ecNumber .\n\n    #Federate with UniProt to find UniProtKB/Swiss-Prot entries\n    SERVICE <https://sparql.uniprot.org/sparql> {\n      ?uniprotLink <http://purl.uniprot.org/core/citation> ?ecNumber .\n    }\n  }\n}",
    "predicted_endpoint": "https://sparql.rhea-db.org/sparql",
    "predicted_endpoint_equal_to_target_endpoint": true,
    "predicted_endpoint_in_federates_with": false,
    "predicted_endpoint_or_federated_endpoint": true,
    "run_id_langsmith": "29a1556b-2784-47eb-a2ff-43578bde09cc",
    "evaluation_timestamp": "2025-05-11T00:54:25.039638",
    "question_understanding_prompt_tokens": 294,
    "question_understanding_completion_tokens": 71,
    "question_understanding_total_tokens": 365,
    "sparql_query_construction_prompt_tokens": 1834,
    "sparql_query_construction_completion_tokens": 0,
    "sparql_query_construction_total_tokens": 1834,
    "is_valid_sparql": false,
    "sparql_syntax_error": "Lexical error at line 14, column 41.  Encountered: '32' (32), after prefix \"Rhea_has_a_participant\"",
    "result_eval_f1_score": 0.0,
    "result_eval_precision": 0.0,
    "result_eval_recall": 0.0,
    "error_occured_at_endpoint": false,
    "predicted_query_result_is_empty": true,
    "ground_truth_query_result_is_empty": false,
    "error_occured_at_endpoint_message": "syntactically not correct"
  },
  {
    "resource": "https://sparql.rhea-db.org/.well-known/sparql-examples/11",
    "natural_language_question": "Distribution of reactions according to the first class of the enzyme classification (federated query)",
    "ground_truth_query": "PREFIX ec: <http://purl.uniprot.org/enzyme/>\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX rh: <http://rdf.rhea-db.org/>\nPREFIX skos: <http://www.w3.org/2004/02/skos/core#>\n\n# Query 11\n# Retrieve the count of reactions mapped to each level (main class) of the enzyme classification\n#\n# This query mimics the Filter section of the Rhea website (Browse all reactions)\n# https://www.rhea-db.org/rhea?query=\nSELECT ?ecClass (STR(?ecName) AS ?ecClassName) (COUNT(?rhea) AS ?rheaCount)\nWHERE {\n  SERVICE <https://sparql.uniprot.org/sparql> {\n    VALUES (?ecClass) { (ec:1.-.-.-)(ec:2.-.-.-)(ec:3.-.-.-)(ec:4.-.-.-)(ec:5.-.-.-) (ec:6.-.-.-) (ec:7.-.-.-)}\n    ?ecNumber rdfs:subClassOf ?ecClass .\n    ?ecClass skos:prefLabel ?ecName .\n  }\n  ?rhea rdfs:subClassOf rh:Reaction .\n  ?rhea rh:ec ?ecNumber .\n} GROUP BY ?ecClass ?ecName",
    "target_endpoint": "https://sparql.rhea-db.org/sparql",
    "federates_with": [
      "https://sparql.uniprot.org/sparql"
    ],
    "endpoint_set": "Rhea",
    "file_path": "Rhea/11.ttl",
    "predicted_query": "# https://sparql.rhea-db.org/sparql\nPREFIX rhea: <http://rdf.rhea-db.org/>\nPREFIX chebi: <http://purl.obolibrary.org/obo/CHEBI_>\nPREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\n\nSELECT ?firstEcClass (COUNT(DISTINCT ?reaction) AS ?reactionCount)\nWHERE {\n  # Get reactions from Rhea\n  SERVICE <https://sparql.rhea-db.org/sparql> {\n    ?reaction rdf:type rhea:Reaction .\n    # Try to find direct enzyme links.  If not available, consider CHEBI roles.\n    OPTIONAL {\n      ?reaction rhea:enzyme ?enzyme .\n    }\n    OPTIONAL {\n      ?reaction rhea:has_participant ?participant .\n      ?participant rdf:type chebi:CHEBI_23884 .  # CHEBI:23884 is 'enzyme' role\n      ?enzyme chebi:CHEBI_ID ?enzymeChebiId .\n    }\n  }\n\n  # Get EC number from UniProt using the enzyme identifier.\n  SERVICE <https://sparql.uniprot.org/sparql> {\n    OPTIONAL {\n      ?enzyme uniprot:ec ?ecNumber . # Try direct EC number link first\n    }\n    OPTIONAL {\n       ?protein rdfs:seeAlso ?enzyme .\n       ?protein uniprot:ec ?ecNumber .\n    }\n  }\n\n  # Extract the first digit of the EC number\n  BIND(SUBSTR(STR(?ecNumber), 1, 1) AS ?firstEcClass)\n}\nGROUP BY ?firstEcClass\nORDER BY ?firstEcClass",
    "predicted_endpoint": "https://sparql.rhea-db.org/sparql",
    "predicted_endpoint_equal_to_target_endpoint": true,
    "predicted_endpoint_in_federates_with": false,
    "predicted_endpoint_or_federated_endpoint": true,
    "run_id_langsmith": "05799336-7408-49b8-8e02-85e9023b37ff",
    "evaluation_timestamp": "2025-05-11T00:54:32.696579",
    "question_understanding_prompt_tokens": 255,
    "question_understanding_completion_tokens": 25,
    "question_understanding_total_tokens": 280,
    "sparql_query_construction_prompt_tokens": 1546,
    "sparql_query_construction_completion_tokens": 648,
    "sparql_query_construction_total_tokens": 2194,
    "is_valid_sparql": false,
    "sparql_syntax_error": "Line 26, column 15: Unresolved prefixed name: uniprot:ec",
    "result_eval_f1_score": 0.0,
    "result_eval_precision": 0.0,
    "result_eval_recall": 0.0,
    "error_occured_at_endpoint": false,
    "predicted_query_result_is_empty": true,
    "ground_truth_query_result_is_empty": false,
    "error_occured_at_endpoint_message": "syntactically not correct"
  },
  {
    "resource": "https://sparql.rhea-db.org/.well-known/sparql-examples/109_Distribution_of_reactions_according_to_the_first_level_of_enzyme_classification",
    "natural_language_question": "Distribution of reactions according to the first level of enzyme classification",
    "ground_truth_query": "\nPREFIX rh:<http://rdf.rhea-db.org/>\nPREFIX ec:<http://purl.uniprot.org/enzyme/>\nPREFIX rdfs:<http://www.w3.org/2000/01/rdf-schema#>\nPREFIX skos:<http://www.w3.org/2004/02/skos/core#>\n\nSELECT\n  ?ecClass\n  (str(?ecName) as ?ecClassName)\n  (count(?reaction) as ?reactionCount)\nWHERE\n{\n  SERVICE <http://sparql.uniprot.org/sparql> {\n    VALUES (?ecClass) { (ec:1.-.-.-)(ec:2.-.-.-)(ec:3.-.-.-)(ec:4.-.-.-)(ec:5.-.-.-) (ec:6.-.-.-) (ec:7.-.-.-) }\n    ?ecNumber rdfs:subClassOf ?ecClass .\n    ?ecClass skos:prefLabel ?ecName .\n  }\n  ?reaction rdfs:subClassOf rh:Reaction .\n  ?reaction rh:ec ?ecNumber .\n}\nGROUP BY ?ecClass ?ecName\n",
    "target_endpoint": "https://sparql.rhea-db.org/sparql",
    "federates_with": [
      "http://sparql.uniprot.org/sparql"
    ],
    "endpoint_set": "Rhea",
    "file_path": "Rhea/109_Distribution_of_reactions_according_to_the_first_level_of_enzyme_classification.ttl",
    "predicted_query": "# https://sparql.rhea-db.org/sparql\nPREFIX rhea: <http://rdf.rhea-db.org/>\nPREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\n\nSELECT ?firstLevelEC (COUNT(DISTINCT ?reaction) AS ?reactionCount)\nWHERE {\n  # Get all reactions\n  ?reaction rdf:type rhea:Reaction .\n  \n  # Get the corresponding EC number for the reaction.  This assumes that Rhea links directly to EC.\n  ?reaction rhea:ec ?ecNumber .\n  \n  #Federate with UniProt to get the first level of the EC number\n  SERVICE <https://sparql.uniprot.org/sparql> {\n    BIND(STRBEFORE(?ecNumber, \".\") AS ?firstLevelEC) # Extract the first level EC number\n  }\n}\nGROUP BY ?firstLevelEC\nORDER BY DESC(?reactionCount)",
    "predicted_endpoint": "https://sparql.rhea-db.org/sparql",
    "predicted_endpoint_equal_to_target_endpoint": true,
    "predicted_endpoint_in_federates_with": false,
    "predicted_endpoint_or_federated_endpoint": true,
    "run_id_langsmith": "7383668c-9f9b-4932-9e97-7bd2c36f32b0",
    "evaluation_timestamp": "2025-05-11T00:54:38.930832",
    "question_understanding_prompt_tokens": 248,
    "question_understanding_completion_tokens": 24,
    "question_understanding_total_tokens": 272,
    "sparql_query_construction_prompt_tokens": 1372,
    "sparql_query_construction_completion_tokens": 0,
    "sparql_query_construction_total_tokens": 1372,
    "is_valid_sparql": true,
    "sparql_syntax_error": "syntactically correct",
    "result_eval_f1_score": 0.0,
    "result_eval_precision": 0.0,
    "result_eval_recall": 0.0,
    "error_occured_at_endpoint": false,
    "predicted_query_result_is_empty": true,
    "ground_truth_query_result_is_empty": false,
    "error_occured_at_endpoint_message": "no error, but empty result"
  },
  {
    "resource": "https://sparql.rhea-db.org/.well-known/sparql-examples/12",
    "natural_language_question": "Select all Rhea reactions linked to protein sequences (enzymes and transporters) in UniProtKB",
    "ground_truth_query": "PREFIX rh: <http://rdf.rhea-db.org/>\nPREFIX up: <http://purl.uniprot.org/core/>\n\n# Query 12\n# Select all Rhea reactions used to annotate enzyme sequences in UniProtKB\n# return the number of UniProtKB entries\n# Federated query using a service to UniProt SPARQL endpoint\n#\n# This query corresponds to the Rhea website query:\n# https://www.rhea-db.org/rhea?query=uniprot:*\n#\nSELECT ?uniprotCount ?rhea ?accession ?equation \nWHERE {\n  SERVICE <https://sparql.uniprot.org/sparql> { \n  \tSELECT ?rhea (count(?uniprot) as ?uniprotCount) {\n      ?uniprot up:annotation/up:catalyticActivity/up:catalyzedReaction ?rhea . \n  \t}\n  \tGROUP BY ?rhea\n  }\n  ?rhea rh:accession ?accession .\n  ?rhea rh:equation ?equation .\n}",
    "target_endpoint": "https://sparql.rhea-db.org/sparql",
    "federates_with": [
      "https://sparql.uniprot.org/sparql"
    ],
    "endpoint_set": "Rhea",
    "file_path": "Rhea/12.ttl",
    "predicted_query": "# https://sparql.rhea-db.org/sparql\nPREFIX rhea: <http://rdf.rhea-db.org/>\nPREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\n\nSELECT DISTINCT ?rheaReaction ?rheaReactionLabel ?uniprotProtein ?uniprotProteinLabel\nWHERE {\n  # Get Rhea reactions\n  ?rheaReaction rdf:type rhea:Reaction .\n  ?rheaReaction rdfs:label ?rheaReactionLabel .\n\n  # Link Rhea reactions to UniProt proteins via Rhea participants\n  ?rheaReaction rhea:participant ?participant .\n  ?participant rdfs:seeAlso ?uniprotProtein .\n\n  # Filter for UniProt proteins that are enzymes or transporters using GO terms\n  SERVICE <https://sparql.uniprot.org/sparql> {\n    ?uniprotProtein rdfs:label ?uniprotProteinLabel .\n    FILTER (STRSTARTS(STR(?uniprotProtein), \"http://purl.uniprot.org/uniprot/\")) . # Ensure it's a UniProt protein\n    {\n      ?uniprotProtein rdf:type <http://purl.uniprot.org/core/Protein> .\n      ?uniprotProtein <http://purl.uniprot.org/core/annotation> ?annotation .\n      ?annotation rdf:type <http://purl.uniprot.org/core/GOAnnotation> .\n      ?annotation <http://purl.uniprot.org/core/goTerm> ?goTerm .\n      FILTER (?goTerm IN (\n        <http://purl.obolibrary.org/obo/GO_0004857>, # enzyme activity\n        <http://purl.obolibrary.org/obo/GO_0005215>  # transporter activity\n      ))\n    }\n  }\n}",
    "predicted_endpoint": "https://sparql.rhea-db.org/sparql",
    "predicted_endpoint_equal_to_target_endpoint": true,
    "predicted_endpoint_in_federates_with": false,
    "predicted_endpoint_or_federated_endpoint": true,
    "run_id_langsmith": "f41fd760-9c64-40ad-89db-e6dd0235b60e",
    "evaluation_timestamp": "2025-05-11T00:54:49.580509",
    "question_understanding_prompt_tokens": 256,
    "question_understanding_completion_tokens": 30,
    "question_understanding_total_tokens": 286,
    "sparql_query_construction_prompt_tokens": 1792,
    "sparql_query_construction_completion_tokens": 0,
    "sparql_query_construction_total_tokens": 1792,
    "is_valid_sparql": true,
    "sparql_syntax_error": "syntactically correct",
    "result_eval_f1_score": 0.0,
    "result_eval_precision": 0.0,
    "result_eval_recall": 0.0,
    "error_occured_at_endpoint": false,
    "predicted_query_result_is_empty": true,
    "ground_truth_query_result_is_empty": false,
    "error_occured_at_endpoint_message": "no error, but empty result"
  },
  {
    "resource": "https://sparql.rhea-db.org/.well-known/sparql-examples/112_Total_number_of_reaction_ec_protein_links",
    "natural_language_question": "Total number of <reaction> <ec> <protein> links",
    "ground_truth_query": "PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX rh:<http://rdf.rhea-db.org/>\nPREFIX ec:<http://purl.uniprot.org/enzyme/>\nPREFIX up:<http://purl.uniprot.org/core/>\n\nSELECT\n  (count(?reaction) as ?reactionEcProteinLinkCount)\nWHERE {\n  ?reaction rdfs:subClassOf rh:Reaction .\n  ?reaction rh:ec ?enzyme\n  SERVICE <http://sparql.uniprot.org/sparql> {\n    ?protein up:reviewed true .\n    ?protein up:enzyme ?enzyme.\n  }\n}",
    "target_endpoint": "https://sparql.rhea-db.org/sparql",
    "federates_with": [
      "http://sparql.uniprot.org/sparql"
    ],
    "endpoint_set": "Rhea",
    "file_path": "Rhea/112_Total_number_of_reaction_ec_protein_links.ttl",
    "predicted_query": "# https://sparql.rhea-db.org/sparql\nPREFIX rhea: <http://rdf.rhea-db.org/>\nPREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>\nPREFIX uniprot: <http://purl.uniprot.org/core/>\n\nSELECT (COUNT(DISTINCT ?reaction) AS ?totalLinks)\nWHERE {\n  # Find reactions in Rhea\n  ?reaction rdf:type rhea:Reaction .\n\n  # Attempt to link reactions to proteins via UniProt.  This assumes some kind of cross-reference exists.\n  SERVICE <https://sparql.uniprot.org/sparql> {\n    ?protein a uniprot:Protein .\n    # Assuming some kind of relationship between Rhea reactions and UniProt proteins exists.\n    # This is a placeholder and needs to be replaced with the actual property if known.\n    # Example:  ?protein uniprot:encodedBy ?gene .  ?gene rdfs:seeAlso ?reaction .\n    # We'll use a FILTER to match the \"ec\" entity.  This might need adjustment based on the actual data.\n    FILTER (CONTAINS(str(?protein), \"ec\")) # This is a very broad filter and might need refinement.\n  }\n}",
    "predicted_endpoint": "https://sparql.rhea-db.org/sparql",
    "predicted_endpoint_equal_to_target_endpoint": true,
    "predicted_endpoint_in_federates_with": false,
    "predicted_endpoint_or_federated_endpoint": true,
    "run_id_langsmith": "77f290dd-a8ae-42dc-8d82-3891b41c48d5",
    "evaluation_timestamp": "2025-05-11T00:54:59.881198",
    "question_understanding_prompt_tokens": 253,
    "question_understanding_completion_tokens": 21,
    "question_understanding_total_tokens": 274,
    "sparql_query_construction_prompt_tokens": 2168,
    "sparql_query_construction_completion_tokens": 461,
    "sparql_query_construction_total_tokens": 2629,
    "is_valid_sparql": true,
    "sparql_syntax_error": "syntactically correct",
    "result_eval_f1_score": 0.0,
    "result_eval_precision": 0.0,
    "result_eval_recall": 0.0,
    "error_occured_at_endpoint": false,
    "predicted_query_result_is_empty": false,
    "ground_truth_query_result_is_empty": false,
    "error_occured_at_endpoint_message": "no error"
  },
  {
    "resource": "https://sparql.rhea-db.org/.well-known/sparql-examples/19_draft_human_metabolome",
    "natural_language_question": "Generate a draft human metabolome",
    "ground_truth_query": "PREFIX chebislash: <http://purl.obolibrary.org/obo/chebi/>\nPREFIX rh: <http://rdf.rhea-db.org/>\nPREFIX taxon: <http://purl.uniprot.org/taxonomy/>\nPREFIX up: <http://purl.uniprot.org/core/>\n\nSELECT\n  ?uniprot ?mnemonic ?rhea ?chebi ?smiles ?inchiKey\nWHERE\n{\n  ?rhea rh:side/rh:contains/rh:compound ?compound .\n  ?compound (rh:chebi|(rh:reactivePart/rh:chebi)|(rh:underlyingChebi/rh:chebi)) ?chebi .\n  ?chebi chebislash:smiles ?smiles ;\n          chebislash:inchikey ?inchiKey .\n  SERVICE <https://sparql.uniprot.org/sparql> {\n     ?uniprot up:annotation/up:catalyticActivity/up:catalyzedReaction ?rhea ;\n                                             up:organism taxon:9606 ;\n                                             up:mnemonic ?mnemonic .\n\n   }\n}",
    "target_endpoint": "https://sparql.rhea-db.org/sparql/",
    "federates_with": [
      "https://sparql.uniprot.org/sparql"
    ],
    "endpoint_set": "Rhea",
    "file_path": "Rhea/19_draft_human_metabolome.ttl",
    "predicted_query": "# https://sparql.uniprot.org/sparql\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX up: <http://purl.uniprot.org/core/>\nPREFIX taxon: <http://purl.uniprot.org/taxonomy/>\n\nSELECT DISTINCT ?metabolite ?protein ?reaction\nWHERE {\n  # Find proteins associated with Homo sapiens in UniProt\n  SERVICE <https://sparql.uniprot.org/sparql> {\n    SELECT DISTINCT ?protein WHERE {\n      ?protein a up:Protein .\n      ?protein up:organism taxon:9606 .  # Homo sapiens taxonomy ID\n    }\n  }\n\n  # Find reactions catalyzed by these proteins in Rhea\n  SERVICE <https://sparql.rhea-db.org/sparql> {\n    ?reaction rdfs:label ?reactionLabel .\n    ?reaction <http://purl.obolibrary.org/obo/RO_0002333> ?protein . # catalyzed by\n    ?reaction <http://purl.obolibrary.org/obo/BFO_0000051> ?process . # part of process\n    ?process <http://purl.obolibrary.org/obo/IAO_0000136> ?metabolite . # has participant\n  }\n  \n  #Optional: Include lipid metabolites from SwissLipids (if needed)\n  #SERVICE <https://sparql.swisslipids.org/sparql/> {\n  #  ?lipid a <http://www.swisslipids.org/rdf/SwissLipids#Lipid> .\n  #  ?lipid rdfs:label ?lipidName .\n  #  FILTER (CONTAINS(lcase(?lipidName), \"human\")) #Optional: Filter for human-related lipids\n  #  BIND(?lipidName AS ?metabolite)\n  #}\n}",
    "predicted_endpoint": "https://sparql.uniprot.org/sparql",
    "predicted_endpoint_equal_to_target_endpoint": false,
    "predicted_endpoint_in_federates_with": true,
    "predicted_endpoint_or_federated_endpoint": true,
    "run_id_langsmith": "155fd84a-541f-4e6e-9832-e964a5d6e285",
    "evaluation_timestamp": "2025-05-11T00:55:18.258826",
    "question_understanding_prompt_tokens": 246,
    "question_understanding_completion_tokens": 20,
    "question_understanding_total_tokens": 266,
    "sparql_query_construction_prompt_tokens": 1449,
    "sparql_query_construction_completion_tokens": 664,
    "sparql_query_construction_total_tokens": 2113,
    "is_valid_sparql": true,
    "sparql_syntax_error": "syntactically correct",
    "result_eval_f1_score": 0.0,
    "result_eval_precision": 0.0,
    "result_eval_recall": 0.0,
    "error_occured_at_endpoint": false,
    "predicted_query_result_is_empty": true,
    "ground_truth_query_result_is_empty": false,
    "error_occured_at_endpoint_message": "no error, but empty result"
  },
  {
    "resource": "https://sparql.rhea-db.org/.well-known/sparql-examples/20_search_chemical_names_in_japanese",
    "natural_language_question": "Search for Chemical names starting in Japanese, translated to english using allie",
    "ground_truth_query": "PREFIX oboInOwl: <http://www.geneontology.org/formats/oboInOwl#>\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\n\nSELECT\n*\nWHERE {\nSERVICE <https://data.allie.dbcls.jp/sparql>{\n        ?x rdfs:label \"1,2,4-トリクロロベンゼン\"@ja ;\n            rdfs:label ?englishLabel .\n        FILTER(lang(?englishLabel) = \"en\")\n    }\n  BIND(STR(?englishLabel) AS ?englishLabelStr)\n  ?chebi rdfs:label|oboInOwl:hasSynonym ?englishLabelStr .\n}",
    "target_endpoint": "https://sparql.rhea-db.org/sparql/",
    "federates_with": [
      "https://data.allie.dbcls.jp/sparql"
    ],
    "endpoint_set": "Rhea",
    "file_path": "Rhea/20_search_chemical_names_in_japanese.ttl",
    "predicted_query": "# https://sparql.rhea-db.org/sparql\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX chebi: <http://purl.obolibrary.org/obo/CHEBI_>\n\nSELECT DISTINCT ?chemicalName\nWHERE {\n  {\n    # Query Rhea DB for chemical names starting with \"Japanese\"\n    SERVICE <https://sparql.rhea-db.org/sparql> {\n      ?entity rdfs:label ?chemicalName .\n      FILTER STRSTARTS(LCASE(?chemicalName), \"japanese\")\n    }\n  }\n  UNION\n  {\n    # Query SwissLipids for chemical names starting with \"Japanese\"\n    SERVICE <https://sparql.swisslipids.org/sparql/> {\n      ?entity rdfs:label ?chemicalName .\n      FILTER STRSTARTS(LCASE(?chemicalName), \"japanese\")\n    }\n  }\n}",
    "predicted_endpoint": "https://sparql.rhea-db.org/sparql",
    "predicted_endpoint_equal_to_target_endpoint": true,
    "predicted_endpoint_in_federates_with": false,
    "predicted_endpoint_or_federated_endpoint": true,
    "run_id_langsmith": "f169860e-44b5-4a45-85a8-c9bed0e1582f",
    "evaluation_timestamp": "2025-05-11T00:55:35.356670",
    "question_understanding_prompt_tokens": 251,
    "question_understanding_completion_tokens": 27,
    "question_understanding_total_tokens": 278,
    "sparql_query_construction_prompt_tokens": 1332,
    "sparql_query_construction_completion_tokens": 0,
    "sparql_query_construction_total_tokens": 1332,
    "is_valid_sparql": true,
    "sparql_syntax_error": "syntactically correct",
    "result_eval_f1_score": 0.0,
    "result_eval_precision": 0.0,
    "result_eval_recall": 0.0,
    "error_occured_at_endpoint": false,
    "predicted_query_result_is_empty": true,
    "ground_truth_query_result_is_empty": false,
    "error_occured_at_endpoint_message": "no error, but empty result"
  },
  {
    "resource": "https://sparql.rhea-db.org/.well-known/sparql-examples/117_Retrieve_parent_reactions_and_their_catalyzing_enzymes_for_a_metabolite_that_is_not_directly_involved_in_a_reaction",
    "natural_language_question": "Retrieve parent reactions (and their catalyzing enzymes) for a metabolite that is not directly involved in a reaction (ex: CHEBI:83137).",
    "ground_truth_query": "PREFIX CHEBI: <http://purl.obolibrary.org/obo/CHEBI_>\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX rh:<http://rdf.rhea-db.org/>\nPREFIX ec:<http://purl.uniprot.org/enzyme/>\nPREFIX up:<http://purl.uniprot.org/core/>\nPREFIX taxon:<http://purl.uniprot.org/taxonomy/>\nPREFIX keywords:<http://purl.uniprot.org/keywords/>\n\nSELECT\n  ?chebi\n  ?ecNumber\n  (count(?protein) as ?proteinCount)\n  ?reaction\n  ?equation\nWHERE {\n  ?reaction rdfs:subClassOf rh:Reaction .\n  ?reaction rh:status rh:Approved .\n  ?reaction rh:equation ?equation .\n  ?reaction rh:ec ?ecNumber .\n  ?reaction rh:side ?reactionSide .\n  ?reactionSide rh:contains ?participant .\n  ?participant rh:compound ?compound .\n  ?compound rh:chebi ?chebi .\n  CHEBI:83137 rdfs:subClassOf+ ?chebi.\n\n  SERVICE <https://sparql.uniprot.org/sparql> {\n  ?protein a up:Protein .\n  ?protein up:reviewed true .\n    {?protein up:enzyme ?ecNumber}\n  UNION\n    {?protein up:domain/up:enzyme ?ecNumber}\n  UNION\n    {?protein up:component/up:enzyme ?ecNumber} .\n  }\n} \nGROUP BY ?chebi ?ecNumber ?reaction ?equation",
    "target_endpoint": "https://sparql.rhea-db.org/sparql",
    "federates_with": [
      "https://sparql.uniprot.org/sparql"
    ],
    "endpoint_set": "Rhea",
    "file_path": "Rhea/117_Retrieve_parent_reactions_and_their_catalyzing_enzymes_for_a_metabolite_that_is_not_directly_involved_in_a_reaction.ttl",
    "predicted_query": "# https://sparql.rhea-db.org/sparql\nPREFIX rhea: <http://rdf.rhea-db.org/>\nPREFIX chebi: <http://purl.obolibrary.org/obo/CHEBI_>\nPREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\n\nSELECT DISTINCT ?parentReaction ?enzyme ?enzymeLabel WHERE {\n  # Find reactions involving the metabolite CHEBI:83137 as a reactant or product\n  {\n    SELECT DISTINCT ?reaction WHERE {\n      ?reaction rhea: Rhea_has_reactant chebi:83137 .\n    }\n  }\n  UNION\n  {\n    SELECT DISTINCT ?reaction WHERE {\n      ?reaction rhea: Rhea_has_product chebi:83137 .\n    }\n  }\n\n  # Find reactants and products of the initial reactions\n  {\n    SELECT DISTINCT ?reactant ?product WHERE {\n      {\n        ?reaction rhea: Rhea_has_reactant ?reactant .\n      }\n      UNION\n      {\n        ?reaction rhea: Rhea_has_product ?product .\n      }\n    }\n  }\n\n  # Find \"parent\" reactions that use the products of the initial reaction as reactants\n  {\n    ?parentReaction rhea: Rhea_has_reactant ?product .\n    ?parentReaction rhea: Rhea_has_catalytic_activity ?enzyme .\n    ?enzyme rdfs:label ?enzymeLabel .\n  }\n  UNION\n  # Find \"parent\" reactions that produce the reactants of the initial reaction as products\n  {\n    ?parentReaction rhea: Rhea_has_product ?reactant .\n    ?parentReaction rhea: Rhea_has_catalytic_activity ?enzyme .\n    ?enzyme rdfs:label ?enzymeLabel .\n  }\n}",
    "predicted_endpoint": "https://sparql.rhea-db.org/sparql",
    "predicted_endpoint_equal_to_target_endpoint": true,
    "predicted_endpoint_in_federates_with": false,
    "predicted_endpoint_or_federated_endpoint": true,
    "run_id_langsmith": "3e3b4847-80ed-4774-8f4d-43827a3f124a",
    "evaluation_timestamp": "2025-05-11T00:57:08.654462",
    "question_understanding_prompt_tokens": 273,
    "question_understanding_completion_tokens": 42,
    "question_understanding_total_tokens": 315,
    "sparql_query_construction_prompt_tokens": 2484,
    "sparql_query_construction_completion_tokens": 696,
    "sparql_query_construction_total_tokens": 3180,
    "is_valid_sparql": false,
    "sparql_syntax_error": "Lexical error at line 11, column 40.  Encountered: '32' (32), after prefix \"Rhea_has_reactant\"",
    "result_eval_f1_score": 0.0,
    "result_eval_precision": 0.0,
    "result_eval_recall": 0.0,
    "error_occured_at_endpoint": false,
    "predicted_query_result_is_empty": true,
    "ground_truth_query_result_is_empty": false,
    "error_occured_at_endpoint_message": "syntactically not correct"
  },
  {
    "resource": "https://sparql.rhea-db.org/.well-known/sparql-examples/18",
    "natural_language_question": "Use <a href=\"https://idsm.elixir-czech.cz/sparql\">IDSM Sachem</a> to find ChEBIs with a a <a href=\"https://www.ebi.ac.uk/chebi/searchId.do?chebiId=CHEBI:35516\">Cholestane</a> skeleton (in SMILES). Then match returned ChEBIs to Rhea undirected reactions.",
    "ground_truth_query": "PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX rh: <http://rdf.rhea-db.org/>\nPREFIX sachem: <http://bioinfo.uochb.cas.cz/rdf/v1.0/sachem#>\n\n\nSELECT \n  ?rhea \n  ?chebi\nWHERE {\n  SERVICE <https://idsm.elixir-czech.cz/sparql/endpoint/chebi> {\n    ?chebi sachem:substructureSearch [\n        sachem:query \"[C@]12(CCC3CCCC[C@]3(C)[C@@]1([H])CC[C@]1(C)[C@@]([H])([C@@](C)([H])CCCC(C)C)CC[C@@]21[H])[H]\" ].\n  }\n  ?rhea rh:side/rh:contains/rh:compound/rdfs:subClassOf ?chebi .\n}",
    "target_endpoint": "https://sparql.rhea-db.org/sparql",
    "federates_with": [
      "https://idsm.elixir-czech.cz/sparql/endpoint/chebi"
    ],
    "endpoint_set": "Rhea",
    "file_path": "Rhea/18.ttl",
    "predicted_query": "# https://sparql.rhea-db.org/sparql\nPREFIX rhea: <http://rdf.rhea-db.org/>\nPREFIX chebi: <http://purl.obolibrary.org/obo/CHEBI_>\n\nSELECT DISTINCT ?reaction ?chebiName\nWHERE {\n  # Subquery to get ChEBI IDs with Cholestane skeleton from IDSM Sachem\n  SERVICE <https://idsm.elixir-czech.cz/sparql> {\n    PREFIX ids: <https://idsm.elixir-czech.cz/vocab/>\n    PREFIX chebi: <http://purl.obolibrary.org/obo/>\n    SELECT DISTINCT ?chebiID {\n      ?compound a ids:Compound .\n      ?compound ids:smiles ?smiles .\n      FILTER (CONTAINS(?smiles, \"C[C@]12C[C@@H](C)C[C@@H]3[C@H]([C@@H]1CC[C@@H]4[C@@]3(CC[C@@H](C[C@@H]4C)O)C)C2(C)C\")) # Filter for Cholestane skeleton\n      BIND(STRAFTER(str(?compound), \"https://idsm.elixir-czech.cz/compound/CHEBI:\") AS ?chebiID) # Extract ChEBI ID\n    }\n  } # End of IDSM Sachem service query\n\n  # Use the ChEBI IDs to find reactions in Rhea\n  ?reaction rhea:equation ?equation .\n  {\n    ?equation rhea:has_reactant chebi:?chebiID .\n  } UNION {\n    ?equation rhea:has_product chebi:?chebiID .\n  }\n  \n  SERVICE <https://sparql.rhea-db.org/sparql> {\n    BIND(IRI(CONCAT(\"http://purl.obolibrary.org/obo/CHEBI_\", ?chebiID)) AS ?chebiURI)\n    ?chebiURI rdfs:label ?chebiName .\n  }\n}",
    "predicted_endpoint": "https://sparql.rhea-db.org/sparql",
    "predicted_endpoint_equal_to_target_endpoint": true,
    "predicted_endpoint_in_federates_with": false,
    "predicted_endpoint_or_federated_endpoint": true,
    "run_id_langsmith": "875ccb32-a846-478c-9642-e88b58277be4",
    "evaluation_timestamp": "2025-05-11T00:57:19.803427",
    "question_understanding_prompt_tokens": 335,
    "question_understanding_completion_tokens": 52,
    "question_understanding_total_tokens": 387,
    "sparql_query_construction_prompt_tokens": 2567,
    "sparql_query_construction_completion_tokens": 660,
    "sparql_query_construction_total_tokens": 3227,
    "is_valid_sparql": false,
    "sparql_syntax_error": "Encountered \" \"prefix\" \"PREFIX \"\" at line 9, column 5.\nWas expecting one of:\n     ...\n     ...\n     ...\n     ...\n     ...\n     ...\n    \"select\" ...\n    \"values\" ...\n    \"graph\" ...\n    \"optional\" ...\n    \"minus\" ...\n    \"bind\" ...\n    \"service\" ...\n    \"filter\" ...\n    \"true\" ...\n    \"false\" ...\n     ...\n     ...\n     ...\n     ...\n     ...\n     ...\n     ...\n     ...\n     ...\n     ...\n     ...\n     ...\n     ...\n    \"(\" ...\n     ...\n    \"{\" ...\n    \"}\" ...\n    \"[\" ...\n     ...\n    \"<<(\" ...\n    \"<<\" ...",
    "result_eval_f1_score": 0.0,
    "result_eval_precision": 0.0,
    "result_eval_recall": 0.0,
    "error_occured_at_endpoint": false,
    "predicted_query_result_is_empty": true,
    "ground_truth_query_result_is_empty": false,
    "error_occured_at_endpoint_message": "syntactically not correct"
  },
  {
    "resource": "https://sparql.rhea-db.org/.well-known/sparql-examples/115_Retrieve_the_set_of_metabolites_involved_in_reactions_catalyzed_by_human_genes_HUMAN_reference_proteome",
    "natural_language_question": "Retrieve the set of metabolites involved in reactions catalyzed by human genes (HUMAN reference proteome)",
    "ground_truth_query": "\nPREFIX rh:<http://rdf.rhea-db.org/>\nPREFIX taxon:<http://purl.uniprot.org/taxonomy/>\nPREFIX ec:<http://purl.uniprot.org/enzyme/>\nPREFIX rdfs:<http://www.w3.org/2000/01/rdf-schema#>\nPREFIX up:<http://purl.uniprot.org/core/>\nPREFIX keywords:<http://purl.uniprot.org/keywords/>\n\nSELECT\n  ?chebi\n  ?reaction\n  ?ecNumber\n  ?protein\n  ?ensemblTranscript\n  ?ensemblGene\nWHERE {\n  SERVICE <https://sparql.uniprot.org/sparql> {\n    ?protein a up:Protein .\n    ?protein up:reviewed true .\n    ?protein up:organism taxon:9606 .\n    ?protein up:classifiedWith keywords:1185 .\n\n    ?protein rdfs:seeAlso ?ensemblTranscript .\n    ?ensemblTranscript a up:Transcript_Resource .\n    ?ensemblTranscript up:database <http://purl.uniprot.org/database/Ensembl> .\n    ?ensemblTranscript up:transcribedFrom ?ensemblGene .\n\n      {?protein up:enzyme ?ecNumber .}\n    UNION\n      {?protein up:domain/up:enzyme ?ecNumber .}\n    UNION\n      {?protein up:component/up:enzyme ?ecNumber .}\n  }\n\n  ?reaction rdfs:subClassOf rh:Reaction .\n  ?reaction rh:status rh:Approved .\n  ?reaction rh:ec ?ecNumber .\n  ?reaction rh:side ?reactionSide .\n  ?reactionSide rh:contains ?participant .\n  ?participant rh:compound ?compound .\n  ?compound rh:chebi ?chebi . # only considering small molecules participants\n}",
    "target_endpoint": "https://sparql.rhea-db.org/sparql",
    "federates_with": [
      "https://sparql.uniprot.org/sparql"
    ],
    "endpoint_set": "Rhea",
    "file_path": "Rhea/115_Retrieve_the_set_of_metabolites_involved_in_reactions_catalyzed_by_human_genes_HUMAN_reference_proteome.ttl",
    "predicted_query": "# https://sparql.uniprot.org/sparql\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX up: <http://purl.uniprot.org/core/>\nPREFIX rhea: <http://rdf.rhea-db.org/>\nPREFIX chebi: <http://purl.obolibrary.org/obo/CHEBI_>\n\nSELECT DISTINCT ?metabolite\nWHERE {\n  # Query UniProt for human proteins and their associated Rhea reaction identifiers\n  SERVICE <https://sparql.uniprot.org/sparql> {\n    ?protein a up:Protein .\n    up:organism ?organism .\n    ?organism rdfs:label \"Homo sapiens\" . # Filter for human proteins\n    ?protein rhea:reaction ?rheaReaction .\n    BIND(STRAFTER(STR(?rheaReaction), \"http://rdf.rhea-db.org/\") AS ?rheaId) # Extract Rhea ID\n  }\n\n  # Query Rhea DB for metabolites involved in the reactions\n  SERVICE <https://sparql.rhea-db.org/sparql> {\n    ?reaction rhea:id ?rheaId .\n    {\n      ?reaction rhea: Rhea_has_reactant ?metaboliteURI .\n    }\n    UNION\n    {\n      ?reaction rhea: Rhea_has_product ?metaboliteURI .\n    }\n    ?metaboliteURI rdfs:label ?metabolite .\n  }\n}",
    "predicted_endpoint": "https://sparql.uniprot.org/sparql",
    "predicted_endpoint_equal_to_target_endpoint": false,
    "predicted_endpoint_in_federates_with": true,
    "predicted_endpoint_or_federated_endpoint": true,
    "run_id_langsmith": "57597c4c-4893-44cd-a4c6-6a39f881f485",
    "evaluation_timestamp": "2025-05-11T00:57:27.478661",
    "question_understanding_prompt_tokens": 255,
    "question_understanding_completion_tokens": 26,
    "question_understanding_total_tokens": 281,
    "sparql_query_construction_prompt_tokens": 2399,
    "sparql_query_construction_completion_tokens": 533,
    "sparql_query_construction_total_tokens": 2932,
    "is_valid_sparql": false,
    "sparql_syntax_error": "Encountered \" \".\" \". \"\" at line 12, column 27.\nWas expecting one of:\n     ...\n     ...\n     ...\n     ...\n     ...\n     ...\n    \"true\" ...\n    \"false\" ...\n     ...\n     ...\n     ...\n     ...\n     ...\n     ...\n     ...\n     ...\n     ...\n     ...\n     ...\n     ...\n     ...\n    \"(\" ...\n     ...\n    \"[\" ...\n     ...\n    \"<<(\" ...\n    \"<<\" ...",
    "result_eval_f1_score": 0.0,
    "result_eval_precision": 0.0,
    "result_eval_recall": 0.0,
    "error_occured_at_endpoint": false,
    "predicted_query_result_is_empty": true,
    "ground_truth_query_result_is_empty": false,
    "error_occured_at_endpoint_message": "syntactically not correct"
  }
]