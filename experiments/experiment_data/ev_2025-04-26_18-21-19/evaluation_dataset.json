[
  {
    "resource": "https://sparql.swisslipids.org/.well-known/sparql-examples/16",
    "natural_language_question": "For a given lipid (SWISSLIPID:000399814, Ceramide), return a list of all enzymes in UniProtKB/Swiss-Prot annotated to catalyze reactions involving that lipid.\nThis query does not consider the hierarchy: it looks for reactions and enzymes only for the specified lipid.",
    "ground_truth_query": "PREFIX SWISSLIPID: <https://swisslipids.org/rdf/SLM_>\nPREFIX owl: <http://www.w3.org/2002/07/owl#>\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX rh: <http://rdf.rhea-db.org/>\nPREFIX up: <http://purl.uniprot.org/core/>\n\n# Example 16\nSELECT ?startId ?startName ?uniprot\nWHERE\n{\n  # SwissLipids query (list of) identifier(s)\n  VALUES ?startId { SWISSLIPID:000399814 }\n  # name\n  ?startId rdfs:label ?startName .\n  # ChEBI x-ref\n  ?startId owl:equivalentClass ?chebi .\n  # federated query to Rhea\n  SERVICE <https://sparql.rhea-db.org/sparql> {\n  \t?rhea rh:side/rh:contains/rh:compound/rh:chebi ?chebi .\n  }    \n  # federated query to UniProt\n  SERVICE <https://sparql.uniprot.org/sparql> {\n    ?uniprot up:reviewed true .\n    ?uniprot up:annotation/up:catalyticActivity/up:catalyzedReaction ?rhea .\n  }\n} \nORDER BY ?startId",
    "target_endpoint": "https://sparql.swisslipids.org/sparql/",
    "federates_with": [
      "https://sparql.uniprot.org/sparql",
      "https://sparql.rhea-db.org/sparql"
    ],
    "endpoint_set": "SwissLipids",
    "file_path": "SwissLipids/16.ttl",
    "predicted_query": "# https://sparql.rhea-db.org/sparql\nPREFIX rhea: <http://rdf.rhea-db.org/>\nPREFIX chebi: <http://purl.obolibrary.org/obo/CHEBI_>\nPREFIX uniprot: <http://purl.uniprot.org/core/>\nPREFIX up: <http://purl.uniprot.org/annotation/>\nPREFIX swisslipid: <http://www.swisslipids.org/rdf/>\nPREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\n\nSELECT DISTINCT ?uniprotEntry ?uniprotName\nWHERE {\n  # Step 1: Find the ChEBI identifier corresponding to the given SWISSLIPID in the SwissLipids endpoint.\n  SERVICE <https://sparql.swisslipids.org/sparql/> {\n    swisslipid:000399814 swisslipid:has_chebi ?chebiID .\n  }\n\n  # Step 2: In the Rhea endpoint (the primary endpoint for this query), find reactions\n  # that involve the chemical entity identified by the ChEBI ID found in Step 1.\n  # A reaction involves a chemical if it is present on either the left or right side.\n  ?reaction rhea:side ?side .\n  ?side rhea:contains ?chebiID .\n\n  # Step 3: Find the UniProt entry that catalyzes the reaction found in Step 2.\n  ?reaction rhea:catalyzedBy ?uniprotEntry .\n\n  # Step 4: In the UniProt endpoint, check if the UniProt entry found in Step 3\n  # is a reviewed entry (i.e., from UniProtKB/Swiss-Prot).\n  SERVICE <https://sparql.uniprot.org/sparql> {\n    ?uniprotEntry a uniprot:Protein . # Ensure the entry is a protein\n    ?uniprotEntry up:reviewed true . # Filter for Swiss-Prot entries\n    # Optional: Retrieve the recommended full name for the UniProt entry\n    OPTIONAL { ?uniprotEntry uniprot:recommendedName/uniprot:fullName ?uniprotName }\n  }\n}",
    "predicted_endpoint": "https://sparql.rhea-db.org/sparql",
    "predicted_endpoint_equal_to_target_endpoint": false,
    "predicted_endpoint_in_federates_with": true,
    "predicted_endpoint_or_federated_endpoint": true,
    "run_id_langsmith": "7e674b12-1c62-4e8f-bc16-989f11b3fb6d",
    "evaluation_timestamp": "2025-04-26T18:21:48.347124",
    "question_understanding_prompt_tokens": 238,
    "question_understanding_completion_tokens": 20,
    "question_understanding_total_tokens": 258,
    "sparql_query_construction_prompt_tokens": 1691,
    "sparql_query_construction_completion_tokens": 0,
    "sparql_query_construction_total_tokens": 1691,
    "is_valid_sparql": true,
    "sparql_syntax_error": "syntactically correct",
    "ground_truth_query_result_is_empty": false,
    "result_eval_f1_score": 0.0,
    "result_eval_precision": 0.0,
    "result_eval_recall": 0.0,
    "error_occured_at_endpoint": false,
    "predicted_query_result_is_empty": true,
    "error_occured_at_endpoint_message": "no error, but empty result"
  },
  {
    "resource": "https://sparql.swisslipids.org/.well-known/sparql-examples/6",
    "natural_language_question": "For a given lipid (SWISSLIPID:000399814, Ceramide), return a list of all corresponding reactions (Rhea IDs and equation), as well as their enzymes as annotated in UniProtKB/Swiss-Prot) enzymes themselves (ID and protein name).\nThis query does not consider the hierarchy: it looks for reactions and enzymes only for the specified lipid.",
    "ground_truth_query": "PREFIX SWISSLIPID: <https://swisslipids.org/rdf/SLM_>\nPREFIX owl: <http://www.w3.org/2002/07/owl#>\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX rh: <http://rdf.rhea-db.org/>\nPREFIX up: <http://purl.uniprot.org/core/>\n\n# Example 6\nSELECT ?startId ?startName ?chebi ?rhea ?rheaEquation ?uniprot ?uniprotName\nWHERE\n{\n  # SwissLipids query (list of) identifier(s)\n  VALUES ?startId { SWISSLIPID:000399814 }\n  # name\n  ?startId rdfs:label ?startName .\n  # ChEBI x-ref\n  ?startId owl:equivalentClass ?chebi .\n  # federated query to Rhea\n  SERVICE <https://sparql.rhea-db.org/sparql> {\n  \t?rhea rh:equation ?rheaEquation .\n  \t?rhea rh:side/rh:contains/rh:compound/rh:chebi ?chebi .\n  }    \n  # federated query to UniProt\n  SERVICE <https://sparql.uniprot.org/sparql> {\n    ?uniprot up:reviewed true .\n    ?uniprot up:recommendedName/up:fullName ?uniprotName .\n    ?uniprot up:annotation/up:catalyticActivity/up:catalyzedReaction ?rhea .\n  }\n} \nORDER BY ?startId",
    "target_endpoint": "https://sparql.swisslipids.org/sparql/",
    "federates_with": [
      "https://sparql.uniprot.org/sparql",
      "https://sparql.rhea-db.org/sparql"
    ],
    "endpoint_set": "SwissLipids",
    "file_path": "SwissLipids/6.ttl",
    "predicted_query": "# Primary endpoint: https://sparql.swisslipids.org/sparql/\nPREFIX swisslipids: <http://swisslipids.org/rdf/>\nPREFIX owl: <http://www.w3.org/2002/07/owl#>\nPREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>\nPREFIX rhea: <http://rdf.rhea-db.org/>\nPREFIX uniprot: <http://purl.uniprot.org/uniprot/>\nPREFIX skos: <http://www.w3.org/2004/02/skos/core#>\n\nSELECT DISTINCT ?reaction ?equation ?uniprotId ?proteinName\nWHERE {\n  # Start in SwissLipids to find the ChEBI identifier for the given SWISSLIPID.\n  SERVICE <https://sparql.swisslipids.org/sparql/> {\n    swisslipids:000399814 owl:sameAs ?chebiId .\n    # Ensure the owl:sameAs link points to a ChEBI resource.\n    FILTER(STRSTARTS(STR(?chebiId), \"http://purl.obolibrary.org/obo/CHEBI_\"))\n  }\n\n  # Query Rhea for reactions that involve the identified ChEBI compound.\n  SERVICE <https://sparql.rhea-db.org/sparql/> {\n    ?reaction rdf:type rhea:Reaction ;\n              rhea:equation ?equation ;\n              rhea:side ?side .\n    ?side rhea:contains ?chebiId .\n\n    # Find the enzyme(s) that catalyze this reaction.\n    # Use OPTIONAL as not all Rhea reactions are enzyme-catalyzed.\n    OPTIONAL {\n      ?reaction rhea:catalyzedBy ?uniprotId .\n      # Ensure the catalyzedBy link points to a UniProt resource.\n      FILTER(STRSTARTS(STR(?uniprotId), \"http://purl.uniprot.org/uniprot/\"))\n    }\n  }\n\n  # If a UniProt ID was found, query UniProt for the protein name.\n  SERVICE <https://sparql.uniprot.org/sparql/> {\n    # Only execute this block if ?uniprotId is bound from the Rhea service.\n    FILTER(BOUND(?uniprotId))\n    ?uniprotId skos:prefLabel ?proteinName .\n  }\n}",
    "predicted_endpoint": "Primary",
    "predicted_endpoint_equal_to_target_endpoint": false,
    "predicted_endpoint_in_federates_with": false,
    "predicted_endpoint_or_federated_endpoint": false,
    "run_id_langsmith": "7e674b12-1c62-4e8f-bc16-989f11b3fb6d",
    "evaluation_timestamp": "2025-04-26T18:22:10.046504",
    "question_understanding_prompt_tokens": 238,
    "question_understanding_completion_tokens": 20,
    "question_understanding_total_tokens": 258,
    "sparql_query_construction_prompt_tokens": 1691,
    "sparql_query_construction_completion_tokens": 0,
    "sparql_query_construction_total_tokens": 1691,
    "is_valid_sparql": true,
    "sparql_syntax_error": "syntactically correct",
    "ground_truth_query_result_is_empty": false,
    "result_eval_f1_score": 0.0,
    "result_eval_precision": 0.0,
    "result_eval_recall": 0.0,
    "error_occured_at_endpoint": true,
    "predicted_query_result_is_empty": true,
    "error_occured_at_endpoint_message": "unknown url type: 'Primary?query=%23+Primary+endpoint%3A+https%3A//sparql.swisslipids.org/sparql/%0APREFIX+swisslipids%3A+%3Chttp%3A//swisslipids.org/rdf/%3E%0APREFIX+owl%3A+%3Chttp%3A//www.w3.org/2002/07/owl%23%3E%0APREFIX+rdf%3A+%3Chttp%3A//www.w3.org/1999/02/22-rdf-syntax-ns%23%3E%0APREFIX+rhea%3A+%3Chttp%3A//rdf.rhea-db.org/%3E%0APREFIX+uniprot%3A+%3Chttp%3A//purl.uniprot.org/uniprot/%3E%0APREFIX+skos%3A+%3Chttp%3A//www.w3.org/2004/02/skos/core%23%3E%0A%0ASELECT+DISTINCT+%3Freaction+%3Fequation+%3FuniprotId+%3FproteinName%0AWHERE+%7B%0A++%23+Start+in+SwissLipids+to+find+the+ChEBI+identifier+for+the+given+SWISSLIPID.%0A++SERVICE+%3Chttps%3A//sparql.swisslipids.org/sparql/%3E+%7B%0A++++swisslipids%3A000399814+owl%3AsameAs+%3FchebiId+.%0A++++%23+Ensure+the+owl%3AsameAs+link+points+to+a+ChEBI+resource.%0A++++FILTER%28STRSTARTS%28STR%28%3FchebiId%29%2C+%22http%3A//purl.obolibrary.org/obo/CHEBI_%22%29%29%0A++%7D%0A%0A++%23+Query+Rhea+for+reactions+that+involve+the+identified+ChEBI+compound.%0A++SERVICE+%3Chttps%3A//sparql.rhea-db.org/sparql/%3E+%7B%0A++++%3Freaction+rdf%3Atype+rhea%3AReaction+%3B%0A++++++++++++++rhea%3Aequation+%3Fequation+%3B%0A++++++++++++++rhea%3Aside+%3Fside+.%0A++++%3Fside+rhea%3Acontains+%3FchebiId+.%0A%0A++++%23+Find+the+enzyme%28s%29+that+catalyze+this+reaction.%0A++++%23+Use+OPTIONAL+as+not+all+Rhea+reactions+are+enzyme-catalyzed.%0A++++OPTIONAL+%7B%0A++++++%3Freaction+rhea%3AcatalyzedBy+%3FuniprotId+.%0A++++++%23+Ensure+the+catalyzedBy+link+points+to+a+UniProt+resource.%0A++++++FILTER%28STRSTARTS%28STR%28%3FuniprotId%29%2C+%22http%3A//purl.uniprot.org/uniprot/%22%29%29%0A++++%7D%0A++%7D%0A%0A++%23+If+a+UniProt+ID+was+found%2C+query+UniProt+for+the+protein+name.%0A++SERVICE+%3Chttps%3A//sparql.uniprot.org/sparql/%3E+%7B%0A++++%23+Only+execute+this+block+if+%3FuniprotId+is+bound+from+the+Rhea+service.%0A++++FILTER%28BOUND%28%3FuniprotId%29%29%0A++++%3FuniprotId+skos%3AprefLabel+%3FproteinName+.%0A++%7D%0A%7D&format=json&output=json&results=json'"
  },
  {
    "resource": "https://sparql.swisslipids.org/.well-known/sparql-examples/5",
    "natural_language_question": "For a given lipid (SWISSLIPID:000399814, Ceramide), return a list of all corresponding reactions (Rhea IDs and equation).\nThis query does consider the hierarchy: it looks for reactions involving the specified lipid and/or its more specific forms.",
    "ground_truth_query": "PREFIX SWISSLIPID: <https://swisslipids.org/rdf/SLM_>\nPREFIX owl: <http://www.w3.org/2002/07/owl#>\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX rh: <http://rdf.rhea-db.org/>\n\n# Example 5\nSELECT ?startId ?startName ?id ?name ?chebi ?rhea ?rheaEquation \nWHERE\n{\n  # SwissLipids query (list of) identifier(s)\n  VALUES ?startId { SWISSLIPID:000399814 }\n  # name\n  ?startId rdfs:label ?startName .\n  # Retrieve children lipids \n  ?id rdfs:subClassOf* ?startId .\n  ?id rdfs:label ?name .\n  # ChEBI x-ref\n  ?id owl:equivalentClass ?chebi .\n  # federated query to Rhea\n  SERVICE <https://sparql.rhea-db.org/sparql> {\n  \t?rhea rh:equation ?rheaEquation .\n  \t?rhea rh:side/rh:contains/rh:compound/rh:chebi ?chebi .\n  }    \n} \nORDER BY  ?startId ?id",
    "target_endpoint": "https://sparql.swisslipids.org/sparql/",
    "federates_with": [
      "https://sparql.rhea-db.org/sparql"
    ],
    "endpoint_set": "SwissLipids",
    "file_path": "SwissLipids/5.ttl",
    "predicted_query": "# Primary endpoint: https://sparql.swisslipids.org/sparql/\nPREFIX sl: <http://purl.swisslipids.org/sl/>\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX rhea: <http://rdf.rhea-db.org/>\n\nSELECT DISTINCT ?rheaID ?equation\nWHERE {\n  # Query the SwissLipids endpoint to find the specified lipid and its subclasses\n  SERVICE <https://sparql.swisslipids.org/sparql/> {\n    # Define the starting lipid resource URI\n    BIND(sl:SWISSLIPID:000399814 AS ?startLipid)\n\n    # Find the starting lipid itself OR any lipid that is a subclass (directly or indirectly)\n    # of the starting lipid. This covers the \"more specific forms\" requirement.\n    { ?specificLipid rdfs:subClassOf* ?startLipid }\n    UNION\n    { BIND(?startLipid AS ?specificLipid) } # Include the starting lipid resource itself\n\n    # Find Rhea reactions that involve these specific lipids.\n    # Assuming sl:involvedIn is the property linking lipids to Rhea reactions in SwissLipids.\n    ?specificLipid sl:involvedIn ?rheaReaction .\n  }\n\n  # Federate to the Rhea endpoint to get details about the found reactions\n  SERVICE <https://sparql.rhea-db.org/sparql/> {\n    # Ensure the resource is a Rhea Reaction (optional but good practice)\n    ?rheaReaction a rhea:Reaction .\n\n    # Extract the Rhea ID from the reaction URI\n    BIND(STRAFTER(STR(?rheaReaction), STR(rhea:)) AS ?rheaID)\n\n    # Get the reaction equation\n    ?rheaReaction rhea:equation ?equation .\n  }\n}",
    "predicted_endpoint": "Primary",
    "predicted_endpoint_equal_to_target_endpoint": false,
    "predicted_endpoint_in_federates_with": false,
    "predicted_endpoint_or_federated_endpoint": false,
    "run_id_langsmith": "7e674b12-1c62-4e8f-bc16-989f11b3fb6d",
    "evaluation_timestamp": "2025-04-26T18:22:30.720184",
    "question_understanding_prompt_tokens": 238,
    "question_understanding_completion_tokens": 20,
    "question_understanding_total_tokens": 258,
    "sparql_query_construction_prompt_tokens": 1691,
    "sparql_query_construction_completion_tokens": 0,
    "sparql_query_construction_total_tokens": 1691,
    "is_valid_sparql": true,
    "sparql_syntax_error": "syntactically correct",
    "ground_truth_query_result_is_empty": false,
    "result_eval_f1_score": 0.0,
    "result_eval_precision": 0.0,
    "result_eval_recall": 0.0,
    "error_occured_at_endpoint": true,
    "predicted_query_result_is_empty": true,
    "error_occured_at_endpoint_message": "unknown url type: 'Primary?query=%23+Primary+endpoint%3A+https%3A//sparql.swisslipids.org/sparql/%0APREFIX+sl%3A+%3Chttp%3A//purl.swisslipids.org/sl/%3E%0APREFIX+rdfs%3A+%3Chttp%3A//www.w3.org/2000/01/rdf-schema%23%3E%0APREFIX+rhea%3A+%3Chttp%3A//rdf.rhea-db.org/%3E%0A%0ASELECT+DISTINCT+%3FrheaID+%3Fequation%0AWHERE+%7B%0A++%23+Query+the+SwissLipids+endpoint+to+find+the+specified+lipid+and+its+subclasses%0A++SERVICE+%3Chttps%3A//sparql.swisslipids.org/sparql/%3E+%7B%0A++++%23+Define+the+starting+lipid+resource+URI%0A++++BIND%28sl%3ASWISSLIPID%3A000399814+AS+%3FstartLipid%29%0A%0A++++%23+Find+the+starting+lipid+itself+OR+any+lipid+that+is+a+subclass+%28directly+or+indirectly%29%0A++++%23+of+the+starting+lipid.+This+covers+the+%22more+specific+forms%22+requirement.%0A++++%7B+%3FspecificLipid+rdfs%3AsubClassOf%2A+%3FstartLipid+%7D%0A++++UNION%0A++++%7B+BIND%28%3FstartLipid+AS+%3FspecificLipid%29+%7D+%23+Include+the+starting+lipid+resource+itself%0A%0A++++%23+Find+Rhea+reactions+that+involve+these+specific+lipids.%0A++++%23+Assuming+sl%3AinvolvedIn+is+the+property+linking+lipids+to+Rhea+reactions+in+SwissLipids.%0A++++%3FspecificLipid+sl%3AinvolvedIn+%3FrheaReaction+.%0A++%7D%0A%0A++%23+Federate+to+the+Rhea+endpoint+to+get+details+about+the+found+reactions%0A++SERVICE+%3Chttps%3A//sparql.rhea-db.org/sparql/%3E+%7B%0A++++%23+Ensure+the+resource+is+a+Rhea+Reaction+%28optional+but+good+practice%29%0A++++%3FrheaReaction+a+rhea%3AReaction+.%0A%0A++++%23+Extract+the+Rhea+ID+from+the+reaction+URI%0A++++BIND%28STRAFTER%28STR%28%3FrheaReaction%29%2C+STR%28rhea%3A%29%29+AS+%3FrheaID%29%0A%0A++++%23+Get+the+reaction+equation%0A++++%3FrheaReaction+rhea%3Aequation+%3Fequation+.%0A++%7D%0A%7D&format=json&output=json&results=json'"
  },
  {
    "resource": "https://sparql.swisslipids.org/.well-known/sparql-examples/34",
    "natural_language_question": "Lipids affected by human enzymes",
    "ground_truth_query": "PREFIX owl: <http://www.w3.org/2002/07/owl#>\nPREFIX rh: <http://rdf.rhea-db.org/>\nPREFIX taxon: <http://purl.uniprot.org/taxonomy/>\nPREFIX up: <http://purl.uniprot.org/core/>\n\nSELECT ?swisslipid  {\n  ?swisslipid owl:equivalentClass ?chebi .\n  SERVICE <https://sparql.rhea-db.org/sparql> {\n    ?rhea rh:side/rh:contains/rh:compound ?compound .\n\t?compound (rh:chebi|(rh:reactivePart/rh:chebi)|(rh:underlyingChebi/rh:chebi)) ?metabolite . \n  }\n  SERVICE <https://sparql.uniprot.org/sparql> {\n    ?catalyticActivityAnnotation up:catalyticActivity/up:catalyzedReaction ?rhea .\n    ?protein up:annotation ?catalyticActivityAnnotation ;\n             up:organism taxon:9606 .\n  }\n}\nLIMIT 1",
    "target_endpoint": "https://sparql.swisslipids.org/sparql/",
    "federates_with": [
      "https://sparql.uniprot.org/sparql",
      "https://sparql.rhea-db.org/sparql"
    ],
    "endpoint_set": "SwissLipids",
    "file_path": "SwissLipids/34.ttl",
    "predicted_query": "# https://sparql.uniprot.org/sparql\nPREFIX up: <http://purl.uniprot.org/core/>\nPREFIX taxonomy: <http://purl.uniprot.org/taxonomy/>\nPREFIX rhea: <http://rdf.rhea-db.org/>\nPREFIX chebi: <http://purl.obolibrary.org/obo/CHEBI_>\nPREFIX sl: <http://swisslipids.org/rdf/>\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\n\nSELECT DISTINCT ?lipid ?lipidName\nWHERE {\n  # Step 1: Find human enzymes (proteins) in UniProt\n  SERVICE <https://sparql.uniprot.org/sparql> {\n    ?enzyme a up:Protein ;\n            up:organism taxonomy:9606 ; # Filter for Homo sapiens (Human)\n            up:catalyzedReaction ?rheaReaction . # Find reactions catalyzed by this enzyme (links to Rhea)\n  }\n\n  # Step 2: Find the chemical entities involved in these reactions in Rhea\n  SERVICE <https://sparql.rhea-db.org/sparql> {\n    ?rheaReaction a rhea:Reaction ; # Ensure the reaction exists in Rhea\n                  rhea:side ?side . # Get reaction sides (left/right)\n    ?side rhea:contains ?participant . # Get participants on the side\n    ?participant rhea:chebi ?chebiEntity . # Get the ChEBI identifier for the participant\n  }\n\n  # Step 3: Check if the chemical entity is a lipid in SwissLipids\n  SERVICE <https://sparql.swisslipids.org/sparql/> {\n    # SwissLipids entries are linked to ChEBI identifiers.\n    # Find the SwissLipids entry (?lipid) that corresponds to the ChEBI entity found in Rhea.\n    ?lipid sl:chebi ?chebiEntity ;\n           rdfs:label ?lipidName . # Get the name of the lipid\n    # Optional: Could add ?lipid a sl:Lipid . if needed, but linking via chebi and assuming\n    # entries in SwissLipids linked via sl:chebi are the lipids is usually sufficient.\n  }\n}",
    "predicted_endpoint": "https://sparql.uniprot.org/sparql",
    "predicted_endpoint_equal_to_target_endpoint": false,
    "predicted_endpoint_in_federates_with": true,
    "predicted_endpoint_or_federated_endpoint": true,
    "run_id_langsmith": "7e674b12-1c62-4e8f-bc16-989f11b3fb6d",
    "evaluation_timestamp": "2025-04-26T18:22:50.407386",
    "question_understanding_prompt_tokens": 238,
    "question_understanding_completion_tokens": 20,
    "question_understanding_total_tokens": 258,
    "sparql_query_construction_prompt_tokens": 1691,
    "sparql_query_construction_completion_tokens": 0,
    "sparql_query_construction_total_tokens": 1691,
    "is_valid_sparql": true,
    "sparql_syntax_error": "syntactically correct",
    "ground_truth_query_result_is_empty": false,
    "result_eval_f1_score": 0.0,
    "result_eval_precision": 0.0,
    "result_eval_recall": 0.0,
    "error_occured_at_endpoint": true,
    "predicted_query_result_is_empty": true,
    "error_occured_at_endpoint_message": "QueryBadFormed: A bad request has been sent to the endpoint: probably the SPARQL query is badly formed."
  },
  {
    "resource": "https://sparql.uniprot.org/.well-known/sparql-examples/118_biosodafrontend_rat_brain_human_cancer",
    "natural_language_question": "What are the Homo sapiens genes associated with cancer and their orthologs expressed in the Rattus norvegicus brain?",
    "ground_truth_query": "PREFIX up:<http://purl.uniprot.org/core/>\nPREFIX taxon:<http://purl.uniprot.org/taxonomy/>\nPREFIX rdfs:<http://www.w3.org/2000/01/rdf-schema#>\nPREFIX orth:<http://purl.org/net/orth#>\nPREFIX dcterms:<http://purl.org/dc/terms/>\nPREFIX obo:<http://purl.obolibrary.org/obo/>\nPREFIX lscr:<http://purl.org/lscr#>\nPREFIX genex:<http://purl.org/genex#>\nPREFIX sio: <http://semanticscience.org/resource/>\nSELECT ?gene ?orthologous_protein2 WHERE {\n  {\n    SELECT ?protein1 WHERE {\n      ?protein1 a up:Protein;\n        up:organism/up:scientificName 'Homo sapiens' ;\n        up:annotation ?annotation .\n      ?annotation rdfs:comment ?annotation_text.\n      ?annotation a up:Disease_Annotation .\n      FILTER CONTAINS (?annotation_text, \"cancer\")\n    }\n  }\n  SERVICE <https://sparql.omabrowser.org/sparql/> {\n    SELECT ?orthologous_protein2 ?protein1 ?gene WHERE {\n      ?protein_OMA a orth:Protein .\n      ?orthologous_protein2 a orth:Protein .\n      ?cluster a orth:OrthologsCluster .\n      ?cluster orth:hasHomologousMember ?node1 .\n      ?cluster orth:hasHomologousMember ?node2 .\n      ?node2 orth:hasHomologousMember* ?protein_OMA .\n      ?node1 orth:hasHomologousMember* ?orthologous_protein2 \n      .?orthologous_protein2 orth:organism/obo:RO_0002162/up:scientificName 'Rattus norvegicus' .\n      ?orthologous_protein2 sio:SIO_010079 ?gene .\n      ?protein_OMA lscr:xrefUniprot ?protein1 .\n      FILTER(?node1 != ?node2)\n    }\n  }\n  SERVICE <https://www.bgee.org/sparql/> {\n    ?gene genex:isExpressedIn ?anatEntity .\n    ?anatEntity rdfs:label 'brain' .\n    ?gene orth:organism ?org . \n    ?org obo:RO_0002162 taxon:10116 .\n  }\n}",
    "target_endpoint": "https://sparql.uniprot.org/sparql",
    "federates_with": [
      "https://sparql.omabrowser.org/sparql/",
      "https://www.bgee.org/sparql/"
    ],
    "endpoint_set": "Uniprot",
    "file_path": "UniProt/118_biosodafrontend_rat_brain_human_cancer.ttl",
    "predicted_query": "# https://sparql.uniprot.org/sparql\nPREFIX up: <http://purl.uniprot.org/core/>\nPREFIX taxon: <http://purl.uniprot.org/taxonomy/>\nPREFIX disease: <http://purl.uniprot.org/diseases/>\nPREFIX BTO: <http://purl.obolibrary.org/obo/BTO_>\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\n\nSELECT ?hs_gene ?hs_gene_name ?rn_gene ?rn_gene_name\nWHERE {\n  # This query is executed against the UniProt endpoint, and all required data\n  # is available within this endpoint. The SERVICE clause is used as required\n  # by the task, even though it queries the same endpoint.\n  SERVICE <https://sparql.uniprot.org/sparql> {\n    # Find proteins in Homo sapiens (taxon:9606)\n    ?hs_protein up:organism taxon:9606 .\n\n    # Filter for proteins associated with Cancer (disease:162 in Disease Ontology)\n    ?hs_protein up:classifiedWith disease:162 .\n\n    # Get the corresponding Homo sapiens gene and its name\n    ?hs_protein up:encodedBy ?hs_gene .\n    ?hs_gene rdfs:label ?hs_gene_name .\n\n    # Find orthologs of these Homo sapiens proteins\n    ?hs_protein up:ortholog ?rn_protein .\n\n    # Ensure the ortholog is in Rattus norvegicus (taxon:10116)\n    ?rn_protein up:organism taxon:10116 .\n\n    # Check if the Rattus norvegicus ortholog is expressed in the brain (BTO:0000139)\n    ?rn_protein up:expressedIn BTO:0000139 .\n\n    # Get the corresponding Rattus norvegicus gene and its name\n    ?rn_protein up:encodedBy ?rn_gene .\n    ?rn_gene rdfs:label ?rn_gene_name .\n  }\n}",
    "predicted_endpoint": "https://sparql.uniprot.org/sparql",
    "predicted_endpoint_equal_to_target_endpoint": true,
    "predicted_endpoint_in_federates_with": false,
    "predicted_endpoint_or_federated_endpoint": true,
    "run_id_langsmith": "7e674b12-1c62-4e8f-bc16-989f11b3fb6d",
    "evaluation_timestamp": "2025-04-26T18:23:23.589841",
    "question_understanding_prompt_tokens": 238,
    "question_understanding_completion_tokens": 20,
    "question_understanding_total_tokens": 258,
    "sparql_query_construction_prompt_tokens": 1691,
    "sparql_query_construction_completion_tokens": 0,
    "sparql_query_construction_total_tokens": 1691,
    "is_valid_sparql": true,
    "sparql_syntax_error": "syntactically correct",
    "ground_truth_query_result_is_empty": false,
    "result_eval_f1_score": 0.0,
    "result_eval_precision": 0.0,
    "result_eval_recall": 0.0,
    "error_occured_at_endpoint": false,
    "predicted_query_result_is_empty": true,
    "error_occured_at_endpoint_message": "no error, but empty result"
  },
  {
    "resource": "https://sparql.uniprot.org/.well-known/sparql-examples/51",
    "natural_language_question": "Find all proteins linked to arachidonate (CHEBI:32395)",
    "ground_truth_query": "PREFIX CHEBI: <http://purl.obolibrary.org/obo/CHEBI_>\nPREFIX rh: <http://rdf.rhea-db.org/>\nPREFIX skos: <http://www.w3.org/2004/02/skos/core#>\nPREFIX up: <http://purl.uniprot.org/core/>\n\n\nSELECT \n    DISTINCT\n        ?uniprot\n        ?uniprotID\n        ?recname\n        ?gene\n        ?chebi\n        ?uniprotName\nWHERE {\n  SERVICE <https://sparql.rhea-db.org/sparql> {\n     VALUES (?chebi) { (CHEBI:32395) }\n     ?rhea rh:side/rh:contains/rh:compound ?compound .\n     ?compound rh:chebi ?chebi .\n     ?chebi up:name ?uniprotName .\n  }\n  ?uniprot up:annotation/up:catalyticActivity/up:catalyzedReaction ?rhea .\n  ?uniprot up:mnemonic ?uniprotID .\n  ?uniprot up:recommendedName/up:fullName ?recname .\n  OPTIONAL {?uniprot up:encodedBy/skos:prefLabel ?gene .}\n}",
    "target_endpoint": "https://sparql.uniprot.org/sparql/",
    "federates_with": [
      "https://sparql.rhea-db.org/sparql"
    ],
    "endpoint_set": "Uniprot",
    "file_path": "UniProt/51_all_proteins_linked_to_arachidonate.ttl",
    "predicted_query": "# Primary endpoint: https://sparql.uniprot.org/sparql\nPREFIX rhea: <http://rdf.rhea-db.org/>\nPREFIX chebi: <http://purl.obolibrary.org/obo/CHEBI_>\nPREFIX uniprot: <http://purl.uniprot.org/uniprot/>\nPREFIX skos: <http://www.w3.org/2004/02/skos/core#>\n\nSELECT DISTINCT ?protein ?proteinName\nWHERE {\n  # Query Rhea to find reactions involving arachidonate (CHEBI:32395)\n  SERVICE <https://sparql.rhea-db.org/sparql> {\n    # Find reactions that have a participant role linked to CHEBI:32395\n    ?reaction rhea:hasParticipant ?participantRole .\n    ?participantRole rhea:chemical chebi:32395 .\n\n    # Find the entity that catalyzes this reaction.\n    # Rhea links catalyzedBy to UniProt entries or EC numbers.\n    # We are interested in UniProt entries for protein details.\n    ?reaction rhea:catalyzedBy ?protein .\n\n    # Ensure the catalyzedBy entity is a UniProt protein URI\n    FILTER(STRSTARTS(STR(?protein), \"http://purl.uniprot.org/uniprot/\"))\n  }\n\n  # Query UniProt to get the name of the protein found in Rhea\n  SERVICE <https://sparql.uniprot.org/sparql> {\n    ?protein a uniprot:Protein ;\n             skos:prefLabel ?proteinName . # Get the recommended protein name\n  }\n}",
    "predicted_endpoint": "Primary",
    "predicted_endpoint_equal_to_target_endpoint": false,
    "predicted_endpoint_in_federates_with": false,
    "predicted_endpoint_or_federated_endpoint": false,
    "run_id_langsmith": "7e674b12-1c62-4e8f-bc16-989f11b3fb6d",
    "evaluation_timestamp": "2025-04-26T18:23:41.714602",
    "question_understanding_prompt_tokens": 238,
    "question_understanding_completion_tokens": 20,
    "question_understanding_total_tokens": 258,
    "sparql_query_construction_prompt_tokens": 1691,
    "sparql_query_construction_completion_tokens": 0,
    "sparql_query_construction_total_tokens": 1691,
    "is_valid_sparql": true,
    "sparql_syntax_error": "syntactically correct",
    "ground_truth_query_result_is_empty": false,
    "result_eval_f1_score": 0.0,
    "result_eval_precision": 0.0,
    "result_eval_recall": 0.0,
    "error_occured_at_endpoint": true,
    "predicted_query_result_is_empty": true,
    "error_occured_at_endpoint_message": "unknown url type: 'Primary?query=%23+Primary+endpoint%3A+https%3A//sparql.uniprot.org/sparql%0APREFIX+rhea%3A+%3Chttp%3A//rdf.rhea-db.org/%3E%0APREFIX+chebi%3A+%3Chttp%3A//purl.obolibrary.org/obo/CHEBI_%3E%0APREFIX+uniprot%3A+%3Chttp%3A//purl.uniprot.org/uniprot/%3E%0APREFIX+skos%3A+%3Chttp%3A//www.w3.org/2004/02/skos/core%23%3E%0A%0ASELECT+DISTINCT+%3Fprotein+%3FproteinName%0AWHERE+%7B%0A++%23+Query+Rhea+to+find+reactions+involving+arachidonate+%28CHEBI%3A32395%29%0A++SERVICE+%3Chttps%3A//sparql.rhea-db.org/sparql%3E+%7B%0A++++%23+Find+reactions+that+have+a+participant+role+linked+to+CHEBI%3A32395%0A++++%3Freaction+rhea%3AhasParticipant+%3FparticipantRole+.%0A++++%3FparticipantRole+rhea%3Achemical+chebi%3A32395+.%0A%0A++++%23+Find+the+entity+that+catalyzes+this+reaction.%0A++++%23+Rhea+links+catalyzedBy+to+UniProt+entries+or+EC+numbers.%0A++++%23+We+are+interested+in+UniProt+entries+for+protein+details.%0A++++%3Freaction+rhea%3AcatalyzedBy+%3Fprotein+.%0A%0A++++%23+Ensure+the+catalyzedBy+entity+is+a+UniProt+protein+URI%0A++++FILTER%28STRSTARTS%28STR%28%3Fprotein%29%2C+%22http%3A//purl.uniprot.org/uniprot/%22%29%29%0A++%7D%0A%0A++%23+Query+UniProt+to+get+the+name+of+the+protein+found+in+Rhea%0A++SERVICE+%3Chttps%3A//sparql.uniprot.org/sparql%3E+%7B%0A++++%3Fprotein+a+uniprot%3AProtein+%3B%0A+++++++++++++skos%3AprefLabel+%3FproteinName+.+%23+Get+the+recommended+protein+name%0A++%7D%0A%7D&format=json&output=json&results=json'"
  },
  {
    "resource": "https://sparql.uniprot.org/.well-known/sparql-examples/40",
    "natural_language_question": "Retrieve human enzymes that metabolize sphingolipids and are annotated in ChEMBL",
    "ground_truth_query": "PREFIX CHEBI: <http://purl.obolibrary.org/obo/CHEBI_>\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX rh: <http://rdf.rhea-db.org/>\nPREFIX taxon: <http://purl.uniprot.org/taxonomy/>\nPREFIX up: <http://purl.uniprot.org/core/>\n\nSELECT DISTINCT ?protein ?chemblEntry\nWHERE {\n  SERVICE <https://sparql.rhea-db.org/sparql> {\n    ?rhea rdfs:subClassOf rh:Reaction ;\n      rh:side/rh:contains/rh:compound/rh:chebi/rdfs:subClassOf+ CHEBI:26739 .\n  }\n  ?ca up:catalyzedReaction ?rhea .\n  ?protein up:annotation/up:catalyticActivity ?ca ;\n    up:organism taxon:9606 ;\n    rdfs:seeAlso ?chemblEntry .\n  ?chemblEntry up:database <http://purl.uniprot.org/database/ChEMBL> .\n}\nLIMIT 10",
    "target_endpoint": "https://sparql.uniprot.org/sparql/",
    "federates_with": [
      "https://sparql.rhea-db.org/sparql"
    ],
    "endpoint_set": "Uniprot",
    "file_path": "UniProt/40_human_enzymes_that_metabolize_sphingolipids.ttl",
    "predicted_query": "# Primary endpoint: https://sparql.swisslipids.org/sparql/\nPREFIX sl: <http://swisslipids.org/rdf/>\nPREFIX chebi: <http://purl.obolibrary.org/obo/CHEBI_>\nPREFIX rhea: <http://rdf.rhea-db.org/>\nPREFIX up: <http://purl.uniprot.org/core/>\nPREFIX taxon: <http://purl.uniprot.org/taxonomy/>\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\n\nSELECT DISTINCT ?protein ?uniprotAccession ?chemblId ?reaction ?sphingoLipid ?sphingoChebi\nWHERE {\n  # SERVICE 1: Query SwissLipids to find ChEBI identifiers for Sphingolipids\n  SERVICE <https://sparql.swisslipids.org/sparql/> {\n    # Find lipids classified under the Sphingolipid category (LIPID MAPS abbreviation \"SP\")\n    ?sphingoLipid sl:lipidMapsClassification \"SP\" ;\n                  sl:chebi ?sphingoChebi . # Get the corresponding ChEBI ID for the lipid\n  }\n\n  # SERVICE 2: Query Rhea to find reactions involving these sphingolipid ChEBI entities and the enzymes catalyzing them\n  SERVICE <https://sparql.rhea-db.org/sparql> {\n    # Find reactions that have the sphingolipid ChEBI entity as a participant (substrate or product)\n    ?reaction rhea:hasParticipant ?participant .\n    ?participant rhea:chebi ?sphingoChebi . # Link participant to the ChEBI ID found in SwissLipids\n\n    # Find the protein (enzyme) that catalyzes this reaction\n    ?reaction rhea:catalyzedBy ?protein .\n  }\n\n  # SERVICE 3: Query UniProt to check if the protein is human and has a ChEMBL cross-reference\n  SERVICE <https://sparql.uniprot.org/sparql> {\n     # Ensure the protein is a UniProt protein entry\n     ?protein a up:Protein ;\n              up:accession ?uniprotAccession ; # Get the UniProt accession\n              up:organism taxon:9606 . # Filter for Homo sapiens (human)\n\n     # Check for a cross-reference to the ChEMBL database\n     ?protein up:dbReference ?chemblRef .\n     ?chemblRef up:database <http://purl.uniprot.org/database/ChEMBL> ;\n                up:accession ?chemblId . # Get the ChEMBL identifier\n  }\n}",
    "predicted_endpoint": "Primary",
    "predicted_endpoint_equal_to_target_endpoint": false,
    "predicted_endpoint_in_federates_with": false,
    "predicted_endpoint_or_federated_endpoint": false,
    "run_id_langsmith": "7e674b12-1c62-4e8f-bc16-989f11b3fb6d",
    "evaluation_timestamp": "2025-04-26T18:24:17.641825",
    "question_understanding_prompt_tokens": 238,
    "question_understanding_completion_tokens": 20,
    "question_understanding_total_tokens": 258,
    "sparql_query_construction_prompt_tokens": 1691,
    "sparql_query_construction_completion_tokens": 0,
    "sparql_query_construction_total_tokens": 1691,
    "is_valid_sparql": true,
    "sparql_syntax_error": "syntactically correct",
    "ground_truth_query_result_is_empty": false,
    "result_eval_f1_score": 0.0,
    "result_eval_precision": 0.0,
    "result_eval_recall": 0.0,
    "error_occured_at_endpoint": true,
    "predicted_query_result_is_empty": true,
    "error_occured_at_endpoint_message": "unknown url type: 'Primary?query=%23+Primary+endpoint%3A+https%3A//sparql.swisslipids.org/sparql/%0APREFIX+sl%3A+%3Chttp%3A//swisslipids.org/rdf/%3E%0APREFIX+chebi%3A+%3Chttp%3A//purl.obolibrary.org/obo/CHEBI_%3E%0APREFIX+rhea%3A+%3Chttp%3A//rdf.rhea-db.org/%3E%0APREFIX+up%3A+%3Chttp%3A//purl.uniprot.org/core/%3E%0APREFIX+taxon%3A+%3Chttp%3A//purl.uniprot.org/taxonomy/%3E%0APREFIX+rdfs%3A+%3Chttp%3A//www.w3.org/2000/01/rdf-schema%23%3E%0A%0ASELECT+DISTINCT+%3Fprotein+%3FuniprotAccession+%3FchemblId+%3Freaction+%3FsphingoLipid+%3FsphingoChebi%0AWHERE+%7B%0A++%23+SERVICE+1%3A+Query+SwissLipids+to+find+ChEBI+identifiers+for+Sphingolipids%0A++SERVICE+%3Chttps%3A//sparql.swisslipids.org/sparql/%3E+%7B%0A++++%23+Find+lipids+classified+under+the+Sphingolipid+category+%28LIPID+MAPS+abbreviation+%22SP%22%29%0A++++%3FsphingoLipid+sl%3AlipidMapsClassification+%22SP%22+%3B%0A++++++++++++++++++sl%3Achebi+%3FsphingoChebi+.+%23+Get+the+corresponding+ChEBI+ID+for+the+lipid%0A++%7D%0A%0A++%23+SERVICE+2%3A+Query+Rhea+to+find+reactions+involving+these+sphingolipid+ChEBI+entities+and+the+enzymes+catalyzing+them%0A++SERVICE+%3Chttps%3A//sparql.rhea-db.org/sparql%3E+%7B%0A++++%23+Find+reactions+that+have+the+sphingolipid+ChEBI+entity+as+a+participant+%28substrate+or+product%29%0A++++%3Freaction+rhea%3AhasParticipant+%3Fparticipant+.%0A++++%3Fparticipant+rhea%3Achebi+%3FsphingoChebi+.+%23+Link+participant+to+the+ChEBI+ID+found+in+SwissLipids%0A%0A++++%23+Find+the+protein+%28enzyme%29+that+catalyzes+this+reaction%0A++++%3Freaction+rhea%3AcatalyzedBy+%3Fprotein+.%0A++%7D%0A%0A++%23+SERVICE+3%3A+Query+UniProt+to+check+if+the+protein+is+human+and+has+a+ChEMBL+cross-reference%0A++SERVICE+%3Chttps%3A//sparql.uniprot.org/sparql%3E+%7B%0A+++++%23+Ensure+the+protein+is+a+UniProt+protein+entry%0A+++++%3Fprotein+a+up%3AProtein+%3B%0A++++++++++++++up%3Aaccession+%3FuniprotAccession+%3B+%23+Get+the+UniProt+accession%0A++++++++++++++up%3Aorganism+taxon%3A9606+.+%23+Filter+for+Homo+sapiens+%28human%29%0A%0A+++++%23+Check+for+a+cross-reference+to+the+ChEMBL+database%0A+++++%3Fprotein+up%3AdbReference+%3FchemblRef+.%0A+++++%3FchemblRef+up%3Adatabase+%3Chttp%3A//purl.uniprot.org/database/ChEMBL%3E+%3B%0A++++++++++++++++up%3Aaccession+%3FchemblId+.+%23+Get+the+ChEMBL+identifier%0A++%7D%0A%7D&format=json&output=json&results=json'"
  },
  {
    "resource": "https://sparql.uniprot.org/.well-known/sparql-examples/49",
    "natural_language_question": "Retrieve the UniProtKB proteins, their catalyzed Rhea reactions, their encoding genes (Ensembl) and the anatomic entities where the genes are expressed (UBERON anatomic entites from Bgee expression data resource).",
    "ground_truth_query": "PREFIX CHEBI: <http://purl.obolibrary.org/obo/CHEBI_>\nPREFIX genex: <http://purl.org/genex#>\nPREFIX lscr: <http://purl.org/lscr#>\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX rh: <http://rdf.rhea-db.org/>\nPREFIX taxon: <http://purl.uniprot.org/taxonomy/>\nPREFIX up: <http://purl.uniprot.org/core/>\n\nSELECT DISTINCT ?protein ?ensemblGene ?reaction ?anatomicEntityLabel ?anatomicEntity\nWHERE {\n  # federated query to Rhea enadpoint\n  {\n    SELECT DISTINCT ?reaction WHERE {\n      SERVICE <https://sparql.rhea-db.org/sparql> {\n        ?reaction rdfs:subClassOf rh:Reaction ;\n          rh:equation ?reactionEquation ;\n          rh:side ?reactionSide .\n        ?reactionSide rh:contains ?participant .\n        ?participant rh:compound ?compound .\n        # compound constraint (CHEBI:16113 == cholesterol)\n        ?compound rh:chebi CHEBI:16113 .\n      }\n    }\n  }\n  # taxonomy constraint (taxon:9606 == Homo sapiens)\n  ?protein up:organism taxon:9606 ;\n    up:annotation ?a ;\n    rdfs:seeAlso / up:transcribedFrom ?ensemblGene .\n  ?a a up:Catalytic_Activity_Annotation ;\n    up:catalyticActivity ?ca .\n  ?ca up:catalyzedReaction ?reaction .\n  # federated query to Bgee (expression data)\n  BIND(IRI(REPLACE(STR(?ensemblGene), \"\\\\.[0-9]+$\", \"\")) AS ?ensemblGeneNoVersion)\n  SERVICE <https://www.bgee.org/sparql/> {\n    ?gene lscr:xrefEnsemblGene ?ensemblGeneNoVersion ;\n      genex:isExpressedIn ?anatomicEntity .\n    ?anatomicEntity rdfs:label ?anatomicEntityLabel .\n  }\n}",
    "target_endpoint": "https://sparql.uniprot.org/sparql/",
    "federates_with": [
      "https://sparql.rhea-db.org/sparql",
      "https://www.bgee.org/sparql/"
    ],
    "endpoint_set": "Uniprot",
    "file_path": "UniProt/49_tissues_where_genes_metabolizing_cholestrol_are_expressed.ttl",
    "predicted_query": "# https://sparql.uniprot.org/sparql\nPREFIX up: <http://purl.uniprot.org/core/>\nPREFIX rhea: <http://rdf.rhea-db.org/>\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX bgee: <http://purl.org/bgee/public#>\nPREFIX faldo: <http://biohackathon.org/resource/faldo#>\n\nSELECT DISTINCT ?protein ?rheaReaction ?ensemblGene ?uberonEntity\nWHERE {\n  # Query UniProt for proteins, their catalyzed reactions, and encoding genes (Ensembl)\n  SERVICE <https://sparql.uniprot.org/sparql> {\n    # Find UniProt proteins\n    ?protein a up:Protein .\n\n    # Find Rhea reactions catalyzed by the protein\n    ?protein up:catalyzedReaction ?rheaReaction .\n\n    # Link the protein to its gene resource and find the Ensembl cross-reference\n    # UniProt links proteins to gene resources via up:gene\n    ?protein up:gene ?gene .\n    # The gene resource has cross-references to external databases like Ensembl via rdfs:seeAlso\n    ?gene rdfs:seeAlso ?ensemblGene .\n    # Ensure the cross-reference URI is from Ensembl\n    FILTER(STRSTARTS(STR(?ensemblGene), \"http://rdf.ebi.ac.uk/resource/ensembl/\"))\n  }\n\n  # Query Bgee for expression data linked to the Ensembl gene and anatomic entity (UBERON)\n  # Bgee provides gene expression data linked to genes and anatomic locations (UBERON)\n  SERVICE <https://sparql.bgee.org/sparql> {\n    # Find expression data entries\n    ?expression bgee:Expression ?expressionType . # Match any type of expression data (e.g., presence/absence)\n    # Link the expression data to the Ensembl gene found in UniProt\n    ?expression bgee:expressionFoundInGene ?ensemblGene .\n    # Get the anatomic entity (UBERON) where the expression is found\n    ?expression bgee:expressionFoundInAnatEntity ?uberonEntity .\n    # Ensure the anatomic entity URI is from UBERON\n    FILTER(STRSTARTS(STR(?uberonEntity), \"http://purl.obolibrary.org/obo/UBERON_\"))\n  }\n}",
    "predicted_endpoint": "https://sparql.uniprot.org/sparql",
    "predicted_endpoint_equal_to_target_endpoint": true,
    "predicted_endpoint_in_federates_with": false,
    "predicted_endpoint_or_federated_endpoint": true,
    "run_id_langsmith": "7e674b12-1c62-4e8f-bc16-989f11b3fb6d",
    "evaluation_timestamp": "2025-04-26T18:24:51.039651",
    "question_understanding_prompt_tokens": 238,
    "question_understanding_completion_tokens": 20,
    "question_understanding_total_tokens": 258,
    "sparql_query_construction_prompt_tokens": 1691,
    "sparql_query_construction_completion_tokens": 0,
    "sparql_query_construction_total_tokens": 1691,
    "is_valid_sparql": true,
    "sparql_syntax_error": "syntactically correct",
    "ground_truth_query_result_is_empty": false,
    "result_eval_f1_score": 0.0,
    "result_eval_precision": 0.0,
    "result_eval_recall": 0.0,
    "error_occured_at_endpoint": false,
    "predicted_query_result_is_empty": true,
    "error_occured_at_endpoint_message": "no error, but empty result"
  },
  {
    "resource": "https://sparql.uniprot.org/.well-known/sparql-examples/53",
    "natural_language_question": "Find mouse homologs in OMABrowser of human enzymes that catalyze reactions involving sterols (CHEBI:15889). Federating with Rhea and OMABrowser.",
    "ground_truth_query": "PREFIX CHEBI: <http://purl.obolibrary.org/obo/CHEBI_>\nPREFIX lscr: <http://purl.org/lscr#>\nPREFIX orth: <http://purl.org/net/orth#>\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX rh: <http://rdf.rhea-db.org/>\nPREFIX taxon: <http://purl.uniprot.org/taxonomy/>\nPREFIX up: <http://purl.uniprot.org/core/>\n\nSELECT\n  DISTINCT\n    ?chebi\n    ?reaction\n    ?humanProtein\n    ?mouseProtein\n    ?cluster \nWHERE {\n  SERVICE <https://sparql.rhea-db.org/sparql> {\n    ?reaction rdfs:subClassOf rh:Reaction .\n    ?reaction rh:side/rh:contains/rh:compound ?compound .\n    ?compound rh:chebi ?chebi .\n    ?chebi rdfs:subClassOf* CHEBI:15889\n  }\n\n  ?humanProtein up:organism taxon:9606 .\n  ?humanProtein up:annotation ?a .\n  ?a a up:Catalytic_Activity_Annotation .\n  ?a up:catalyticActivity ?ca .\n  ?ca up:catalyzedReaction ?reaction .\n\n  SERVICE  <https://sparql.omabrowser.org/sparql> {\n    ?cluster a orth:ParalogsCluster .\n    ?cluster orth:hasHomologousMember ?node1 , ?node2 .\n    ?node1 orth:hasHomologousMember* ?orthoProtein1 .\n    ?node2 orth:hasHomologousMember* ?orthoProtein2 .\n    ?orthoProtein1 lscr:xrefUniprot ?mouseProtein .\n    ?orthoProtein2 lscr:xrefUniprot ?humanProtein .\n    # inTaxon mouse\n    ?orthoProtein1 orth:organism/<http://purl.obolibrary.org/obo/RO_0002162> taxon:10090 . \n  }\n}",
    "target_endpoint": "https://sparql.uniprot.org/sparql/",
    "federates_with": [
      "https://sparql.rhea-db.org/sparql",
      "https://sparql.omabrowser.org/sparql"
    ],
    "endpoint_set": "Uniprot",
    "file_path": "UniProt/53_mouse_homologs_of_sterol_enzymes_via_omabrowser.ttl",
    "predicted_query": "# https://sparql.rhea-db.org/sparql\nPREFIX rhea: <http://rdf.rhea-db.org/>\nPREFIX chebi: <http://purl.obolibrary.org/obo/CHEBI_>\nPREFIX up: <http://purl.uniprot.org/core/>\nPREFIX taxon: <http://purl.uniprot.org/taxonomy/>\nPREFIX oma: <http://sparql.omabrowser.org/ontology#>\n\nSELECT DISTINCT ?mouseHomolog ?humanEnzyme\nWHERE {\n  # Step 1: Find reactions in Rhea involving sterols (CHEBI:15889)\n  SERVICE <https://sparql.rhea-db.org/sparql> {\n    ?reaction rhea:hasParticipant ?participant .\n    ?participant rhea:chebi chebi:15889 . # CHEBI:15889 corresponds to 'sterol'\n    ?reaction rhea:catalyzedBy ?humanEnzyme . # Get the enzyme (UniProt ID) catalyzing the reaction\n  }\n\n  # Step 2: Verify that the enzyme found in Rhea is from human using UniProt\n  SERVICE <https://sparql.uniprot.org/sparql> {\n    ?humanEnzyme a up:Protein .\n    ?humanEnzyme up:organism taxon:9606 . # Filter for human proteins (Taxonomy ID 9606)\n  }\n\n  # Step 3: Find mouse homologs of these human enzymes using OMABrowser\n  SERVICE <https://sparql.omabrowser.org/sparql> {\n    # Find the OMA group that the human enzyme belongs to\n    ?humanEnzyme oma:memberOf ?omaGroup . # Link the human protein (identified by UniProt ID) to its OMA group\n\n    # Find other members of the same OMA group that are from mouse\n    ?mouseHomolog oma:memberOf ?omaGroup .\n    ?mouseHomolog up:organism taxon:10090 . # Filter for mouse proteins (Taxonomy ID 10090)\n\n    # Ensure the found homolog is distinct from the original human enzyme (different species)\n    FILTER (?mouseHomolog != ?humanEnzyme)\n  }\n}",
    "predicted_endpoint": "https://sparql.rhea-db.org/sparql",
    "predicted_endpoint_equal_to_target_endpoint": false,
    "predicted_endpoint_in_federates_with": true,
    "predicted_endpoint_or_federated_endpoint": true,
    "run_id_langsmith": "7e674b12-1c62-4e8f-bc16-989f11b3fb6d",
    "evaluation_timestamp": "2025-04-26T18:25:14.227081",
    "question_understanding_prompt_tokens": 238,
    "question_understanding_completion_tokens": 20,
    "question_understanding_total_tokens": 258,
    "sparql_query_construction_prompt_tokens": 1691,
    "sparql_query_construction_completion_tokens": 0,
    "sparql_query_construction_total_tokens": 1691,
    "is_valid_sparql": true,
    "sparql_syntax_error": "syntactically correct",
    "ground_truth_query_result_is_empty": false,
    "result_eval_f1_score": 0.0,
    "result_eval_precision": 0.0,
    "result_eval_recall": 0.0,
    "error_occured_at_endpoint": false,
    "predicted_query_result_is_empty": true,
    "error_occured_at_endpoint_message": "no error, but empty result"
  },
  {
    "resource": "https://sparql.uniprot.org/.well-known/sparql-examples/52",
    "natural_language_question": "Retrieve drugs that target human enzymes involved in sterol metabolism (federated query with Rhea and ChEMBL via IDSM/Elixir czech republic).",
    "ground_truth_query": "PREFIX CHEBI: <http://purl.obolibrary.org/obo/CHEBI_>\nPREFIX cco: <http://rdf.ebi.ac.uk/terms/chembl#>\nPREFIX chebihash: <http://purl.obolibrary.org/obo/chebi#>\nPREFIX owl: <http://www.w3.org/2002/07/owl#>\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX rh: <http://rdf.rhea-db.org/>\nPREFIX skos: <http://www.w3.org/2004/02/skos/core#>\nPREFIX taxon: <http://purl.uniprot.org/taxonomy/>\nPREFIX up: <http://purl.uniprot.org/core/>\n\nSELECT\n        DISTINCT\n            ?protein\n            ?proteinFullName\n            ?activityType\n            ?standardActivityValue\n            ?standardActivityUnit\n            ?chemblMolecule\n            ?chemlbMoleculePrefLabel\nWHERE\n  {\n  # ChEBI: retrieve members of the ChEBI class ChEBI:15889 (sterol)\n  # Rhea: retrieve the reactions involving these ChEBI as participants\n  SERVICE <https://sparql.rhea-db.org/sparql> {\n    ?reaction rdfs:subClassOf  rh:Reaction ;\n\t      rh:status        rh:Approved ;\n\t      rh:side          ?reactionSide .\n    ?reactionSide\n\t      rh:contains      ?participant .\n    ?participant rh:compound  ?compound\n    {\n      ?compound  rh:chebi  ?chebi .\n      ?chebi (rdfs:subClassOf)+ CHEBI:15889\n    } UNION {\n      ?compound  rh:chebi           ?chebi .\n      ?chebi2   rdfs:subClassOf     ?chebiRestriction .\n      ?chebiRestriction\n\t\ta           owl:Restriction ;\n\t\towl:onProperty      chebihash:has_major_microspecies_at_pH_7_3 ;\n\t\towl:someValuesFrom  ?chebi .\n      ?chebi2 (rdfs:subClassOf)+ CHEBI:15889\n    }\n  }\n  # UniProt: retrieve the human (taxid:9606) enzymes catalyzing these Rhea reactions\n  ?ca       up:catalyzedReaction  ?reaction .\n  ?a        up:catalyticActivity  ?ca .\n  ?protein  up:annotation         ?a ;\n\t    up:organism           taxon:9606 ;\n\t    up:recommendedName    ?proteinRecName .\n  ?proteinRecName\n\t    up:fullName           ?proteinFullName .\n  # Find drugs in wikidata that interact with the UniProt Proteins\n  # ChEMBL: retrieve the corresponding targets and with drugs in clinical phase 4\n  # Via https://idsm.elixir-czech.cz/sparql/\n  SERVICE <https://idsm.elixir-czech.cz/sparql/endpoint/idsm> {\n    ?activity a cco:Activity ;\n      cco:hasMolecule ?chemblMolecule ;\n      cco:hasAssay ?assay ;\n      cco:standardType ?activityType ;\n      cco:standardValue ?standardActivityValue ;\n      cco:standardUnits ?standardActivityUnit .\n    ?chemblMolecule cco:highestDevelopmentPhase ?highestDevelopmentPhase ;\n      rdfs:label ?chemblMoleculeLabel ;\n      skos:prefLabel ?chemlbMoleculePrefLabel .\n    FILTER (?highestDevelopmentPhase > 3)\n    ?assay cco:hasTarget ?target .\n    ?target cco:hasTargetComponent/cco:targetCmptXref ?protein .\n    ?protein a cco:UniprotRef .\n  }\n}",
    "target_endpoint": "https://sparql.uniprot.org/sparql/",
    "federates_with": [
      "https://sparql.rhea-db.org/sparql",
      "https://idsm.elixir-czech.cz/sparql/endpoint/idsm"
    ],
    "endpoint_set": "Uniprot",
    "file_path": "UniProt/52_drugs_targeting_sterol_metabolism.ttl",
    "predicted_query": "# https://idsm.elixir.cz/sparql\nPREFIX chembl: <http://rdf.ebi.ac.uk/schema/chembl#>\nPREFIX skos: <http://www.w3.org/2004/02/skos/core#>\nPREFIX up: <http://purl.uniprot.org/core/>\nPREFIX taxon: <http://purl.uniprot.org/taxonomy/>\nPREFIX rhea: <http://rdf.rhea-db.org/>\nPREFIX chebi: <http://purl.obolibrary.org/obo/CHEBI_>\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\n\nSELECT DISTINCT ?drug ?drugName\nWHERE {\n  # --- Query ChEMBL endpoint to find drugs and their protein targets ---\n  SERVICE <https://idsm.elixir.cz/sparql> {\n    # Find entities that are classified as Drugs\n    ?drug a chembl:Drug .\n    # Get the preferred label (name) of the drug\n    ?drug skos:prefLabel ?drugName .\n    # Find the activity associated with the drug\n    ?drug chembl:hasActivity ?activity .\n    # Find the target of the activity\n    ?activity chembl:hasTarget ?target .\n    # Find the target component, which is often a protein\n    ?target chembl:hasTargetComponent ?targetComponent .\n    # Link the target component to its corresponding UniProt protein URI\n    ?targetComponent chembl:hasProtein ?proteinURI .\n  }\n\n  # --- Query UniProt endpoint to check if the protein target is human and an enzyme ---\n  SERVICE <https://sparql.uniprot.org/sparql> {\n    # Ensure the URI is indeed a UniProt Protein entry\n    ?proteinURI a up:Protein .\n    # Check if the protein is from Homo sapiens (Human)\n    ?proteinURI up:organism taxon:9606 .\n    # Check if the protein catalyzes a reaction (i.e., is an enzyme)\n    # and get the URI of the catalyzed reaction (which is a Rhea reaction URI)\n    ?proteinURI up:catalyzedReaction ?reaction .\n  }\n\n  # --- Query Rhea endpoint to check if the reaction involves sterol metabolism ---\n  SERVICE <https://sparql.rhea-db.org/sparql> {\n    # Find participants involved in the reaction catalyzed by the human enzyme\n    ?reaction rhea:involvedParticipant ?participant .\n    # Link the participant to its ChEBI identifier\n    ?participant rhea:chebi ?chebiURI .\n    # Check if the ChEBI entity is a sterol (CHEBI:15889) or a subclass thereof\n    ?chebiURI rdfs:subClassOf* chebi:15889 .\n  }\n}",
    "predicted_endpoint": "https://idsm.elixir.cz/sparql",
    "predicted_endpoint_equal_to_target_endpoint": false,
    "predicted_endpoint_in_federates_with": false,
    "predicted_endpoint_or_federated_endpoint": false,
    "run_id_langsmith": "7e674b12-1c62-4e8f-bc16-989f11b3fb6d",
    "evaluation_timestamp": "2025-04-26T18:25:41.469863",
    "question_understanding_prompt_tokens": 238,
    "question_understanding_completion_tokens": 20,
    "question_understanding_total_tokens": 258,
    "sparql_query_construction_prompt_tokens": 1691,
    "sparql_query_construction_completion_tokens": 0,
    "sparql_query_construction_total_tokens": 1691,
    "is_valid_sparql": true,
    "sparql_syntax_error": "syntactically correct",
    "ground_truth_query_result_is_empty": false,
    "result_eval_f1_score": 0.0,
    "result_eval_precision": 0.0,
    "result_eval_recall": 0.0,
    "error_occured_at_endpoint": true,
    "predicted_query_result_is_empty": true,
    "error_occured_at_endpoint_message": "<urlopen error [Errno 8] nodename nor servname provided, or not known>"
  },
  {
    "resource": "https://sparql.uniprot.org/.well-known/sparql-examples/54",
    "natural_language_question": "Proteins with binding sites for ligands similar to heme",
    "ground_truth_query": "PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX sachem: <http://bioinfo.uochb.cas.cz/rdf/v1.0/sachem#>\nPREFIX up: <http://purl.uniprot.org/core/>\nPREFIX xsd: <http://www.w3.org/2001/XMLSchema#>\n\nSELECT \n  ?protein\n  ?mnemonic\n  ?proteinName\n  ?ligandSimilarityScore\n  ?ligand\nWHERE {\n  SERVICE <https://idsm.elixir-czech.cz/sparql/endpoint/chebi> {\n    ?ssc sachem:compound ?ligand; \n      sachem:score ?ligandSimilarityScore ;\n      sachem:similaritySearch ?sss .\n        # Smiles of Heme\n    ?sss    sachem:query \"CC1=C(CCC([O-])=O)C2=[N+]3C1=Cc1c(C)c(C=C)c4C=C5C(C)=C(C=C)C6=[N+]5[Fe-]3(n14)n1c(=C6)c(C)c(CCC([O-])=O)c1=C2\";\n      sachem:cutoff \"8e-1\"^^xsd:double ;\n      sachem:aromaticityMode sachem:aromaticityDetect ;\n      sachem:similarityRadius 1 ;\n      sachem:tautomerMode sachem:ignoreTautomers .\n  }\n  ?protein up:mnemonic ?mnemonic ;\n    up:recommendedName/up:fullName ?proteinName ;\n    up:annotation ?annotation .\n  ?annotation a up:Binding_Site_Annotation ;\n      up:ligand/rdfs:subClassOf ?ligand .\n}\nORDER BY DESC(?ligandSimilarityScore)",
    "target_endpoint": "https://sparql.uniprot.org/sparql/",
    "federates_with": [
      "https://idsm.elixir-czech.cz/sparql/endpoint/chebi"
    ],
    "endpoint_set": "Uniprot",
    "file_path": "UniProt/54_binding_sites_for_ligands_similar_to_heme_sachem.ttl",
    "predicted_query": "# https://sparql.uniprot.org/sparql\nPREFIX up: <http://purl.uniprot.org/core/>\nPREFIX chebi: <http://purl.obolibrary.org/obo/CHEBI_>\n\nSELECT DISTINCT ?protein ?accession\nWHERE {\n  # Query the UniProt endpoint for protein information\n  SERVICE <https://sparql.uniprot.org/sparql> {\n    # Find proteins\n    ?protein a up:Protein .\n\n    # Find annotations associated with the protein\n    ?protein up:annotation ?annotation .\n\n    # Filter for binding site annotations\n    ?annotation a up:Binding_Site_Annotation .\n\n    # Find the ligand associated with the binding site\n    ?annotation up:ligand ?ligand .\n\n    # Filter the ligand by the specific ChEBI identifier for Heme (Fe(II)-heme i(2-))\n    # Note: This query specifically looks for binding sites of the exact Heme entity identified.\n    # Finding ligands \"similar\" to Heme would require additional information or criteria\n    # for similarity, which is not directly available as a simple property in the schema.\n    ?ligand up:molecule chebi:147291 . # CHEBI:147291 corresponds to Fe(II)-heme i(2-)\n\n    # Get the protein accession number\n    ?protein up:accession ?accession .\n  }\n}",
    "predicted_endpoint": "https://sparql.uniprot.org/sparql",
    "predicted_endpoint_equal_to_target_endpoint": true,
    "predicted_endpoint_in_federates_with": false,
    "predicted_endpoint_or_federated_endpoint": true,
    "run_id_langsmith": "7e674b12-1c62-4e8f-bc16-989f11b3fb6d",
    "evaluation_timestamp": "2025-04-26T18:25:56.002952",
    "question_understanding_prompt_tokens": 238,
    "question_understanding_completion_tokens": 20,
    "question_understanding_total_tokens": 258,
    "sparql_query_construction_prompt_tokens": 1691,
    "sparql_query_construction_completion_tokens": 0,
    "sparql_query_construction_total_tokens": 1691,
    "is_valid_sparql": true,
    "sparql_syntax_error": "syntactically correct",
    "ground_truth_query_result_is_empty": false,
    "result_eval_f1_score": 0.0,
    "result_eval_precision": 0.0,
    "result_eval_recall": 0.0,
    "error_occured_at_endpoint": false,
    "predicted_query_result_is_empty": true,
    "error_occured_at_endpoint_message": "no error, but empty result"
  },
  {
    "resource": "https://sparql.uniprot.org/.well-known/sparql-examples/43",
    "natural_language_question": "Connect patents cited in UniProtKB with those in the patent database at EPO via publication number, whose grant date is more than twenty years in the past.",
    "ground_truth_query": "PREFIX patent: <http://data.epo.org/linked-data/def/patent/>\nPREFIX skos: <http://www.w3.org/2004/02/skos/core#>\nPREFIX up: <http://purl.uniprot.org/core/>\n\nSELECT ?grantDate ?patent ?application ?applicationNo\nWHERE\n{\n    ?citation a up:Patent_Citation ;\n  skos:exactMatch ?patent .\n  BIND(SUBSTR(STR(?patent), 35) AS ?applicationNo)\n  BIND(SUBSTR(STR(?patent), 33, 2) AS ?countryCode)\n  SERVICE <https://data.epo.org/linked-data/query>{\n    ?publication patent:publicationNumber ?applicationNo ;\n      patent:application ?application .\n    ?application patent:grantDate ?grantDate .\n  }\n  BIND((year(now()) - 20) AS ?thisYearMinusTwenty)\n  BIND(year(?grantDate) AS ?grantYear)\n  FILTER(?grantYear < ?thisYearMinusTwenty)\n} ORDER BY ?grantYear",
    "target_endpoint": "https://sparql.uniprot.org/sparql/",
    "federates_with": [
      "https://data.epo.org/linked-data/query"
    ],
    "endpoint_set": "Uniprot",
    "file_path": "UniProt/43_patents_used_in_uniprot_granted_twenty_years_in_the_past.ttl",
    "predicted_query": "# https://sparql.uniprot.org/sparql\nPREFIX up: <http://purl.uniprot.org/core/>\nPREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>\nPREFIX dc: <http://purl.org/dc/elements/1.1/>\n\n# This query retrieves patent identifiers cited within UniProt entries.\n# It is not possible to directly connect this information to an external\n# EPO patent database or filter by grant date based on the provided\n# endpoint context, as no such endpoint for patents was included.\n# The query below extracts the patent numbers available in UniProt.\nSELECT DISTINCT ?protein ?patentNumber\nWHERE {\n  # Query the UniProt endpoint\n  SERVICE <https://sparql.uniprot.org/sparql> {\n    # Find a protein entry\n    ?protein a up:Protein .\n\n    # Find citations associated with the protein\n    ?protein up:citation ?citation .\n\n    # Filter citations to find those that are patents\n    ?citation a up:Patent .\n\n    # Get the patent number (identifier) from the patent citation\n    # UniProt typically stores the patent number as dc:identifier on the citation resource\n    ?citation dc:identifier ?patentNumber .\n  }\n}\nLIMIT 100",
    "predicted_endpoint": "https://sparql.uniprot.org/sparql",
    "predicted_endpoint_equal_to_target_endpoint": true,
    "predicted_endpoint_in_federates_with": false,
    "predicted_endpoint_or_federated_endpoint": true,
    "run_id_langsmith": "7e674b12-1c62-4e8f-bc16-989f11b3fb6d",
    "evaluation_timestamp": "2025-04-26T18:26:24.264746",
    "question_understanding_prompt_tokens": 238,
    "question_understanding_completion_tokens": 20,
    "question_understanding_total_tokens": 258,
    "sparql_query_construction_prompt_tokens": 1691,
    "sparql_query_construction_completion_tokens": 0,
    "sparql_query_construction_total_tokens": 1691,
    "is_valid_sparql": true,
    "sparql_syntax_error": "syntactically correct",
    "ground_truth_query_result_is_empty": false,
    "result_eval_f1_score": 0.0,
    "result_eval_precision": 0.0,
    "result_eval_recall": 0.0,
    "error_occured_at_endpoint": false,
    "predicted_query_result_is_empty": true,
    "error_occured_at_endpoint_message": "no error, but empty result"
  },
  {
    "resource": "https://sparql.uniprot.org/.well-known/sparql-examples/45",
    "natural_language_question": "Retrieve drugs that target human enzymes involved in sterol metabolism (federated query with WikiData and Rhea).",
    "ground_truth_query": "PREFIX CHEBI: <http://purl.obolibrary.org/obo/CHEBI_>\nPREFIX chebihash: <http://purl.obolibrary.org/obo/chebi#>\nPREFIX owl: <http://www.w3.org/2002/07/owl#>\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX rh: <http://rdf.rhea-db.org/>\nPREFIX taxon: <http://purl.uniprot.org/taxonomy/>\nPREFIX uniprotkb: <http://purl.uniprot.org/uniprot/>\nPREFIX up: <http://purl.uniprot.org/core/>\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\n\nSELECT DISTINCT ?protein ?proteinFullName ?wikiChemical ?wikiChemicalLabel ?medicalConditionTreatedLabel\nWHERE {\n  # ChEBI: retrieve members of the ChEBI class ChEBI:15889 (sterol)\n  # Rhea: retrieve the reactions involving these ChEBI as participants\n  SERVICE <https://sparql.rhea-db.org/sparql> {\n    ?reaction rdfs:subClassOf rh:Reaction ;\n      rh:status rh:Approved ;\n      rh:side ?reactionSide .\n    ?reactionSide\n      rh:contains ?participant .\n    ?participant rh:compound ?compound\n    {\n      ?compound rh:chebi ?chebi .\n      ?chebi (rdfs:subClassOf)+ CHEBI:15889\n    } UNION {\n      ?compound rh:chebi ?chebi .\n      ?chebi2 rdfs:subClassOf ?chebiRestriction .\n      ?chebiRestriction\n\t\ta owl:Restriction ;\n\t\towl:onProperty chebihash:has_major_microspecies_at_pH_7_3 ;\n\t\towl:someValuesFrom ?chebi .\n      ?chebi2 (rdfs:subClassOf)+ CHEBI:15889\n    }\n  }\n  # UniProt: retrieve the human (taxid:9606) enzymes catalyzing these Rhea reactions\n  ?ca up:catalyzedReaction  ?reaction .\n  ?a up:catalyticActivity  ?ca .\n  ?proteinIRI  up:annotation ?a ;\n    up:organism taxon:9606 ;\n    up:recommendedName ?proteinRecName .\n  ?proteinRecName up:fullName ?proteinFullName .\n  # Find drugs in wikidata that interact with the UniProt Proteins\n  BIND (SUBSTR(STR(?proteinIRI), STRLEN(STR(uniprotkb:))+1) AS ?protein)\n  SERVICE <https://query.wikidata.org/sparql> {\n    ?wp wdt:P352  ?protein .\n    ?wikiChemical wdt:P129 ?wp . # Physically interacts with\n    ?wikiChemical rdfs:label ?wikiChemicalLabel .\n    ?wikiChemical wdt:P2175 ?wmc . # Medical conndition treated\n    ?wmc rdfs:label ?medicalConditionTreatedLabel .\n    FILTER(lang(?medicalConditionTreatedLabel) = 'en')\n    FILTER(lang(?wikiChemicalLabel) = 'en')\n  }\n}",
    "target_endpoint": "https://sparql.uniprot.org/sparql/",
    "federates_with": [
      "https://query.wikidata.org/sparql",
      "https://sparql.rhea-db.org/sparql"
    ],
    "endpoint_set": "Uniprot",
    "file_path": "UniProt/45_drugs_targeting_human_sterol_metabolism_enzymes.ttl",
    "predicted_query": "# Primary endpoint: https://sparql.uniprot.org/sparql\nPREFIX up: <http://purl.uniprot.org/core/>\nPREFIX taxon: <http://purl.uniprot.org/taxonomy/>\nPREFIX rhea: <http://rdf.rhea-db.org/>\nPREFIX chebi: <http://purl.obolibrary.org/obo/CHEBI_>\nPREFIX wd: <http://www.wikidata.org/entity/>\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\n\nSELECT DISTINCT ?drug ?drugLabel ?enzyme ?enzymeLabel\nWHERE {\n  # Step 1: Find human proteins (potential enzymes) and their WikiData links in UniProt\n  # We start by filtering for human proteins as the organism constraint is specific to UniProt.\n  SERVICE <https://sparql.uniprot.org/sparql> {\n    ?enzyme a up:Protein ;\n            up:organism taxon:9606 ; # Filter for Homo sapiens (taxon ID 9606)\n            rdfs:label ?enzymeLabel ; # Get the label for the enzyme\n            rdfs:seeAlso ?wikidataItem . # Get the corresponding WikiData item URI for linking\n  }\n\n  # Step 2: Find reactions involving sterols and the enzymes catalyzing them in Rhea\n  # This step identifies enzymes involved in sterol metabolism.\n  SERVICE <https://sparql.rhea-db.org/sparql> {\n    ?reaction rhea:involves chebi:15889 . # Find reactions involving sterol (CHEBI:15889)\n    ?reaction rhea:catalyzedBy ?enzyme . # Get the UniProt URI of the enzyme catalyzing the reaction\n    # The ?enzyme variable links this reaction to the human protein found in the UniProt service block.\n  }\n\n  # Step 3: Find drugs in WikiData that target the enzymes identified\n  # This step uses the WikiData link obtained from UniProt to find targeting drugs.\n  SERVICE <https://query.wikidata.org/sparql> {\n    ?drug wdt:P129 ?wikidataItem ; # Find items (?drug) that target the enzyme's WikiData item (?wikidataItem)\n          wdt:P31 wd:Q12140 . # Ensure the item is an instance of 'drug' (Q12140)\n    OPTIONAL { ?drug rdfs:label ?drugLabel filter (lang(?drugLabel) = \"en\") } # Get English label for the drug if available\n    # The ?wikidataItem variable links this drug target information back to the UniProt service block.\n  }\n}",
    "predicted_endpoint": "Primary",
    "predicted_endpoint_equal_to_target_endpoint": false,
    "predicted_endpoint_in_federates_with": false,
    "predicted_endpoint_or_federated_endpoint": false,
    "run_id_langsmith": "7e674b12-1c62-4e8f-bc16-989f11b3fb6d",
    "evaluation_timestamp": "2025-04-26T18:26:55.048251",
    "question_understanding_prompt_tokens": 238,
    "question_understanding_completion_tokens": 20,
    "question_understanding_total_tokens": 258,
    "sparql_query_construction_prompt_tokens": 1691,
    "sparql_query_construction_completion_tokens": 0,
    "sparql_query_construction_total_tokens": 1691,
    "is_valid_sparql": true,
    "sparql_syntax_error": "syntactically correct",
    "ground_truth_query_result_is_empty": false,
    "result_eval_f1_score": 0.0,
    "result_eval_precision": 0.0,
    "result_eval_recall": 0.0,
    "error_occured_at_endpoint": true,
    "predicted_query_result_is_empty": true,
    "error_occured_at_endpoint_message": "unknown url type: 'Primary?query=%23+Primary+endpoint%3A+https%3A//sparql.uniprot.org/sparql%0APREFIX+up%3A+%3Chttp%3A//purl.uniprot.org/core/%3E%0APREFIX+taxon%3A+%3Chttp%3A//purl.uniprot.org/taxonomy/%3E%0APREFIX+rhea%3A+%3Chttp%3A//rdf.rhea-db.org/%3E%0APREFIX+chebi%3A+%3Chttp%3A//purl.obolibrary.org/obo/CHEBI_%3E%0APREFIX+wd%3A+%3Chttp%3A//www.wikidata.org/entity/%3E%0APREFIX+wdt%3A+%3Chttp%3A//www.wikidata.org/prop/direct/%3E%0APREFIX+rdfs%3A+%3Chttp%3A//www.w3.org/2000/01/rdf-schema%23%3E%0A%0ASELECT+DISTINCT+%3Fdrug+%3FdrugLabel+%3Fenzyme+%3FenzymeLabel%0AWHERE+%7B%0A++%23+Step+1%3A+Find+human+proteins+%28potential+enzymes%29+and+their+WikiData+links+in+UniProt%0A++%23+We+start+by+filtering+for+human+proteins+as+the+organism+constraint+is+specific+to+UniProt.%0A++SERVICE+%3Chttps%3A//sparql.uniprot.org/sparql%3E+%7B%0A++++%3Fenzyme+a+up%3AProtein+%3B%0A++++++++++++up%3Aorganism+taxon%3A9606+%3B+%23+Filter+for+Homo+sapiens+%28taxon+ID+9606%29%0A++++++++++++rdfs%3Alabel+%3FenzymeLabel+%3B+%23+Get+the+label+for+the+enzyme%0A++++++++++++rdfs%3AseeAlso+%3FwikidataItem+.+%23+Get+the+corresponding+WikiData+item+URI+for+linking%0A++%7D%0A%0A++%23+Step+2%3A+Find+reactions+involving+sterols+and+the+enzymes+catalyzing+them+in+Rhea%0A++%23+This+step+identifies+enzymes+involved+in+sterol+metabolism.%0A++SERVICE+%3Chttps%3A//sparql.rhea-db.org/sparql%3E+%7B%0A++++%3Freaction+rhea%3Ainvolves+chebi%3A15889+.+%23+Find+reactions+involving+sterol+%28CHEBI%3A15889%29%0A++++%3Freaction+rhea%3AcatalyzedBy+%3Fenzyme+.+%23+Get+the+UniProt+URI+of+the+enzyme+catalyzing+the+reaction%0A++++%23+The+%3Fenzyme+variable+links+this+reaction+to+the+human+protein+found+in+the+UniProt+service+block.%0A++%7D%0A%0A++%23+Step+3%3A+Find+drugs+in+WikiData+that+target+the+enzymes+identified%0A++%23+This+step+uses+the+WikiData+link+obtained+from+UniProt+to+find+targeting+drugs.%0A++SERVICE+%3Chttps%3A//query.wikidata.org/sparql%3E+%7B%0A++++%3Fdrug+wdt%3AP129+%3FwikidataItem+%3B+%23+Find+items+%28%3Fdrug%29+that+target+the+enzyme%27s+WikiData+item+%28%3FwikidataItem%29%0A++++++++++wdt%3AP31+wd%3AQ12140+.+%23+Ensure+the+item+is+an+instance+of+%27drug%27+%28Q12140%29%0A++++OPTIONAL+%7B+%3Fdrug+rdfs%3Alabel+%3FdrugLabel+filter+%28lang%28%3FdrugLabel%29+%3D+%22en%22%29+%7D+%23+Get+English+label+for+the+drug+if+available%0A++++%23+The+%3FwikidataItem+variable+links+this+drug+target+information+back+to+the+UniProt+service+block.%0A++%7D%0A%7D&format=json&output=json&results=json'"
  },
  {
    "resource": "https://sparql.uniprot.org/.well-known/sparql-examples/42",
    "natural_language_question": "Connect patents cited in UniProtKB with those in the patent database at EPO via publication number.",
    "ground_truth_query": "PREFIX patent: <http://data.epo.org/linked-data/def/patent/>\nPREFIX skos: <http://www.w3.org/2004/02/skos/core#>\nPREFIX up: <http://purl.uniprot.org/core/>\n\nSELECT ?citation ?patent ?application ?applicationNo\nWHERE\n{\n  ?citation a up:Patent_Citation ;\n    skos:exactMatch ?patent .\n  FILTER(CONTAINS(STR(?patent), 'EP'))\n  BIND(SUBSTR(STR(?patent), 35) AS ?applicationNo)\n  SERVICE <https://data.epo.org/linked-data/query>{\n    ?application patent:publicationNumber ?applicationNo\n  }\n}",
    "target_endpoint": "https://sparql.uniprot.org/sparql/",
    "federates_with": [
      "https://data.epo.org/linked-data/query"
    ],
    "endpoint_set": "Uniprot",
    "file_path": "UniProt/42_connect_patents_to_epo.ttl",
    "predicted_query": "# https://sparql.uniprot.org/sparql\nPREFIX up: <http://purl.uniprot.org/core/>\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\n\nSELECT ?protein ?pubNumber\nWHERE {\n  # Query UniProt for proteins and their associated patent citations\n  SERVICE <https://sparql.uniprot.org/sparql> {\n    ?protein a up:Protein .\n    ?protein up:citation ?citation . # Link protein to its citations\n    ?citation a up:Patent . # Filter for citations that are patents\n    ?citation up:publicationNumber ?pubNumber . # Get the patent publication number\n  }\n\n  # To connect this to a patent database at EPO, you would need the SPARQL endpoint URL\n  # and schema for that specific database. Since the endpoint for the \"patent database at EPO\"\n  # is not provided in the context and is not a standard public SPARQL endpoint,\n  # the second part of the federated query cannot be written.\n  # A hypothetical connection would look like this, assuming an endpoint and property exist:\n  # SERVICE <http://example.com/epo/sparql> { # Replace with actual EPO patent SPARQL endpoint\n  #   ?epoPatent ?someProperty ?pubNumber . # Find patents in the EPO database using the publication number\n  #   # You would then select additional information about the patent from the EPO database\n  # }\n}",
    "predicted_endpoint": "https://sparql.uniprot.org/sparql",
    "predicted_endpoint_equal_to_target_endpoint": true,
    "predicted_endpoint_in_federates_with": false,
    "predicted_endpoint_or_federated_endpoint": true,
    "run_id_langsmith": "7e674b12-1c62-4e8f-bc16-989f11b3fb6d",
    "evaluation_timestamp": "2025-04-26T18:27:11.227799",
    "question_understanding_prompt_tokens": 238,
    "question_understanding_completion_tokens": 20,
    "question_understanding_total_tokens": 258,
    "sparql_query_construction_prompt_tokens": 1691,
    "sparql_query_construction_completion_tokens": 0,
    "sparql_query_construction_total_tokens": 1691,
    "is_valid_sparql": true,
    "sparql_syntax_error": "syntactically correct",
    "ground_truth_query_result_is_empty": false,
    "result_eval_f1_score": 0.0,
    "result_eval_precision": 0.0,
    "result_eval_recall": 0.0,
    "error_occured_at_endpoint": false,
    "predicted_query_result_is_empty": true,
    "error_occured_at_endpoint_message": "no error, but empty result"
  },
  {
    "resource": "https://sparql.uniprot.org/.well-known/sparql-examples/67_draft_human_metabolome",
    "natural_language_question": "Generate a draft human metabolome",
    "ground_truth_query": "PREFIX chebislash: <http://purl.obolibrary.org/obo/chebi/>\nPREFIX rh: <http://rdf.rhea-db.org/>\nPREFIX taxon: <http://purl.uniprot.org/taxonomy/>\nPREFIX up: <http://purl.uniprot.org/core/>\n\nSELECT\n?uniprot ?mnemonic ?rhea ?chebi ?smiles ?inchiKey\nWHERE\n{\n  ?uniprot up:annotation/up:catalyticActivity/up:catalyzedReaction ?rhea ;\n        up:organism taxon:9606 ;\n        up:mnemonic ?mnemonic .\n  SERVICE <https://sparql.rhea-db.org/sparql> {\n\t?rhea rh:side/rh:contains/rh:compound ?compound .\n    ?compound (rh:chebi|(rh:reactivePart/rh:chebi)|(rh:underlyingChebi/rh:chebi)) ?chebi .\n   }\n   ?chebi chebislash:smiles ?smiles ;\n          chebislash:inchikey ?inchiKey .\n}",
    "target_endpoint": "https://sparql.uniprot.org/sparql/",
    "federates_with": [
      "https://sparql.rhea-db.org/sparql"
    ],
    "endpoint_set": "Uniprot",
    "file_path": "UniProt/67_draft_human_metabolome.ttl",
    "predicted_query": "# https://sparql.rhea-db.org/sparql\nPREFIX rhea: <http://rdf.rhea-db.org/>\nPREFIX taxonomy: <http://purl.uniprot.org/taxonomy/>\nPREFIX sl: <https://swisslipids.org/rdf/>\nPREFIX chebi: <http://purl.obolibrary.org/obo/CHEBI_>\n\nSELECT DISTINCT ?metabolite\nWHERE {\n  # Query Rhea for metabolites involved in biochemical reactions known to occur in Homo sapiens\n  SERVICE <https://sparql.rhea-db.org/sparql> {\n    # Find reactions associated with the human taxonomy identifier (Homo sapiens)\n    ?reaction rhea:organism taxonomy:9606 ;\n              rhea:contains ?participant . # Link the reaction to its participants (substrates/products)\n    # Link the participant to the chemical entity involved in the reaction\n    # These are typically represented by ChEBI identifiers in Rhea\n    ?participant rhea:contains ?metabolite_chebi .\n    # Filter to ensure we are getting ChEBI entities, which represent metabolites\n    FILTER(STRSTARTS(STR(?metabolite_chebi), STR(chebi:)))\n    # Bind the ChEBI URI as the result variable ?metabolite\n    BIND(?metabolite_chebi AS ?metabolite)\n  }\n  UNION\n  # Query SwissLipids for known lipid entities\n  # Lipids are a major class of metabolites. This service provides lipid-specific data.\n  # Note: This part lists all lipids in SwissLipids, not strictly filtered by organism,\n  # as direct organism links are not explicitly described for the service.\n  # It contributes a broad set of lipids to the 'draft' metabolome.\n  SERVICE <https://sparql.swisslipids.org/sparql/> {\n    # Find all entities that are classified as Lipids in SwissLipids\n    ?lipid_sl a sl:Lipid .\n    # Bind the SwissLipids URI as the result variable ?metabolite\n    BIND(?lipid_sl AS ?metabolite)\n  }\n}",
    "predicted_endpoint": "https://sparql.rhea-db.org/sparql",
    "predicted_endpoint_equal_to_target_endpoint": false,
    "predicted_endpoint_in_federates_with": true,
    "predicted_endpoint_or_federated_endpoint": true,
    "run_id_langsmith": "7e674b12-1c62-4e8f-bc16-989f11b3fb6d",
    "evaluation_timestamp": "2025-04-26T18:27:39.688791",
    "question_understanding_prompt_tokens": 238,
    "question_understanding_completion_tokens": 20,
    "question_understanding_total_tokens": 258,
    "sparql_query_construction_prompt_tokens": 1691,
    "sparql_query_construction_completion_tokens": 0,
    "sparql_query_construction_total_tokens": 1691,
    "is_valid_sparql": false,
    "sparql_syntax_error": "Encountered \" \"union\" \"UNION \"\" at line 22, column 3.\nWas expecting one of:\n     ...\n     ...\n     ...\n     ...\n     ...\n     ...\n    \"values\" ...\n    \"graph\" ...\n    \"optional\" ...\n    \"minus\" ...\n    \"bind\" ...\n    \"service\" ...\n    \"filter\" ...\n    \"true\" ...\n    \"false\" ...\n     ...\n     ...\n     ...\n     ...\n     ...\n     ...\n     ...\n     ...\n     ...\n     ...\n     ...\n     ...\n     ...\n    \"(\" ...\n     ...\n    \"{\" ...\n    \"}\" ...\n    \"[\" ...\n     ...\n    \".\" ...\n    \"<<\" ...",
    "ground_truth_query_result_is_empty": null,
    "result_eval_f1_score": 0.0,
    "result_eval_precision": 0.0,
    "result_eval_recall": 0.0,
    "error_occured_at_endpoint": false,
    "predicted_query_result_is_empty": true,
    "error_occured_at_endpoint_message": "syntactically not correct"
  },
  {
    "resource": "https://sparql.uniprot.org/.well-known/sparql-examples/36",
    "natural_language_question": "Find the orthologous proteins for UniProtKB entry P05067 using the <a href=\"http://www.orthod.org\">OrthoDB database</a>",
    "ground_truth_query": "PREFIX orthodb: <http://purl.orthodb.org/>\nPREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX skos: <http://www.w3.org/2004/02/skos/core#>\nPREFIX uniprotkb: <http://purl.uniprot.org/uniprot/>\nPREFIX up: <http://purl.uniprot.org/core/>\n\nSELECT\n  ?protein\n  ?orthoGroup\n  ?scientificName\n  ?functionComment\n  ?prefferedGeneName\n  ((STRLEN(?value) - ?medianLength) as ?deviationFromMedianLength)\nWHERE\n{\n  uniprotkb:P05067 a up:Protein ;\n        up:organism/up:scientificName ?scientificName ;\n        rdfs:seeAlso ?orthoGroup ;\n        up:encodedBy/skos:prefLabel ?prefferedGeneName ;\n          up:sequence/rdf:value ?value .\n  OPTIONAL {\n    ?protein up:annotation ?functionAnnotation .\n    ?functionAnnotation a up:Function_Annotation ;\n      rdfs:comment ?functionComment .\n  }\n  SERVICE <https://sparql.orthodb.org/sparql>{\n    ?orthoGroup orthodb:ogMedianProteinLength ?medianLength .\n    ?orthoGroup orthodb:hasMember ?xref .\n    ?xref orthodb:xref/orthodb:xrefResource uniprotkb:P05067 .\n  }\n}\nLIMIT 985915",
    "target_endpoint": "https://sparql.uniprot.org/sparql/",
    "federates_with": [
      "https://sparql.orthodb.org/sparql"
    ],
    "endpoint_set": "Uniprot",
    "file_path": "UniProt/36_orthologous_proteins_via_orthodb.ttl",
    "predicted_query": "# https://sparql.uniprot.org/sparql\nPREFIX up: <http://purl.uniprot.org/core/>\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\n\nSELECT DISTINCT ?orthologAccession\nWHERE {\n  # Specify the starting protein using its UniProt accession\n  BIND(<http://purl.uniprot.org/uniprot/P05067> AS ?protein)\n\n  # Find the orthology group(s) associated with the protein\n  # UniProt links to external orthology databases like OrthoDB via up:orthologGroup\n  ?protein up:orthologGroup ?orthoGroup .\n\n  # Find all other proteins that belong to the same orthology group\n  ?orthologProtein up:orthologGroup ?orthoGroup .\n\n  # Exclude the original protein from the results\n  FILTER (?orthologProtein != ?protein)\n\n  # Get the UniProt accession for the ortholog protein\n  ?orthologProtein up:accession ?orthologAccession .\n\n  # Optional: Filter by a specific orthology database if the URI structure allows (e.g., starts with an OrthoDB specific prefix)\n  # This step is often implicit in how UniProt links, but could be added if needed.\n  # Example (hypothetical prefix): FILTER(STRSTARTS(STR(?orthoGroup), \"http://purl.orthodb.org/\"))\n}",
    "predicted_endpoint": "https://sparql.uniprot.org/sparql",
    "predicted_endpoint_equal_to_target_endpoint": true,
    "predicted_endpoint_in_federates_with": false,
    "predicted_endpoint_or_federated_endpoint": true,
    "run_id_langsmith": "7e674b12-1c62-4e8f-bc16-989f11b3fb6d",
    "evaluation_timestamp": "2025-04-26T18:28:01.095806",
    "question_understanding_prompt_tokens": 238,
    "question_understanding_completion_tokens": 20,
    "question_understanding_total_tokens": 258,
    "sparql_query_construction_prompt_tokens": 1691,
    "sparql_query_construction_completion_tokens": 0,
    "sparql_query_construction_total_tokens": 1691,
    "is_valid_sparql": true,
    "sparql_syntax_error": "syntactically correct",
    "ground_truth_query_result_is_empty": false,
    "result_eval_f1_score": 0.0,
    "result_eval_precision": 0.0,
    "result_eval_recall": 0.0,
    "error_occured_at_endpoint": false,
    "predicted_query_result_is_empty": true,
    "error_occured_at_endpoint_message": "no error, but empty result"
  },
  {
    "resource": "https://sparql.uniprot.org/.well-known/sparql-examples/60",
    "natural_language_question": "Find human proteins that catalyze reactions where substrates or product have a <a href=\"https://www.ebi.ac.uk/chebi/searchId.do?chebiId=CHEBI:35516\">Cholestane skeleton</a>",
    "ground_truth_query": "PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX rh: <http://rdf.rhea-db.org/>\nPREFIX sachem: <http://bioinfo.uochb.cas.cz/rdf/v1.0/sachem#>\nPREFIX taxon: <http://purl.uniprot.org/taxonomy/>\nPREFIX up: <http://purl.uniprot.org/core/>\n\nSELECT\n  DISTINCT\n    ?protein\n    ?disease\n    ?rhea\n    ?chebi\n    ?omim\nWHERE {\n    # Find complete ChEBIs with a Cholestane skeleton, via the Czech Elixir node IDSM Sachem chemical substructure search.\n    SERVICE <https://idsm.elixir-czech.cz/sparql/endpoint/chebi> {\n      ?chebi sachem:substructureSearch [\n        sachem:query\n\"[C@]12(CCC3CCCC[C@]3(C)[C@@]1([H])CC[C@]1(C)[C@@]([H])([C@@](C)([H])CCCC(C)C)CC[C@@]21[H])[H]\"\n].\n   }\n   # Use the fact that UniProt catalytic activities are annotated using Rhea \n   # Mapping the found ChEBIs to Rhea reactions\n   SERVICE <https://sparql.rhea-db.org/sparql>{\n     ?rhea rh:side/rh:contains/rh:compound/rdfs:subClassOf ?chebi .\n   }\n   # Match the found Rhea reactions with human UniProtKB proteins\n   ?protein up:annotation/up:catalyticActivity/up:catalyzedReaction ?rhea .\n   ?protein up:organism taxon:9606 .\n   # Find only those human entries that have an annotated related disease, and optionaly map these to OMIM\n   ?protein up:annotation/up:disease ?disease .\n   OPTIONAL {\n     ?disease rdfs:seeAlso ?omim .\n     ?omim up:database <http://purl.uniprot.org/database/MIM>\n   }\n}",
    "target_endpoint": "https://sparql.uniprot.org/sparql/",
    "federates_with": [
      "https://idsm.elixir-czech.cz/sparql/endpoint/chebi",
      "https://sparql.rhea-db.org/sparql"
    ],
    "endpoint_set": "Uniprot",
    "file_path": "UniProt/60_enzymes_working_on_substrate_with_Cholestene_backbone.ttl",
    "predicted_query": "# https://sparql.rhea-db.org/sparql\nPREFIX rhea: <http://rdf.rhea-db.org/>\nPREFIX chebi: <http://purl.obolibrary.org/obo/CHEBI_>\nPREFIX up: <http://purl.uniprot.org/core/>\nPREFIX taxon: <http://purl.uniprot.org/taxonomy/>\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\n\nSELECT DISTINCT ?protein\nWHERE {\n  # Find reactions in Rhea\n  ?reaction a rhea:Reaction ;\n            rhea:participant ?participant . # Get participants of the reaction\n\n  # Find the chemical entity (ChEBI) associated with the participant\n  ?participant rhea:ChEBI ?chebiEntity .\n\n  # Check if the chemical entity is the Cholestane skeleton (CHEBI:35516)\n  # or a chemical entity that is a subclass of Cholestane skeleton.\n  # This traverses the rdfs:subClassOf hierarchy.\n  ?chebiEntity rdfs:subClassOf* chebi:35516 . # CHEBI:35516 is 'cholestane skeleton'\n\n  # Find the protein that catalyzes this reaction in Rhea\n  ?reaction rhea:catalyzedBy ?protein .\n\n  # Use SERVICE to query the UniProt endpoint to filter for human proteins\n  SERVICE <https://sparql.uniprot.org/sparql> {\n    # Ensure the found entity is a UniProt protein\n    ?protein a up:Protein ;\n             # Filter by organism: Homo sapiens (Taxonomy ID 9606)\n             up:organism taxon:9606 .\n  }\n}",
    "predicted_endpoint": "https://sparql.rhea-db.org/sparql",
    "predicted_endpoint_equal_to_target_endpoint": false,
    "predicted_endpoint_in_federates_with": true,
    "predicted_endpoint_or_federated_endpoint": true,
    "run_id_langsmith": "7e674b12-1c62-4e8f-bc16-989f11b3fb6d",
    "evaluation_timestamp": "2025-04-26T18:28:32.711960",
    "question_understanding_prompt_tokens": 238,
    "question_understanding_completion_tokens": 20,
    "question_understanding_total_tokens": 258,
    "sparql_query_construction_prompt_tokens": 1691,
    "sparql_query_construction_completion_tokens": 0,
    "sparql_query_construction_total_tokens": 1691,
    "is_valid_sparql": true,
    "sparql_syntax_error": "syntactically correct",
    "ground_truth_query_result_is_empty": false,
    "result_eval_f1_score": 0.0,
    "result_eval_precision": 0.0,
    "result_eval_recall": 0.0,
    "error_occured_at_endpoint": false,
    "predicted_query_result_is_empty": true,
    "error_occured_at_endpoint_message": "no error, but empty result"
  },
  {
    "resource": "https://sparql.uniprot.org/.well-known/sparql-examples/70_enzymes_interacting_with_molecules_similar_to_dopamine",
    "natural_language_question": "Look for enzymes catalyzing reactions with molecules similar to dopamine.",
    "ground_truth_query": "PREFIX CHEBI: <http://purl.obolibrary.org/obo/CHEBI_>\nPREFIX rh: <http://rdf.rhea-db.org/>\nPREFIX sachem: <http://bioinfo.uochb.cas.cz/rdf/v1.0/sachem#>\nPREFIX up: <http://purl.uniprot.org/core/>\n\nSELECT\n  ?protein\n  ?rhea\n  ?chebi\nWHERE {\n  # Use the smiles of dopamine CHEBI:18243\n  SERVICE <https://idsm.elixir-czech.cz/sparql/endpoint/chebi>{\n    ?chebi sachem:similarCompoundSearch [\n      sachem:query \"NCCc1ccc(O)c(O)c1\" ] .\n  }\n  GRAPH<https://sparql.rhea-db.org/rhea>{\n    ?rhea rh:side/rh:contains/rh:compound ?compound .\n    ?compound (rh:chebi|(rh:reactivePart/rh:chebi)|(rh:underlyingChebi/rh:chebi)) ?chebi .\n  }\n  ?protein up:reviewed true ;\n    up:annotation ?caa .\n  ?caa up:catalyticActivity/up:catalyzedReaction ?rhea .\n}",
    "target_endpoint": "https://sparql.uniprot.org/sparql/",
    "federates_with": [
      "https://idsm.elixir-czech.cz/sparql/endpoint/chebi"
    ],
    "endpoint_set": "Uniprot",
    "file_path": "UniProt/70_enzymes_interacting_with_molecules_similar_to_dopamine.ttl",
    "predicted_query": "# Primary endpoint: https://sparql.rhea-db.org/sparql\nPREFIX rhea: <http://rdf.rhea-db.org/>\nPREFIX chebi: <http://purl.obolibrary.org/obo/CHEBI_>\nPREFIX up: <http://purl.uniprot.org/core/>\nPREFIX skos: <http://www.w3.org/2004/02/skos/core#>\nPREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>\n\nSELECT DISTINCT ?uniprot ?proteinName\nWHERE {\n  # Query Rhea to find reactions involving dopamine (CHEBI:27605)\n  # Note: \"molecules similar to dopamine\" is interpreted as \"dopamine itself\"\n  # as structural similarity search is not a standard SPARQL feature across these endpoints.\n  SERVICE <https://sparql.rhea-db.org/sparql> {\n    ?reaction rhea:side ?side .\n    ?side rhea:contains ?participant .\n    # Filter for dopamine using its ChEBI ID\n    ?participant rhea:chebi \"CHEBI:27605\" . # CHEBI:27605 is the ChEBI ID for dopamine\n    # Link the reaction to the catalyzing enzyme (UniProt accession)\n    ?reaction rhea:uniprot ?uniprot .\n  }\n\n  # Query UniProt to get the name of the protein (enzyme)\n  SERVICE <https://sparql.uniprot.org/sparql> {\n    ?uniprot a up:Protein .\n    ?uniprot skos:prefLabel ?proteinName . # Get the preferred label (protein name)\n  }\n}",
    "predicted_endpoint": "Primary",
    "predicted_endpoint_equal_to_target_endpoint": false,
    "predicted_endpoint_in_federates_with": false,
    "predicted_endpoint_or_federated_endpoint": false,
    "run_id_langsmith": "7e674b12-1c62-4e8f-bc16-989f11b3fb6d",
    "evaluation_timestamp": "2025-04-26T18:28:56.508988",
    "question_understanding_prompt_tokens": 238,
    "question_understanding_completion_tokens": 20,
    "question_understanding_total_tokens": 258,
    "sparql_query_construction_prompt_tokens": 1691,
    "sparql_query_construction_completion_tokens": 0,
    "sparql_query_construction_total_tokens": 1691,
    "is_valid_sparql": true,
    "sparql_syntax_error": "syntactically correct",
    "ground_truth_query_result_is_empty": false,
    "result_eval_f1_score": 0.0,
    "result_eval_precision": 0.0,
    "result_eval_recall": 0.0,
    "error_occured_at_endpoint": true,
    "predicted_query_result_is_empty": true,
    "error_occured_at_endpoint_message": "unknown url type: 'Primary?query=%23+Primary+endpoint%3A+https%3A//sparql.rhea-db.org/sparql%0APREFIX+rhea%3A+%3Chttp%3A//rdf.rhea-db.org/%3E%0APREFIX+chebi%3A+%3Chttp%3A//purl.obolibrary.org/obo/CHEBI_%3E%0APREFIX+up%3A+%3Chttp%3A//purl.uniprot.org/core/%3E%0APREFIX+skos%3A+%3Chttp%3A//www.w3.org/2004/02/skos/core%23%3E%0APREFIX+rdf%3A+%3Chttp%3A//www.w3.org/1999/02/22-rdf-syntax-ns%23%3E%0A%0ASELECT+DISTINCT+%3Funiprot+%3FproteinName%0AWHERE+%7B%0A++%23+Query+Rhea+to+find+reactions+involving+dopamine+%28CHEBI%3A27605%29%0A++%23+Note%3A+%22molecules+similar+to+dopamine%22+is+interpreted+as+%22dopamine+itself%22%0A++%23+as+structural+similarity+search+is+not+a+standard+SPARQL+feature+across+these+endpoints.%0A++SERVICE+%3Chttps%3A//sparql.rhea-db.org/sparql%3E+%7B%0A++++%3Freaction+rhea%3Aside+%3Fside+.%0A++++%3Fside+rhea%3Acontains+%3Fparticipant+.%0A++++%23+Filter+for+dopamine+using+its+ChEBI+ID%0A++++%3Fparticipant+rhea%3Achebi+%22CHEBI%3A27605%22+.+%23+CHEBI%3A27605+is+the+ChEBI+ID+for+dopamine%0A++++%23+Link+the+reaction+to+the+catalyzing+enzyme+%28UniProt+accession%29%0A++++%3Freaction+rhea%3Auniprot+%3Funiprot+.%0A++%7D%0A%0A++%23+Query+UniProt+to+get+the+name+of+the+protein+%28enzyme%29%0A++SERVICE+%3Chttps%3A//sparql.uniprot.org/sparql%3E+%7B%0A++++%3Funiprot+a+up%3AProtein+.%0A++++%3Funiprot+skos%3AprefLabel+%3FproteinName+.+%23+Get+the+preferred+label+%28protein+name%29%0A++%7D%0A%7D&format=json&output=json&results=json'"
  },
  {
    "resource": "https://sparql.uniprot.org/.well-known/sparql-examples/38",
    "natural_language_question": "For the human entry P05067 (Amyloid-beta precursor protein) find the gene start ends in WikiData",
    "ground_truth_query": "PREFIX p: <http://www.wikidata.org/prop/>\nPREFIX pq: <http://www.wikidata.org/prop/qualifier/>\nPREFIX ps: <http://www.wikidata.org/prop/statement/>\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX uniprotkb: <http://purl.uniprot.org/uniprot/>\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\n\n\nSELECT \n\t?protein \n\t?begin\n\t?end\n\t?chromosome\n\t?assembly\nWHERE {\n    {\n        BIND(uniprotkb:P05067 AS ?proteinIRI)\n        BIND (SUBSTR(STR(?proteinIRI), STRLEN(STR(uniprotkb:))+1) AS ?protein)\n    }\n    SERVICE <https://query.wikidata.org/sparql> {\n        ?wp wdt:P352 ?protein ;\n            wdt:P702 ?wg . \n        ?wg p:P644   ?wgss .\n        ?wgss ps:P644        ?begin ;\n          pq:P1057/wdt:P1813 ?chromosome ;\n          pq:P659/rdfs:label ?assembly .\n        ?wg p:P645 ?wgse .\n        ?wgse ps:P645        ?end ;\n          pq:P1057/wdt:P1813 ?chromosome ;\n          pq:P659/rdfs:label ?assembly .\n        FILTER(lang(?assembly) = \"en\")\n  } \n}",
    "target_endpoint": "https://sparql.uniprot.org/sparql/",
    "federates_with": [
      "https://query.wikidata.org/sparql"
    ],
    "endpoint_set": "Uniprot",
    "file_path": "UniProt/38_find_gene_region_in_wikidata_for_known_entry.ttl",
    "predicted_query": "# Primary endpoint: https://sparql.uniprot.org/sparql\nPREFIX up: <http://purl.uniprot.org/core/>\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\nPREFIX wd: <http://www.wikidata.org/entity/>\nPREFIX identifiers: <http://identifiers.org/>\n\nSELECT ?geneWikidata ?geneStart ?geneEnd\nWHERE {\n  # Query UniProt to find the gene encoded by the protein P05067\n  SERVICE <https://sparql.uniprot.org/sparql> {\n    # Find the UniProt entry for P05067\n    <http://purl.uniprot.org/uniprot/P05067> up:encodedBy ?geneUniProt .\n\n    # From the UniProt gene resource, find cross-references to external databases\n    # We look for NCBI Gene or Ensembl identifiers which can be used to link to Wikidata\n    ?geneUniProt rdfs:seeAlso ?ncbiGeneURI .\n    FILTER(STRSTARTS(STR(?ncbiGeneURI), \"http://identifiers.org/ncbigene/\"))\n    BIND(STRAFTER(STR(?ncbiGeneURI), \"http://identifiers.org/ncbigene/\") AS ?ncbiGeneId)\n\n    # Optionally, get Ensembl ID as an alternative link\n    OPTIONAL {\n      ?geneUniProt rdfs:seeAlso ?ensemblURI .\n      FILTER(STRSTARTS(STR(?ensemblURI), \"http://identifiers.org/ensembl/\"))\n      BIND(STRAFTER(STR(?ensemblURI), \"http://identifiers.org/ensembl/\") AS ?ensemblId)\n    }\n  }\n\n  # Query Wikidata to find the gene item using the NCBI Gene ID or Ensembl ID\n  # and retrieve its start and end positions\n  SERVICE <https://query.wikidata.org/sparql> {\n    # Find the Wikidata item that has the matching NCBI Gene ID (P351)\n    ?geneWikidata wdt:P351 ?ncbiGeneId . # NCBI Gene ID\n\n    # Or find the Wikidata item with the matching Ensembl ID (P594) if available\n    OPTIONAL { ?geneWikidata wdt:P594 ?ensemblId . }\n\n    # Retrieve the gene start (P644) and end (P645) locations from the Wikidata item\n    ?geneWikidata wdt:P644 ?geneStart ; # Gene start location\n                  wdt:P645 ?geneEnd .   # Gene end location\n\n    # Optional: Filter to ensure the item is a gene (instance of Q7187)\n    # ?geneWikidata wdt:P31 wd:Q7187 .\n\n    # Optional: Filter to ensure the gene is found in Homo sapiens (Q15978631)\n    # This adds robustness but might not be strictly necessary if the NCBI Gene ID is unique\n    # ?geneWikidata wdt:P703 wd:Q15978631 .\n  }\n}",
    "predicted_endpoint": "Primary",
    "predicted_endpoint_equal_to_target_endpoint": false,
    "predicted_endpoint_in_federates_with": false,
    "predicted_endpoint_or_federated_endpoint": false,
    "run_id_langsmith": "7e674b12-1c62-4e8f-bc16-989f11b3fb6d",
    "evaluation_timestamp": "2025-04-26T18:29:34.787710",
    "question_understanding_prompt_tokens": 238,
    "question_understanding_completion_tokens": 20,
    "question_understanding_total_tokens": 258,
    "sparql_query_construction_prompt_tokens": 1691,
    "sparql_query_construction_completion_tokens": 0,
    "sparql_query_construction_total_tokens": 1691,
    "is_valid_sparql": true,
    "sparql_syntax_error": "syntactically correct",
    "ground_truth_query_result_is_empty": false,
    "result_eval_f1_score": 0.0,
    "result_eval_precision": 0.0,
    "result_eval_recall": 0.0,
    "error_occured_at_endpoint": true,
    "predicted_query_result_is_empty": true,
    "error_occured_at_endpoint_message": "unknown url type: 'Primary?query=%23+Primary+endpoint%3A+https%3A//sparql.uniprot.org/sparql%0APREFIX+up%3A+%3Chttp%3A//purl.uniprot.org/core/%3E%0APREFIX+rdfs%3A+%3Chttp%3A//www.w3.org/2000/01/rdf-schema%23%3E%0APREFIX+wdt%3A+%3Chttp%3A//www.wikidata.org/prop/direct/%3E%0APREFIX+wd%3A+%3Chttp%3A//www.wikidata.org/entity/%3E%0APREFIX+identifiers%3A+%3Chttp%3A//identifiers.org/%3E%0A%0ASELECT+%3FgeneWikidata+%3FgeneStart+%3FgeneEnd%0AWHERE+%7B%0A++%23+Query+UniProt+to+find+the+gene+encoded+by+the+protein+P05067%0A++SERVICE+%3Chttps%3A//sparql.uniprot.org/sparql%3E+%7B%0A++++%23+Find+the+UniProt+entry+for+P05067%0A++++%3Chttp%3A//purl.uniprot.org/uniprot/P05067%3E+up%3AencodedBy+%3FgeneUniProt+.%0A%0A++++%23+From+the+UniProt+gene+resource%2C+find+cross-references+to+external+databases%0A++++%23+We+look+for+NCBI+Gene+or+Ensembl+identifiers+which+can+be+used+to+link+to+Wikidata%0A++++%3FgeneUniProt+rdfs%3AseeAlso+%3FncbiGeneURI+.%0A++++FILTER%28STRSTARTS%28STR%28%3FncbiGeneURI%29%2C+%22http%3A//identifiers.org/ncbigene/%22%29%29%0A++++BIND%28STRAFTER%28STR%28%3FncbiGeneURI%29%2C+%22http%3A//identifiers.org/ncbigene/%22%29+AS+%3FncbiGeneId%29%0A%0A++++%23+Optionally%2C+get+Ensembl+ID+as+an+alternative+link%0A++++OPTIONAL+%7B%0A++++++%3FgeneUniProt+rdfs%3AseeAlso+%3FensemblURI+.%0A++++++FILTER%28STRSTARTS%28STR%28%3FensemblURI%29%2C+%22http%3A//identifiers.org/ensembl/%22%29%29%0A++++++BIND%28STRAFTER%28STR%28%3FensemblURI%29%2C+%22http%3A//identifiers.org/ensembl/%22%29+AS+%3FensemblId%29%0A++++%7D%0A++%7D%0A%0A++%23+Query+Wikidata+to+find+the+gene+item+using+the+NCBI+Gene+ID+or+Ensembl+ID%0A++%23+and+retrieve+its+start+and+end+positions%0A++SERVICE+%3Chttps%3A//query.wikidata.org/sparql%3E+%7B%0A++++%23+Find+the+Wikidata+item+that+has+the+matching+NCBI+Gene+ID+%28P351%29%0A++++%3FgeneWikidata+wdt%3AP351+%3FncbiGeneId+.+%23+NCBI+Gene+ID%0A%0A++++%23+Or+find+the+Wikidata+item+with+the+matching+Ensembl+ID+%28P594%29+if+available%0A++++OPTIONAL+%7B+%3FgeneWikidata+wdt%3AP594+%3FensemblId+.+%7D%0A%0A++++%23+Retrieve+the+gene+start+%28P644%29+and+end+%28P645%29+locations+from+the+Wikidata+item%0A++++%3FgeneWikidata+wdt%3AP644+%3FgeneStart+%3B+%23+Gene+start+location%0A++++++++++++++++++wdt%3AP645+%3FgeneEnd+.+++%23+Gene+end+location%0A%0A++++%23+Optional%3A+Filter+to+ensure+the+item+is+a+gene+%28instance+of+Q7187%29%0A++++%23+%3FgeneWikidata+wdt%3AP31+wd%3AQ7187+.%0A%0A++++%23+Optional%3A+Filter+to+ensure+the+gene+is+found+in+Homo+sapiens+%28Q15978631%29%0A++++%23+This+adds+robustness+but+might+not+be+strictly+necessary+if+the+NCBI+Gene+ID+is+unique%0A++++%23+%3FgeneWikidata+wdt%3AP703+wd%3AQ15978631+.%0A++%7D%0A%7D&format=json&output=json&results=json'"
  },
  {
    "resource": "https://sparql.uniprot.org/.well-known/sparql-examples/117_biosodafrontend_glioblastoma_orthologs_rat",
    "natural_language_question": "Which are the proteins associated with glioblastoma and the orthologs expressed in the rat brain?",
    "ground_truth_query": "PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX obo: <http://purl.obolibrary.org/obo/>\nPREFIX orth: <http://purl.org/net/orth#>\nPREFIX sio: <http://semanticscience.org/resource/>\nPREFIX taxon: <http://purl.uniprot.org/taxonomy/>\nPREFIX up: <http://purl.uniprot.org/core/>\nPREFIX lscr: <http://purl.org/lscr#>\nPREFIX genex: <http://purl.org/genex#>\nSELECT DISTINCT ?protein ?orthologous_protein ?gene ?annotation_text WHERE {\n  {\n  \tSELECT ?protein ?annotation_text WHERE {\n      ?protein a up:Protein ;\n          up:organism taxon:9606 ;\n          up:annotation ?annotation .\n      ?annotation rdfs:comment ?annotation_text .\n      ?annotation a up:Disease_Annotation .\n      FILTER CONTAINS (?annotation_text, \"glioblastoma\")\n    }\n  }\n  SERVICE <https://sparql.omabrowser.org/sparql/> {\n    SELECT ?orthologous_protein ?protein ?gene WHERE {\n    ?protein_OMA a orth:Protein .\n    ?orthologous_protein a orth:Protein .\n    ?cluster a orth:OrthologsCluster .\n    ?cluster orth:hasHomologousMember ?node1 .\n    ?cluster\n    orth:hasHomologousMember ?node2 .\n    ?node2 orth:hasHomologousMember* ?protein_OMA .\n    ?node1 orth:hasHomologousMember* ?orthologous_protein .\n    ?orthologous_protein orth:organism/obo:RO_0002162 taxon:10116 . # rattus norvegicus\n    ?orthologous_protein sio:SIO_010079 ?gene .\n    ?protein_OMA lscr:xrefUniprot ?protein .\n    FILTER(?node1 != ?node2)\n\t\t}\n\t}\n  SERVICE <https://www.bgee.org/sparql/> {\n    ?gene genex:isExpressedIn ?a .\n    ?a rdfs:label \"brain\" .\n    ?gene orth:organism ?s . \n    ?s obo:RO_0002162 taxon:10116.\n\t}\n}",
    "target_endpoint": "https://sparql.uniprot.org/sparql",
    "federates_with": [
      "https://sparql.omabrowser.org/sparql/",
      "https://www.bgee.org/sparql/"
    ],
    "endpoint_set": "Uniprot",
    "file_path": "UniProt/117_biosodafrontend_glioblastoma_orthologs_rat.ttl",
    "predicted_query": "# https://sparql.uniprot.org/sparql\nPREFIX up: <http://purl.uniprot.org/core/>\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX taxon: <http://purl.uniprot.org/taxonomy/>\nPREFIX disease: <http://purl.uniprot.org/diseases/>\nPREFIX bto: <http://purl.obolibrary.org/obo/BTO_> # Brenda Tissue Ontology prefix\n\nSELECT ?protein ?proteinLabel ?ortholog ?orthologLabel\nWHERE {\n  # Query the UniProt SPARQL endpoint\n  SERVICE <https://sparql.uniprot.org/sparql> {\n    # Find proteins associated with the disease 'Glioma' (using the provided entity URI)\n    # Note: The provided entity URI is for 'Glioma', which includes Glioblastoma.\n    ?protein a up:Protein ;\n             up:classifiedWith disease:2566 ; # Disease URI for Glioma\n             rdfs:label ?proteinLabel .\n\n    # Find orthologs of these proteins\n    ?protein up:ortholog ?ortholog .\n\n    # Filter the orthologs to be from the species 'Rat' (Rattus norvegicus)\n    # Using the common taxonomy ID for Rattus norvegicus\n    ?ortholog up:organism taxon:10116 ;\n              rdfs:label ?orthologLabel .\n\n    # Filter the Rat orthologs by expression location 'brain'\n    # UniProt links expression information via up:expressedIn, often to a description node\n    ?ortholog up:expressedIn ?expression .\n    # The expression description node links to the tissue using up:tissue and a BTO URI\n    ?expression up:tissue bto:0000310 . # BTO:0000310 is the URI for Brain\n\n    # Optional: Add language filter for labels if needed\n    # FILTER (LANG(?proteinLabel) = \"en\")\n    # FILTER (LANG(?orthologLabel) = \"en\")\n  }\n}",
    "predicted_endpoint": "https://sparql.uniprot.org/sparql",
    "predicted_endpoint_equal_to_target_endpoint": true,
    "predicted_endpoint_in_federates_with": false,
    "predicted_endpoint_or_federated_endpoint": true,
    "run_id_langsmith": "7e674b12-1c62-4e8f-bc16-989f11b3fb6d",
    "evaluation_timestamp": "2025-04-26T18:29:59.433803",
    "question_understanding_prompt_tokens": 238,
    "question_understanding_completion_tokens": 20,
    "question_understanding_total_tokens": 258,
    "sparql_query_construction_prompt_tokens": 1691,
    "sparql_query_construction_completion_tokens": 0,
    "sparql_query_construction_total_tokens": 1691,
    "is_valid_sparql": true,
    "sparql_syntax_error": "syntactically correct",
    "ground_truth_query_result_is_empty": false,
    "result_eval_f1_score": 0.0,
    "result_eval_precision": 0.0,
    "result_eval_recall": 0.0,
    "error_occured_at_endpoint": false,
    "predicted_query_result_is_empty": true,
    "error_occured_at_endpoint_message": "no error, but empty result"
  },
  {
    "resource": "https://sparql.uniprot.org/.well-known/sparql-examples/116_biosodafrontend_rabit_mouse_orthologs",
    "natural_language_question": "Rabbit's proteins encoded by genes that are orthologous to Mouse's HBB-Y gene and their cross reference links to Uniprot",
    "ground_truth_query": "PREFIX lscr: <http://purl.org/lscr#>\nPREFIX orth: <http://purl.org/net/orth#>\nPREFIX up: <http://purl.uniprot.org/core/>\nPREFIX obo: <http://purl.obolibrary.org/obo/>\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nSELECT DISTINCT ?PROTEIN_1 ?PROTEIN_2 ?UNIPROT_XREF_1 ?UNIPROT_XREF_2 WHERE {\n\t?taxon_1 up:commonName 'Mouse' .\n\t?taxon_2 up:commonName 'Rabbit' .\n\tSERVICE <https://sparql.omabrowser.org/sparql/> {\n\t\t?cluster a orth:OrthologsCluster .\n\t\t?cluster orth:hasHomologousMember ?node1 .\n\t\t?cluster orth:hasHomologousMember ?node2 .\n\t\t?node2 orth:hasHomologousMember* ?PROTEIN_2 .\n\t\t?node1 orth:hasHomologousMember* ?PROTEIN_1 .\n\t\t?PROTEIN_1 a orth:Protein .\n\t\t?PROTEIN_1 orth:organism/obo:RO_0002162 ?taxon_1 ;\n\t\t\trdfs:label 'HBB-Y' ;\n\t\t\tlscr:xrefUniprot ?UNIPROT_XREF_1 .\n\t\t?PROTEIN_2 a orth:Protein .\n\t\t?PROTEIN_2 orth:organism/obo:RO_0002162 ?taxon_2 .\n\t\t?PROTEIN_2 lscr:xrefUniprot ?UNIPROT_XREF_2 .\n\t\tFILTER ( ?node1 != ?node2 )\n\t}\n}",
    "target_endpoint": "https://sparql.uniprot.org/sparql",
    "federates_with": [
      "https://sparql.omabrowser.org/sparql/"
    ],
    "endpoint_set": "Uniprot",
    "file_path": "UniProt/116_biosodafrontend_rabit_mouse_orthologs.ttl",
    "predicted_query": "# Primary endpoint: https://sparql.uniprot.org/sparql\nPREFIX up: <http://purl.uniprot.org/core/>\nPREFIX taxon: <http://purl.uniprot.org/taxonomy/>\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\n\nSELECT ?rabbitAccession ?rabbitProteinName ?rabbitGeneName ?rabbitOrganism\nWHERE {\n  # Query the UniProt endpoint\n  SERVICE <https://sparql.uniprot.org/sparql> {\n    # Find the UniProt entry for the Mouse HBB-Y protein\n    # Assuming \"Hbb-y\" is the gene name for the target protein in Mouse (taxon:10090)\n    ?mouseProtein a up:Protein ;\n                  up:organism taxon:10090 ; # Mouse (Mus musculus) taxon ID\n                  up:geneName \"Hbb-y\" . # Gene name for Hemoglobin subunit beta-Y\n\n    # Find proteins in Rabbit (taxon:9986) that are orthologs of the Mouse protein\n    ?rabbitProtein a up:Protein ;\n                   up:organism taxon:9986 ; # Rabbit (Oryctolagus cuniculus) taxon ID\n                   up:ortholog ?mouseProtein ; # Link to the orthologous mouse protein\n                   up:accession ?rabbitAccession ; # Get the UniProt accession for the rabbit protein\n                   rdfs:label ?rabbitProteinName . # Get the protein recommended name\n\n    # Optionally get the gene name for the rabbit protein\n    OPTIONAL { ?rabbitProtein up:geneName ?rabbitGeneName . }\n\n    # Get the organism URI for the rabbit protein (a form of cross-reference)\n    ?rabbitProtein up:organism ?rabbitOrganism .\n  }\n}",
    "predicted_endpoint": "Primary",
    "predicted_endpoint_equal_to_target_endpoint": false,
    "predicted_endpoint_in_federates_with": false,
    "predicted_endpoint_or_federated_endpoint": false,
    "run_id_langsmith": "7e674b12-1c62-4e8f-bc16-989f11b3fb6d",
    "evaluation_timestamp": "2025-04-26T18:30:21.198454",
    "question_understanding_prompt_tokens": 238,
    "question_understanding_completion_tokens": 20,
    "question_understanding_total_tokens": 258,
    "sparql_query_construction_prompt_tokens": 1691,
    "sparql_query_construction_completion_tokens": 0,
    "sparql_query_construction_total_tokens": 1691,
    "is_valid_sparql": true,
    "sparql_syntax_error": "syntactically correct",
    "ground_truth_query_result_is_empty": false,
    "result_eval_f1_score": 0.0,
    "result_eval_precision": 0.0,
    "result_eval_recall": 0.0,
    "error_occured_at_endpoint": true,
    "predicted_query_result_is_empty": true,
    "error_occured_at_endpoint_message": "unknown url type: 'Primary?query=%23+Primary+endpoint%3A+https%3A//sparql.uniprot.org/sparql%0APREFIX+up%3A+%3Chttp%3A//purl.uniprot.org/core/%3E%0APREFIX+taxon%3A+%3Chttp%3A//purl.uniprot.org/taxonomy/%3E%0APREFIX+rdfs%3A+%3Chttp%3A//www.w3.org/2000/01/rdf-schema%23%3E%0A%0ASELECT+%3FrabbitAccession+%3FrabbitProteinName+%3FrabbitGeneName+%3FrabbitOrganism%0AWHERE+%7B%0A++%23+Query+the+UniProt+endpoint%0A++SERVICE+%3Chttps%3A//sparql.uniprot.org/sparql%3E+%7B%0A++++%23+Find+the+UniProt+entry+for+the+Mouse+HBB-Y+protein%0A++++%23+Assuming+%22Hbb-y%22+is+the+gene+name+for+the+target+protein+in+Mouse+%28taxon%3A10090%29%0A++++%3FmouseProtein+a+up%3AProtein+%3B%0A++++++++++++++++++up%3Aorganism+taxon%3A10090+%3B+%23+Mouse+%28Mus+musculus%29+taxon+ID%0A++++++++++++++++++up%3AgeneName+%22Hbb-y%22+.+%23+Gene+name+for+Hemoglobin+subunit+beta-Y%0A%0A++++%23+Find+proteins+in+Rabbit+%28taxon%3A9986%29+that+are+orthologs+of+the+Mouse+protein%0A++++%3FrabbitProtein+a+up%3AProtein+%3B%0A+++++++++++++++++++up%3Aorganism+taxon%3A9986+%3B+%23+Rabbit+%28Oryctolagus+cuniculus%29+taxon+ID%0A+++++++++++++++++++up%3Aortholog+%3FmouseProtein+%3B+%23+Link+to+the+orthologous+mouse+protein%0A+++++++++++++++++++up%3Aaccession+%3FrabbitAccession+%3B+%23+Get+the+UniProt+accession+for+the+rabbit+protein%0A+++++++++++++++++++rdfs%3Alabel+%3FrabbitProteinName+.+%23+Get+the+protein+recommended+name%0A%0A++++%23+Optionally+get+the+gene+name+for+the+rabbit+protein%0A++++OPTIONAL+%7B+%3FrabbitProtein+up%3AgeneName+%3FrabbitGeneName+.+%7D%0A%0A++++%23+Get+the+organism+URI+for+the+rabbit+protein+%28a+form+of+cross-reference%29%0A++++%3FrabbitProtein+up%3Aorganism+%3FrabbitOrganism+.%0A++%7D%0A%7D&format=json&output=json&results=json'"
  },
  {
    "resource": "https://sparql.uniprot.org/.well-known/sparql-examples/29",
    "natural_language_question": "Use <a href=\"http://allie.dbcls.jp/\">ALLIE</a> a service for Abbreviation / Long Form in Japanese and English to search in UniProt using Japanese.",
    "ground_truth_query": "PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX up: <http://purl.uniprot.org/core/>\n\nSELECT ?protein ?englishLabelStr\nWHERE {\n    SERVICE <https://data.allie.dbcls.jp/sparql>{\n        ?x rdfs:label \"アミロイド前駆体タンパク質\"@ja ;\n            rdfs:label ?englishLabel .\n        FILTER(lang(?englishLabel) = \"en\")\n    }\n    BIND (STR(?englishLabel) AS ?englishLabelStr)\n    ?protein a up:Protein .\n    {\n        ?protein (up:recommendedName|up:alternativeName) ?structuredName .\n    }\n    UNION\n    {\n        VALUES(?partType){(up:domain) (up:component)}\n            ?protein ?partType ?part .\n        ?part (up:recommendedName|up:alternativeName) ?structuredName .\n    }\n    ?structuredName ?anyKindOfName  ?englishLabelStr .\n    ?anyKindOfName rdfs:subPropertyOf up:structuredNameType .\n}",
    "target_endpoint": "https://sparql.uniprot.org/sparql/",
    "federates_with": [
      "https://data.allie.dbcls.jp/sparql"
    ],
    "endpoint_set": "Uniprot",
    "file_path": "UniProt/29_search_uniprot_in_japanese_with_allie.ttl",
    "predicted_query": "# https://sparql.uniprot.org/sparql\nPREFIX up: <http://purl.uniprot.org/core/>\nPREFIX skos: <http://www.w3.org/2004/02/skos/core#>\nPREFIX taxon: <http://purl.uniprot.org/taxonomy/>\n\nSELECT ?protein ?accession ?proteinName WHERE {\n  # Query the UniProt endpoint to find protein information.\n  SERVICE <https://sparql.uniprot.org/sparql> {\n    # Select entities that are proteins.\n    ?protein a up:Protein ;\n             # Get the protein accession.\n             up:accession ?accession ;\n             # Get the preferred label (name) of the protein.\n             skos:prefLabel ?proteinName ;\n             # Get the organism associated with the protein.\n             up:organism ?organism .\n\n    # Filter proteins by organism using taxonomy URIs identified as related to \"Japanese\".\n    # Note: The ALLIE service is not a SPARQL endpoint provided in the context,\n    # so it cannot be directly used in this federated query.\n    # This query searches UniProt for proteins from organisms identified as related to \"Japanese\"\n    # based on the provided entity matches.\n    VALUES ?organism {\n      taxon:1185717 # Japanobotrychium\n      taxon:408115  # Macroplea japana\n      taxon:495868  # Mobula japanica\n      taxon:30180   # Nipponaphis\n      taxon:1314697 # Nipponentomon nippon\n    }\n  }\n}\n# Limit the number of results for efficiency.\nLIMIT 100",
    "predicted_endpoint": "https://sparql.uniprot.org/sparql",
    "predicted_endpoint_equal_to_target_endpoint": true,
    "predicted_endpoint_in_federates_with": false,
    "predicted_endpoint_or_federated_endpoint": true,
    "run_id_langsmith": "7e674b12-1c62-4e8f-bc16-989f11b3fb6d",
    "evaluation_timestamp": "2025-04-26T18:30:45.190730",
    "question_understanding_prompt_tokens": 238,
    "question_understanding_completion_tokens": 20,
    "question_understanding_total_tokens": 258,
    "sparql_query_construction_prompt_tokens": 1691,
    "sparql_query_construction_completion_tokens": 0,
    "sparql_query_construction_total_tokens": 1691,
    "is_valid_sparql": true,
    "sparql_syntax_error": "syntactically correct",
    "ground_truth_query_result_is_empty": false,
    "result_eval_f1_score": 0.0,
    "result_eval_precision": 0.0,
    "result_eval_recall": 0.0,
    "error_occured_at_endpoint": false,
    "predicted_query_result_is_empty": true,
    "error_occured_at_endpoint_message": "no error, but empty result"
  },
  {
    "resource": "https://sparql.rhea-db.org/.well-known/sparql-examples/94_Select_all_approved_reactions_with_CHEBI_or_one_of_its_descendant_optional_UniProtKB_reviewed_EC",
    "natural_language_question": "Select all approved reactions with CHEBI:17815 (a 1,2-diacyl-sn-glycerol) or one of its descendant. Display links to UniProtKB/Swiss-Prot entries via EC numbers if the link rhea-ec exists.",
    "ground_truth_query": "PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX rh:<http://rdf.rhea-db.org/>\nPREFIX CHEBI:<http://purl.obolibrary.org/obo/CHEBI_>\nPREFIX up:<http://purl.uniprot.org/core/>\n\nSELECT\n  distinct\n    ?reaction\n    ?enzyme\n    (count(distinct ?protein) as ?proteinCount)\nWHERE {\n  ?reaction rdfs:subClassOf rh:Reaction .\n  ?reaction rh:status rh:Approved .\n  ?reaction rh:side ?reactionSide .\n\n  OPTIONAL {?reaction rh:ec ?enzyme .\n    SERVICE <https://sparql.uniprot.org/sparql> {\n      ?protein up:reviewed true .\n      ?protein up:enzyme ?enzyme.\n    }\n  } .\n  ?reactionSide rh:contains ?participant .\n  ?participant rh:compound ?compound .\n  ?compound rh:chebi ?chebi .\n  ?chebi rdfs:subClassOf* CHEBI:17815 .\n}\nGROUP BY ?reaction ?enzyme\nORDER BY ?reaction\nLIMIT 985915",
    "target_endpoint": "https://sparql.rhea-db.org/sparql",
    "federates_with": [
      "https://sparql.uniprot.org/sparql"
    ],
    "endpoint_set": "Rhea",
    "file_path": "Rhea/94_Select_all_approved_reactions_with_CHEBI_or_one_of_its_descendant_optional_UniProtKB_reviewed_EC.ttl",
    "predicted_query": "# https://sparql.rhea-db.org/sparql\nPREFIX rhea: <http://rdf.rhea-db.org/>\nPREFIX chebi: <http://purl.obolibrary.org/obo/CHEBI_>\nPREFIX up: <http://purl.uniprot.org/core/>\n\nSELECT DISTINCT ?reaction ?uniprotEntry\nWHERE {\n    # Find approved reactions in Rhea\n    ?reaction rhea:status rhea:Approved .\n\n    # Find participants of the reaction\n    # We look for any participant (input, output, or catalyst)\n    # that is linked to the target ChEBI term.\n    # Note: Due to the lack of a ChEBI endpoint in the provided context,\n    # we can only query for the specific term CHEBI:17815, not its descendants.\n    ?reaction rhea:hasParticipant ?participant .\n    ?participant rhea:hasChEBI chebi:17815 .\n\n    # Optionally, find the EC number associated with the reaction\n    OPTIONAL {\n        ?reaction rhea:ec ?ecNumberString .\n\n        # Use SERVICE to query the UniProt endpoint\n        SERVICE <https://sparql.uniprot.org/sparql> {\n            # Construct the UniProt EC number URI from the string\n            BIND(uri(concat(\"http://purl.uniprot.org/enzyme/\", ?ecNumberString)) AS ?ecUri) .\n\n            # Find UniProt entries linked to this EC number\n            ?uniprotEntry up:enzyme ?ecUri .\n        }\n    }\n}",
    "predicted_endpoint": "https://sparql.rhea-db.org/sparql",
    "predicted_endpoint_equal_to_target_endpoint": true,
    "predicted_endpoint_in_federates_with": false,
    "predicted_endpoint_or_federated_endpoint": true,
    "run_id_langsmith": "7e674b12-1c62-4e8f-bc16-989f11b3fb6d",
    "evaluation_timestamp": "2025-04-26T18:31:09.553801",
    "question_understanding_prompt_tokens": 238,
    "question_understanding_completion_tokens": 20,
    "question_understanding_total_tokens": 258,
    "sparql_query_construction_prompt_tokens": 1691,
    "sparql_query_construction_completion_tokens": 0,
    "sparql_query_construction_total_tokens": 1691,
    "is_valid_sparql": true,
    "sparql_syntax_error": "syntactically correct",
    "ground_truth_query_result_is_empty": false,
    "result_eval_f1_score": 0.0,
    "result_eval_precision": 0.0,
    "result_eval_recall": 0.0,
    "error_occured_at_endpoint": false,
    "predicted_query_result_is_empty": true,
    "error_occured_at_endpoint_message": "no error, but empty result"
  },
  {
    "resource": "https://sparql.rhea-db.org/.well-known/sparql-examples/11",
    "natural_language_question": "Distribution of reactions according to the first class of the enzyme classification (federated query)",
    "ground_truth_query": "PREFIX ec: <http://purl.uniprot.org/enzyme/>\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX rh: <http://rdf.rhea-db.org/>\nPREFIX skos: <http://www.w3.org/2004/02/skos/core#>\n\n# Query 11\n# Retrieve the count of reactions mapped to each level (main class) of the enzyme classification\n#\n# This query mimics the Filter section of the Rhea website (Browse all reactions)\n# https://www.rhea-db.org/rhea?query=\nSELECT ?ecClass (STR(?ecName) AS ?ecClassName) (COUNT(?rhea) AS ?rheaCount)\nWHERE {\n  SERVICE <https://sparql.uniprot.org/sparql> {\n    VALUES (?ecClass) { (ec:1.-.-.-)(ec:2.-.-.-)(ec:3.-.-.-)(ec:4.-.-.-)(ec:5.-.-.-) (ec:6.-.-.-) (ec:7.-.-.-)}\n    ?ecNumber rdfs:subClassOf ?ecClass .\n    ?ecClass skos:prefLabel ?ecName .\n  }\n  ?rhea rdfs:subClassOf rh:Reaction .\n  ?rhea rh:ec ?ecNumber .\n} GROUP BY ?ecClass ?ecName",
    "target_endpoint": "https://sparql.rhea-db.org/sparql",
    "federates_with": [
      "https://sparql.uniprot.org/sparql"
    ],
    "endpoint_set": "Rhea",
    "file_path": "Rhea/11.ttl",
    "predicted_query": "# https://sparql.rhea-db.org/sparql\nPREFIX rhea: <http://rdf.rhea-db.org/>\nPREFIX up: <http://purl.uniprot.org/core/>\nPREFIX ec: <http://purl.uniprot.org/enzyme/> # Although EC numbers are literals in UniProt, this prefix is sometimes used for the concept\n\nSELECT ?firstEcClass (COUNT(DISTINCT ?reaction) AS ?reactionCount)\nWHERE {\n  # Query Rhea for reactions and the proteins that catalyze them\n  SERVICE <https://sparql.rhea-db.org/sparql> {\n    ?reaction a rhea:Reaction .\n    # Link Rhea reaction to the catalyzing UniProt protein\n    ?reaction rhea:catalyzedBy ?uniprotProtein .\n  }\n\n  # Query UniProt for the EC number associated with the protein\n  SERVICE <https://sparql.uniprot.org/sparql> {\n    ?uniprotProtein a up:Protein . # Ensure the resource is a protein\n    ?uniprotProtein up:ec ?ecNumber . # Get the EC number literal (e.g., \"1.1.1.1\")\n  }\n\n  # Extract the first class of the EC number (the part before the first dot)\n  BIND(STRBEFORE(?ecNumber, '.') AS ?firstEcClass)\n}\nGROUP BY ?firstEcClass\nORDER BY DESC(?reactionCount)",
    "predicted_endpoint": "https://sparql.rhea-db.org/sparql",
    "predicted_endpoint_equal_to_target_endpoint": true,
    "predicted_endpoint_in_federates_with": false,
    "predicted_endpoint_or_federated_endpoint": true,
    "run_id_langsmith": "7e674b12-1c62-4e8f-bc16-989f11b3fb6d",
    "evaluation_timestamp": "2025-04-26T18:31:24.930880",
    "question_understanding_prompt_tokens": 238,
    "question_understanding_completion_tokens": 20,
    "question_understanding_total_tokens": 258,
    "sparql_query_construction_prompt_tokens": 1691,
    "sparql_query_construction_completion_tokens": 0,
    "sparql_query_construction_total_tokens": 1691,
    "is_valid_sparql": true,
    "sparql_syntax_error": "syntactically correct",
    "ground_truth_query_result_is_empty": false,
    "result_eval_f1_score": 0.0,
    "result_eval_precision": 0.0,
    "result_eval_recall": 0.0,
    "error_occured_at_endpoint": false,
    "predicted_query_result_is_empty": true,
    "error_occured_at_endpoint_message": "no error, but empty result"
  },
  {
    "resource": "https://sparql.rhea-db.org/.well-known/sparql-examples/109_Distribution_of_reactions_according_to_the_first_level_of_enzyme_classification",
    "natural_language_question": "Distribution of reactions according to the first level of enzyme classification",
    "ground_truth_query": "\nPREFIX rh:<http://rdf.rhea-db.org/>\nPREFIX ec:<http://purl.uniprot.org/enzyme/>\nPREFIX rdfs:<http://www.w3.org/2000/01/rdf-schema#>\nPREFIX skos:<http://www.w3.org/2004/02/skos/core#>\n\nSELECT\n  ?ecClass\n  (str(?ecName) as ?ecClassName)\n  (count(?reaction) as ?reactionCount)\nWHERE\n{\n  SERVICE <http://sparql.uniprot.org/sparql> {\n    VALUES (?ecClass) { (ec:1.-.-.-)(ec:2.-.-.-)(ec:3.-.-.-)(ec:4.-.-.-)(ec:5.-.-.-) (ec:6.-.-.-) (ec:7.-.-.-) }\n    ?ecNumber rdfs:subClassOf ?ecClass .\n    ?ecClass skos:prefLabel ?ecName .\n  }\n  ?reaction rdfs:subClassOf rh:Reaction .\n  ?reaction rh:ec ?ecNumber .\n}\nGROUP BY ?ecClass ?ecName\n",
    "target_endpoint": "https://sparql.rhea-db.org/sparql",
    "federates_with": [
      "http://sparql.uniprot.org/sparql"
    ],
    "endpoint_set": "Rhea",
    "file_path": "Rhea/109_Distribution_of_reactions_according_to_the_first_level_of_enzyme_classification.ttl",
    "predicted_query": "# https://sparql.rhea-db.org/sparql\nPREFIX rhea: <http://rdf.rhea-db.org/>\nPREFIX up: <http://purl.uniprot.org/core/>\nPREFIX uniprot: <http://purl.uniprot.org/uniprot/>\n\nSELECT (SUBSTR(STR(?ec), 1, 1) AS ?ec_level1) (COUNT(DISTINCT ?reaction) AS ?reaction_count)\nWHERE {\n  # Query Rhea to find reactions catalyzed by a UniProt entry (enzyme)\n  SERVICE <https://sparql.rhea-db.org/sparql> {\n    ?reaction rhea:catalyzedBy ?uniprot_entry .\n  }\n  # Query UniProt to find the EC number associated with the enzyme\n  SERVICE <https://sparql.uniprot.org/sparql> {\n    ?uniprot_entry up:ec ?ec .\n  }\n  # Filter to ensure the EC number starts with a digit, representing the first level\n  FILTER regex(STR(?ec), \"^\\\\d\")\n}\nGROUP BY ?ec_level1\nORDER BY ?ec_level1",
    "predicted_endpoint": "https://sparql.rhea-db.org/sparql",
    "predicted_endpoint_equal_to_target_endpoint": true,
    "predicted_endpoint_in_federates_with": false,
    "predicted_endpoint_or_federated_endpoint": true,
    "run_id_langsmith": "7e674b12-1c62-4e8f-bc16-989f11b3fb6d",
    "evaluation_timestamp": "2025-04-26T18:31:37.571309",
    "question_understanding_prompt_tokens": 238,
    "question_understanding_completion_tokens": 20,
    "question_understanding_total_tokens": 258,
    "sparql_query_construction_prompt_tokens": 1691,
    "sparql_query_construction_completion_tokens": 0,
    "sparql_query_construction_total_tokens": 1691,
    "is_valid_sparql": false,
    "sparql_syntax_error": "Non-group key variable in SELECT: ?ec in expression (substr (str ?ec) 1 1)",
    "ground_truth_query_result_is_empty": null,
    "result_eval_f1_score": 0.0,
    "result_eval_precision": 0.0,
    "result_eval_recall": 0.0,
    "error_occured_at_endpoint": false,
    "predicted_query_result_is_empty": true,
    "error_occured_at_endpoint_message": "syntactically not correct"
  },
  {
    "resource": "https://sparql.rhea-db.org/.well-known/sparql-examples/12",
    "natural_language_question": "Select all Rhea reactions linked to protein sequences (enzymes and transporters) in UniProtKB",
    "ground_truth_query": "PREFIX rh: <http://rdf.rhea-db.org/>\nPREFIX up: <http://purl.uniprot.org/core/>\n\n# Query 12\n# Select all Rhea reactions used to annotate enzyme sequences in UniProtKB\n# return the number of UniProtKB entries\n# Federated query using a service to UniProt SPARQL endpoint\n#\n# This query corresponds to the Rhea website query:\n# https://www.rhea-db.org/rhea?query=uniprot:*\n#\nSELECT ?uniprotCount ?rhea ?accession ?equation \nWHERE {\n  SERVICE <https://sparql.uniprot.org/sparql> { \n  \tSELECT ?rhea (count(?uniprot) as ?uniprotCount) {\n      ?uniprot up:annotation/up:catalyticActivity/up:catalyzedReaction ?rhea . \n  \t}\n  \tGROUP BY ?rhea\n  }\n  ?rhea rh:accession ?accession .\n  ?rhea rh:equation ?equation .\n}",
    "target_endpoint": "https://sparql.rhea-db.org/sparql",
    "federates_with": [
      "https://sparql.uniprot.org/sparql"
    ],
    "endpoint_set": "Rhea",
    "file_path": "Rhea/12.ttl",
    "predicted_query": "# https://sparql.rhea-db.org/sparql\nPREFIX rhea: <http://rdf.rhea-db.org/>\nPREFIX up: <http://purl.uniprot.org/core/>\n\nSELECT DISTINCT ?reaction WHERE {\n  # Query the Rhea endpoint to find reactions catalyzed by enzymes\n  SERVICE <https://sparql.rhea-db.org/sparql> {\n    # Find a Rhea reaction\n    ?reaction a rhea:Reaction .\n    # Find the enzyme entity that catalyzes this reaction\n    ?reaction rhea:catalyzedBy ?enzyme .\n    # Find the UniProt accession linked to this enzyme entity in Rhea\n    ?enzyme rhea:uniprot ?uniprotAccession .\n  }\n\n  # Query the UniProt endpoint to confirm the existence of the protein sequence\n  # corresponding to the UniProt accession found in Rhea.\n  SERVICE <https://sparql.uniprot.org/sparql> {\n    # Find the UniProt URI using the accession obtained from Rhea\n    ?uniprotURI up:accession ?uniprotAccession .\n    # Ensure the found URI is indeed a protein entry (optional but good practice)\n    ?uniprotURI a up:Protein .\n  }\n  # The query links Rhea reactions via their associated enzymes (identified by UniProt accessions in Rhea)\n  # to the actual protein entries in UniProt.\n}",
    "predicted_endpoint": "https://sparql.rhea-db.org/sparql",
    "predicted_endpoint_equal_to_target_endpoint": true,
    "predicted_endpoint_in_federates_with": false,
    "predicted_endpoint_or_federated_endpoint": true,
    "run_id_langsmith": "7e674b12-1c62-4e8f-bc16-989f11b3fb6d",
    "evaluation_timestamp": "2025-04-26T18:31:52.549696",
    "question_understanding_prompt_tokens": 238,
    "question_understanding_completion_tokens": 20,
    "question_understanding_total_tokens": 258,
    "sparql_query_construction_prompt_tokens": 1691,
    "sparql_query_construction_completion_tokens": 0,
    "sparql_query_construction_total_tokens": 1691,
    "is_valid_sparql": true,
    "sparql_syntax_error": "syntactically correct",
    "ground_truth_query_result_is_empty": false,
    "result_eval_f1_score": 0.0,
    "result_eval_precision": 0.0,
    "result_eval_recall": 0.0,
    "error_occured_at_endpoint": false,
    "predicted_query_result_is_empty": true,
    "error_occured_at_endpoint_message": "no error, but empty result"
  },
  {
    "resource": "https://sparql.rhea-db.org/.well-known/sparql-examples/112_Total_number_of_reaction_ec_protein_links",
    "natural_language_question": "Total number of <reaction> <ec> <protein> links",
    "ground_truth_query": "PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX rh:<http://rdf.rhea-db.org/>\nPREFIX ec:<http://purl.uniprot.org/enzyme/>\nPREFIX up:<http://purl.uniprot.org/core/>\n\nSELECT\n  (count(?reaction) as ?reactionEcProteinLinkCount)\nWHERE {\n  ?reaction rdfs:subClassOf rh:Reaction .\n  ?reaction rh:ec ?enzyme\n  SERVICE <http://sparql.uniprot.org/sparql> {\n    ?protein up:reviewed true .\n    ?protein up:enzyme ?enzyme.\n  }\n}",
    "target_endpoint": "https://sparql.rhea-db.org/sparql",
    "federates_with": [
      "http://sparql.uniprot.org/sparql"
    ],
    "endpoint_set": "Rhea",
    "file_path": "Rhea/112_Total_number_of_reaction_ec_protein_links.ttl",
    "predicted_query": "# Primary endpoint: https://sparql.uniprot.org/sparql\nPREFIX uniprot: <http://purl.uniprot.org/core/>\nPREFIX rhea: <http://rdf.rhea-db.org/>\n\nSELECT (COUNT(DISTINCT ?protein ?reaction ?ec) AS ?totalLinks)\nWHERE {\n  # Find proteins and the reactions they catalyze in UniProt\n  SERVICE <https://sparql.uniprot.org/sparql> {\n    ?protein a uniprot:Protein ;\n             uniprot:catalyzedReaction ?reaction . # Link from protein to Rhea reaction\n  }\n\n  # Find the EC number associated with the reaction in Rhea\n  SERVICE <https://sparql.rhea-db.org/sparql> {\n    ?reaction rhea:ec ?ec . # Link from Rhea reaction to EC number\n  }\n  # This query counts distinct combinations of protein, reaction, and EC number\n  # where the protein is annotated in UniProt as catalyzing the reaction,\n  # and the reaction is annotated in Rhea with that specific EC number.\n}",
    "predicted_endpoint": "Primary",
    "predicted_endpoint_equal_to_target_endpoint": false,
    "predicted_endpoint_in_federates_with": false,
    "predicted_endpoint_or_federated_endpoint": false,
    "run_id_langsmith": "7e674b12-1c62-4e8f-bc16-989f11b3fb6d",
    "evaluation_timestamp": "2025-04-26T18:32:07.675040",
    "question_understanding_prompt_tokens": 238,
    "question_understanding_completion_tokens": 20,
    "question_understanding_total_tokens": 258,
    "sparql_query_construction_prompt_tokens": 1691,
    "sparql_query_construction_completion_tokens": 0,
    "sparql_query_construction_total_tokens": 1691,
    "is_valid_sparql": false,
    "sparql_syntax_error": "Encountered \"  \"?reaction \"\" at line 5, column 33.\nWas expecting one of:\n    \"not\" ...\n    \"in\" ...\n     ...\n     ...\n     ...\n     ...\n     ...\n     ...\n    \")\" ...\n    \"=\" ...\n    \"!=\" ...\n    \">\" ...\n    \"<\" ...\n    \"<=\" ...\n    \">=\" ...\n    \"||\" ...\n    \"&&\" ...\n    \"+\" ...\n    \"-\" ...\n    \"*\" ...\n    \"/\" ...",
    "ground_truth_query_result_is_empty": null,
    "result_eval_f1_score": 0.0,
    "result_eval_precision": 0.0,
    "result_eval_recall": 0.0,
    "error_occured_at_endpoint": false,
    "predicted_query_result_is_empty": true,
    "error_occured_at_endpoint_message": "syntactically not correct"
  },
  {
    "resource": "https://sparql.rhea-db.org/.well-known/sparql-examples/19_draft_human_metabolome",
    "natural_language_question": "Generate a draft human metabolome",
    "ground_truth_query": "PREFIX chebislash: <http://purl.obolibrary.org/obo/chebi/>\nPREFIX rh: <http://rdf.rhea-db.org/>\nPREFIX taxon: <http://purl.uniprot.org/taxonomy/>\nPREFIX up: <http://purl.uniprot.org/core/>\n\nSELECT\n  ?uniprot ?mnemonic ?rhea ?chebi ?smiles ?inchiKey\nWHERE\n{\n  ?rhea rh:side/rh:contains/rh:compound ?compound .\n  ?compound (rh:chebi|(rh:reactivePart/rh:chebi)|(rh:underlyingChebi/rh:chebi)) ?chebi .\n  ?chebi chebislash:smiles ?smiles ;\n          chebislash:inchikey ?inchiKey .\n  SERVICE <https://sparql.uniprot.org/sparql> {\n     ?uniprot up:annotation/up:catalyticActivity/up:catalyzedReaction ?rhea ;\n                                             up:organism taxon:9606 ;\n                                             up:mnemonic ?mnemonic .\n\n   }\n}",
    "target_endpoint": "https://sparql.rhea-db.org/sparql/",
    "federates_with": [
      "https://sparql.uniprot.org/sparql"
    ],
    "endpoint_set": "Rhea",
    "file_path": "Rhea/19_draft_human_metabolome.ttl",
    "predicted_query": "# https://sparql.rhea-db.org/sparql\nPREFIX rhea: <http://rdf.rhea-db.org/>\nPREFIX chebi: <http://purl.obolibrary.org/obo/CHEBI_>\nPREFIX up: <http://purl.uniprot.org/core/>\nPREFIX taxonomy: <http://purl.uniprot.org/taxonomy/>\nPREFIX sl: <https://swisslipids.org/rdf/>\nPREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\n\n# This query attempts to generate a \"draft human metabolome\" by listing:\n# 1. Metabolites participating in biochemical reactions in Rhea catalyzed by human enzymes.\n# 2. Lipids listed in SwissLipids as found in Homo sapiens.\n# The results are a union of chemical entities (mostly ChEBI URIs from Rhea) and lipid entities (SwissLipids URIs).\n\nSELECT DISTINCT ?metabolite WHERE {\n\n  # Part 1: Metabolites from human-catalyzed reactions in Rhea\n  SERVICE <https://sparql.rhea-db.org/sparql> {\n    # Find reactions\n    ?reaction a rhea:Reaction .\n    # Link reaction to the enzyme (UniProt entry) that catalyzes it\n    ?reaction rhea:catalyzedBy ?uniprotEntry .\n    # Find the chemical participants in the reaction\n    ?reaction rhea:hasParticipant ?participant .\n    ?participant rhea:chemical ?metabolite . # Get the chemical entity (metabolite), typically a ChEBI URI\n  }\n\n  # Federate to UniProt to check the species of the enzyme\n  SERVICE <https://sparql.uniprot.org/sparql> {\n    ?uniprotEntry up:organism ?organism .\n    # Filter for Homo sapiens (Human) organism\n    ?organism up:scientificName \"Homo sapiens\" .\n    # Alternatively, could use the taxonomy URI directly: ?organism taxonomy:9606 .\n  }\n\n  UNION\n\n  # Part 2: Lipids found in Homo sapiens from SwissLipids\n  SERVICE <https://sparql.swisslipids.org/sparql/> {\n    # Find entities that are classified as Lipids in SwissLipids\n    ?metabolite a sl:Lipid .\n    # Filter for lipids associated with Homo sapiens species\n    ?metabolite sl:species taxonomy:9606 . # Use the specific Homo sapiens taxonomy URI\n  }\n}",
    "predicted_endpoint": "https://sparql.rhea-db.org/sparql",
    "predicted_endpoint_equal_to_target_endpoint": true,
    "predicted_endpoint_in_federates_with": false,
    "predicted_endpoint_or_federated_endpoint": true,
    "run_id_langsmith": "7e674b12-1c62-4e8f-bc16-989f11b3fb6d",
    "evaluation_timestamp": "2025-04-26T18:32:28.544153",
    "question_understanding_prompt_tokens": 238,
    "question_understanding_completion_tokens": 20,
    "question_understanding_total_tokens": 258,
    "sparql_query_construction_prompt_tokens": 1691,
    "sparql_query_construction_completion_tokens": 0,
    "sparql_query_construction_total_tokens": 1691,
    "is_valid_sparql": false,
    "sparql_syntax_error": "Encountered \" \"union\" \"UNION \"\" at line 36, column 3.\nWas expecting one of:\n     ...\n     ...\n     ...\n     ...\n     ...\n     ...\n    \"values\" ...\n    \"graph\" ...\n    \"optional\" ...\n    \"minus\" ...\n    \"bind\" ...\n    \"service\" ...\n    \"filter\" ...\n    \"true\" ...\n    \"false\" ...\n     ...\n     ...\n     ...\n     ...\n     ...\n     ...\n     ...\n     ...\n     ...\n     ...\n     ...\n     ...\n     ...\n    \"(\" ...\n     ...\n    \"{\" ...\n    \"}\" ...\n    \"[\" ...\n     ...\n    \".\" ...\n    \"<<\" ...",
    "ground_truth_query_result_is_empty": null,
    "result_eval_f1_score": 0.0,
    "result_eval_precision": 0.0,
    "result_eval_recall": 0.0,
    "error_occured_at_endpoint": false,
    "predicted_query_result_is_empty": true,
    "error_occured_at_endpoint_message": "syntactically not correct"
  },
  {
    "resource": "https://sparql.rhea-db.org/.well-known/sparql-examples/20_search_chemical_names_in_japanese",
    "natural_language_question": "Search for Chemical names starting in Japanese, translated to english using allie",
    "ground_truth_query": "PREFIX oboInOwl: <http://www.geneontology.org/formats/oboInOwl#>\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\n\nSELECT\n*\nWHERE {\nSERVICE <https://data.allie.dbcls.jp/sparql>{\n        ?x rdfs:label \"1,2,4-トリクロロベンゼン\"@ja ;\n            rdfs:label ?englishLabel .\n        FILTER(lang(?englishLabel) = \"en\")\n    }\n  BIND(STR(?englishLabel) AS ?englishLabelStr)\n  ?chebi rdfs:label|oboInOwl:hasSynonym ?englishLabelStr .\n}",
    "target_endpoint": "https://sparql.rhea-db.org/sparql/",
    "federates_with": [
      "https://data.allie.dbcls.jp/sparql"
    ],
    "endpoint_set": "Rhea",
    "file_path": "Rhea/20_search_chemical_names_in_japanese.ttl",
    "predicted_query": "# https://sparql.rhea-db.org/sparql\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX skos: <http://www.w3.org/2004/02/skos/core#>\n# This query searches for chemical entities in Rhea DB (which uses ChEBI)\n# It looks for entities whose primary label (rdfs:label) starts with \"Japanese\"\n# and retrieves their English alternative labels (skos:altLabel with language tag 'en').\n\nSELECT ?entity ?japaneseLabel ?englishLabel\nWHERE {\n  SERVICE <https://sparql.rhea-db.org/sparql> {\n    # Find entities that have a primary label\n    ?entity rdfs:label ?japaneseLabel .\n\n    # Filter the primary label to find those starting with \"Japanese\"\n    FILTER (STRSTARTS(?japaneseLabel, \"Japanese\"))\n\n    # Find an alternative label for the same entity\n    ?entity skos:altLabel ?englishLabel .\n\n    # Filter the alternative label to get the English translation\n    FILTER (lang(?englishLabel) = \"en\")\n  }\n}",
    "predicted_endpoint": "https://sparql.rhea-db.org/sparql",
    "predicted_endpoint_equal_to_target_endpoint": true,
    "predicted_endpoint_in_federates_with": false,
    "predicted_endpoint_or_federated_endpoint": true,
    "run_id_langsmith": "7e674b12-1c62-4e8f-bc16-989f11b3fb6d",
    "evaluation_timestamp": "2025-04-26T18:32:44.433969",
    "question_understanding_prompt_tokens": 238,
    "question_understanding_completion_tokens": 20,
    "question_understanding_total_tokens": 258,
    "sparql_query_construction_prompt_tokens": 1691,
    "sparql_query_construction_completion_tokens": 0,
    "sparql_query_construction_total_tokens": 1691,
    "is_valid_sparql": true,
    "sparql_syntax_error": "syntactically correct",
    "ground_truth_query_result_is_empty": false,
    "result_eval_f1_score": 0.0,
    "result_eval_precision": 0.0,
    "result_eval_recall": 0.0,
    "error_occured_at_endpoint": false,
    "predicted_query_result_is_empty": true,
    "error_occured_at_endpoint_message": "no error, but empty result"
  },
  {
    "resource": "https://sparql.rhea-db.org/.well-known/sparql-examples/117_Retrieve_parent_reactions_and_their_catalyzing_enzymes_for_a_metabolite_that_is_not_directly_involved_in_a_reaction",
    "natural_language_question": "Retrieve parent reactions (and their catalyzing enzymes) for a metabolite that is not directly involved in a reaction (ex: CHEBI:83137).",
    "ground_truth_query": "PREFIX CHEBI: <http://purl.obolibrary.org/obo/CHEBI_>\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX rh:<http://rdf.rhea-db.org/>\nPREFIX ec:<http://purl.uniprot.org/enzyme/>\nPREFIX up:<http://purl.uniprot.org/core/>\nPREFIX taxon:<http://purl.uniprot.org/taxonomy/>\nPREFIX keywords:<http://purl.uniprot.org/keywords/>\n\nSELECT\n  ?chebi\n  ?ecNumber\n  (count(?protein) as ?proteinCount)\n  ?reaction\n  ?equation\nWHERE {\n  ?reaction rdfs:subClassOf rh:Reaction .\n  ?reaction rh:status rh:Approved .\n  ?reaction rh:equation ?equation .\n  ?reaction rh:ec ?ecNumber .\n  ?reaction rh:side ?reactionSide .\n  ?reactionSide rh:contains ?participant .\n  ?participant rh:compound ?compound .\n  ?compound rh:chebi ?chebi .\n  CHEBI:83137 rdfs:subClassOf+ ?chebi.\n\n  SERVICE <https://sparql.uniprot.org/sparql> {\n  ?protein a up:Protein .\n  ?protein up:reviewed true .\n    {?protein up:enzyme ?ecNumber}\n  UNION\n    {?protein up:domain/up:enzyme ?ecNumber}\n  UNION\n    {?protein up:component/up:enzyme ?ecNumber} .\n  }\n} \nGROUP BY ?chebi ?ecNumber ?reaction ?equation",
    "target_endpoint": "https://sparql.rhea-db.org/sparql",
    "federates_with": [
      "https://sparql.uniprot.org/sparql"
    ],
    "endpoint_set": "Rhea",
    "file_path": "Rhea/117_Retrieve_parent_reactions_and_their_catalyzing_enzymes_for_a_metabolite_that_is_not_directly_involved_in_a_reaction.ttl",
    "predicted_query": "# Primary endpoint: https://sparql.rhea-db.org/sparql\nPREFIX rhea: <http://rdf.rhea-db.org/>\nPREFIX chebi: <http://purl.obolibrary.org/obo/CHEBI_>\nPREFIX uniprot: <http://purl.uniprot.org/uniprot/>\nPREFIX up: <http://purl.uniprot.org/core/>\nPREFIX skos: <http://www.w3.org/2004/02/skos/core#> # Common for labels\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> # Common for labels\n\nSELECT DISTINCT ?reaction ?reactionName ?metabolite ?metaboliteRole ?enzyme ?enzymeName\nWHERE {\n  # Query Rhea for reactions involving the specified metabolite (CHEBI:83137)\n  SERVICE <https://sparql.rhea-db.org/sparql> {\n    ?reaction a rhea:Reaction .\n    # Find participants in the reaction\n    ?reaction rhea:participant ?participant .\n    # Link the participant to the specific metabolite URI\n    ?participant rhea:compound chebi:83137 . # CHEBI:83137 corresponds to 'butanoate'\n    # Get the role of the metabolite in this reaction (e.g., reactant, product, cofactor)\n    ?participant rhea:role ?metaboliteRole .\n\n    # Optional: Get the human-readable name of the reaction\n    OPTIONAL { ?reaction rhea:name ?reactionName . }\n\n    # Find the enzyme that catalyzes this reaction\n    ?reaction rhea:catalyzedBy ?enzyme .\n  }\n\n  # Bind the metabolite URI for the result set\n  BIND(chebi:83137 AS ?metabolite)\n\n  # Query UniProt to get details about the catalyzing enzyme\n  SERVICE <https://sparql.uniprot.org/sparql> {\n    # Ensure the found entity is a protein in UniProt\n    ?enzyme a up:Protein .\n    # Get the recommended full name of the protein\n    OPTIONAL { ?enzyme up:recommendedName/up:fullName ?enzymeNameRec . }\n    # If recommended name is not available, get the protein name\n    OPTIONAL { ?enzyme up:proteinName ?enzymeNameProtein . }\n    # Use COALESCE to prefer the recommended name\n    BIND(COALESCE(?enzymeNameRec, ?enzymeNameProtein) AS ?enzymeName)\n  }\n}",
    "predicted_endpoint": "Primary",
    "predicted_endpoint_equal_to_target_endpoint": false,
    "predicted_endpoint_in_federates_with": false,
    "predicted_endpoint_or_federated_endpoint": false,
    "run_id_langsmith": "7e674b12-1c62-4e8f-bc16-989f11b3fb6d",
    "evaluation_timestamp": "2025-04-26T18:33:20.589249",
    "question_understanding_prompt_tokens": 238,
    "question_understanding_completion_tokens": 20,
    "question_understanding_total_tokens": 258,
    "sparql_query_construction_prompt_tokens": 1691,
    "sparql_query_construction_completion_tokens": 0,
    "sparql_query_construction_total_tokens": 1691,
    "is_valid_sparql": true,
    "sparql_syntax_error": "syntactically correct",
    "ground_truth_query_result_is_empty": false,
    "result_eval_f1_score": 0.0,
    "result_eval_precision": 0.0,
    "result_eval_recall": 0.0,
    "error_occured_at_endpoint": true,
    "predicted_query_result_is_empty": true,
    "error_occured_at_endpoint_message": "unknown url type: 'Primary?query=%23+Primary+endpoint%3A+https%3A//sparql.rhea-db.org/sparql%0APREFIX+rhea%3A+%3Chttp%3A//rdf.rhea-db.org/%3E%0APREFIX+chebi%3A+%3Chttp%3A//purl.obolibrary.org/obo/CHEBI_%3E%0APREFIX+uniprot%3A+%3Chttp%3A//purl.uniprot.org/uniprot/%3E%0APREFIX+up%3A+%3Chttp%3A//purl.uniprot.org/core/%3E%0APREFIX+skos%3A+%3Chttp%3A//www.w3.org/2004/02/skos/core%23%3E+%23+Common+for+labels%0APREFIX+rdfs%3A+%3Chttp%3A//www.w3.org/2000/01/rdf-schema%23%3E+%23+Common+for+labels%0A%0ASELECT+DISTINCT+%3Freaction+%3FreactionName+%3Fmetabolite+%3FmetaboliteRole+%3Fenzyme+%3FenzymeName%0AWHERE+%7B%0A++%23+Query+Rhea+for+reactions+involving+the+specified+metabolite+%28CHEBI%3A83137%29%0A++SERVICE+%3Chttps%3A//sparql.rhea-db.org/sparql%3E+%7B%0A++++%3Freaction+a+rhea%3AReaction+.%0A++++%23+Find+participants+in+the+reaction%0A++++%3Freaction+rhea%3Aparticipant+%3Fparticipant+.%0A++++%23+Link+the+participant+to+the+specific+metabolite+URI%0A++++%3Fparticipant+rhea%3Acompound+chebi%3A83137+.+%23+CHEBI%3A83137+corresponds+to+%27butanoate%27%0A++++%23+Get+the+role+of+the+metabolite+in+this+reaction+%28e.g.%2C+reactant%2C+product%2C+cofactor%29%0A++++%3Fparticipant+rhea%3Arole+%3FmetaboliteRole+.%0A%0A++++%23+Optional%3A+Get+the+human-readable+name+of+the+reaction%0A++++OPTIONAL+%7B+%3Freaction+rhea%3Aname+%3FreactionName+.+%7D%0A%0A++++%23+Find+the+enzyme+that+catalyzes+this+reaction%0A++++%3Freaction+rhea%3AcatalyzedBy+%3Fenzyme+.%0A++%7D%0A%0A++%23+Bind+the+metabolite+URI+for+the+result+set%0A++BIND%28chebi%3A83137+AS+%3Fmetabolite%29%0A%0A++%23+Query+UniProt+to+get+details+about+the+catalyzing+enzyme%0A++SERVICE+%3Chttps%3A//sparql.uniprot.org/sparql%3E+%7B%0A++++%23+Ensure+the+found+entity+is+a+protein+in+UniProt%0A++++%3Fenzyme+a+up%3AProtein+.%0A++++%23+Get+the+recommended+full+name+of+the+protein%0A++++OPTIONAL+%7B+%3Fenzyme+up%3ArecommendedName/up%3AfullName+%3FenzymeNameRec+.+%7D%0A++++%23+If+recommended+name+is+not+available%2C+get+the+protein+name%0A++++OPTIONAL+%7B+%3Fenzyme+up%3AproteinName+%3FenzymeNameProtein+.+%7D%0A++++%23+Use+COALESCE+to+prefer+the+recommended+name%0A++++BIND%28COALESCE%28%3FenzymeNameRec%2C+%3FenzymeNameProtein%29+AS+%3FenzymeName%29%0A++%7D%0A%7D&format=json&output=json&results=json'"
  },
  {
    "resource": "https://sparql.rhea-db.org/.well-known/sparql-examples/115_Retrieve_the_set_of_metabolites_involved_in_reactions_catalyzed_by_human_genes_HUMAN_reference_proteome",
    "natural_language_question": "Retrieve the set of metabolites involved in reactions catalyzed by human genes (HUMAN reference proteome)",
    "ground_truth_query": "\nPREFIX rh:<http://rdf.rhea-db.org/>\nPREFIX taxon:<http://purl.uniprot.org/taxonomy/>\nPREFIX ec:<http://purl.uniprot.org/enzyme/>\nPREFIX rdfs:<http://www.w3.org/2000/01/rdf-schema#>\nPREFIX up:<http://purl.uniprot.org/core/>\nPREFIX keywords:<http://purl.uniprot.org/keywords/>\n\nSELECT\n  ?chebi\n  ?reaction\n  ?ecNumber\n  ?protein\n  ?ensemblTranscript\n  ?ensemblGene\nWHERE {\n  SERVICE <https://sparql.uniprot.org/sparql> {\n    ?protein a up:Protein .\n    ?protein up:reviewed true .\n    ?protein up:organism taxon:9606 .\n    ?protein up:classifiedWith keywords:1185 .\n\n    ?protein rdfs:seeAlso ?ensemblTranscript .\n    ?ensemblTranscript a up:Transcript_Resource .\n    ?ensemblTranscript up:database <http://purl.uniprot.org/database/Ensembl> .\n    ?ensemblTranscript up:transcribedFrom ?ensemblGene .\n\n      {?protein up:enzyme ?ecNumber .}\n    UNION\n      {?protein up:domain/up:enzyme ?ecNumber .}\n    UNION\n      {?protein up:component/up:enzyme ?ecNumber .}\n  }\n\n  ?reaction rdfs:subClassOf rh:Reaction .\n  ?reaction rh:status rh:Approved .\n  ?reaction rh:ec ?ecNumber .\n  ?reaction rh:side ?reactionSide .\n  ?reactionSide rh:contains ?participant .\n  ?participant rh:compound ?compound .\n  ?compound rh:chebi ?chebi . # only considering small molecules participants\n}",
    "target_endpoint": "https://sparql.rhea-db.org/sparql",
    "federates_with": [
      "https://sparql.uniprot.org/sparql"
    ],
    "endpoint_set": "Rhea",
    "file_path": "Rhea/115_Retrieve_the_set_of_metabolites_involved_in_reactions_catalyzed_by_human_genes_HUMAN_reference_proteome.ttl",
    "predicted_query": "# https://sparql.uniprot.org/sparql\nPREFIX up: <http://purl.uniprot.org/core/>\nPREFIX taxonomy: <http://purl.uniprot.org/taxonomy/>\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX rhea: <http://rdf.rhea-db.org/>\nPREFIX chebi: <http://purl.obolibrary.org/obo/CHEBI_>\n\nSELECT DISTINCT ?metabolite\nWHERE {\n  # Find proteins belonging to Homo sapiens (human)\n  ?protein a up:Protein ;\n           up:organism taxonomy:9606 ;\n           # Find reactions associated with these proteins (enzymes)\n           rdfs:seeAlso ?reaction .\n  \n  # Filter for links that are specifically Rhea reactions\n  FILTER(STRSTARTS(STR(?reaction), \"http://rdf.rhea-db.org/\"))\n\n  # Use SERVICE to query the Rhea endpoint for details about the reactions\n  SERVICE <https://sparql.rhea-db.org/sparql> {\n    # For each reaction, find the reaction sides (substrates/products)\n    ?reaction rhea:side ?side .\n    # Find the chemical entities (metabolites) contained in the reaction sides\n    ?side rhea:contains ?metabolite .\n    \n    # Filter for entities that are ChEBI identifiers, which represent metabolites\n    FILTER(STRSTARTS(STR(?metabolite), \"http://purl.obolibrary.org/obo/CHEBI_\"))\n  }\n}",
    "predicted_endpoint": "https://sparql.uniprot.org/sparql",
    "predicted_endpoint_equal_to_target_endpoint": false,
    "predicted_endpoint_in_federates_with": true,
    "predicted_endpoint_or_federated_endpoint": true,
    "run_id_langsmith": "7e674b12-1c62-4e8f-bc16-989f11b3fb6d",
    "evaluation_timestamp": "2025-04-26T18:34:03.094415",
    "question_understanding_prompt_tokens": 238,
    "question_understanding_completion_tokens": 20,
    "question_understanding_total_tokens": 258,
    "sparql_query_construction_prompt_tokens": 1691,
    "sparql_query_construction_completion_tokens": 0,
    "sparql_query_construction_total_tokens": 1691,
    "is_valid_sparql": true,
    "sparql_syntax_error": "syntactically correct",
    "ground_truth_query_result_is_empty": false,
    "result_eval_f1_score": 0.0,
    "result_eval_precision": 0.0,
    "result_eval_recall": 0.0,
    "error_occured_at_endpoint": false,
    "predicted_query_result_is_empty": true,
    "error_occured_at_endpoint_message": "no error, but empty result"
  }
]