
# Natural Language Question
# =======================
Connect patents cited in UniProtKB with those in the patent database at EPO via publication number.

# Target Endpoint
# ===============
https://sparql.uniprot.org/sparql/

# Ground Truth Query
# =================
PREFIX patent: <http://data.epo.org/linked-data/def/patent/>
PREFIX skos: <http://www.w3.org/2004/02/skos/core#>
PREFIX up: <http://purl.uniprot.org/core/>

SELECT ?citation ?patent ?application ?applicationNo
WHERE
{
  ?citation a up:Patent_Citation ;
    skos:exactMatch ?patent .
  FILTER(CONTAINS(STR(?patent), 'EP'))
  BIND(SUBSTR(STR(?patent), 35) AS ?applicationNo)
  SERVICE <https://data.epo.org/linked-data/query>{
    ?application patent:publicationNumber ?applicationNo
  }
}

# Predicted Query
# ==============
# https://sparql.uniprot.org/sparql
PREFIX up: <http://purl.uniprot.org/core/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?protein ?pubNumber
WHERE {
  # Query UniProt for proteins and their associated patent citations
  SERVICE <https://sparql.uniprot.org/sparql> {
    ?protein a up:Protein .
    ?protein up:citation ?citation . # Link protein to its citations
    ?citation a up:Patent . # Filter for citations that are patents
    ?citation up:publicationNumber ?pubNumber . # Get the patent publication number
  }

  # To connect this to a patent database at EPO, you would need the SPARQL endpoint URL
  # and schema for that specific database. Since the endpoint for the "patent database at EPO"
  # is not provided in the context and is not a standard public SPARQL endpoint,
  # the second part of the federated query cannot be written.
  # A hypothetical connection would look like this, assuming an endpoint and property exist:
  # SERVICE <http://example.com/epo/sparql> { # Replace with actual EPO patent SPARQL endpoint
  #   ?epoPatent ?someProperty ?pubNumber . # Find patents in the EPO database using the publication number
  #   # You would then select additional information about the patent from the EPO database
  # }
}
