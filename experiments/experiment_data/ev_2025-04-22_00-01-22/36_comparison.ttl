
# Natural Language Question
# =======================
Find the orthologous proteins for UniProtKB entry P05067 using the <a href="http://www.orthod.org">OrthoDB database</a>

# Target Endpoint
# ===============
https://sparql.uniprot.org/sparql/

# Ground Truth Query
# =================
PREFIX orthodb: <http://purl.orthodb.org/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
PREFIX skos: <http://www.w3.org/2004/02/skos/core#>
PREFIX uniprotkb: <http://purl.uniprot.org/uniprot/>
PREFIX up: <http://purl.uniprot.org/core/>

SELECT
  ?protein
  ?orthoGroup
  ?scientificName
  ?functionComment
  ?prefferedGeneName
  ((STRLEN(?value) - ?medianLength) as ?deviationFromMedianLength)
WHERE
{
  uniprotkb:P05067 a up:Protein ;
        up:organism/up:scientificName ?scientificName ;
        rdfs:seeAlso ?orthoGroup ;
        up:encodedBy/skos:prefLabel ?prefferedGeneName ;
          up:sequence/rdf:value ?value .
  OPTIONAL {
    ?protein up:annotation ?functionAnnotation .
    ?functionAnnotation a up:Function_Annotation ;
      rdfs:comment ?functionComment .
  }
  SERVICE <https://sparql.orthodb.org/sparql>{
    ?orthoGroup orthodb:ogMedianProteinLength ?medianLength .
    ?orthoGroup orthodb:hasMember ?xref .
    ?xref orthodb:xref/orthodb:xrefResource uniprotkb:P05067 .
  }
}
LIMIT 985915

# Predicted Query
# ==============
# https://sparql.uniprot.org/sparql
# Find the orthologous proteins for UniProtKB entry P05067 using the OrthoDB database
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
PREFIX up: <http://purl.uniprot.org/core/>

SELECT DISTINCT ?protein ?gene
WHERE {
  # Find the UniProt entry for P05067
  VALUES ?uniprot_id { "P05067" }
  SERVICE <https://sparql.uniprot.org/sparql> {
    ?protein a up:Protein ;
             up:secondaryAccession ?uniprot_id ;
             up:gene ?gene .
  }
  # No direct link to OrthoDB in UniProt. The following query assumes a hypothetical link.
  # In reality, this requires an external mapping service or manual lookup.
  # SERVICE <OrthoDB_SPARQL_Endpoint> {  # Replace with the actual OrthoDB endpoint.
  #   ?ortholog orthodb:member ?protein . # Replace 'orthodb:member' with the actual property.
  #   ?ortholog orthodb:gene ?geneName .  # Replace 'orthodb:gene' with the actual property.
  # }
  # Since OrthoDB endpoint is not provided and there's no direct link, a placeholder is used.
  # This requires external data integration.
  BIND("OrthoDB ortholog not directly available via SPARQL" AS ?gene) # Placeholder
}
