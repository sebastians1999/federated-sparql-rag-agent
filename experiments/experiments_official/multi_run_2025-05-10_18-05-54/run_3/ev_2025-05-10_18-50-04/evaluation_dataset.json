[
  {
    "resource": "https://sparql.swisslipids.org/.well-known/sparql-examples/16",
    "natural_language_question": "For a given lipid (SWISSLIPID:000399814, Ceramide), return a list of all enzymes in UniProtKB/Swiss-Prot annotated to catalyze reactions involving that lipid.\nThis query does not consider the hierarchy: it looks for reactions and enzymes only for the specified lipid.",
    "ground_truth_query": "PREFIX SWISSLIPID: <https://swisslipids.org/rdf/SLM_>\nPREFIX owl: <http://www.w3.org/2002/07/owl#>\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX rh: <http://rdf.rhea-db.org/>\nPREFIX up: <http://purl.uniprot.org/core/>\n\n# Example 16\nSELECT ?startId ?startName ?uniprot\nWHERE\n{\n  # SwissLipids query (list of) identifier(s)\n  VALUES ?startId { SWISSLIPID:000399814 }\n  # name\n  ?startId rdfs:label ?startName .\n  # ChEBI x-ref\n  ?startId owl:equivalentClass ?chebi .\n  # federated query to Rhea\n  SERVICE <https://sparql.rhea-db.org/sparql> {\n  \t?rhea rh:side/rh:contains/rh:compound/rh:chebi ?chebi .\n  }    \n  # federated query to UniProt\n  SERVICE <https://sparql.uniprot.org/sparql> {\n    ?uniprot up:reviewed true .\n    ?uniprot up:annotation/up:catalyticActivity/up:catalyzedReaction ?rhea .\n  }\n} \nORDER BY ?startId",
    "target_endpoint": "https://sparql.swisslipids.org/sparql/",
    "federates_with": [
      "https://sparql.uniprot.org/sparql",
      "https://sparql.rhea-db.org/sparql"
    ],
    "endpoint_set": "SwissLipids",
    "file_path": "SwissLipids/16.ttl",
    "predicted_query": "# https://sparql.uniprot.org/sparql\n# Return a list of all enzymes in UniProtKB/Swiss-Prot annotated to catalyze reactions involving a given lipid.\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX up: <http://purl.uniprot.org/core/>\nPREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>\n\nSELECT DISTINCT ?enzyme ?enzymeName\nWHERE {\n  # Find reactions in SwissLipids involving the specified lipid.\n  SERVICE <https://sparql.swisslipids.org/sparql/> {\n    BIND ( <http://identifiers.org/swisslipids:SWISSLIPID:000399814> AS ?lipid ) # SWISSLIPID:000399814\n    ?reaction sl:reaction_has_reactant ?lipid .\n  }\n  \n  # Find enzymes in UniProt that catalyze these reactions.\n  SERVICE <https://sparql.uniprot.org/sparql> {\n    ?enzyme a up:Protein .\n    ?enzyme rdfs:label ?enzymeName .\n    ?enzyme up:catalyticActivity ?reaction . # Link enzyme to reaction\n    ?enzyme rdf:type <http://purl.uniprot.org/core/Enzyme> . # Ensure it's an enzyme\n  }\n}",
    "predicted_endpoint": "https://sparql.uniprot.org/sparql",
    "predicted_endpoint_equal_to_target_endpoint": false,
    "predicted_endpoint_in_federates_with": true,
    "predicted_endpoint_or_federated_endpoint": true,
    "run_id_langsmith": "8ac4a41e-beeb-4587-be4b-3e96c8355b92",
    "evaluation_timestamp": "2025-05-10T18:50:12.692834",
    "question_understanding_prompt_tokens": 306,
    "question_understanding_completion_tokens": 42,
    "question_understanding_total_tokens": 348,
    "sparql_query_construction_prompt_tokens": 2892,
    "sparql_query_construction_completion_tokens": 333,
    "sparql_query_construction_total_tokens": 3225,
    "is_valid_sparql": false,
    "sparql_syntax_error": "Line 12, column 15: Unresolved prefixed name: sl:reaction_has_reactant",
    "result_eval_f1_score": 0.0,
    "result_eval_precision": 0.0,
    "result_eval_recall": 0.0,
    "error_occured_at_endpoint": false,
    "predicted_query_result_is_empty": true,
    "ground_truth_query_result_is_empty": false,
    "error_occured_at_endpoint_message": "syntactically not correct"
  },
  {
    "resource": "https://sparql.swisslipids.org/.well-known/sparql-examples/6",
    "natural_language_question": "For a given lipid (SWISSLIPID:000399814, Ceramide), return a list of all corresponding reactions (Rhea IDs and equation), as well as their enzymes as annotated in UniProtKB/Swiss-Prot) enzymes themselves (ID and protein name).\nThis query does not consider the hierarchy: it looks for reactions and enzymes only for the specified lipid.",
    "ground_truth_query": "PREFIX SWISSLIPID: <https://swisslipids.org/rdf/SLM_>\nPREFIX owl: <http://www.w3.org/2002/07/owl#>\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX rh: <http://rdf.rhea-db.org/>\nPREFIX up: <http://purl.uniprot.org/core/>\n\n# Example 6\nSELECT ?startId ?startName ?chebi ?rhea ?rheaEquation ?uniprot ?uniprotName\nWHERE\n{\n  # SwissLipids query (list of) identifier(s)\n  VALUES ?startId { SWISSLIPID:000399814 }\n  # name\n  ?startId rdfs:label ?startName .\n  # ChEBI x-ref\n  ?startId owl:equivalentClass ?chebi .\n  # federated query to Rhea\n  SERVICE <https://sparql.rhea-db.org/sparql> {\n  \t?rhea rh:equation ?rheaEquation .\n  \t?rhea rh:side/rh:contains/rh:compound/rh:chebi ?chebi .\n  }    \n  # federated query to UniProt\n  SERVICE <https://sparql.uniprot.org/sparql> {\n    ?uniprot up:reviewed true .\n    ?uniprot up:recommendedName/up:fullName ?uniprotName .\n    ?uniprot up:annotation/up:catalyticActivity/up:catalyzedReaction ?rhea .\n  }\n} \nORDER BY ?startId",
    "target_endpoint": "https://sparql.swisslipids.org/sparql/",
    "federates_with": [
      "https://sparql.uniprot.org/sparql",
      "https://sparql.rhea-db.org/sparql"
    ],
    "endpoint_set": "SwissLipids",
    "file_path": "SwissLipids/6.ttl",
    "predicted_query": "# https://sparql.swisslipids.org/sparql/\n# Federated SPARQL query to find reactions and enzymes associated with a specific lipid (SWISSLIPID:000399814, Ceramide).\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>\nPREFIX sl: <http://www.swisslipids.org/rdf#>\n\nSELECT DISTINCT ?rheaID ?equation ?enzymeID ?proteinName\nWHERE {\n  # Find reactions associated with the given lipid in SwissLipids\n  SERVICE <https://sparql.swisslipids.org/sparql/> {\n    VALUES ?lipid { <http://www.swisslipids.org/rdf/SWISSLIPID:000399814> } # Define the lipid of interest\n    ?reaction sl:refersTo ?lipid . # Find reactions that refer to the lipid\n    ?reaction rdfs:seeAlso ?rheaID . # Get the Rhea ID of the reaction\n  }\n\n  # Get the equation for the reaction from Rhea\n  SERVICE <https://sparql.rhea-db.org/sparql/> {\n    ?rheaID rdf:type <http://rdf.rhea-db.org/Reaction> . # Ensure it's a Rhea reaction\n    ?rheaID <http://purl.org/dc/elements/1.1/description> ?equation . # Get the equation\n  }\n\n  # Find enzymes associated with the reaction in Rhea and link to UniProt\n  SERVICE <https://sparql.rhea-db.org/sparql/> {\n    ?rheaID rdfs:seeAlso ?enzymeLink . # Find enzyme links\n    FILTER (REGEX(STR(?enzymeLink), \"uniprot\")) # Filter for UniProt links\n    BIND(SUBSTR(STR(?enzymeLink), 23) AS ?enzymeID) # Extract UniProt ID\n  }\n\n  # Get protein name from UniProt\n  SERVICE <https://sparql.uniprot.org/sparql/> {\n    ?protein a <http://purl.uniprot.org/core/Protein> .\n    FILTER (STR(?protein) = ?enzymeID) # Filter for the specific protein\n    ?protein rdfs:label ?proteinName . # Get the protein name\n  }\n}",
    "predicted_endpoint": "https://sparql.swisslipids.org/sparql/",
    "predicted_endpoint_equal_to_target_endpoint": true,
    "predicted_endpoint_in_federates_with": false,
    "predicted_endpoint_or_federated_endpoint": true,
    "run_id_langsmith": "87343e50-3857-4262-9a7e-3d93ba28021a",
    "evaluation_timestamp": "2025-05-10T18:50:21.564616",
    "question_understanding_prompt_tokens": 320,
    "question_understanding_completion_tokens": 89,
    "question_understanding_total_tokens": 409,
    "sparql_query_construction_prompt_tokens": 3545,
    "sparql_query_construction_completion_tokens": 553,
    "sparql_query_construction_total_tokens": 4098,
    "is_valid_sparql": true,
    "sparql_syntax_error": "syntactically correct",
    "result_eval_f1_score": 0.0,
    "result_eval_precision": 0.0,
    "result_eval_recall": 0.0,
    "error_occured_at_endpoint": true,
    "predicted_query_result_is_empty": true,
    "ground_truth_query_result_is_empty": true,
    "error_occured_at_endpoint_message": "QueryBadFormed: A bad request has been sent to the endpoint: probably the SPARQL query is badly formed."
  },
  {
    "resource": "https://sparql.swisslipids.org/.well-known/sparql-examples/5",
    "natural_language_question": "For a given lipid (SWISSLIPID:000399814, Ceramide), return a list of all corresponding reactions (Rhea IDs and equation).\nThis query does consider the hierarchy: it looks for reactions involving the specified lipid and/or its more specific forms.",
    "ground_truth_query": "PREFIX SWISSLIPID: <https://swisslipids.org/rdf/SLM_>\nPREFIX owl: <http://www.w3.org/2002/07/owl#>\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX rh: <http://rdf.rhea-db.org/>\n\n# Example 5\nSELECT ?startId ?startName ?id ?name ?chebi ?rhea ?rheaEquation \nWHERE\n{\n  # SwissLipids query (list of) identifier(s)\n  VALUES ?startId { SWISSLIPID:000399814 }\n  # name\n  ?startId rdfs:label ?startName .\n  # Retrieve children lipids \n  ?id rdfs:subClassOf* ?startId .\n  ?id rdfs:label ?name .\n  # ChEBI x-ref\n  ?id owl:equivalentClass ?chebi .\n  # federated query to Rhea\n  SERVICE <https://sparql.rhea-db.org/sparql> {\n  \t?rhea rh:equation ?rheaEquation .\n  \t?rhea rh:side/rh:contains/rh:compound/rh:chebi ?chebi .\n  }    \n} \nORDER BY  ?startId ?id",
    "target_endpoint": "https://sparql.swisslipids.org/sparql/",
    "federates_with": [
      "https://sparql.rhea-db.org/sparql"
    ],
    "endpoint_set": "SwissLipids",
    "file_path": "SwissLipids/5.ttl",
    "predicted_query": "# https://sparql.swisslipids.org/sparql/\n# Federated query to retrieve Rhea IDs and equations for a given lipid (SWISSLIPID:000399814, Ceramide) and its related lipids.\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>\nPREFIX sl: <http://www.swisslipids.org/rdf#>\n\nSELECT DISTINCT ?rheaId ?equation\nWHERE {\n  { # Query SwissLipids for the given lipid and its related lipids (more specific forms).\n    SERVICE <https://sparql.swisslipids.org/sparql/> {\n      VALUES ?lipid { <http://www.swisslipids.org/rdf/lipid/SWISSLIPID:000399814> } # SWISSLIPID:000399814\n      ?lipid rdfs:label ?lipidLabel .\n      # Find lipids that are related to the given lipid (e.g., more specific forms).  Using a broader match as no direct subclass relation is available.\n      ?relatedLipid sl:is_a ?lipid .\n      ?relatedLipid rdfs:label ?relatedLipidLabel .\n    }\n  }\n  \n  { # Query Rhea for reactions involving the given lipid and its related lipids.\n    SERVICE <https://sparql.rhea-db.org/sparql> {\n      ?reaction rdfs:label ?equation ;\n                rhea:equation ?equation .\n      ?reaction rhea:has_participant ?participant .\n      ?participant rdfs:label ?relatedLipidLabel . # Match by label from SwissLipids\n      BIND(strafter(str(?reaction), \"http://rdf.rhea-db.org/\") AS ?rheaId) # Extract Rhea ID\n    }\n  }\n}",
    "predicted_endpoint": "https://sparql.swisslipids.org/sparql/",
    "predicted_endpoint_equal_to_target_endpoint": true,
    "predicted_endpoint_in_federates_with": false,
    "predicted_endpoint_or_federated_endpoint": true,
    "run_id_langsmith": "b605da5d-bb2e-44d3-a345-34fbfbf34b77",
    "evaluation_timestamp": "2025-05-10T18:50:35.494501",
    "question_understanding_prompt_tokens": 299,
    "question_understanding_completion_tokens": 66,
    "question_understanding_total_tokens": 365,
    "sparql_query_construction_prompt_tokens": 2458,
    "sparql_query_construction_completion_tokens": 447,
    "sparql_query_construction_total_tokens": 2905,
    "is_valid_sparql": false,
    "sparql_syntax_error": "Line 22, column 17: Unresolved prefixed name: rhea:equation",
    "result_eval_f1_score": 0.0,
    "result_eval_precision": 0.0,
    "result_eval_recall": 0.0,
    "error_occured_at_endpoint": false,
    "predicted_query_result_is_empty": true,
    "ground_truth_query_result_is_empty": false,
    "error_occured_at_endpoint_message": "syntactically not correct"
  },
  {
    "resource": "https://sparql.swisslipids.org/.well-known/sparql-examples/34",
    "natural_language_question": "Lipids affected by human enzymes",
    "ground_truth_query": "PREFIX owl: <http://www.w3.org/2002/07/owl#>\nPREFIX rh: <http://rdf.rhea-db.org/>\nPREFIX taxon: <http://purl.uniprot.org/taxonomy/>\nPREFIX up: <http://purl.uniprot.org/core/>\n\nSELECT ?swisslipid  {\n  ?swisslipid owl:equivalentClass ?chebi .\n  SERVICE <https://sparql.rhea-db.org/sparql> {\n    ?rhea rh:side/rh:contains/rh:compound ?compound .\n\t?compound (rh:chebi|(rh:reactivePart/rh:chebi)|(rh:underlyingChebi/rh:chebi)) ?metabolite . \n  }\n  SERVICE <https://sparql.uniprot.org/sparql> {\n    ?catalyticActivityAnnotation up:catalyticActivity/up:catalyzedReaction ?rhea .\n    ?protein up:annotation ?catalyticActivityAnnotation ;\n             up:organism taxon:9606 .\n  }\n}\nLIMIT 1",
    "target_endpoint": "https://sparql.swisslipids.org/sparql/",
    "federates_with": [
      "https://sparql.uniprot.org/sparql",
      "https://sparql.rhea-db.org/sparql"
    ],
    "endpoint_set": "SwissLipids",
    "file_path": "SwissLipids/34.ttl",
    "predicted_query": "# https://sparql.swisslipids.org/sparql/\n# Federated query to find lipids affected by human enzymes, using SwissLipids and UniProt.\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX sl: <http://swisslipids.org/rdf#>\nPREFIX up: <http://purl.uniprot.org/core/>\n\nSELECT DISTINCT ?lipidName ?enzymeName\nWHERE {\n  # Query SwissLipids to find lipids and the enzymes that act upon them.\n  SERVICE <https://sparql.swisslipids.org/sparql/> {\n    ?enzyme sl:actsOn ?lipid .\n    ?lipid rdfs:label ?lipidName .\n    ?enzyme rdfs:label ?enzymeName .\n  }\n  \n  # Filter for human enzymes using UniProt.\n  SERVICE <https://sparql.uniprot.org/sparql/> {\n    ?enzyme up:organism <http://purl.uniprot.org/taxonomy/9606> . # Homo sapiens\n  }\n}",
    "predicted_endpoint": "https://sparql.swisslipids.org/sparql/",
    "predicted_endpoint_equal_to_target_endpoint": true,
    "predicted_endpoint_in_federates_with": false,
    "predicted_endpoint_or_federated_endpoint": true,
    "run_id_langsmith": "43fc7158-2832-441d-8110-bc1c0d2830b6",
    "evaluation_timestamp": "2025-05-10T18:50:41.748625",
    "question_understanding_prompt_tokens": 244,
    "question_understanding_completion_tokens": 20,
    "question_understanding_total_tokens": 264,
    "sparql_query_construction_prompt_tokens": 1906,
    "sparql_query_construction_completion_tokens": 247,
    "sparql_query_construction_total_tokens": 2153,
    "is_valid_sparql": true,
    "sparql_syntax_error": "syntactically correct",
    "result_eval_f1_score": 0.0,
    "result_eval_precision": 0.0,
    "result_eval_recall": 0.0,
    "error_occured_at_endpoint": true,
    "predicted_query_result_is_empty": true,
    "ground_truth_query_result_is_empty": true,
    "error_occured_at_endpoint_message": "The read operation timed out"
  },
  {
    "resource": "https://sparql.uniprot.org/.well-known/sparql-examples/118_biosodafrontend_rat_brain_human_cancer",
    "natural_language_question": "What are the Homo sapiens genes associated with cancer and their orthologs expressed in the Rattus norvegicus brain?",
    "ground_truth_query": "PREFIX up:<http://purl.uniprot.org/core/>\nPREFIX taxon:<http://purl.uniprot.org/taxonomy/>\nPREFIX rdfs:<http://www.w3.org/2000/01/rdf-schema#>\nPREFIX orth:<http://purl.org/net/orth#>\nPREFIX dcterms:<http://purl.org/dc/terms/>\nPREFIX obo:<http://purl.obolibrary.org/obo/>\nPREFIX lscr:<http://purl.org/lscr#>\nPREFIX genex:<http://purl.org/genex#>\nPREFIX sio: <http://semanticscience.org/resource/>\nSELECT ?gene ?orthologous_protein2 WHERE {\n  {\n    SELECT ?protein1 WHERE {\n      ?protein1 a up:Protein;\n        up:organism/up:scientificName 'Homo sapiens' ;\n        up:annotation ?annotation .\n      ?annotation rdfs:comment ?annotation_text.\n      ?annotation a up:Disease_Annotation .\n      FILTER CONTAINS (?annotation_text, \"cancer\")\n    }\n  }\n  SERVICE <https://sparql.omabrowser.org/sparql/> {\n    SELECT ?orthologous_protein2 ?protein1 ?gene WHERE {\n      ?protein_OMA a orth:Protein .\n      ?orthologous_protein2 a orth:Protein .\n      ?cluster a orth:OrthologsCluster .\n      ?cluster orth:hasHomologousMember ?node1 .\n      ?cluster orth:hasHomologousMember ?node2 .\n      ?node2 orth:hasHomologousMember* ?protein_OMA .\n      ?node1 orth:hasHomologousMember* ?orthologous_protein2 \n      .?orthologous_protein2 orth:organism/obo:RO_0002162/up:scientificName 'Rattus norvegicus' .\n      ?orthologous_protein2 sio:SIO_010079 ?gene .\n      ?protein_OMA lscr:xrefUniprot ?protein1 .\n      FILTER(?node1 != ?node2)\n    }\n  }\n  SERVICE <https://www.bgee.org/sparql/> {\n    ?gene genex:isExpressedIn ?anatEntity .\n    ?anatEntity rdfs:label 'brain' .\n    ?gene orth:organism ?org . \n    ?org obo:RO_0002162 taxon:10116 .\n  }\n}",
    "target_endpoint": "https://sparql.uniprot.org/sparql",
    "federates_with": [
      "https://sparql.omabrowser.org/sparql/",
      "https://www.bgee.org/sparql/"
    ],
    "endpoint_set": "Uniprot",
    "file_path": "UniProt/118_biosodafrontend_rat_brain_human_cancer.ttl",
    "predicted_query": "# https://sparql.uniprot.org/sparql\n# Prefix declarations for commonly used namespaces\nPREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX up: <http://purl.uniprot.org/core/>\nPREFIX taxon: <http://purl.uniprot.org/taxonomy/>\nPREFIX uniprot: <http://purl.uniprot.org/uniprot/>\n\n# Select the gene names and their corresponding orthologs\nSELECT DISTINCT ?geneName ?orthologName\nWHERE {\n  # Subquery to find Homo sapiens genes associated with cancer\n  {\n    SELECT ?gene\n    WHERE {\n      # Find UniProt entries for Homo sapiens\n      ?gene a up:Protein ;\n            up:organism taxon:9606 . # Homo sapiens taxon ID\n\n      # Filter for genes associated with cancer\n      ?gene rdfs:comment ?comment .\n      FILTER (contains(lcase(?comment), \"cancer\")) # Case-insensitive search for \"cancer\" in comments\n    }\n  }\n\n  # Find orthologs of the identified genes\n  ?gene up:sequence ?sequence .\n  ?ortholog up:sequence ?orthologSequence ;\n            up:organism taxon:10116 . # Rattus norvegicus taxon ID\n  FILTER (?sequence = ?orthologSequence) # Assuming orthologs have similar sequences\n\n  # Get the gene names\n  ?gene rdfs:label ?geneName .\n  ?ortholog rdfs:label ?orthologName .\n\n  # Filter for orthologs expressed in the brain\n  ?ortholog rdfs:comment ?orthologComment .\n  FILTER (contains(lcase(?orthologComment), \"brain\")) # Case-insensitive search for \"brain\" in comments\n}",
    "predicted_endpoint": "https://sparql.uniprot.org/sparql",
    "predicted_endpoint_equal_to_target_endpoint": true,
    "predicted_endpoint_in_federates_with": false,
    "predicted_endpoint_or_federated_endpoint": true,
    "run_id_langsmith": "b684afe6-1ba1-4e95-a80c-f80a2d742118",
    "evaluation_timestamp": "2025-05-10T19:00:55.018206",
    "question_understanding_prompt_tokens": 266,
    "question_understanding_completion_tokens": 47,
    "question_understanding_total_tokens": 313,
    "sparql_query_construction_prompt_tokens": 3106,
    "sparql_query_construction_completion_tokens": 435,
    "sparql_query_construction_total_tokens": 3541,
    "is_valid_sparql": true,
    "sparql_syntax_error": "syntactically correct",
    "result_eval_f1_score": 0.0,
    "result_eval_precision": 0.0,
    "result_eval_recall": 0.0,
    "error_occured_at_endpoint": false,
    "predicted_query_result_is_empty": true,
    "ground_truth_query_result_is_empty": false,
    "error_occured_at_endpoint_message": "no error, but empty result"
  },
  {
    "resource": "https://sparql.uniprot.org/.well-known/sparql-examples/51",
    "natural_language_question": "Find all proteins linked to arachidonate (CHEBI:32395)",
    "ground_truth_query": "PREFIX CHEBI: <http://purl.obolibrary.org/obo/CHEBI_>\nPREFIX rh: <http://rdf.rhea-db.org/>\nPREFIX skos: <http://www.w3.org/2004/02/skos/core#>\nPREFIX up: <http://purl.uniprot.org/core/>\n\n\nSELECT \n    DISTINCT\n        ?uniprot\n        ?uniprotID\n        ?recname\n        ?gene\n        ?chebi\n        ?uniprotName\nWHERE {\n  SERVICE <https://sparql.rhea-db.org/sparql> {\n     VALUES (?chebi) { (CHEBI:32395) }\n     ?rhea rh:side/rh:contains/rh:compound ?compound .\n     ?compound rh:chebi ?chebi .\n     ?chebi up:name ?uniprotName .\n  }\n  ?uniprot up:annotation/up:catalyticActivity/up:catalyzedReaction ?rhea .\n  ?uniprot up:mnemonic ?uniprotID .\n  ?uniprot up:recommendedName/up:fullName ?recname .\n  OPTIONAL {?uniprot up:encodedBy/skos:prefLabel ?gene .}\n}",
    "target_endpoint": "https://sparql.uniprot.org/sparql/",
    "federates_with": [
      "https://sparql.rhea-db.org/sparql"
    ],
    "endpoint_set": "Uniprot",
    "file_path": "UniProt/51_all_proteins_linked_to_arachidonate.ttl",
    "predicted_query": "# https://sparql.uniprot.org/sparql\n# Prefixes for commonly used ontologies\nPREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX up: <http://purl.uniprot.org/core/>\nPREFIX chebi: <http://purl.obolibrary.org/obo/>\n\n# Select the protein identifiers\nSELECT DISTINCT ?protein ?proteinName\nWHERE {\n  # Use the UniProt SPARQL endpoint\n  SERVICE <https://sparql.uniprot.org/sparql> {\n    # Find proteins that are related to arachidonate (CHEBI:32395)\n    ?protein a up:Protein .\n    ?protein rdfs:label ?proteinName .\n    # Assuming a link between protein and chemical via some interaction or involvement\n    # This is a broad assumption and might need refinement based on the specific relationship\n    ?protein ?relation chebi:CHEBI_32395 . #CHEBI_32395 is the URI for arachidonate\n  }\n}",
    "predicted_endpoint": "https://sparql.uniprot.org/sparql",
    "predicted_endpoint_equal_to_target_endpoint": true,
    "predicted_endpoint_in_federates_with": false,
    "predicted_endpoint_or_federated_endpoint": true,
    "run_id_langsmith": "05aa258c-f315-47d5-866e-223635859055",
    "evaluation_timestamp": "2025-05-10T19:01:04.340447",
    "question_understanding_prompt_tokens": 255,
    "question_understanding_completion_tokens": 31,
    "question_understanding_total_tokens": 286,
    "sparql_query_construction_prompt_tokens": 1975,
    "sparql_query_construction_completion_tokens": 0,
    "sparql_query_construction_total_tokens": 1975,
    "is_valid_sparql": true,
    "sparql_syntax_error": "syntactically correct",
    "result_eval_f1_score": 0.0,
    "result_eval_precision": 0.0,
    "result_eval_recall": 0.0,
    "error_occured_at_endpoint": false,
    "predicted_query_result_is_empty": true,
    "ground_truth_query_result_is_empty": false,
    "error_occured_at_endpoint_message": "no error, but empty result"
  },
  {
    "resource": "https://sparql.uniprot.org/.well-known/sparql-examples/40",
    "natural_language_question": "Retrieve human enzymes that metabolize sphingolipids and are annotated in ChEMBL",
    "ground_truth_query": "PREFIX CHEBI: <http://purl.obolibrary.org/obo/CHEBI_>\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX rh: <http://rdf.rhea-db.org/>\nPREFIX taxon: <http://purl.uniprot.org/taxonomy/>\nPREFIX up: <http://purl.uniprot.org/core/>\n\nSELECT DISTINCT ?protein ?chemblEntry\nWHERE {\n  SERVICE <https://sparql.rhea-db.org/sparql> {\n    ?rhea rdfs:subClassOf rh:Reaction ;\n      rh:side/rh:contains/rh:compound/rh:chebi/rdfs:subClassOf+ CHEBI:26739 .\n  }\n  ?ca up:catalyzedReaction ?rhea .\n  ?protein up:annotation/up:catalyticActivity ?ca ;\n    up:organism taxon:9606 ;\n    rdfs:seeAlso ?chemblEntry .\n  ?chemblEntry up:database <http://purl.uniprot.org/database/ChEMBL> .\n}\nLIMIT 10",
    "target_endpoint": "https://sparql.uniprot.org/sparql/",
    "federates_with": [
      "https://sparql.rhea-db.org/sparql"
    ],
    "endpoint_set": "Uniprot",
    "file_path": "UniProt/40_human_enzymes_that_metabolize_sphingolipids.ttl",
    "predicted_query": "# https://sparql.uniprot.org/sparql\n# Federated SPARQL query to retrieve human enzymes that metabolize sphingolipids and are annotated in ChEMBL.\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX up: <http://purl.uniprot.org/core/>\nPREFIX taxon: <http://purl.uniprot.org/taxonomy/>\nPREFIX chebi: <http://purl.obolibrary.org/obo/CHEBI_>\n\nSELECT DISTINCT ?enzymeName ?enzymeUri\nWHERE {\n  # Find human enzymes in UniProt\n  SERVICE <https://sparql.uniprot.org/sparql> {\n    ?enzymeUri a up:Protein .\n    ?enzymeUri up:organism taxon:9606 .  # Filter for Homo sapiens (human)\n    ?enzymeUri rdfs:label ?enzymeName .\n    ?enzymeUri up:annotation ?annotation .\n    ?annotation rdfs:label ?function .\n    FILTER (CONTAINS(LCASE(?function), \"enzyme\")) # Additional filter to ensure it is an enzyme\n  }\n\n  # Find sphingolipid metabolic reactions and associated enzymes in SwissLipids\n  SERVICE <https://sparql.swisslipids.org/sparql/> {\n    ?reaction a <http://www.swisslipids.org/rdf/SwissLipids#Reaction> .\n    ?reaction <http://www.swisslipids.org/rdf/SwissLipids#enzyme> ?swisslipidsEnzyme .\n    ?swisslipidsEnzyme rdfs:label ?swisslipidsEnzymeName .\n    FILTER (CONTAINS(LCASE(?reaction), \"sphingolipid\")) # Filter for sphingolipid metabolism reactions.\n  }\n\n  # Link UniProt enzymes to SwissLipids enzymes based on name similarity.  This is a simplification and may require more sophisticated linking.\n  FILTER (CONTAINS(LCASE(?enzymeName), LCASE(?swisslipidsEnzymeName)))\n\n  # Attempt to link to ChEMBL.  Since ChEMBL is not directly accessible, this part is speculative and might require a different approach.\n  # The assumption is that ChEMBL annotation might be indirectly available through UniProt or SwissLipids.\n  # This part might need to be adjusted based on available data and relationships.\n  #SERVICE <https://www.ebi.ac.uk/rdf/services/chembl/sparql> {\n  #  ?chemblEnzyme a <http://rdf.ebi.ac.uk/terms/chembl#Protein> .\n  #  ?chemblEnzyme rdfs:label ?chemblEnzymeName .\n  #  FILTER (CONTAINS(LCASE(?enzymeName), LCASE(?chemblEnzymeName)))\n  #}\n}",
    "predicted_endpoint": "https://sparql.uniprot.org/sparql",
    "predicted_endpoint_equal_to_target_endpoint": true,
    "predicted_endpoint_in_federates_with": false,
    "predicted_endpoint_or_federated_endpoint": true,
    "run_id_langsmith": "1aecb15e-dc97-408d-aa29-0a023adb0d35",
    "evaluation_timestamp": "2025-05-10T19:01:15.601228",
    "question_understanding_prompt_tokens": 252,
    "question_understanding_completion_tokens": 33,
    "question_understanding_total_tokens": 285,
    "sparql_query_construction_prompt_tokens": 2033,
    "sparql_query_construction_completion_tokens": 0,
    "sparql_query_construction_total_tokens": 2033,
    "is_valid_sparql": true,
    "sparql_syntax_error": "syntactically correct",
    "result_eval_f1_score": 0.0,
    "result_eval_precision": 0.0,
    "result_eval_recall": 0.0,
    "error_occured_at_endpoint": false,
    "predicted_query_result_is_empty": true,
    "ground_truth_query_result_is_empty": false,
    "error_occured_at_endpoint_message": "no error, but empty result"
  },
  {
    "resource": "https://sparql.uniprot.org/.well-known/sparql-examples/49",
    "natural_language_question": "Retrieve the UniProtKB proteins, their catalyzed Rhea reactions, their encoding genes (Ensembl) and the anatomic entities where the genes are expressed (UBERON anatomic entites from Bgee expression data resource).",
    "ground_truth_query": "PREFIX CHEBI: <http://purl.obolibrary.org/obo/CHEBI_>\nPREFIX genex: <http://purl.org/genex#>\nPREFIX lscr: <http://purl.org/lscr#>\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX rh: <http://rdf.rhea-db.org/>\nPREFIX taxon: <http://purl.uniprot.org/taxonomy/>\nPREFIX up: <http://purl.uniprot.org/core/>\n\nSELECT DISTINCT ?protein ?ensemblGene ?reaction ?anatomicEntityLabel ?anatomicEntity\nWHERE {\n  # federated query to Rhea enadpoint\n  {\n    SELECT DISTINCT ?reaction WHERE {\n      SERVICE <https://sparql.rhea-db.org/sparql> {\n        ?reaction rdfs:subClassOf rh:Reaction ;\n          rh:equation ?reactionEquation ;\n          rh:side ?reactionSide .\n        ?reactionSide rh:contains ?participant .\n        ?participant rh:compound ?compound .\n        # compound constraint (CHEBI:16113 == cholesterol)\n        ?compound rh:chebi CHEBI:16113 .\n      }\n    }\n  }\n  # taxonomy constraint (taxon:9606 == Homo sapiens)\n  ?protein up:organism taxon:9606 ;\n    up:annotation ?a ;\n    rdfs:seeAlso / up:transcribedFrom ?ensemblGene .\n  ?a a up:Catalytic_Activity_Annotation ;\n    up:catalyticActivity ?ca .\n  ?ca up:catalyzedReaction ?reaction .\n  # federated query to Bgee (expression data)\n  BIND(IRI(REPLACE(STR(?ensemblGene), \"\\\\.[0-9]+$\", \"\")) AS ?ensemblGeneNoVersion)\n  SERVICE <https://www.bgee.org/sparql/> {\n    ?gene lscr:xrefEnsemblGene ?ensemblGeneNoVersion ;\n      genex:isExpressedIn ?anatomicEntity .\n    ?anatomicEntity rdfs:label ?anatomicEntityLabel .\n  }\n}",
    "target_endpoint": "https://sparql.uniprot.org/sparql/",
    "federates_with": [
      "https://sparql.rhea-db.org/sparql",
      "https://www.bgee.org/sparql/"
    ],
    "endpoint_set": "Uniprot",
    "file_path": "UniProt/49_tissues_where_genes_metabolizing_cholestrol_are_expressed.ttl",
    "predicted_query": "# https://sparql.uniprot.org/sparql\n# Prefixes for commonly used namespaces\nPREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX up: <http://purl.uniprot.org/core/>\nPREFIX uniprot: <http://purl.uniprot.org/uniprot/>\n\n# Query to retrieve UniProtKB proteins, their catalyzed Rhea reactions, their encoding genes (Ensembl) and the anatomic entities where the genes are expressed (UBERON anatomic entites from Bgee expression data resource)\nSELECT DISTINCT ?protein ?proteinName ?rheaReaction ?gene ?anatomicalEntity\nWHERE {\n  # Get UniProtKB proteins and their names\n  SERVICE <https://sparql.uniprot.org/sparql> {\n    ?protein a up:Protein .\n    ?protein rdfs:label ?proteinName .\n    # Get Rhea reactions catalyzed by the protein\n    ?protein up:catalyticActivity ?rheaReaction .\n  }\n\n  # Get Rhea reaction details\n  SERVICE <https://sparql.rhea-db.org/sparql> {\n    ?rheaReaction rdfs:label ?rheaReactionName .\n  }\n\n  # Assuming a link between UniProt and Ensembl via some identifier\n  SERVICE <https://sparql.uniprot.org/sparql> {\n     ?protein up:encodedBy ?gene . # Assuming 'encodedBy' links to gene\n  }\n\n  # Get anatomical entities where the genes are expressed (using Bgee)\n  SERVICE <https://sparql.uniprot.org/sparql> {\n    # Assuming a link between gene and anatomical entity via Bgee\n    # This part needs further refinement based on the actual Bgee schema\n    # Example: ?gene bgee:expressedIn ?anatomicalEntity .\n    # Replace 'bgee:expressedIn' with the correct property\n    OPTIONAL { ?gene up:expressionIn ?anatomicalEntity } # Placeholder: Replace with actual property\n  }\n}",
    "predicted_endpoint": "https://sparql.uniprot.org/sparql",
    "predicted_endpoint_equal_to_target_endpoint": true,
    "predicted_endpoint_in_federates_with": false,
    "predicted_endpoint_or_federated_endpoint": true,
    "run_id_langsmith": "fa65fe73-6a68-4dc6-8c99-7d7692873624",
    "evaluation_timestamp": "2025-05-10T19:01:31.172177",
    "question_understanding_prompt_tokens": 284,
    "question_understanding_completion_tokens": 71,
    "question_understanding_total_tokens": 355,
    "sparql_query_construction_prompt_tokens": 4642,
    "sparql_query_construction_completion_tokens": 486,
    "sparql_query_construction_total_tokens": 5128,
    "is_valid_sparql": true,
    "sparql_syntax_error": "syntactically correct",
    "result_eval_f1_score": 0.0,
    "result_eval_precision": 0.0,
    "result_eval_recall": 0.0,
    "error_occured_at_endpoint": true,
    "predicted_query_result_is_empty": true,
    "ground_truth_query_result_is_empty": true,
    "error_occured_at_endpoint_message": "The read operation timed out"
  },
  {
    "resource": "https://sparql.uniprot.org/.well-known/sparql-examples/53",
    "natural_language_question": "Find mouse homologs in OMABrowser of human enzymes that catalyze reactions involving sterols (CHEBI:15889). Federating with Rhea and OMABrowser.",
    "ground_truth_query": "PREFIX CHEBI: <http://purl.obolibrary.org/obo/CHEBI_>\nPREFIX lscr: <http://purl.org/lscr#>\nPREFIX orth: <http://purl.org/net/orth#>\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX rh: <http://rdf.rhea-db.org/>\nPREFIX taxon: <http://purl.uniprot.org/taxonomy/>\nPREFIX up: <http://purl.uniprot.org/core/>\n\nSELECT\n  DISTINCT\n    ?chebi\n    ?reaction\n    ?humanProtein\n    ?mouseProtein\n    ?cluster \nWHERE {\n  SERVICE <https://sparql.rhea-db.org/sparql> {\n    ?reaction rdfs:subClassOf rh:Reaction .\n    ?reaction rh:side/rh:contains/rh:compound ?compound .\n    ?compound rh:chebi ?chebi .\n    ?chebi rdfs:subClassOf* CHEBI:15889\n  }\n\n  ?humanProtein up:organism taxon:9606 .\n  ?humanProtein up:annotation ?a .\n  ?a a up:Catalytic_Activity_Annotation .\n  ?a up:catalyticActivity ?ca .\n  ?ca up:catalyzedReaction ?reaction .\n\n  SERVICE  <https://sparql.omabrowser.org/sparql> {\n    ?cluster a orth:ParalogsCluster .\n    ?cluster orth:hasHomologousMember ?node1 , ?node2 .\n    ?node1 orth:hasHomologousMember* ?orthoProtein1 .\n    ?node2 orth:hasHomologousMember* ?orthoProtein2 .\n    ?orthoProtein1 lscr:xrefUniprot ?mouseProtein .\n    ?orthoProtein2 lscr:xrefUniprot ?humanProtein .\n    # inTaxon mouse\n    ?orthoProtein1 orth:organism/<http://purl.obolibrary.org/obo/RO_0002162> taxon:10090 . \n  }\n}",
    "target_endpoint": "https://sparql.uniprot.org/sparql/",
    "federates_with": [
      "https://sparql.rhea-db.org/sparql",
      "https://sparql.omabrowser.org/sparql"
    ],
    "endpoint_set": "Uniprot",
    "file_path": "UniProt/53_mouse_homologs_of_sterol_enzymes_via_omabrowser.ttl",
    "predicted_query": "# https://sparql.rhea-db.org/sparql\n# Find mouse homologs in OMABrowser of human enzymes that catalyze reactions involving sterols (CHEBI:15889). Federating with Rhea and OMABrowser.\nPREFIX rhea: <http://rdf.rhea-db.org/>\nPREFIX chebi: <http://purl.obolibrary.org/obo/CHEBI_>\nPREFIX obo: <http://purl.obolibrary.org/obo/>\n\nSELECT DISTINCT ?mouse_homolog ?human_enzyme ?reaction\nWHERE {\n  # Find reactions involving sterols\n  SERVICE <https://sparql.rhea-db.org/sparql> {\n    ?reaction rhea:has_participant chebi:15889 . # CHEBI ID for sterol\n    ?reaction rhea:catalyzed_by ?enzyme .\n  }\n\n  # Find human enzymes that catalyze these reactions\n  SERVICE <https://sparql.uniprot.org/sparql> {\n    ?human_enzyme rdfs:seeAlso ?enzyme .\n    ?human_enzyme a uniprot:Protein .\n    ?human_enzyme dcterms:references ?pubmed .\n    ?pubmed rdf:type obo:GENE_0000001 . # Assuming GENE_0000001 is the identifier for human genes.  Need to verify.\n  }\n\n  # Find mouse homologs of these human enzymes in OMABrowser\n  SERVICE <https://sparql.omabrowser.org/sparql> {\n    ?mouse_homolog orthodb:oma ?human_enzyme .\n    ?mouse_homolog a orthodb:Gene . # Assuming orthodb:Gene represents a gene in OMABrowser. Need to verify.\n    FILTER regex(str(?mouse_homolog), \"mouse\", \"i\") # Filter for mouse homologs.  This is a simplification.  Ideally, we'd use a proper taxonomy filter.\n  }\n}",
    "predicted_endpoint": "https://sparql.rhea-db.org/sparql",
    "predicted_endpoint_equal_to_target_endpoint": false,
    "predicted_endpoint_in_federates_with": true,
    "predicted_endpoint_or_federated_endpoint": true,
    "run_id_langsmith": "c0ddf45e-6ffd-4637-8f4d-e02853a44831",
    "evaluation_timestamp": "2025-05-10T19:11:41.678473",
    "question_understanding_prompt_tokens": 277,
    "question_understanding_completion_tokens": 41,
    "question_understanding_total_tokens": 318,
    "sparql_query_construction_prompt_tokens": 3207,
    "sparql_query_construction_completion_tokens": 447,
    "sparql_query_construction_total_tokens": 3654,
    "is_valid_sparql": false,
    "sparql_syntax_error": "Line 17, column 19: Unresolved prefixed name: rdfs:seeAlso",
    "result_eval_f1_score": 0.0,
    "result_eval_precision": 0.0,
    "result_eval_recall": 0.0,
    "error_occured_at_endpoint": false,
    "predicted_query_result_is_empty": true,
    "ground_truth_query_result_is_empty": false,
    "error_occured_at_endpoint_message": "syntactically not correct"
  },
  {
    "resource": "https://sparql.uniprot.org/.well-known/sparql-examples/52",
    "natural_language_question": "Retrieve drugs that target human enzymes involved in sterol metabolism (federated query with Rhea and ChEMBL via IDSM/Elixir czech republic).",
    "ground_truth_query": "PREFIX CHEBI: <http://purl.obolibrary.org/obo/CHEBI_>\nPREFIX cco: <http://rdf.ebi.ac.uk/terms/chembl#>\nPREFIX chebihash: <http://purl.obolibrary.org/obo/chebi#>\nPREFIX owl: <http://www.w3.org/2002/07/owl#>\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX rh: <http://rdf.rhea-db.org/>\nPREFIX skos: <http://www.w3.org/2004/02/skos/core#>\nPREFIX taxon: <http://purl.uniprot.org/taxonomy/>\nPREFIX up: <http://purl.uniprot.org/core/>\n\nSELECT\n        DISTINCT\n            ?protein\n            ?proteinFullName\n            ?activityType\n            ?standardActivityValue\n            ?standardActivityUnit\n            ?chemblMolecule\n            ?chemlbMoleculePrefLabel\nWHERE\n  {\n  # ChEBI: retrieve members of the ChEBI class ChEBI:15889 (sterol)\n  # Rhea: retrieve the reactions involving these ChEBI as participants\n  SERVICE <https://sparql.rhea-db.org/sparql> {\n    ?reaction rdfs:subClassOf  rh:Reaction ;\n\t      rh:status        rh:Approved ;\n\t      rh:side          ?reactionSide .\n    ?reactionSide\n\t      rh:contains      ?participant .\n    ?participant rh:compound  ?compound\n    {\n      ?compound  rh:chebi  ?chebi .\n      ?chebi (rdfs:subClassOf)+ CHEBI:15889\n    } UNION {\n      ?compound  rh:chebi           ?chebi .\n      ?chebi2   rdfs:subClassOf     ?chebiRestriction .\n      ?chebiRestriction\n\t\ta           owl:Restriction ;\n\t\towl:onProperty      chebihash:has_major_microspecies_at_pH_7_3 ;\n\t\towl:someValuesFrom  ?chebi .\n      ?chebi2 (rdfs:subClassOf)+ CHEBI:15889\n    }\n  }\n  # UniProt: retrieve the human (taxid:9606) enzymes catalyzing these Rhea reactions\n  ?ca       up:catalyzedReaction  ?reaction .\n  ?a        up:catalyticActivity  ?ca .\n  ?protein  up:annotation         ?a ;\n\t    up:organism           taxon:9606 ;\n\t    up:recommendedName    ?proteinRecName .\n  ?proteinRecName\n\t    up:fullName           ?proteinFullName .\n  # Find drugs in wikidata that interact with the UniProt Proteins\n  # ChEMBL: retrieve the corresponding targets and with drugs in clinical phase 4\n  # Via https://idsm.elixir-czech.cz/sparql/\n  SERVICE <https://idsm.elixir-czech.cz/sparql/endpoint/idsm> {\n    ?activity a cco:Activity ;\n      cco:hasMolecule ?chemblMolecule ;\n      cco:hasAssay ?assay ;\n      cco:standardType ?activityType ;\n      cco:standardValue ?standardActivityValue ;\n      cco:standardUnits ?standardActivityUnit .\n    ?chemblMolecule cco:highestDevelopmentPhase ?highestDevelopmentPhase ;\n      rdfs:label ?chemblMoleculeLabel ;\n      skos:prefLabel ?chemlbMoleculePrefLabel .\n    FILTER (?highestDevelopmentPhase > 3)\n    ?assay cco:hasTarget ?target .\n    ?target cco:hasTargetComponent/cco:targetCmptXref ?protein .\n    ?protein a cco:UniprotRef .\n  }\n}",
    "target_endpoint": "https://sparql.uniprot.org/sparql/",
    "federates_with": [
      "https://sparql.rhea-db.org/sparql",
      "https://idsm.elixir-czech.cz/sparql/endpoint/idsm"
    ],
    "endpoint_set": "Uniprot",
    "file_path": "UniProt/52_drugs_targeting_sterol_metabolism.ttl",
    "predicted_query": "# https://sparql.rhea-db.org/sparql\n# Federated query to find drugs targeting human enzymes involved in sterol metabolism.\nPREFIX rhea: <http://rdf.rhea-db.org/>\nPREFIX chebi: <http://purl.obolibrary.org/obo/CHEBI_>\nPREFIX obo: <http://purl.obolibrary.org/obo/>\n\nSELECT DISTINCT ?drug\nWHERE {\n  # Find Rhea reactions related to sterol metabolism\n  SERVICE <https://sparql.rhea-db.org/sparql> {\n    ?reaction rhea:equation ?equation .\n    FILTER (CONTAINS(LCASE(?equation), \"sterol\")) . # Filter reactions containing \"sterol\" in their equation\n    ?reaction rhea:status rhea:approved . # Consider only approved reactions\n    ?reaction rhea:direction rhea:bidirectional . # Consider bidirectional reactions\n    ?reaction rhea:side ?side .\n    ?side rhea:sideCompound ?compound .\n  }\n\n  # Find human enzymes involved in these reactions (assuming UniProt involvement)\n  SERVICE <https://sparql.uniprot.org/sparql> {\n    ?enzyme uniprot:xref ?reaction . # Link enzyme to Rhea reaction\n    ?enzyme a uniprot:Protein . # Ensure it's a protein\n    ?enzyme skos:exactMatch ?humanEnzyme . # Link to human enzyme\n    FILTER CONTAINS(STR(?humanEnzyme), \"uniprot.org\") # Filter for human enzymes\n  }\n\n  # Find drugs that target these human enzymes (using IDSM/Elixir Czech Republic)\n  SERVICE <https://idsm.elixir-czech.cz/sparql> {\n    ?drugTarget p:P2881 ?humanEnzyme . # P2881 is the property for \"target\"\n    ?drug wdt:P31 wd:Q41710 . # Q41710 represents \"drug\"\n    ?drug wdt:P1296 ?drugTarget . # P1296 is the property for \"therapeutic indication\"\n  }\n}",
    "predicted_endpoint": "https://sparql.rhea-db.org/sparql",
    "predicted_endpoint_equal_to_target_endpoint": false,
    "predicted_endpoint_in_federates_with": true,
    "predicted_endpoint_or_federated_endpoint": true,
    "run_id_langsmith": "923f8e70-d0bf-4bb8-b1dc-866a754414ce",
    "evaluation_timestamp": "2025-05-10T19:11:49.868286",
    "question_understanding_prompt_tokens": 270,
    "question_understanding_completion_tokens": 28,
    "question_understanding_total_tokens": 298,
    "sparql_query_construction_prompt_tokens": 1808,
    "sparql_query_construction_completion_tokens": 0,
    "sparql_query_construction_total_tokens": 1808,
    "is_valid_sparql": false,
    "sparql_syntax_error": "Line 21, column 13: Unresolved prefixed name: uniprot:xref",
    "result_eval_f1_score": 0.0,
    "result_eval_precision": 0.0,
    "result_eval_recall": 0.0,
    "error_occured_at_endpoint": false,
    "predicted_query_result_is_empty": true,
    "ground_truth_query_result_is_empty": false,
    "error_occured_at_endpoint_message": "syntactically not correct"
  },
  {
    "resource": "https://sparql.uniprot.org/.well-known/sparql-examples/54",
    "natural_language_question": "Proteins with binding sites for ligands similar to heme",
    "ground_truth_query": "PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX sachem: <http://bioinfo.uochb.cas.cz/rdf/v1.0/sachem#>\nPREFIX up: <http://purl.uniprot.org/core/>\nPREFIX xsd: <http://www.w3.org/2001/XMLSchema#>\n\nSELECT \n  ?protein\n  ?mnemonic\n  ?proteinName\n  ?ligandSimilarityScore\n  ?ligand\nWHERE {\n  SERVICE <https://idsm.elixir-czech.cz/sparql/endpoint/chebi> {\n    ?ssc sachem:compound ?ligand; \n      sachem:score ?ligandSimilarityScore ;\n      sachem:similaritySearch ?sss .\n        # Smiles of Heme\n    ?sss    sachem:query \"CC1=C(CCC([O-])=O)C2=[N+]3C1=Cc1c(C)c(C=C)c4C=C5C(C)=C(C=C)C6=[N+]5[Fe-]3(n14)n1c(=C6)c(C)c(CCC([O-])=O)c1=C2\";\n      sachem:cutoff \"8e-1\"^^xsd:double ;\n      sachem:aromaticityMode sachem:aromaticityDetect ;\n      sachem:similarityRadius 1 ;\n      sachem:tautomerMode sachem:ignoreTautomers .\n  }\n  ?protein up:mnemonic ?mnemonic ;\n    up:recommendedName/up:fullName ?proteinName ;\n    up:annotation ?annotation .\n  ?annotation a up:Binding_Site_Annotation ;\n      up:ligand/rdfs:subClassOf ?ligand .\n}\nORDER BY DESC(?ligandSimilarityScore)",
    "target_endpoint": "https://sparql.uniprot.org/sparql/",
    "federates_with": [
      "https://idsm.elixir-czech.cz/sparql/endpoint/chebi"
    ],
    "endpoint_set": "Uniprot",
    "file_path": "UniProt/54_binding_sites_for_ligands_similar_to_heme_sachem.ttl",
    "predicted_query": "# https://sparql.uniprot.org/sparql\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX up: <http://purl.uniprot.org/core/>\nPREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>\n\nSELECT DISTINCT ?protein ?proteinName\nWHERE {\n  # Find UniProt proteins that have binding sites\n  SERVICE <https://sparql.uniprot.org/sparql> {\n    ?protein a up:Protein .\n    ?protein rdfs:label ?proteinName .\n    ?protein up:feature ?bindingSite .\n    ?bindingSite a up:Binding_Site .\n    ?bindingSite rdfs:comment ?bindingSiteDescription .\n\n    # Filter for binding sites that mention \"heme\" or similar terms\n    FILTER (CONTAINS(LCASE(?bindingSiteDescription), \"heme\"))\n  }\n  \n  #Potentially federate with ChEBI or other chemical databases to find ligands similar to heme.\n  #However, without specific predicates for similarity, this is difficult.\n  #The current query focuses on binding sites described as interacting with heme.\n}",
    "predicted_endpoint": "https://sparql.uniprot.org/sparql",
    "predicted_endpoint_equal_to_target_endpoint": true,
    "predicted_endpoint_in_federates_with": false,
    "predicted_endpoint_or_federated_endpoint": true,
    "run_id_langsmith": "9fed2a1c-7009-4b8b-a3e6-e5d29ab3149b",
    "evaluation_timestamp": "2025-05-10T19:11:58.056825",
    "question_understanding_prompt_tokens": 247,
    "question_understanding_completion_tokens": 29,
    "question_understanding_total_tokens": 276,
    "sparql_query_construction_prompt_tokens": 2616,
    "sparql_query_construction_completion_tokens": 311,
    "sparql_query_construction_total_tokens": 2927,
    "is_valid_sparql": true,
    "sparql_syntax_error": "syntactically correct",
    "result_eval_f1_score": 0.0,
    "result_eval_precision": 0.0,
    "result_eval_recall": 0.0,
    "error_occured_at_endpoint": false,
    "predicted_query_result_is_empty": true,
    "ground_truth_query_result_is_empty": false,
    "error_occured_at_endpoint_message": "no error, but empty result"
  },
  {
    "resource": "https://sparql.uniprot.org/.well-known/sparql-examples/43",
    "natural_language_question": "Connect patents cited in UniProtKB with those in the patent database at EPO via publication number, whose grant date is more than twenty years in the past.",
    "ground_truth_query": "PREFIX patent: <http://data.epo.org/linked-data/def/patent/>\nPREFIX skos: <http://www.w3.org/2004/02/skos/core#>\nPREFIX up: <http://purl.uniprot.org/core/>\n\nSELECT ?grantDate ?patent ?application ?applicationNo\nWHERE\n{\n    ?citation a up:Patent_Citation ;\n  skos:exactMatch ?patent .\n  BIND(SUBSTR(STR(?patent), 35) AS ?applicationNo)\n  BIND(SUBSTR(STR(?patent), 33, 2) AS ?countryCode)\n  SERVICE <https://data.epo.org/linked-data/query>{\n    ?publication patent:publicationNumber ?applicationNo ;\n      patent:application ?application .\n    ?application patent:grantDate ?grantDate .\n  }\n  BIND((year(now()) - 20) AS ?thisYearMinusTwenty)\n  BIND(year(?grantDate) AS ?grantYear)\n  FILTER(?grantYear < ?thisYearMinusTwenty)\n} ORDER BY ?grantYear",
    "target_endpoint": "https://sparql.uniprot.org/sparql/",
    "federates_with": [
      "https://data.epo.org/linked-data/query"
    ],
    "endpoint_set": "Uniprot",
    "file_path": "UniProt/43_patents_used_in_uniprot_granted_twenty_years_in_the_past.ttl",
    "predicted_query": "# https://sparql.uniprot.org/sparql\n# Federated SPARQL query to connect patents cited in UniProtKB with those in the patent database at EPO via publication number, whose grant date is more than twenty years in the past.\nPREFIX up: <http://purl.uniprot.org/core/>\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\n\nSELECT DISTINCT ?uniprotEntry ?patentPublicationNumber ?patentGrantDate\nWHERE {\n  # Query UniProtKB for entries with patent citations\n  SERVICE <https://sparql.uniprot.org/sparql> {\n    ?uniprotEntry a up:Protein .\n    ?uniprotEntry up:citation ?citation .\n    ?citation up:publication ?patent .\n    ?patent rdfs:label ?patentPublicationNumber . # Assuming patent publication number is stored as label\n    FILTER (REGEX(?patentPublicationNumber, \"^[A-Z0-9]+$\")) # Filter to ensure it looks like a patent number\n  }\n  \n  # Query EPO for patent grant dates based on publication number\n  # This assumes there is an EPO SPARQL endpoint (not provided, so this part is illustrative)\n  # SERVICE <EPO_SPARQL_ENDPOINT> { # Replace with actual EPO endpoint\n  #   ?patentURI a <EPO_Patent_Class> . # Replace with actual EPO patent class\n  #   ?patentURI <EPO_publicationNumber_property> ?patentPublicationNumber . # Replace with actual property\n  #   ?patentURI <EPO_grantDate_property> ?patentGrantDate . # Replace with actual property\n  #   FILTER (?patentGrantDate < (NOW() - \"P20Y\"^^xsd:duration)) # Filter for patents granted more than 20 years ago\n  # }\n  \n  #OPTIONAL {  #Illustrative example of how to include the EPO data if available\n  #  SERVICE <EPO_SPARQL_ENDPOINT> {\n  #    ?patentURI <EPO_publicationNumber_property> ?patentPublicationNumber .\n  #    ?patentURI <EPO_grantDate_property> ?patentGrantDate .\n  #  }\n  #}\n  \n  #FILTER (BOUND(?patentGrantDate)) #Only return results where patentGrantDate is available\n}",
    "predicted_endpoint": "https://sparql.uniprot.org/sparql",
    "predicted_endpoint_equal_to_target_endpoint": true,
    "predicted_endpoint_in_federates_with": false,
    "predicted_endpoint_or_federated_endpoint": true,
    "run_id_langsmith": "751cb400-e5cd-4297-9419-8756ed746350",
    "evaluation_timestamp": "2025-05-10T19:12:26.034479",
    "question_understanding_prompt_tokens": 268,
    "question_understanding_completion_tokens": 47,
    "question_understanding_total_tokens": 315,
    "sparql_query_construction_prompt_tokens": 1906,
    "sparql_query_construction_completion_tokens": 514,
    "sparql_query_construction_total_tokens": 2420,
    "is_valid_sparql": true,
    "sparql_syntax_error": "syntactically correct",
    "result_eval_f1_score": 0.0,
    "result_eval_precision": 0.0,
    "result_eval_recall": 0.0,
    "error_occured_at_endpoint": false,
    "predicted_query_result_is_empty": true,
    "ground_truth_query_result_is_empty": false,
    "error_occured_at_endpoint_message": "no error, but empty result"
  },
  {
    "resource": "https://sparql.uniprot.org/.well-known/sparql-examples/45",
    "natural_language_question": "Retrieve drugs that target human enzymes involved in sterol metabolism (federated query with WikiData and Rhea).",
    "ground_truth_query": "PREFIX CHEBI: <http://purl.obolibrary.org/obo/CHEBI_>\nPREFIX chebihash: <http://purl.obolibrary.org/obo/chebi#>\nPREFIX owl: <http://www.w3.org/2002/07/owl#>\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX rh: <http://rdf.rhea-db.org/>\nPREFIX taxon: <http://purl.uniprot.org/taxonomy/>\nPREFIX uniprotkb: <http://purl.uniprot.org/uniprot/>\nPREFIX up: <http://purl.uniprot.org/core/>\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\n\nSELECT DISTINCT ?protein ?proteinFullName ?wikiChemical ?wikiChemicalLabel ?medicalConditionTreatedLabel\nWHERE {\n  # ChEBI: retrieve members of the ChEBI class ChEBI:15889 (sterol)\n  # Rhea: retrieve the reactions involving these ChEBI as participants\n  SERVICE <https://sparql.rhea-db.org/sparql> {\n    ?reaction rdfs:subClassOf rh:Reaction ;\n      rh:status rh:Approved ;\n      rh:side ?reactionSide .\n    ?reactionSide\n      rh:contains ?participant .\n    ?participant rh:compound ?compound\n    {\n      ?compound rh:chebi ?chebi .\n      ?chebi (rdfs:subClassOf)+ CHEBI:15889\n    } UNION {\n      ?compound rh:chebi ?chebi .\n      ?chebi2 rdfs:subClassOf ?chebiRestriction .\n      ?chebiRestriction\n\t\ta owl:Restriction ;\n\t\towl:onProperty chebihash:has_major_microspecies_at_pH_7_3 ;\n\t\towl:someValuesFrom ?chebi .\n      ?chebi2 (rdfs:subClassOf)+ CHEBI:15889\n    }\n  }\n  # UniProt: retrieve the human (taxid:9606) enzymes catalyzing these Rhea reactions\n  ?ca up:catalyzedReaction  ?reaction .\n  ?a up:catalyticActivity  ?ca .\n  ?proteinIRI  up:annotation ?a ;\n    up:organism taxon:9606 ;\n    up:recommendedName ?proteinRecName .\n  ?proteinRecName up:fullName ?proteinFullName .\n  # Find drugs in wikidata that interact with the UniProt Proteins\n  BIND (SUBSTR(STR(?proteinIRI), STRLEN(STR(uniprotkb:))+1) AS ?protein)\n  SERVICE <https://query.wikidata.org/sparql> {\n    ?wp wdt:P352  ?protein .\n    ?wikiChemical wdt:P129 ?wp . # Physically interacts with\n    ?wikiChemical rdfs:label ?wikiChemicalLabel .\n    ?wikiChemical wdt:P2175 ?wmc . # Medical conndition treated\n    ?wmc rdfs:label ?medicalConditionTreatedLabel .\n    FILTER(lang(?medicalConditionTreatedLabel) = 'en')\n    FILTER(lang(?wikiChemicalLabel) = 'en')\n  }\n}",
    "target_endpoint": "https://sparql.uniprot.org/sparql/",
    "federates_with": [
      "https://query.wikidata.org/sparql",
      "https://sparql.rhea-db.org/sparql"
    ],
    "endpoint_set": "Uniprot",
    "file_path": "UniProt/45_drugs_targeting_human_sterol_metabolism_enzymes.ttl",
    "predicted_query": "# https://sparql.rhea-db.org/sparql\n# Federated SPARQL query to retrieve drugs that target human enzymes involved in sterol metabolism, federating Rhea and Wikidata.\nPREFIX rhea: <http://rdf.rhea-db.org/>\nPREFIX chebi: <http://purl.obolibrary.org/obo/CHEBI_>\nPREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX wd: <http://www.wikidata.org/entity/>\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\n\nSELECT DISTINCT ?drug ?drugLabel ?enzyme ?enzymeLabel WHERE {\n  # Find Rhea reactions related to sterol metabolism\n  SERVICE <https://sparql.rhea-db.org/sparql> {\n    ?reaction rdfs:label ?reactionLabel .\n    FILTER (CONTAINS(LCASE(?reactionLabel), \"sterol\")) . # Filter reactions related to sterol metabolism\n    ?reaction rhea:equation ?equation .\n    ?equation rhea:side ?side .\n    ?side rhea:component ?component .\n    ?component rdf:type rhea:Protein .\n    ?component rdfs:label ?enzymeLabel .\n    BIND (?component AS ?enzymeRhea)\n  }\n\n  # Find Wikidata entries for human enzymes\n  SERVICE <https://query.wikidata.org/sparql> {\n    ?enzyme wdt:P595 ?enzymeRhea . # Link to Rhea ID\n    ?enzyme wdt:P703 wd:Q5 . # Instance of human\n    ?enzyme rdfs:label ?enzymeLabelWikidata .\n    FILTER (LANG(?enzymeLabelWikidata) = \"en\")\n\n    # Find drugs that target the enzyme\n    ?drug wdt:P2175 ?enzyme . # Drug targets enzyme\n    ?drug rdfs:label ?drugLabel .\n    FILTER (LANG(?drugLabel) = \"en\")\n    BIND (?drug AS ?drugWikidata)\n  }\n  BIND (?enzyme AS ?enzymeWikidata)\n  BIND (STR(?enzymeRhea) AS ?enzyme)\n  FILTER (CONTAINS(?enzyme, \"CHEBI\"))\n  BIND (STR(?enzymeRhea) AS ?drug)\n  FILTER (CONTAINS(?drug, \"CHEBI\"))\n}",
    "predicted_endpoint": "https://sparql.rhea-db.org/sparql",
    "predicted_endpoint_equal_to_target_endpoint": false,
    "predicted_endpoint_in_federates_with": true,
    "predicted_endpoint_or_federated_endpoint": true,
    "run_id_langsmith": "c9757e21-2e9a-4b04-9e9e-a3e2197ade63",
    "evaluation_timestamp": "2025-05-10T19:12:35.813437",
    "question_understanding_prompt_tokens": 260,
    "question_understanding_completion_tokens": 28,
    "question_understanding_total_tokens": 288,
    "sparql_query_construction_prompt_tokens": 2037,
    "sparql_query_construction_completion_tokens": 559,
    "sparql_query_construction_total_tokens": 2596,
    "is_valid_sparql": false,
    "sparql_syntax_error": "BIND: Variable used when already in-scope: ?enzyme in BIND(str(?enzymeRhea) AS ?enzyme)",
    "result_eval_f1_score": 0.0,
    "result_eval_precision": 0.0,
    "result_eval_recall": 0.0,
    "error_occured_at_endpoint": false,
    "predicted_query_result_is_empty": true,
    "ground_truth_query_result_is_empty": false,
    "error_occured_at_endpoint_message": "syntactically not correct"
  },
  {
    "resource": "https://sparql.uniprot.org/.well-known/sparql-examples/42",
    "natural_language_question": "Connect patents cited in UniProtKB with those in the patent database at EPO via publication number.",
    "ground_truth_query": "PREFIX patent: <http://data.epo.org/linked-data/def/patent/>\nPREFIX skos: <http://www.w3.org/2004/02/skos/core#>\nPREFIX up: <http://purl.uniprot.org/core/>\n\nSELECT ?citation ?patent ?application ?applicationNo\nWHERE\n{\n  ?citation a up:Patent_Citation ;\n    skos:exactMatch ?patent .\n  FILTER(CONTAINS(STR(?patent), 'EP'))\n  BIND(SUBSTR(STR(?patent), 35) AS ?applicationNo)\n  SERVICE <https://data.epo.org/linked-data/query>{\n    ?application patent:publicationNumber ?applicationNo\n  }\n}",
    "target_endpoint": "https://sparql.uniprot.org/sparql/",
    "federates_with": [
      "https://data.epo.org/linked-data/query"
    ],
    "endpoint_set": "Uniprot",
    "file_path": "UniProt/42_connect_patents_to_epo.ttl",
    "predicted_query": "# https://sparql.uniprot.org/sparql\n# Retrieve patent information from UniProtKB (if available)\n\nPREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX up: <http://purl.uniprot.org/core/>\n\nSELECT DISTINCT ?patent ?patentLabel ?entry\nWHERE {\n  # Find UniProt entries that have patent cross-references\n  ?entry a up:Protein .\n  ?entry up:citation ?citation .\n  ?citation rdf:type up:Patent ;\n            rdfs:label ?patentLabel . # Assuming patents have labels\n\n  # Assuming there's a property linking to the patent identifier\n  ?citation up:id ?patent .  # Replace up:id with the actual property if different\n\n  # You might need to adjust the properties based on the actual UniProt schema\n  # This query assumes that patents are linked via a citation property\n}",
    "predicted_endpoint": "https://sparql.uniprot.org/sparql",
    "predicted_endpoint_equal_to_target_endpoint": true,
    "predicted_endpoint_in_federates_with": false,
    "predicted_endpoint_or_federated_endpoint": true,
    "run_id_langsmith": "b3408cd9-d321-4f91-bdce-b3cb79e0e828",
    "evaluation_timestamp": "2025-05-10T19:12:43.736535",
    "question_understanding_prompt_tokens": 254,
    "question_understanding_completion_tokens": 35,
    "question_understanding_total_tokens": 289,
    "sparql_query_construction_prompt_tokens": 1894,
    "sparql_query_construction_completion_tokens": 361,
    "sparql_query_construction_total_tokens": 2255,
    "is_valid_sparql": true,
    "sparql_syntax_error": "syntactically correct",
    "result_eval_f1_score": 0.0,
    "result_eval_precision": 0.0,
    "result_eval_recall": 0.0,
    "error_occured_at_endpoint": false,
    "predicted_query_result_is_empty": true,
    "ground_truth_query_result_is_empty": false,
    "error_occured_at_endpoint_message": "no error, but empty result"
  },
  {
    "resource": "https://sparql.uniprot.org/.well-known/sparql-examples/67_draft_human_metabolome",
    "natural_language_question": "Generate a draft human metabolome",
    "ground_truth_query": "PREFIX chebislash: <http://purl.obolibrary.org/obo/chebi/>\nPREFIX rh: <http://rdf.rhea-db.org/>\nPREFIX taxon: <http://purl.uniprot.org/taxonomy/>\nPREFIX up: <http://purl.uniprot.org/core/>\n\nSELECT\n?uniprot ?mnemonic ?rhea ?chebi ?smiles ?inchiKey\nWHERE\n{\n  ?uniprot up:annotation/up:catalyticActivity/up:catalyzedReaction ?rhea ;\n        up:organism taxon:9606 ;\n        up:mnemonic ?mnemonic .\n  SERVICE <https://sparql.rhea-db.org/sparql> {\n\t?rhea rh:side/rh:contains/rh:compound ?compound .\n    ?compound (rh:chebi|(rh:reactivePart/rh:chebi)|(rh:underlyingChebi/rh:chebi)) ?chebi .\n   }\n   ?chebi chebislash:smiles ?smiles ;\n          chebislash:inchikey ?inchiKey .\n}",
    "target_endpoint": "https://sparql.uniprot.org/sparql/",
    "federates_with": [
      "https://sparql.rhea-db.org/sparql"
    ],
    "endpoint_set": "Uniprot",
    "file_path": "UniProt/67_draft_human_metabolome.ttl",
    "predicted_query": "# https://sparql.uniprot.org/sparql\n# This query aims to retrieve information about the human metabolome.\n# It federates with UniProt to retrieve information about human proteins and potentially link them to metabolic pathways or metabolites.\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX up: <http://purl.uniprot.org/core/>\nPREFIX taxon: <http://purl.uniprot.org/taxonomy/>\n\nSELECT DISTINCT ?protein ?proteinName ?gene ?organism\nWHERE {\n  # Query UniProt for human proteins\n  SERVICE <https://sparql.uniprot.org/sparql> {\n    ?protein a up:Protein .\n    ?protein up:organism taxon:9606 .  # Homo sapiens (human)\n    ?protein rdfs:label ?proteinName .\n    OPTIONAL { ?protein up:encodedBy ?gene . } # Get gene name if available\n    BIND(\"Homo sapiens\" AS ?organism)\n  }\n  # Consider federating with Rhea or SwissLipids if more specific metabolite or reaction information is needed.\n  # For example, if we wanted to find reactions catalyzed by these proteins:\n  # SERVICE <https://sparql.rhea-db.org/sparql> {\n  #   ?reaction rhea:enzyme ?protein .\n  #   ?reaction rdfs:label ?reactionName .\n  # }\n  # Or if we wanted to find lipids associated with these proteins (if such a link exists in SwissLipids):\n  # SERVICE <https://sparql.swisslipids.org/sparql/> {\n  #   ?lipid sl:relatedToProtein ?protein .\n  #   ?lipid rdfs:label ?lipidName .\n  # }\n}",
    "predicted_endpoint": "https://sparql.uniprot.org/sparql",
    "predicted_endpoint_equal_to_target_endpoint": true,
    "predicted_endpoint_in_federates_with": false,
    "predicted_endpoint_or_federated_endpoint": true,
    "run_id_langsmith": "08631098-4b97-4260-84b0-8a4c14186dff",
    "evaluation_timestamp": "2025-05-10T19:12:51.313428",
    "question_understanding_prompt_tokens": 244,
    "question_understanding_completion_tokens": 20,
    "question_understanding_total_tokens": 264,
    "sparql_query_construction_prompt_tokens": 1443,
    "sparql_query_construction_completion_tokens": 404,
    "sparql_query_construction_total_tokens": 1847,
    "is_valid_sparql": true,
    "sparql_syntax_error": "syntactically correct",
    "result_eval_f1_score": 0.0,
    "result_eval_precision": 0.0,
    "result_eval_recall": 0.0,
    "error_occured_at_endpoint": false,
    "predicted_query_result_is_empty": false,
    "ground_truth_query_result_is_empty": false,
    "error_occured_at_endpoint_message": "no error"
  },
  {
    "resource": "https://sparql.uniprot.org/.well-known/sparql-examples/36",
    "natural_language_question": "Find the orthologous proteins for UniProtKB entry P05067 using the <a href=\"http://www.orthod.org\">OrthoDB database</a>",
    "ground_truth_query": "PREFIX orthodb: <http://purl.orthodb.org/>\nPREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX skos: <http://www.w3.org/2004/02/skos/core#>\nPREFIX uniprotkb: <http://purl.uniprot.org/uniprot/>\nPREFIX up: <http://purl.uniprot.org/core/>\n\nSELECT\n  ?protein\n  ?orthoGroup\n  ?scientificName\n  ?functionComment\n  ?prefferedGeneName\n  ((STRLEN(?value) - ?medianLength) as ?deviationFromMedianLength)\nWHERE\n{\n  uniprotkb:P05067 a up:Protein ;\n        up:organism/up:scientificName ?scientificName ;\n        rdfs:seeAlso ?orthoGroup ;\n        up:encodedBy/skos:prefLabel ?prefferedGeneName ;\n          up:sequence/rdf:value ?value .\n  OPTIONAL {\n    ?protein up:annotation ?functionAnnotation .\n    ?functionAnnotation a up:Function_Annotation ;\n      rdfs:comment ?functionComment .\n  }\n  SERVICE <https://sparql.orthodb.org/sparql>{\n    ?orthoGroup orthodb:ogMedianProteinLength ?medianLength .\n    ?orthoGroup orthodb:hasMember ?xref .\n    ?xref orthodb:xref/orthodb:xrefResource uniprotkb:P05067 .\n  }\n}\nLIMIT 985915",
    "target_endpoint": "https://sparql.uniprot.org/sparql/",
    "federates_with": [
      "https://sparql.orthodb.org/sparql"
    ],
    "endpoint_set": "Uniprot",
    "file_path": "UniProt/36_orthologous_proteins_via_orthodb.ttl",
    "predicted_query": "# https://sparql.uniprot.org/sparql\nPREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX up: <http://purl.uniprot.org/core/>\n\nSELECT DISTINCT ?protein ?gene ?organism\nWHERE {\n  # Focus on the UniProt entry P05067\n  VALUES ?uniprot_id { \"P05067\" }\n  \n  ?protein a up:Protein ;\n           up:accession ?uniprot_id .\n  \n  # Attempt to find orthologs.  This assumes UniProt has some ortholog annotation.\n  # The specific predicate for orthologs might need adjustment based on UniProt's schema.\n  ?protein up:annotation ?annotation .\n  ?annotation a up:Ortholog_Annotation . # Assuming there is a class for ortholog annotations\n\n  # Get the gene name and organism associated with the ortholog\n  OPTIONAL { ?protein up:gene ?gene . }\n  OPTIONAL { ?protein up:organism ?organism . }\n}",
    "predicted_endpoint": "https://sparql.uniprot.org/sparql",
    "predicted_endpoint_equal_to_target_endpoint": true,
    "predicted_endpoint_in_federates_with": false,
    "predicted_endpoint_or_federated_endpoint": true,
    "run_id_langsmith": "a6bdd750-0eb4-4f40-bc2f-f23a76a97a09",
    "evaluation_timestamp": "2025-05-10T19:14:44.667028",
    "question_understanding_prompt_tokens": 274,
    "question_understanding_completion_tokens": 44,
    "question_understanding_total_tokens": 318,
    "sparql_query_construction_prompt_tokens": 2808,
    "sparql_query_construction_completion_tokens": 363,
    "sparql_query_construction_total_tokens": 3171,
    "is_valid_sparql": true,
    "sparql_syntax_error": "syntactically correct",
    "result_eval_f1_score": 0.0,
    "result_eval_precision": 0.0,
    "result_eval_recall": 0.0,
    "error_occured_at_endpoint": false,
    "predicted_query_result_is_empty": true,
    "ground_truth_query_result_is_empty": false,
    "error_occured_at_endpoint_message": "no error, but empty result"
  },
  {
    "resource": "https://sparql.uniprot.org/.well-known/sparql-examples/60",
    "natural_language_question": "Find human proteins that catalyze reactions where substrates or product have a <a href=\"https://www.ebi.ac.uk/chebi/searchId.do?chebiId=CHEBI:35516\">Cholestane skeleton</a>",
    "ground_truth_query": "PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX rh: <http://rdf.rhea-db.org/>\nPREFIX sachem: <http://bioinfo.uochb.cas.cz/rdf/v1.0/sachem#>\nPREFIX taxon: <http://purl.uniprot.org/taxonomy/>\nPREFIX up: <http://purl.uniprot.org/core/>\n\nSELECT\n  DISTINCT\n    ?protein\n    ?disease\n    ?rhea\n    ?chebi\n    ?omim\nWHERE {\n    # Find complete ChEBIs with a Cholestane skeleton, via the Czech Elixir node IDSM Sachem chemical substructure search.\n    SERVICE <https://idsm.elixir-czech.cz/sparql/endpoint/chebi> {\n      ?chebi sachem:substructureSearch [\n        sachem:query\n\"[C@]12(CCC3CCCC[C@]3(C)[C@@]1([H])CC[C@]1(C)[C@@]([H])([C@@](C)([H])CCCC(C)C)CC[C@@]21[H])[H]\"\n].\n   }\n   # Use the fact that UniProt catalytic activities are annotated using Rhea \n   # Mapping the found ChEBIs to Rhea reactions\n   SERVICE <https://sparql.rhea-db.org/sparql>{\n     ?rhea rh:side/rh:contains/rh:compound/rdfs:subClassOf ?chebi .\n   }\n   # Match the found Rhea reactions with human UniProtKB proteins\n   ?protein up:annotation/up:catalyticActivity/up:catalyzedReaction ?rhea .\n   ?protein up:organism taxon:9606 .\n   # Find only those human entries that have an annotated related disease, and optionaly map these to OMIM\n   ?protein up:annotation/up:disease ?disease .\n   OPTIONAL {\n     ?disease rdfs:seeAlso ?omim .\n     ?omim up:database <http://purl.uniprot.org/database/MIM>\n   }\n}",
    "target_endpoint": "https://sparql.uniprot.org/sparql/",
    "federates_with": [
      "https://idsm.elixir-czech.cz/sparql/endpoint/chebi",
      "https://sparql.rhea-db.org/sparql"
    ],
    "endpoint_set": "Uniprot",
    "file_path": "UniProt/60_enzymes_working_on_substrate_with_Cholestene_backbone.ttl",
    "predicted_query": "# https://sparql.uniprot.org/sparql\n# Find human proteins that catalyze reactions where substrates or product have a Cholestane skeleton\n\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX up: <http://purl.uniprot.org/core/>\nPREFIX taxon: <http://purl.uniprot.org/taxonomy/>\nPREFIX chebi: <http://purl.obolibrary.org/obo/>\nPREFIX rhea: <http://rdf.rhea-db.org/>\n\nSELECT DISTINCT ?protein ?proteinName ?reaction\nWHERE {\n  # Find human proteins\n  SERVICE <https://sparql.uniprot.org/sparql> {\n    ?protein a up:Protein ;\n             up:organism taxon:9606 ; # Homo sapiens\n             rdfs:label ?proteinName .\n  }\n\n  # Find reactions catalyzed by these proteins\n  SERVICE <https://sparql.rhea-db.org/sparql> {\n    ?reaction rhea:enzyme ?protein .\n\n    # Check if the reaction involves a substrate or product with a Cholestane skeleton\n    {\n      ?reaction rhea:substrate ?substrate .\n      ?substrate chebi:is_a chebi:35516 .  # Cholestane skeleton\n    }\n    UNION\n    {\n      ?reaction rhea:product ?product .\n      ?product chebi:is_a chebi:35516 .  # Cholestane skeleton\n    }\n  }\n}",
    "predicted_endpoint": "https://sparql.uniprot.org/sparql",
    "predicted_endpoint_equal_to_target_endpoint": true,
    "predicted_endpoint_in_federates_with": false,
    "predicted_endpoint_or_federated_endpoint": true,
    "run_id_langsmith": "85d9ab63-00a2-4521-bf43-e02e536f84d0",
    "evaluation_timestamp": "2025-05-10T19:16:13.179768",
    "question_understanding_prompt_tokens": 297,
    "question_understanding_completion_tokens": 38,
    "question_understanding_total_tokens": 335,
    "sparql_query_construction_prompt_tokens": 3488,
    "sparql_query_construction_completion_tokens": 356,
    "sparql_query_construction_total_tokens": 3844,
    "is_valid_sparql": true,
    "sparql_syntax_error": "syntactically correct",
    "result_eval_f1_score": 0.0,
    "result_eval_precision": 0.0,
    "result_eval_recall": 0.0,
    "error_occured_at_endpoint": false,
    "predicted_query_result_is_empty": true,
    "ground_truth_query_result_is_empty": false,
    "error_occured_at_endpoint_message": "no error, but empty result"
  },
  {
    "resource": "https://sparql.uniprot.org/.well-known/sparql-examples/70_enzymes_interacting_with_molecules_similar_to_dopamine",
    "natural_language_question": "Look for enzymes catalyzing reactions with molecules similar to dopamine.",
    "ground_truth_query": "PREFIX CHEBI: <http://purl.obolibrary.org/obo/CHEBI_>\nPREFIX rh: <http://rdf.rhea-db.org/>\nPREFIX sachem: <http://bioinfo.uochb.cas.cz/rdf/v1.0/sachem#>\nPREFIX up: <http://purl.uniprot.org/core/>\n\nSELECT\n  ?protein\n  ?rhea\n  ?chebi\nWHERE {\n  # Use the smiles of dopamine CHEBI:18243\n  SERVICE <https://idsm.elixir-czech.cz/sparql/endpoint/chebi>{\n    ?chebi sachem:similarCompoundSearch [\n      sachem:query \"NCCc1ccc(O)c(O)c1\" ] .\n  }\n  GRAPH<https://sparql.rhea-db.org/rhea>{\n    ?rhea rh:side/rh:contains/rh:compound ?compound .\n    ?compound (rh:chebi|(rh:reactivePart/rh:chebi)|(rh:underlyingChebi/rh:chebi)) ?chebi .\n  }\n  ?protein up:reviewed true ;\n    up:annotation ?caa .\n  ?caa up:catalyticActivity/up:catalyzedReaction ?rhea .\n}",
    "target_endpoint": "https://sparql.uniprot.org/sparql/",
    "federates_with": [
      "https://idsm.elixir-czech.cz/sparql/endpoint/chebi"
    ],
    "endpoint_set": "Uniprot",
    "file_path": "UniProt/70_enzymes_interacting_with_molecules_similar_to_dopamine.ttl",
    "predicted_query": "# https://sparql.rhea-db.org/sparql\n# Find reactions in Rhea involving dopamine and then find the enzymes that catalyze those reactions.\nPREFIX rhea: <http://rdf.rhea-db.org/>\nPREFIX chebi: <http://purl.obolibrary.org/obo/CHEBI_>\nPREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>\n\nSELECT DISTINCT ?enzyme ?reaction\nWHERE {\n  # Find reactions in Rhea that involve dopamine as a participant.\n  {\n    SELECT DISTINCT ?reaction WHERE {\n      ?reaction rhea: Rhea-has-participant chebi:15378 .  #CHEBI ID for dopamine\n    }\n  }\n\n  # Find the enzyme (UniProt ID) that catalyzes the reaction.\n  SERVICE <https://sparql.uniprot.org/sparql> {\n    ?enzyme rdfs:label ?enzymeName ;\n            <http://purl.uniprot.org/core/catalyticActivity> ?reactionActivity .\n    ?reactionActivity <http://purl.uniprot.org/core/reaction> ?reactionRhea .\n    FILTER(REGEX(STR(?reactionRhea), REPLACE(STR(?reaction), \"http://rdf.rhea-db.org/\", \"\"))) # comparing the local rhea reaction URI with the uniprot rhea reaction URI\n  }\n  BIND(STR(?enzyme) AS ?enzymeUri)\n  BIND(REPLACE(?enzymeUri, \"http://purl.uniprot.org/uniprotkb/\", \"\") AS ?enzyme)\n}",
    "predicted_endpoint": "https://sparql.rhea-db.org/sparql",
    "predicted_endpoint_equal_to_target_endpoint": false,
    "predicted_endpoint_in_federates_with": false,
    "predicted_endpoint_or_federated_endpoint": false,
    "run_id_langsmith": "04e05984-aad3-4ae9-afcc-684019976c58",
    "evaluation_timestamp": "2025-05-10T19:16:39.369970",
    "question_understanding_prompt_tokens": 248,
    "question_understanding_completion_tokens": 26,
    "question_understanding_total_tokens": 274,
    "sparql_query_construction_prompt_tokens": 2427,
    "sparql_query_construction_completion_tokens": 365,
    "sparql_query_construction_total_tokens": 2792,
    "is_valid_sparql": false,
    "sparql_syntax_error": "Lexical error at line 12, column 43.  Encountered: '32' (32), after prefix \"Rhea-has-participant\"",
    "result_eval_f1_score": 0.0,
    "result_eval_precision": 0.0,
    "result_eval_recall": 0.0,
    "error_occured_at_endpoint": false,
    "predicted_query_result_is_empty": true,
    "ground_truth_query_result_is_empty": false,
    "error_occured_at_endpoint_message": "syntactically not correct"
  },
  {
    "resource": "https://sparql.uniprot.org/.well-known/sparql-examples/38",
    "natural_language_question": "For the human entry P05067 (Amyloid-beta precursor protein) find the gene start ends in WikiData",
    "ground_truth_query": "PREFIX p: <http://www.wikidata.org/prop/>\nPREFIX pq: <http://www.wikidata.org/prop/qualifier/>\nPREFIX ps: <http://www.wikidata.org/prop/statement/>\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX uniprotkb: <http://purl.uniprot.org/uniprot/>\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\n\n\nSELECT \n\t?protein \n\t?begin\n\t?end\n\t?chromosome\n\t?assembly\nWHERE {\n    {\n        BIND(uniprotkb:P05067 AS ?proteinIRI)\n        BIND (SUBSTR(STR(?proteinIRI), STRLEN(STR(uniprotkb:))+1) AS ?protein)\n    }\n    SERVICE <https://query.wikidata.org/sparql> {\n        ?wp wdt:P352 ?protein ;\n            wdt:P702 ?wg . \n        ?wg p:P644   ?wgss .\n        ?wgss ps:P644        ?begin ;\n          pq:P1057/wdt:P1813 ?chromosome ;\n          pq:P659/rdfs:label ?assembly .\n        ?wg p:P645 ?wgse .\n        ?wgse ps:P645        ?end ;\n          pq:P1057/wdt:P1813 ?chromosome ;\n          pq:P659/rdfs:label ?assembly .\n        FILTER(lang(?assembly) = \"en\")\n  } \n}",
    "target_endpoint": "https://sparql.uniprot.org/sparql/",
    "federates_with": [
      "https://query.wikidata.org/sparql"
    ],
    "endpoint_set": "Uniprot",
    "file_path": "UniProt/38_find_gene_region_in_wikidata_for_known_entry.ttl",
    "predicted_query": "# https://sparql.uniprot.org/sparql\n# Find the gene start and end positions for the human Amyloid-beta precursor protein (P05067) using UniProt and Wikidata.\nPREFIX up: <http://purl.uniprot.org/core/>\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX wd: <http://www.wikidata.org/entity/>\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\n\nSELECT ?geneStart ?geneEnd\nWHERE {\n  # Find the human protein with UniProt ID P05067\n  SERVICE <https://sparql.uniprot.org/sparql> {\n    ?protein a up:Protein .\n    ?protein up:accession \"P05067\" .\n    ?protein up:organism <http://purl.uniprot.org/taxonomy/9606> . # Human\n    ?protein rdfs:seeAlso ?wikidataLink .\n    FILTER (CONTAINS(str(?wikidataLink), \"wikidata.org\"))\n  }\n\n  # Extract the Wikidata entity ID from the link\n  BIND(IRI(REPLACE(str(?wikidataLink), \".*(Q[0-9]+).*\", \"$1\")) AS ?gene)\n\n  # Query Wikidata for the gene start and end positions\n  SERVICE <https://query.wikidata.org/sparql> {\n    OPTIONAL {\n      ?gene wdt:P637 ?geneStart .  # Gene start position\n    }\n    OPTIONAL {\n      ?gene wdt:P638 ?geneEnd .    # Gene end position\n    }\n  }\n}",
    "predicted_endpoint": "https://sparql.uniprot.org/sparql",
    "predicted_endpoint_equal_to_target_endpoint": true,
    "predicted_endpoint_in_federates_with": false,
    "predicted_endpoint_or_federated_endpoint": true,
    "run_id_langsmith": "032104e6-29f6-41ae-90c3-6107d24ea91e",
    "evaluation_timestamp": "2025-05-10T19:16:47.928809",
    "question_understanding_prompt_tokens": 265,
    "question_understanding_completion_tokens": 52,
    "question_understanding_total_tokens": 317,
    "sparql_query_construction_prompt_tokens": 2807,
    "sparql_query_construction_completion_tokens": 388,
    "sparql_query_construction_total_tokens": 3195,
    "is_valid_sparql": true,
    "sparql_syntax_error": "syntactically correct",
    "result_eval_f1_score": 0.0,
    "result_eval_precision": 0.0,
    "result_eval_recall": 0.0,
    "error_occured_at_endpoint": false,
    "predicted_query_result_is_empty": true,
    "ground_truth_query_result_is_empty": false,
    "error_occured_at_endpoint_message": "no error, but empty result"
  },
  {
    "resource": "https://sparql.uniprot.org/.well-known/sparql-examples/117_biosodafrontend_glioblastoma_orthologs_rat",
    "natural_language_question": "Which are the proteins associated with glioblastoma and the orthologs expressed in the rat brain?",
    "ground_truth_query": "PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX obo: <http://purl.obolibrary.org/obo/>\nPREFIX orth: <http://purl.org/net/orth#>\nPREFIX sio: <http://semanticscience.org/resource/>\nPREFIX taxon: <http://purl.uniprot.org/taxonomy/>\nPREFIX up: <http://purl.uniprot.org/core/>\nPREFIX lscr: <http://purl.org/lscr#>\nPREFIX genex: <http://purl.org/genex#>\nSELECT DISTINCT ?protein ?orthologous_protein ?gene ?annotation_text WHERE {\n  {\n  \tSELECT ?protein ?annotation_text WHERE {\n      ?protein a up:Protein ;\n          up:organism taxon:9606 ;\n          up:annotation ?annotation .\n      ?annotation rdfs:comment ?annotation_text .\n      ?annotation a up:Disease_Annotation .\n      FILTER CONTAINS (?annotation_text, \"glioblastoma\")\n    }\n  }\n  SERVICE <https://sparql.omabrowser.org/sparql/> {\n    SELECT ?orthologous_protein ?protein ?gene WHERE {\n    ?protein_OMA a orth:Protein .\n    ?orthologous_protein a orth:Protein .\n    ?cluster a orth:OrthologsCluster .\n    ?cluster orth:hasHomologousMember ?node1 .\n    ?cluster\n    orth:hasHomologousMember ?node2 .\n    ?node2 orth:hasHomologousMember* ?protein_OMA .\n    ?node1 orth:hasHomologousMember* ?orthologous_protein .\n    ?orthologous_protein orth:organism/obo:RO_0002162 taxon:10116 . # rattus norvegicus\n    ?orthologous_protein sio:SIO_010079 ?gene .\n    ?protein_OMA lscr:xrefUniprot ?protein .\n    FILTER(?node1 != ?node2)\n\t\t}\n\t}\n  SERVICE <https://www.bgee.org/sparql/> {\n    ?gene genex:isExpressedIn ?a .\n    ?a rdfs:label \"brain\" .\n    ?gene orth:organism ?s . \n    ?s obo:RO_0002162 taxon:10116.\n\t}\n}",
    "target_endpoint": "https://sparql.uniprot.org/sparql",
    "federates_with": [
      "https://sparql.omabrowser.org/sparql/",
      "https://www.bgee.org/sparql/"
    ],
    "endpoint_set": "Uniprot",
    "file_path": "UniProt/117_biosodafrontend_glioblastoma_orthologs_rat.ttl",
    "predicted_query": "# https://sparql.uniprot.org/sparql\n# Prefixes for commonly used namespaces\nPREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX up: <http://purl.uniprot.org/core/>\nPREFIX taxon: <http://purl.uniprot.org/taxonomy/>\nPREFIX disease: <http://purl.uniprot.org/diseases/>\n\n# Select the protein accessions and their corresponding orthologs\nSELECT DISTINCT ?protein ?proteinName ?ratOrthologName\nWHERE {\n  # Subquery to find proteins associated with glioblastoma\n  {\n    SELECT DISTINCT ?protein ?proteinName\n    WHERE {\n      # Match proteins associated with the glioblastoma disease\n      ?protein up:annotation disease:2566 . # Using the disease URI for glioblastoma\n      ?protein rdfs:label ?proteinName .\n    }\n  }\n\n  # Find orthologs of the glioblastoma-associated proteins in rat brain\n  SERVICE <https://sparql.uniprot.org/sparql> {\n    ?ratOrtholog up:sequence ?sequence .\n    ?ratOrtholog up:organism taxon:10116 . #Taxon for Rattus norvegicus (Rat)\n    ?ratOrtholog rdfs:label ?ratOrthologName .\n    ?ratOrtholog up:xref ?xref .\n    ?xref rdf:type up:Protein .\n    ?xref rdfs:seeAlso ?protein . # Link to the original protein from the outer query\n  }\n}",
    "predicted_endpoint": "https://sparql.uniprot.org/sparql",
    "predicted_endpoint_equal_to_target_endpoint": true,
    "predicted_endpoint_in_federates_with": false,
    "predicted_endpoint_or_federated_endpoint": true,
    "run_id_langsmith": "21afd374-4af7-42c4-b318-b27ab6fa67b3",
    "evaluation_timestamp": "2025-05-10T19:16:57.476210",
    "question_understanding_prompt_tokens": 259,
    "question_understanding_completion_tokens": 37,
    "question_understanding_total_tokens": 296,
    "sparql_query_construction_prompt_tokens": 2538,
    "sparql_query_construction_completion_tokens": 383,
    "sparql_query_construction_total_tokens": 2921,
    "is_valid_sparql": true,
    "sparql_syntax_error": "syntactically correct",
    "result_eval_f1_score": 0.0,
    "result_eval_precision": 0.0,
    "result_eval_recall": 0.0,
    "error_occured_at_endpoint": false,
    "predicted_query_result_is_empty": true,
    "ground_truth_query_result_is_empty": false,
    "error_occured_at_endpoint_message": "no error, but empty result"
  },
  {
    "resource": "https://sparql.uniprot.org/.well-known/sparql-examples/116_biosodafrontend_rabit_mouse_orthologs",
    "natural_language_question": "Rabbit's proteins encoded by genes that are orthologous to Mouse's HBB-Y gene and their cross reference links to Uniprot",
    "ground_truth_query": "PREFIX lscr: <http://purl.org/lscr#>\nPREFIX orth: <http://purl.org/net/orth#>\nPREFIX up: <http://purl.uniprot.org/core/>\nPREFIX obo: <http://purl.obolibrary.org/obo/>\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nSELECT DISTINCT ?PROTEIN_1 ?PROTEIN_2 ?UNIPROT_XREF_1 ?UNIPROT_XREF_2 WHERE {\n\t?taxon_1 up:commonName 'Mouse' .\n\t?taxon_2 up:commonName 'Rabbit' .\n\tSERVICE <https://sparql.omabrowser.org/sparql/> {\n\t\t?cluster a orth:OrthologsCluster .\n\t\t?cluster orth:hasHomologousMember ?node1 .\n\t\t?cluster orth:hasHomologousMember ?node2 .\n\t\t?node2 orth:hasHomologousMember* ?PROTEIN_2 .\n\t\t?node1 orth:hasHomologousMember* ?PROTEIN_1 .\n\t\t?PROTEIN_1 a orth:Protein .\n\t\t?PROTEIN_1 orth:organism/obo:RO_0002162 ?taxon_1 ;\n\t\t\trdfs:label 'HBB-Y' ;\n\t\t\tlscr:xrefUniprot ?UNIPROT_XREF_1 .\n\t\t?PROTEIN_2 a orth:Protein .\n\t\t?PROTEIN_2 orth:organism/obo:RO_0002162 ?taxon_2 .\n\t\t?PROTEIN_2 lscr:xrefUniprot ?UNIPROT_XREF_2 .\n\t\tFILTER ( ?node1 != ?node2 )\n\t}\n}",
    "target_endpoint": "https://sparql.uniprot.org/sparql",
    "federates_with": [
      "https://sparql.omabrowser.org/sparql/"
    ],
    "endpoint_set": "Uniprot",
    "file_path": "UniProt/116_biosodafrontend_rabit_mouse_orthologs.ttl",
    "predicted_query": "# https://sparql.uniprot.org/sparql\n# Federated SPARQL query to find Rabbit proteins encoded by genes orthologous to Mouse's HBB-Y gene and their UniProt cross-references.\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX up: <http://purl.uniprot.org/core/>\nPREFIX taxon: <http://purl.uniprot.org/taxonomy/>\n\nSELECT DISTINCT ?rabbitProtein ?geneName ?uniprotCrossReference\nWHERE {\n  # Find the UniProt ID for the Mouse HBB-Y gene (using a SERVICE clause to query UniProt)\n  SERVICE <https://sparql.uniprot.org/sparql> {\n    SELECT DISTINCT ?mouseGene {\n      ?mouseGene a up:Protein .\n      ?mouseGene up:organism taxon:129386 . # Mouse taxon.\n      FILTER regex(str(?mouseGene), \"HBB-Y\", \"i\") # Filter for HBB-Y gene.\n    }\n  }\n\n  # Find Rabbit proteins that are orthologous to the Mouse HBB-Y gene.\n  SERVICE <https://sparql.uniprot.org/sparql> {\n    ?rabbitProtein a up:Protein .\n    ?rabbitProtein up:organism taxon:2697570 . # Rabbit taxon.\n    ?rabbitProtein up:gene ?geneName .\n    # Assuming orthology information is available via some property, replace up:orthologousGene with the correct property if it exists.\n    # This is a placeholder, as the exact property for orthology may vary.\n    #?rabbitProtein up:orthologousGene ?mouseGene .\n    OPTIONAL { ?rabbitProtein rdfs:seeAlso ?uniprotCrossReference . } # Get cross-references to UniProt.\n  }\n}",
    "predicted_endpoint": "https://sparql.uniprot.org/sparql",
    "predicted_endpoint_equal_to_target_endpoint": true,
    "predicted_endpoint_in_federates_with": false,
    "predicted_endpoint_or_federated_endpoint": true,
    "run_id_langsmith": "9eda5246-43a2-4b1d-9dfd-e038b871ef76",
    "evaluation_timestamp": "2025-05-10T19:17:09.363393",
    "question_understanding_prompt_tokens": 267,
    "question_understanding_completion_tokens": 49,
    "question_understanding_total_tokens": 316,
    "sparql_query_construction_prompt_tokens": 3419,
    "sparql_query_construction_completion_tokens": 418,
    "sparql_query_construction_total_tokens": 3837,
    "is_valid_sparql": true,
    "sparql_syntax_error": "syntactically correct",
    "result_eval_f1_score": 0.0,
    "result_eval_precision": 0.0,
    "result_eval_recall": 0.0,
    "error_occured_at_endpoint": false,
    "predicted_query_result_is_empty": true,
    "ground_truth_query_result_is_empty": false,
    "error_occured_at_endpoint_message": "no error, but empty result"
  },
  {
    "resource": "https://sparql.uniprot.org/.well-known/sparql-examples/29",
    "natural_language_question": "Use <a href=\"http://allie.dbcls.jp/\">ALLIE</a> a service for Abbreviation / Long Form in Japanese and English to search in UniProt using Japanese.",
    "ground_truth_query": "PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX up: <http://purl.uniprot.org/core/>\n\nSELECT ?protein ?englishLabelStr\nWHERE {\n    SERVICE <https://data.allie.dbcls.jp/sparql>{\n        ?x rdfs:label \"アミロイド前駆体タンパク質\"@ja ;\n            rdfs:label ?englishLabel .\n        FILTER(lang(?englishLabel) = \"en\")\n    }\n    BIND (STR(?englishLabel) AS ?englishLabelStr)\n    ?protein a up:Protein .\n    {\n        ?protein (up:recommendedName|up:alternativeName) ?structuredName .\n    }\n    UNION\n    {\n        VALUES(?partType){(up:domain) (up:component)}\n            ?protein ?partType ?part .\n        ?part (up:recommendedName|up:alternativeName) ?structuredName .\n    }\n    ?structuredName ?anyKindOfName  ?englishLabelStr .\n    ?anyKindOfName rdfs:subPropertyOf up:structuredNameType .\n}",
    "target_endpoint": "https://sparql.uniprot.org/sparql/",
    "federates_with": [
      "https://data.allie.dbcls.jp/sparql"
    ],
    "endpoint_set": "Uniprot",
    "file_path": "UniProt/29_search_uniprot_in_japanese_with_allie.ttl",
    "predicted_query": "# https://sparql.uniprot.org/sparql\n# Assuming ALLIE service has provided an equivalent English term or UniProt ID for the Japanese term.\n# Replace \"your_term\" with the English term or UniProt ID obtained from ALLIE.\n\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX up: <http://purl.uniprot.org/core/>\n\nSELECT ?protein ?proteinName\nWHERE {\n  ?protein a up:Protein .\n  ?protein rdfs:label ?proteinName .\n  FILTER (CONTAINS(lcase(?proteinName), \"your_term\"))  # Case-insensitive search for the term.\n}",
    "predicted_endpoint": "https://sparql.uniprot.org/sparql",
    "predicted_endpoint_equal_to_target_endpoint": true,
    "predicted_endpoint_in_federates_with": false,
    "predicted_endpoint_or_federated_endpoint": true,
    "run_id_langsmith": "8ec4578d-7414-4af3-b3dc-de7f6be61fba",
    "evaluation_timestamp": "2025-05-10T19:18:31.491328",
    "question_understanding_prompt_tokens": 278,
    "question_understanding_completion_tokens": 26,
    "question_understanding_total_tokens": 304,
    "sparql_query_construction_prompt_tokens": 1892,
    "sparql_query_construction_completion_tokens": 278,
    "sparql_query_construction_total_tokens": 2170,
    "is_valid_sparql": true,
    "sparql_syntax_error": "syntactically correct",
    "result_eval_f1_score": 0.0,
    "result_eval_precision": 0.0,
    "result_eval_recall": 0.0,
    "error_occured_at_endpoint": true,
    "predicted_query_result_is_empty": true,
    "ground_truth_query_result_is_empty": true,
    "error_occured_at_endpoint_message": "The read operation timed out"
  },
  {
    "resource": "https://sparql.rhea-db.org/.well-known/sparql-examples/94_Select_all_approved_reactions_with_CHEBI_or_one_of_its_descendant_optional_UniProtKB_reviewed_EC",
    "natural_language_question": "Select all approved reactions with CHEBI:17815 (a 1,2-diacyl-sn-glycerol) or one of its descendant. Display links to UniProtKB/Swiss-Prot entries via EC numbers if the link rhea-ec exists.",
    "ground_truth_query": "PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX rh:<http://rdf.rhea-db.org/>\nPREFIX CHEBI:<http://purl.obolibrary.org/obo/CHEBI_>\nPREFIX up:<http://purl.uniprot.org/core/>\n\nSELECT\n  distinct\n    ?reaction\n    ?enzyme\n    (count(distinct ?protein) as ?proteinCount)\nWHERE {\n  ?reaction rdfs:subClassOf rh:Reaction .\n  ?reaction rh:status rh:Approved .\n  ?reaction rh:side ?reactionSide .\n\n  OPTIONAL {?reaction rh:ec ?enzyme .\n    SERVICE <https://sparql.uniprot.org/sparql> {\n      ?protein up:reviewed true .\n      ?protein up:enzyme ?enzyme.\n    }\n  } .\n  ?reactionSide rh:contains ?participant .\n  ?participant rh:compound ?compound .\n  ?compound rh:chebi ?chebi .\n  ?chebi rdfs:subClassOf* CHEBI:17815 .\n}\nGROUP BY ?reaction ?enzyme\nORDER BY ?reaction\nLIMIT 985915",
    "target_endpoint": "https://sparql.rhea-db.org/sparql",
    "federates_with": [
      "https://sparql.uniprot.org/sparql"
    ],
    "endpoint_set": "Rhea",
    "file_path": "Rhea/94_Select_all_approved_reactions_with_CHEBI_or_one_of_its_descendant_optional_UniProtKB_reviewed_EC.ttl",
    "predicted_query": "# https://sparql.rhea-db.org/sparql\n# Federated SPARQL query to find reactions involving CHEBI:17815 or its descendants and link to UniProtKB/Swiss-Prot entries via EC numbers.\nPREFIX rhea: <http://rdf.rhea-db.org/>\nPREFIX chebi: <http://purl.obolibrary.org/obo/CHEBI_>\nPREFIX ec: <http://purl.uniprot.org/enzyme/>\n\nSELECT DISTINCT ?reaction ?ecNumber ?uniprotEntry\nWHERE {\n  # Find reactions that involve CHEBI:17815 or its descendants.\n  {\n    SELECT DISTINCT ?reaction\n    WHERE {\n      VALUES ?chebiEntity { chebi:17815 } # The CHEBI entity of interest.\n      ?chebiEntity rdfs:subClassOf* ?descendant . # Find all descendants of the chebi entity\n      ?reaction rhea: Rhea-has_participant ?descendant . # Find reactions that have the chebi entity or its descendants as participants.\n      ?reaction rhea: Rhea-status rhea:approved . # Filter for approved reactions.\n    }\n  }\n\n  # Optional: Link to UniProtKB/Swiss-Prot entries via EC numbers if the rhea-ec link exists.\n  OPTIONAL {\n    ?reaction rhea: Rhea-ec ?ecNumber . # Get the EC number associated with the reaction.\n    SERVICE <https://sparql.uniprot.org/sparql> {\n      ?uniprotEntry <http://purl.uniprot.org/core/enzyme> ?ecNumber . # Find UniProt entries associated with the EC number.\n    }\n  }\n}",
    "predicted_endpoint": "https://sparql.rhea-db.org/sparql",
    "predicted_endpoint_equal_to_target_endpoint": true,
    "predicted_endpoint_in_federates_with": false,
    "predicted_endpoint_or_federated_endpoint": true,
    "run_id_langsmith": "d22c9efe-2acd-4eb8-9733-c6569f8e1645",
    "evaluation_timestamp": "2025-05-10T19:28:46.064837",
    "question_understanding_prompt_tokens": 296,
    "question_understanding_completion_tokens": 88,
    "question_understanding_total_tokens": 384,
    "sparql_query_construction_prompt_tokens": 2091,
    "sparql_query_construction_completion_tokens": 383,
    "sparql_query_construction_total_tokens": 2474,
    "is_valid_sparql": false,
    "sparql_syntax_error": "Line 14, column 20: Unresolved prefixed name: rdfs:subClassOf",
    "result_eval_f1_score": 0.0,
    "result_eval_precision": 0.0,
    "result_eval_recall": 0.0,
    "error_occured_at_endpoint": false,
    "predicted_query_result_is_empty": true,
    "ground_truth_query_result_is_empty": false,
    "error_occured_at_endpoint_message": "syntactically not correct"
  },
  {
    "resource": "https://sparql.rhea-db.org/.well-known/sparql-examples/11",
    "natural_language_question": "Distribution of reactions according to the first class of the enzyme classification (federated query)",
    "ground_truth_query": "PREFIX ec: <http://purl.uniprot.org/enzyme/>\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX rh: <http://rdf.rhea-db.org/>\nPREFIX skos: <http://www.w3.org/2004/02/skos/core#>\n\n# Query 11\n# Retrieve the count of reactions mapped to each level (main class) of the enzyme classification\n#\n# This query mimics the Filter section of the Rhea website (Browse all reactions)\n# https://www.rhea-db.org/rhea?query=\nSELECT ?ecClass (STR(?ecName) AS ?ecClassName) (COUNT(?rhea) AS ?rheaCount)\nWHERE {\n  SERVICE <https://sparql.uniprot.org/sparql> {\n    VALUES (?ecClass) { (ec:1.-.-.-)(ec:2.-.-.-)(ec:3.-.-.-)(ec:4.-.-.-)(ec:5.-.-.-) (ec:6.-.-.-) (ec:7.-.-.-)}\n    ?ecNumber rdfs:subClassOf ?ecClass .\n    ?ecClass skos:prefLabel ?ecName .\n  }\n  ?rhea rdfs:subClassOf rh:Reaction .\n  ?rhea rh:ec ?ecNumber .\n} GROUP BY ?ecClass ?ecName",
    "target_endpoint": "https://sparql.rhea-db.org/sparql",
    "federates_with": [
      "https://sparql.uniprot.org/sparql"
    ],
    "endpoint_set": "Rhea",
    "file_path": "Rhea/11.ttl",
    "predicted_query": "# https://sparql.rhea-db.org/sparql\n# Federated query to retrieve the distribution of reactions according to the first class of the enzyme classification.\nPREFIX rhea: <http://rdf.rhea-db.org/>\nPREFIX chebi: <http://purl.obolibrary.org/obo/CHEBI_>\nPREFIX ec: <http://purl.obolibrary.org/obo/ECO_>\nPREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\n\nSELECT ?firstEnzymeClass (COUNT(DISTINCT ?reaction) AS ?reactionCount)\nWHERE {\n  # Query Rhea for reactions and their associated EC numbers.\n  SERVICE <https://sparql.rhea-db.org/sparql> {\n    ?reaction a rhea:Reaction .\n    ?reaction rhea:ec ?ecNumber .\n    BIND(STRBEFORE(?ecNumber, \".\") AS ?firstEnzymeClass) # Extract the first class from the EC number.\n  }\n}\nGROUP BY ?firstEnzymeClass\nORDER BY DESC(?reactionCount)",
    "predicted_endpoint": "https://sparql.rhea-db.org/sparql",
    "predicted_endpoint_equal_to_target_endpoint": true,
    "predicted_endpoint_in_federates_with": false,
    "predicted_endpoint_or_federated_endpoint": true,
    "run_id_langsmith": "a7f72a47-51a3-4ad4-b63c-17901418130e",
    "evaluation_timestamp": "2025-05-10T19:28:51.492136",
    "question_understanding_prompt_tokens": 257,
    "question_understanding_completion_tokens": 24,
    "question_understanding_total_tokens": 281,
    "sparql_query_construction_prompt_tokens": 1540,
    "sparql_query_construction_completion_tokens": 281,
    "sparql_query_construction_total_tokens": 1821,
    "is_valid_sparql": true,
    "sparql_syntax_error": "syntactically correct",
    "result_eval_f1_score": 0.0,
    "result_eval_precision": 0.0,
    "result_eval_recall": 0.0,
    "error_occured_at_endpoint": false,
    "predicted_query_result_is_empty": true,
    "ground_truth_query_result_is_empty": false,
    "error_occured_at_endpoint_message": "no error, but empty result"
  },
  {
    "resource": "https://sparql.rhea-db.org/.well-known/sparql-examples/109_Distribution_of_reactions_according_to_the_first_level_of_enzyme_classification",
    "natural_language_question": "Distribution of reactions according to the first level of enzyme classification",
    "ground_truth_query": "\nPREFIX rh:<http://rdf.rhea-db.org/>\nPREFIX ec:<http://purl.uniprot.org/enzyme/>\nPREFIX rdfs:<http://www.w3.org/2000/01/rdf-schema#>\nPREFIX skos:<http://www.w3.org/2004/02/skos/core#>\n\nSELECT\n  ?ecClass\n  (str(?ecName) as ?ecClassName)\n  (count(?reaction) as ?reactionCount)\nWHERE\n{\n  SERVICE <http://sparql.uniprot.org/sparql> {\n    VALUES (?ecClass) { (ec:1.-.-.-)(ec:2.-.-.-)(ec:3.-.-.-)(ec:4.-.-.-)(ec:5.-.-.-) (ec:6.-.-.-) (ec:7.-.-.-) }\n    ?ecNumber rdfs:subClassOf ?ecClass .\n    ?ecClass skos:prefLabel ?ecName .\n  }\n  ?reaction rdfs:subClassOf rh:Reaction .\n  ?reaction rh:ec ?ecNumber .\n}\nGROUP BY ?ecClass ?ecName\n",
    "target_endpoint": "https://sparql.rhea-db.org/sparql",
    "federates_with": [
      "http://sparql.uniprot.org/sparql"
    ],
    "endpoint_set": "Rhea",
    "file_path": "Rhea/109_Distribution_of_reactions_according_to_the_first_level_of_enzyme_classification.ttl",
    "predicted_query": "# https://sparql.rhea-db.org/sparql\n# Federated query to retrieve the distribution of reactions according to the first level of enzyme classification.\nPREFIX rhea: <http://rdf.rhea-db.org/>\nPREFIX ec: <http://purl.uniprot.org/enzyme/>\nPREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\n\nSELECT ?firstLevelEC (COUNT(DISTINCT ?reaction) AS ?reactionCount)\nWHERE {\n  # Query Rhea for reactions and their associated EC numbers.\n  SERVICE <https://sparql.rhea-db.org/sparql> {\n    ?reaction rdf:type rhea:Reaction .\n    ?reaction rhea:ec ?ecNumber .\n  }\n  \n  # Extract the first level of the EC number.\n  BIND(SUBSTR(STR(?ecNumber), 1, 1) AS ?firstLevelEC)\n}\nGROUP BY ?firstLevelEC\nORDER BY ?firstLevelEC",
    "predicted_endpoint": "https://sparql.rhea-db.org/sparql",
    "predicted_endpoint_equal_to_target_endpoint": true,
    "predicted_endpoint_in_federates_with": false,
    "predicted_endpoint_or_federated_endpoint": true,
    "run_id_langsmith": "5a7af93d-06ea-489f-afcf-8b0ea141b3a0",
    "evaluation_timestamp": "2025-05-10T19:28:58.968504",
    "question_understanding_prompt_tokens": 250,
    "question_understanding_completion_tokens": 26,
    "question_understanding_total_tokens": 276,
    "sparql_query_construction_prompt_tokens": 1948,
    "sparql_query_construction_completion_tokens": 267,
    "sparql_query_construction_total_tokens": 2215,
    "is_valid_sparql": true,
    "sparql_syntax_error": "syntactically correct",
    "result_eval_f1_score": 0.0,
    "result_eval_precision": 0.0,
    "result_eval_recall": 0.0,
    "error_occured_at_endpoint": false,
    "predicted_query_result_is_empty": true,
    "ground_truth_query_result_is_empty": false,
    "error_occured_at_endpoint_message": "no error, but empty result"
  },
  {
    "resource": "https://sparql.rhea-db.org/.well-known/sparql-examples/12",
    "natural_language_question": "Select all Rhea reactions linked to protein sequences (enzymes and transporters) in UniProtKB",
    "ground_truth_query": "PREFIX rh: <http://rdf.rhea-db.org/>\nPREFIX up: <http://purl.uniprot.org/core/>\n\n# Query 12\n# Select all Rhea reactions used to annotate enzyme sequences in UniProtKB\n# return the number of UniProtKB entries\n# Federated query using a service to UniProt SPARQL endpoint\n#\n# This query corresponds to the Rhea website query:\n# https://www.rhea-db.org/rhea?query=uniprot:*\n#\nSELECT ?uniprotCount ?rhea ?accession ?equation \nWHERE {\n  SERVICE <https://sparql.uniprot.org/sparql> { \n  \tSELECT ?rhea (count(?uniprot) as ?uniprotCount) {\n      ?uniprot up:annotation/up:catalyticActivity/up:catalyzedReaction ?rhea . \n  \t}\n  \tGROUP BY ?rhea\n  }\n  ?rhea rh:accession ?accession .\n  ?rhea rh:equation ?equation .\n}",
    "target_endpoint": "https://sparql.rhea-db.org/sparql",
    "federates_with": [
      "https://sparql.uniprot.org/sparql"
    ],
    "endpoint_set": "Rhea",
    "file_path": "Rhea/12.ttl",
    "predicted_query": "# https://sparql.rhea-db.org/sparql\n# Federated query to retrieve Rhea reactions linked to protein sequences in UniProtKB\n\nPREFIX rhea: <http://rdf.rhea-db.org/>\nPREFIX uniprot: <http://purl.uniprot.org/core/>\n\nSELECT DISTINCT ?reaction ?reactionLabel ?protein ?proteinLabel\nWHERE {\n  # Query Rhea for reactions\n  SERVICE <https://sparql.rhea-db.org/sparql> {\n    ?reaction a rhea:Reaction .\n    ?reaction rdfs:label ?reactionLabel .\n  }\n  \n  # Query UniProt for protein sequences (enzymes and transporters) linked to Rhea reactions\n  SERVICE <https://sparql.uniprot.org/sparql> {\n    ?protein a uniprot:Protein .\n    ?protein rdfs:label ?proteinLabel .\n    ?protein uniprot:encodedBy ?gene . # Assuming proteins are encoded by genes\n    ?gene rdfs:seeAlso ?rheaReaction . # Link to Rhea reaction via rdfs:seeAlso\n    FILTER (STRSTARTS(STR(?rheaReaction), \"http://rdf.rhea-db.org/\")) # Filter to ensure it's a Rhea URI\n    BIND(IRI(REPLACE(STR(?rheaReaction), \"http://rdf.rhea-db.org/\", \"http://rdf.rhea-db.org/\")) AS ?reaction) # Create a URI for the Rhea reaction\n  }\n}",
    "predicted_endpoint": "https://sparql.rhea-db.org/sparql",
    "predicted_endpoint_equal_to_target_endpoint": true,
    "predicted_endpoint_in_federates_with": false,
    "predicted_endpoint_or_federated_endpoint": true,
    "run_id_langsmith": "e76380be-f844-4552-af17-c72f4718243a",
    "evaluation_timestamp": "2025-05-10T19:29:08.901355",
    "question_understanding_prompt_tokens": 255,
    "question_understanding_completion_tokens": 30,
    "question_understanding_total_tokens": 285,
    "sparql_query_construction_prompt_tokens": 2003,
    "sparql_query_construction_completion_tokens": 337,
    "sparql_query_construction_total_tokens": 2340,
    "is_valid_sparql": false,
    "sparql_syntax_error": "Line 12, column 15: Unresolved prefixed name: rdfs:label",
    "result_eval_f1_score": 0.0,
    "result_eval_precision": 0.0,
    "result_eval_recall": 0.0,
    "error_occured_at_endpoint": false,
    "predicted_query_result_is_empty": true,
    "ground_truth_query_result_is_empty": false,
    "error_occured_at_endpoint_message": "syntactically not correct"
  },
  {
    "resource": "https://sparql.rhea-db.org/.well-known/sparql-examples/112_Total_number_of_reaction_ec_protein_links",
    "natural_language_question": "Total number of <reaction> <ec> <protein> links",
    "ground_truth_query": "PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX rh:<http://rdf.rhea-db.org/>\nPREFIX ec:<http://purl.uniprot.org/enzyme/>\nPREFIX up:<http://purl.uniprot.org/core/>\n\nSELECT\n  (count(?reaction) as ?reactionEcProteinLinkCount)\nWHERE {\n  ?reaction rdfs:subClassOf rh:Reaction .\n  ?reaction rh:ec ?enzyme\n  SERVICE <http://sparql.uniprot.org/sparql> {\n    ?protein up:reviewed true .\n    ?protein up:enzyme ?enzyme.\n  }\n}",
    "target_endpoint": "https://sparql.rhea-db.org/sparql",
    "federates_with": [
      "http://sparql.uniprot.org/sparql"
    ],
    "endpoint_set": "Rhea",
    "file_path": "Rhea/112_Total_number_of_reaction_ec_protein_links.ttl",
    "predicted_query": "# https://sparql.rhea-db.org/sparql\n# Federated query to count the number of reactions, proteins, and EC number links.\nPREFIX rhea: <http://rdf.rhea-db.org/>\nPREFIX uniprot: <http://purl.uniprot.org/core/>\n\nSELECT (COUNT(DISTINCT ?reaction) AS ?reactionCount) (COUNT(DISTINCT ?protein) AS ?proteinCount) (COUNT(DISTINCT ?ec) AS ?ecCount)\nWHERE {\n  # Find reactions in RheaDB\n  ?reaction a rhea:Reaction .\n\n  # Find proteins associated with reactions via UniProt\n  SERVICE <https://sparql.uniprot.org/sparql> {\n    ?protein uniprot:catalyticActivity ?reactionURI . # Assuming catalyticActivity links to Rhea reactions\n    FILTER (STRSTARTS(str(?reactionURI), \"http://rdf.rhea-db.org/\")) # Filter to ensure it's a Rhea URI\n  }\n\n  # Find EC numbers associated with proteins in UniProt\n  SERVICE <https://sparql.uniprot.org/sparql> {\n    ?protein uniprot:ecNumber ?ec .\n  }\n}",
    "predicted_endpoint": "https://sparql.rhea-db.org/sparql",
    "predicted_endpoint_equal_to_target_endpoint": true,
    "predicted_endpoint_in_federates_with": false,
    "predicted_endpoint_or_federated_endpoint": true,
    "run_id_langsmith": "929b0d45-d9d6-4cb6-a457-5765f1aa6c4f",
    "evaluation_timestamp": "2025-05-10T19:29:20.497059",
    "question_understanding_prompt_tokens": 253,
    "question_understanding_completion_tokens": 21,
    "question_understanding_total_tokens": 274,
    "sparql_query_construction_prompt_tokens": 2162,
    "sparql_query_construction_completion_tokens": 271,
    "sparql_query_construction_total_tokens": 2433,
    "is_valid_sparql": true,
    "sparql_syntax_error": "syntactically correct",
    "result_eval_f1_score": 0.0,
    "result_eval_precision": 0.0,
    "result_eval_recall": 0.0,
    "error_occured_at_endpoint": false,
    "predicted_query_result_is_empty": false,
    "ground_truth_query_result_is_empty": false,
    "error_occured_at_endpoint_message": "no error"
  },
  {
    "resource": "https://sparql.rhea-db.org/.well-known/sparql-examples/19_draft_human_metabolome",
    "natural_language_question": "Generate a draft human metabolome",
    "ground_truth_query": "PREFIX chebislash: <http://purl.obolibrary.org/obo/chebi/>\nPREFIX rh: <http://rdf.rhea-db.org/>\nPREFIX taxon: <http://purl.uniprot.org/taxonomy/>\nPREFIX up: <http://purl.uniprot.org/core/>\n\nSELECT\n  ?uniprot ?mnemonic ?rhea ?chebi ?smiles ?inchiKey\nWHERE\n{\n  ?rhea rh:side/rh:contains/rh:compound ?compound .\n  ?compound (rh:chebi|(rh:reactivePart/rh:chebi)|(rh:underlyingChebi/rh:chebi)) ?chebi .\n  ?chebi chebislash:smiles ?smiles ;\n          chebislash:inchikey ?inchiKey .\n  SERVICE <https://sparql.uniprot.org/sparql> {\n     ?uniprot up:annotation/up:catalyticActivity/up:catalyzedReaction ?rhea ;\n                                             up:organism taxon:9606 ;\n                                             up:mnemonic ?mnemonic .\n\n   }\n}",
    "target_endpoint": "https://sparql.rhea-db.org/sparql/",
    "federates_with": [
      "https://sparql.uniprot.org/sparql"
    ],
    "endpoint_set": "Rhea",
    "file_path": "Rhea/19_draft_human_metabolome.ttl",
    "predicted_query": "# https://sparql.uniprot.org/sparql\n# Draft query to retrieve information about the human metabolome.\n# This query federates with multiple endpoints to gather comprehensive data.\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX up: <http://purl.uniprot.org/core/>\nPREFIX taxon: <http://purl.uniprot.org/taxonomy/>\n\nSELECT DISTINCT ?metabolome ?metabolomeName\nWHERE {\n  # Query UniProt for human proteins and their associated metabolic pathways/functions.\n  SERVICE <https://sparql.uniprot.org/sparql> {\n    # Filter for Homo sapiens (human)\n    VALUES ?taxon { taxon:9606 }\n    ?protein up:organism ?taxon .\n    ?protein rdfs:comment ?comment .\n    FILTER (CONTAINS(LCASE(?comment), \"metabolism\"))\n\n    # Optional: Retrieve associated pathways or functions (if available)\n    OPTIONAL { ?protein up:annotation ?annotation . }\n  }\n\n  # Query Rhea for reactions involving human proteins (enzymes) and metabolites.\n  SERVICE <https://sparql.rhea-db.org/sparql> {\n    ?reaction rdfs:label ?reactionLabel .\n    # Assuming some link between Rhea and UniProt, e.g., via enzyme annotation\n    # This part needs refinement based on actual link predicate if available\n    # Example: ?reaction rhea:enzyme ?protein .  # Hypothetical link\n  }\n\n  # Query SwissLipids for lipid-related metabolites in humans (if applicable).\n  SERVICE <https://sparql.swisslipids.org/sparql/> {\n   #  ?lipid sl:species \"Homo sapiens\" . # Example: Needs adjustment based on SwissLipids schema\n   #  ?lipid rdfs:label ?lipidName .\n  }\n\n  # Bind the results to variables\n  BIND(\"Human Metabolome\" AS ?metabolome) # Simplified representation\n  BIND(\"Combined Data\" AS ?metabolomeName) # Simplified representation\n}",
    "predicted_endpoint": "https://sparql.uniprot.org/sparql",
    "predicted_endpoint_equal_to_target_endpoint": false,
    "predicted_endpoint_in_federates_with": true,
    "predicted_endpoint_or_federated_endpoint": true,
    "run_id_langsmith": "09d960e2-b9a8-4588-9429-981b747349f0",
    "evaluation_timestamp": "2025-05-10T19:29:33.375667",
    "question_understanding_prompt_tokens": 242,
    "question_understanding_completion_tokens": 22,
    "question_understanding_total_tokens": 264,
    "sparql_query_construction_prompt_tokens": 1443,
    "sparql_query_construction_completion_tokens": 473,
    "sparql_query_construction_total_tokens": 1916,
    "is_valid_sparql": true,
    "sparql_syntax_error": "syntactically correct",
    "result_eval_f1_score": 0.0,
    "result_eval_precision": 0.0,
    "result_eval_recall": 0.0,
    "error_occured_at_endpoint": false,
    "predicted_query_result_is_empty": true,
    "ground_truth_query_result_is_empty": false,
    "error_occured_at_endpoint_message": "no error, but empty result"
  },
  {
    "resource": "https://sparql.rhea-db.org/.well-known/sparql-examples/20_search_chemical_names_in_japanese",
    "natural_language_question": "Search for Chemical names starting in Japanese, translated to english using allie",
    "ground_truth_query": "PREFIX oboInOwl: <http://www.geneontology.org/formats/oboInOwl#>\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\n\nSELECT\n*\nWHERE {\nSERVICE <https://data.allie.dbcls.jp/sparql>{\n        ?x rdfs:label \"1,2,4-トリクロロベンゼン\"@ja ;\n            rdfs:label ?englishLabel .\n        FILTER(lang(?englishLabel) = \"en\")\n    }\n  BIND(STR(?englishLabel) AS ?englishLabelStr)\n  ?chebi rdfs:label|oboInOwl:hasSynonym ?englishLabelStr .\n}",
    "target_endpoint": "https://sparql.rhea-db.org/sparql/",
    "federates_with": [
      "https://data.allie.dbcls.jp/sparql"
    ],
    "endpoint_set": "Rhea",
    "file_path": "Rhea/20_search_chemical_names_in_japanese.ttl",
    "predicted_query": "# https://sparql.uniprot.org/sparql\n# Federated query to search for chemical names starting with \"Japanese\" and translate them to English using Allie.\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX skos: <http://www.w3.org/2004/02/skos/core#>\n\nSELECT DISTINCT ?chebiNameEn\nWHERE {\n  # Query Rhea for chemical entities with names starting with \"Japanese\"\n  SERVICE <https://sparql.rhea-db.org/sparql> {\n    ?chebi a skos:Concept .\n    ?chebi rdfs:label ?chebiName .\n    FILTER (STRSTARTS(?chebiName, \"Japanese\"))\n  }\n  \n  #Potentially use Allie to translate the chemical name to English.\n  #However, direct integration with Allie is not available in SPARQL.\n  #Therefore, this part would require external processing.\n  \n  BIND (STR(?chebiName) AS ?chebiNameEn) # Placeholder: Replace with actual translation if possible.\n  \n  # Filter to ensure that the translated name is in English (if translation was possible)\n  #FILTER (LANG(?chebiNameEn) = \"en\") #This filter is not applicable as we are not using a translation service in the query.\n}",
    "predicted_endpoint": "https://sparql.uniprot.org/sparql",
    "predicted_endpoint_equal_to_target_endpoint": false,
    "predicted_endpoint_in_federates_with": false,
    "predicted_endpoint_or_federated_endpoint": false,
    "run_id_langsmith": "49477db5-8a1a-4759-8d54-9d31efd49efd",
    "evaluation_timestamp": "2025-05-10T19:30:18.834427",
    "question_understanding_prompt_tokens": 251,
    "question_understanding_completion_tokens": 27,
    "question_understanding_total_tokens": 278,
    "sparql_query_construction_prompt_tokens": 1472,
    "sparql_query_construction_completion_tokens": 316,
    "sparql_query_construction_total_tokens": 1788,
    "is_valid_sparql": true,
    "sparql_syntax_error": "syntactically correct",
    "result_eval_f1_score": 0.0,
    "result_eval_precision": 0.0,
    "result_eval_recall": 0.0,
    "error_occured_at_endpoint": false,
    "predicted_query_result_is_empty": true,
    "ground_truth_query_result_is_empty": false,
    "error_occured_at_endpoint_message": "no error, but empty result"
  },
  {
    "resource": "https://sparql.rhea-db.org/.well-known/sparql-examples/117_Retrieve_parent_reactions_and_their_catalyzing_enzymes_for_a_metabolite_that_is_not_directly_involved_in_a_reaction",
    "natural_language_question": "Retrieve parent reactions (and their catalyzing enzymes) for a metabolite that is not directly involved in a reaction (ex: CHEBI:83137).",
    "ground_truth_query": "PREFIX CHEBI: <http://purl.obolibrary.org/obo/CHEBI_>\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX rh:<http://rdf.rhea-db.org/>\nPREFIX ec:<http://purl.uniprot.org/enzyme/>\nPREFIX up:<http://purl.uniprot.org/core/>\nPREFIX taxon:<http://purl.uniprot.org/taxonomy/>\nPREFIX keywords:<http://purl.uniprot.org/keywords/>\n\nSELECT\n  ?chebi\n  ?ecNumber\n  (count(?protein) as ?proteinCount)\n  ?reaction\n  ?equation\nWHERE {\n  ?reaction rdfs:subClassOf rh:Reaction .\n  ?reaction rh:status rh:Approved .\n  ?reaction rh:equation ?equation .\n  ?reaction rh:ec ?ecNumber .\n  ?reaction rh:side ?reactionSide .\n  ?reactionSide rh:contains ?participant .\n  ?participant rh:compound ?compound .\n  ?compound rh:chebi ?chebi .\n  CHEBI:83137 rdfs:subClassOf+ ?chebi.\n\n  SERVICE <https://sparql.uniprot.org/sparql> {\n  ?protein a up:Protein .\n  ?protein up:reviewed true .\n    {?protein up:enzyme ?ecNumber}\n  UNION\n    {?protein up:domain/up:enzyme ?ecNumber}\n  UNION\n    {?protein up:component/up:enzyme ?ecNumber} .\n  }\n} \nGROUP BY ?chebi ?ecNumber ?reaction ?equation",
    "target_endpoint": "https://sparql.rhea-db.org/sparql",
    "federates_with": [
      "https://sparql.uniprot.org/sparql"
    ],
    "endpoint_set": "Rhea",
    "file_path": "Rhea/117_Retrieve_parent_reactions_and_their_catalyzing_enzymes_for_a_metabolite_that_is_not_directly_involved_in_a_reaction.ttl",
    "predicted_query": "# https://sparql.rhea-db.org/sparql\n# Find reactions where a given metabolite (CHEBI:83137) is NOT a direct participant, but which are catalyzed by enzymes that act on reactions where the metabolite IS a direct participant.\nPREFIX rhea: <http://rdf.rhea-db.org/>\nPREFIX chebi: <http://purl.obolibrary.org/obo/CHEBI_>\nPREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>\nPREFIX biocyc: <http:// BioCyc.org/>\n\nSELECT DISTINCT ?parentReaction ?enzyme\nWHERE {\n  # Find reactions where CHEBI:83137 is directly involved.\n  {\n    SELECT DISTINCT ?reaction WHERE {\n      ?reaction rhea: Rhea_has_participant chebi:83137 .\n    }\n  }\n\n  # Find enzymes that catalyze these reactions.\n  ?reaction rhea: Rhea_has_proteindomain ?enzyme .\n\n  # Find other reactions (parentReaction) catalyzed by the same enzymes.\n  ?parentReaction rhea: Rhea_has_proteindomain ?enzyme .\n\n  # Ensure that CHEBI:83137 is NOT directly involved in these other reactions.\n  FILTER NOT EXISTS {\n    ?parentReaction rhea: Rhea_has_participant chebi:83137 .\n  }\n}",
    "predicted_endpoint": "https://sparql.rhea-db.org/sparql",
    "predicted_endpoint_equal_to_target_endpoint": true,
    "predicted_endpoint_in_federates_with": false,
    "predicted_endpoint_or_federated_endpoint": true,
    "run_id_langsmith": "7ed13f46-1b18-4874-a982-0f190216d9ae",
    "evaluation_timestamp": "2025-05-10T19:30:33.072498",
    "question_understanding_prompt_tokens": 272,
    "question_understanding_completion_tokens": 36,
    "question_understanding_total_tokens": 308,
    "sparql_query_construction_prompt_tokens": 2478,
    "sparql_query_construction_completion_tokens": 330,
    "sparql_query_construction_total_tokens": 2808,
    "is_valid_sparql": false,
    "sparql_syntax_error": "Encountered \" \"<\" \"< \"\" at line 6, column 16.\nWas expecting:\n     ...",
    "result_eval_f1_score": 0.0,
    "result_eval_precision": 0.0,
    "result_eval_recall": 0.0,
    "error_occured_at_endpoint": false,
    "predicted_query_result_is_empty": true,
    "ground_truth_query_result_is_empty": false,
    "error_occured_at_endpoint_message": "syntactically not correct"
  },
  {
    "resource": "https://sparql.rhea-db.org/.well-known/sparql-examples/18",
    "natural_language_question": "Use <a href=\"https://idsm.elixir-czech.cz/sparql\">IDSM Sachem</a> to find ChEBIs with a a <a href=\"https://www.ebi.ac.uk/chebi/searchId.do?chebiId=CHEBI:35516\">Cholestane</a> skeleton (in SMILES). Then match returned ChEBIs to Rhea undirected reactions.",
    "ground_truth_query": "PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX rh: <http://rdf.rhea-db.org/>\nPREFIX sachem: <http://bioinfo.uochb.cas.cz/rdf/v1.0/sachem#>\n\n\nSELECT \n  ?rhea \n  ?chebi\nWHERE {\n  SERVICE <https://idsm.elixir-czech.cz/sparql/endpoint/chebi> {\n    ?chebi sachem:substructureSearch [\n        sachem:query \"[C@]12(CCC3CCCC[C@]3(C)[C@@]1([H])CC[C@]1(C)[C@@]([H])([C@@](C)([H])CCCC(C)C)CC[C@@]21[H])[H]\" ].\n  }\n  ?rhea rh:side/rh:contains/rh:compound/rdfs:subClassOf ?chebi .\n}",
    "target_endpoint": "https://sparql.rhea-db.org/sparql",
    "federates_with": [
      "https://idsm.elixir-czech.cz/sparql/endpoint/chebi"
    ],
    "endpoint_set": "Rhea",
    "file_path": "Rhea/18.ttl",
    "predicted_query": "# https://sparql.rhea-db.org/sparql\n# Federated SPARQL query to find ChEBIs with a Cholestane skeleton and match them to Rhea undirected reactions.\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX chebi: <http://purl.obolibrary.org/obo/CHEBI_>\nPREFIX rh: <http://rdf.rhea-db.org/>\n\nSELECT DISTINCT ?chebiEntity ?reaction\nWHERE {\n  # Find ChEBI entities with a Cholestane skeleton using the IDSM Sachem service.\n  SERVICE <https://idsm.elixir-czech.cz/sparql> {\n    PREFIX ids: <http://idsm.elixir-czech.cz/vocab/>\n    PREFIX sach: <http://sachem.mml.unc.edu/>\n    \n    SELECT DISTINCT ?chebiEntity WHERE {\n      ?structure a ids:Structure .\n      ?structure sach:smiles ?smiles .\n      ?structure ids:external_reference ?chebiEntity .\n      FILTER (CONTAINS(?smiles, \"Cholestane\")) # Filter for Cholestane skeleton in SMILES\n    }\n  }\n\n  # Match the found ChEBI entities to Rhea undirected reactions.\n  SERVICE <https://sparql.rhea-db.org/sparql> {\n    ?reaction rh: RheaDatabaseID ?rheaId .\n    ?reaction rh:undirected true . # Filter for undirected reactions\n    {\n      ?reaction rh:has_reactant ?chebiEntity .\n    }\n    UNION\n    {\n      ?reaction rh:has_substrate ?chebiEntity .\n    }\n    UNION\n    {\n      ?reaction rh:has_product ?chebiEntity .\n    }\n    UNION\n    {\n      ?reaction rh:has_modifier ?chebiEntity .\n    }\n  }\n}",
    "predicted_endpoint": "https://sparql.rhea-db.org/sparql",
    "predicted_endpoint_equal_to_target_endpoint": true,
    "predicted_endpoint_in_federates_with": false,
    "predicted_endpoint_or_federated_endpoint": true,
    "run_id_langsmith": "a24cb3ee-8bb7-4456-880a-a5c38a7b267e",
    "evaluation_timestamp": "2025-05-10T19:30:47.720775",
    "question_understanding_prompt_tokens": 334,
    "question_understanding_completion_tokens": 52,
    "question_understanding_total_tokens": 386,
    "sparql_query_construction_prompt_tokens": 2561,
    "sparql_query_construction_completion_tokens": 440,
    "sparql_query_construction_total_tokens": 3001,
    "is_valid_sparql": false,
    "sparql_syntax_error": "Encountered \" \"prefix\" \"PREFIX \"\" at line 11, column 5.\nWas expecting one of:\n     ...\n     ...\n     ...\n     ...\n     ...\n     ...\n    \"select\" ...\n    \"values\" ...\n    \"graph\" ...\n    \"optional\" ...\n    \"minus\" ...\n    \"bind\" ...\n    \"service\" ...\n    \"filter\" ...\n    \"true\" ...\n    \"false\" ...\n     ...\n     ...\n     ...\n     ...\n     ...\n     ...\n     ...\n     ...\n     ...\n     ...\n     ...\n     ...\n     ...\n    \"(\" ...\n     ...\n    \"{\" ...\n    \"}\" ...\n    \"[\" ...\n     ...\n    \"<<(\" ...\n    \"<<\" ...",
    "result_eval_f1_score": 0.0,
    "result_eval_precision": 0.0,
    "result_eval_recall": 0.0,
    "error_occured_at_endpoint": false,
    "predicted_query_result_is_empty": true,
    "ground_truth_query_result_is_empty": false,
    "error_occured_at_endpoint_message": "syntactically not correct"
  },
  {
    "resource": "https://sparql.rhea-db.org/.well-known/sparql-examples/115_Retrieve_the_set_of_metabolites_involved_in_reactions_catalyzed_by_human_genes_HUMAN_reference_proteome",
    "natural_language_question": "Retrieve the set of metabolites involved in reactions catalyzed by human genes (HUMAN reference proteome)",
    "ground_truth_query": "\nPREFIX rh:<http://rdf.rhea-db.org/>\nPREFIX taxon:<http://purl.uniprot.org/taxonomy/>\nPREFIX ec:<http://purl.uniprot.org/enzyme/>\nPREFIX rdfs:<http://www.w3.org/2000/01/rdf-schema#>\nPREFIX up:<http://purl.uniprot.org/core/>\nPREFIX keywords:<http://purl.uniprot.org/keywords/>\n\nSELECT\n  ?chebi\n  ?reaction\n  ?ecNumber\n  ?protein\n  ?ensemblTranscript\n  ?ensemblGene\nWHERE {\n  SERVICE <https://sparql.uniprot.org/sparql> {\n    ?protein a up:Protein .\n    ?protein up:reviewed true .\n    ?protein up:organism taxon:9606 .\n    ?protein up:classifiedWith keywords:1185 .\n\n    ?protein rdfs:seeAlso ?ensemblTranscript .\n    ?ensemblTranscript a up:Transcript_Resource .\n    ?ensemblTranscript up:database <http://purl.uniprot.org/database/Ensembl> .\n    ?ensemblTranscript up:transcribedFrom ?ensemblGene .\n\n      {?protein up:enzyme ?ecNumber .}\n    UNION\n      {?protein up:domain/up:enzyme ?ecNumber .}\n    UNION\n      {?protein up:component/up:enzyme ?ecNumber .}\n  }\n\n  ?reaction rdfs:subClassOf rh:Reaction .\n  ?reaction rh:status rh:Approved .\n  ?reaction rh:ec ?ecNumber .\n  ?reaction rh:side ?reactionSide .\n  ?reactionSide rh:contains ?participant .\n  ?participant rh:compound ?compound .\n  ?compound rh:chebi ?chebi . # only considering small molecules participants\n}",
    "target_endpoint": "https://sparql.rhea-db.org/sparql",
    "federates_with": [
      "https://sparql.uniprot.org/sparql"
    ],
    "endpoint_set": "Rhea",
    "file_path": "Rhea/115_Retrieve_the_set_of_metabolites_involved_in_reactions_catalyzed_by_human_genes_HUMAN_reference_proteome.ttl",
    "predicted_query": "# https://sparql.rhea-db.org/sparql\n# Federated query to retrieve metabolites involved in reactions catalyzed by human genes.\nPREFIX rhea: <http://rdf.rhea-db.org/>\nPREFIX uniprot: <http://purl.uniprot.org/core/>\nPREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>\nPREFIX chebi: <http://purl.obolibrary.org/obo/CHEBI_>\n\nSELECT DISTINCT ?metaboliteName\nWHERE {\n  # Find human proteins (genes) from UniProt\n  SERVICE <https://sparql.uniprot.org/sparql> {\n    SELECT DISTINCT ?protein\n    WHERE {\n      ?protein a uniprot:Protein .\n      ?protein uniprot:organism <http://purl.uniprot.org/taxonomy/9606> . # Human\n    }\n  }\n\n  # Find Rhea reactions associated with these proteins (genes)\n  SERVICE <https://sparql.rhea-db.org/sparql> {\n    ?reaction rhea:enzyme ?protein .\n    ?reaction rhea:has_participant ?participant .\n    ?participant rdf:type chebi:CHEBI_23888 . #CHEBI_23888 is the class for chemical entities\n    ?participant rdfs:label ?metaboliteName .\n  }\n}",
    "predicted_endpoint": "https://sparql.rhea-db.org/sparql",
    "predicted_endpoint_equal_to_target_endpoint": true,
    "predicted_endpoint_in_federates_with": false,
    "predicted_endpoint_or_federated_endpoint": true,
    "run_id_langsmith": "29582924-d777-497e-b12f-f656f596a3c5",
    "evaluation_timestamp": "2025-05-10T19:30:54.722974",
    "question_understanding_prompt_tokens": 253,
    "question_understanding_completion_tokens": 26,
    "question_understanding_total_tokens": 279,
    "sparql_query_construction_prompt_tokens": 2393,
    "sparql_query_construction_completion_tokens": 325,
    "sparql_query_construction_total_tokens": 2718,
    "is_valid_sparql": false,
    "sparql_syntax_error": "Line 24, column 18: Unresolved prefixed name: rdfs:label",
    "result_eval_f1_score": 0.0,
    "result_eval_precision": 0.0,
    "result_eval_recall": 0.0,
    "error_occured_at_endpoint": false,
    "predicted_query_result_is_empty": true,
    "ground_truth_query_result_is_empty": false,
    "error_occured_at_endpoint_message": "syntactically not correct"
  }
]