
# Natural Language Question
# =======================
Select all Rhea reactions linked to protein sequences (enzymes and transporters) in UniProtKB

# Target Endpoint
# ===============
https://sparql.rhea-db.org/sparql

# Ground Truth Query
# =================
PREFIX rh: <http://rdf.rhea-db.org/>
PREFIX up: <http://purl.uniprot.org/core/>

# Query 12
# Select all Rhea reactions used to annotate enzyme sequences in UniProtKB
# return the number of UniProtKB entries
# Federated query using a service to UniProt SPARQL endpoint
#
# This query corresponds to the Rhea website query:
# https://www.rhea-db.org/rhea?query=uniprot:*
#
SELECT ?uniprotCount ?rhea ?accession ?equation 
WHERE {
  SERVICE <https://sparql.uniprot.org/sparql> { 
  	SELECT ?rhea (count(?uniprot) as ?uniprotCount) {
      ?uniprot up:annotation/up:catalyticActivity/up:catalyzedReaction ?rhea . 
  	}
  	GROUP BY ?rhea
  }
  ?rhea rh:accession ?accession .
  ?rhea rh:equation ?equation .
}

# Predicted Query
# ==============
# https://sparql.rhea-db.org/sparql
PREFIX rhea: <http://rdf.rhea-db.org/>
PREFIX uniprot: <http://purl.uniprot.org/core/>

SELECT DISTINCT ?rheaReaction
WHERE {
  # Select Rhea reactions
  ?rheaReaction a rhea:Reaction .

  # Find Rhea reactions that have participants that are enzymes (proteins)
  ?rheaReaction rhea:equation ?equation .
  ?equation rhea:side ?side .
  ?side rhea:contains ?compound .
  ?compound rhea:accession ?chebi . # Assuming enzymes are represented via ChEBI

  # Link to UniProtKB entries via a SERVICE clause
  SERVICE <https://sparql.uniprot.org/sparql> {
    # Find UniProtKB entries that are proteins and are linked to the ChEBI ID
    ?protein a uniprot:Protein ;
             uniprot:enzyme ?enzyme . # Assuming enzyme annotation links to ChEBI

    FILTER CONTAINS(str(?enzyme), str(?chebi)) # Match the ChEBI ID from Rhea with the enzyme annotation in UniProt
  }
}
