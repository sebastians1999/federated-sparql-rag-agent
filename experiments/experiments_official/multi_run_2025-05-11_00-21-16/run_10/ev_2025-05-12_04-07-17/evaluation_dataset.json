[
  {
    "resource": "https://sparql.swisslipids.org/.well-known/sparql-examples/16",
    "natural_language_question": "For a given lipid (SWISSLIPID:000399814, Ceramide), return a list of all enzymes in UniProtKB/Swiss-Prot annotated to catalyze reactions involving that lipid.\nThis query does not consider the hierarchy: it looks for reactions and enzymes only for the specified lipid.",
    "ground_truth_query": "PREFIX SWISSLIPID: <https://swisslipids.org/rdf/SLM_>\nPREFIX owl: <http://www.w3.org/2002/07/owl#>\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX rh: <http://rdf.rhea-db.org/>\nPREFIX up: <http://purl.uniprot.org/core/>\n\n# Example 16\nSELECT ?startId ?startName ?uniprot\nWHERE\n{\n  # SwissLipids query (list of) identifier(s)\n  VALUES ?startId { SWISSLIPID:000399814 }\n  # name\n  ?startId rdfs:label ?startName .\n  # ChEBI x-ref\n  ?startId owl:equivalentClass ?chebi .\n  # federated query to Rhea\n  SERVICE <https://sparql.rhea-db.org/sparql> {\n  \t?rhea rh:side/rh:contains/rh:compound/rh:chebi ?chebi .\n  }    \n  # federated query to UniProt\n  SERVICE <https://sparql.uniprot.org/sparql> {\n    ?uniprot up:reviewed true .\n    ?uniprot up:annotation/up:catalyticActivity/up:catalyzedReaction ?rhea .\n  }\n} \nORDER BY ?startId",
    "target_endpoint": "https://sparql.swisslipids.org/sparql/",
    "federates_with": [
      "https://sparql.uniprot.org/sparql",
      "https://sparql.rhea-db.org/sparql"
    ],
    "endpoint_set": "SwissLipids",
    "file_path": "SwissLipids/16.ttl",
    "predicted_query": "# https://sparql.swisslipids.org/sparql/\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>\nPREFIX sl: <http://www.swisslipids.org/rdf#>\n\nSELECT DISTINCT ?enzymeName ?enzymeUri\nWHERE {\n  # Find reactions associated with the given lipid in SwissLipids\n  SERVICE <https://sparql.swisslipids.org/sparql/> {\n    VALUES ?lipid { sl:SWISSLIPID_000399814 } # SWISSLIPID:000399814\n    ?reaction sl:substrate ?lipid .\n  }\n  \n  # Find enzymes catalyzing those reactions in Rhea\n  SERVICE <https://sparql.rhea-db.org/sparql> {\n    ?rhea_reaction rdfs:label ?reaction .\n    ?rhea_reaction rdfs:comment ?enzymeUri . # Assuming rdfs:comment holds enzyme URI\n  }\n\n  # Retrieve enzyme information from UniProt\n  SERVICE <https://sparql.uniprot.org/sparql> {\n    ?enzymeUri rdfs:label ?enzymeName .\n  }\n}",
    "predicted_endpoint": "https://sparql.swisslipids.org/sparql/",
    "predicted_endpoint_equal_to_target_endpoint": true,
    "predicted_endpoint_in_federates_with": false,
    "predicted_endpoint_or_federated_endpoint": true,
    "run_id_langsmith": "061a647f-e957-430a-a0d6-79a96d83ac87",
    "evaluation_timestamp": "2025-05-12T04:07:25.508101",
    "question_understanding_prompt_tokens": 306,
    "question_understanding_completion_tokens": 42,
    "question_understanding_total_tokens": 348,
    "sparql_query_construction_prompt_tokens": 2503,
    "sparql_query_construction_completion_tokens": 0,
    "sparql_query_construction_total_tokens": 2503,
    "is_valid_sparql": true,
    "sparql_syntax_error": "syntactically correct",
    "result_eval_f1_score": 0.0,
    "result_eval_precision": 0.0,
    "result_eval_recall": 0.0,
    "error_occured_at_endpoint": true,
    "predicted_query_result_is_empty": true,
    "ground_truth_query_result_is_empty": true,
    "error_occured_at_endpoint_message": "QueryBadFormed: A bad request has been sent to the endpoint: probably the SPARQL query is badly formed."
  },
  {
    "resource": "https://sparql.swisslipids.org/.well-known/sparql-examples/6",
    "natural_language_question": "For a given lipid (SWISSLIPID:000399814, Ceramide), return a list of all corresponding reactions (Rhea IDs and equation), as well as their enzymes as annotated in UniProtKB/Swiss-Prot) enzymes themselves (ID and protein name).\nThis query does not consider the hierarchy: it looks for reactions and enzymes only for the specified lipid.",
    "ground_truth_query": "PREFIX SWISSLIPID: <https://swisslipids.org/rdf/SLM_>\nPREFIX owl: <http://www.w3.org/2002/07/owl#>\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX rh: <http://rdf.rhea-db.org/>\nPREFIX up: <http://purl.uniprot.org/core/>\n\n# Example 6\nSELECT ?startId ?startName ?chebi ?rhea ?rheaEquation ?uniprot ?uniprotName\nWHERE\n{\n  # SwissLipids query (list of) identifier(s)\n  VALUES ?startId { SWISSLIPID:000399814 }\n  # name\n  ?startId rdfs:label ?startName .\n  # ChEBI x-ref\n  ?startId owl:equivalentClass ?chebi .\n  # federated query to Rhea\n  SERVICE <https://sparql.rhea-db.org/sparql> {\n  \t?rhea rh:equation ?rheaEquation .\n  \t?rhea rh:side/rh:contains/rh:compound/rh:chebi ?chebi .\n  }    \n  # federated query to UniProt\n  SERVICE <https://sparql.uniprot.org/sparql> {\n    ?uniprot up:reviewed true .\n    ?uniprot up:recommendedName/up:fullName ?uniprotName .\n    ?uniprot up:annotation/up:catalyticActivity/up:catalyzedReaction ?rhea .\n  }\n} \nORDER BY ?startId",
    "target_endpoint": "https://sparql.swisslipids.org/sparql/",
    "federates_with": [
      "https://sparql.uniprot.org/sparql",
      "https://sparql.rhea-db.org/sparql"
    ],
    "endpoint_set": "SwissLipids",
    "file_path": "SwissLipids/6.ttl",
    "predicted_query": "# https://sparql.swisslipids.org/sparql/\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>\nPREFIX sl: <http://swisslipids.org/rdf#>\nPREFIX chebi: <http://purl.obolibrary.org/obo/CHEBI_>\n\nSELECT DISTINCT ?rheaId ?equation ?enzymeId ?proteinName\nWHERE {\n  # Find reactions associated with the given lipid from SwissLipids\n  VALUES ?lipid { sl:SWISSLIPID_000399814 } # SWISSLIPID:000399814 = Ceramide\n  ?reaction sl:reaction_lipid ?lipid .\n  ?reaction sl:reaction_rhea ?rheaId .\n\n  # Get the reaction equation from Rhea\n  SERVICE <https://sparql.rhea-db.org/sparql> {\n    ?rheaId rdfs:label ?equation .\n  }\n\n  # Find enzymes associated with the reaction from SwissLipids\n  ?reaction sl:reaction_enzyme ?enzymeResource .\n\n  # Get the enzyme ID and protein name from UniProt\n  SERVICE <https://sparql.uniprot.org/sparql> {\n    ?enzymeResource rdfs:seeAlso ?enzymeId . # Assuming rdfs:seeAlso links to UniProt\n    ?enzymeId rdf:type <http://purl.uniprot.org/core/Protein> .\n    ?enzymeId rdfs:label ?proteinName .\n  }\n}",
    "predicted_endpoint": "https://sparql.swisslipids.org/sparql/",
    "predicted_endpoint_equal_to_target_endpoint": true,
    "predicted_endpoint_in_federates_with": false,
    "predicted_endpoint_or_federated_endpoint": true,
    "run_id_langsmith": "cc81b0e2-4f3d-464e-ae9e-74c1b895986c",
    "evaluation_timestamp": "2025-05-12T04:07:37.190520",
    "question_understanding_prompt_tokens": 321,
    "question_understanding_completion_tokens": 89,
    "question_understanding_total_tokens": 410,
    "sparql_query_construction_prompt_tokens": 2859,
    "sparql_query_construction_completion_tokens": 0,
    "sparql_query_construction_total_tokens": 2859,
    "is_valid_sparql": true,
    "sparql_syntax_error": "syntactically correct",
    "result_eval_f1_score": 0.0,
    "result_eval_precision": 0.0,
    "result_eval_recall": 0.0,
    "error_occured_at_endpoint": false,
    "predicted_query_result_is_empty": true,
    "ground_truth_query_result_is_empty": false,
    "error_occured_at_endpoint_message": "no error, but empty result"
  },
  {
    "resource": "https://sparql.swisslipids.org/.well-known/sparql-examples/5",
    "natural_language_question": "For a given lipid (SWISSLIPID:000399814, Ceramide), return a list of all corresponding reactions (Rhea IDs and equation).\nThis query does consider the hierarchy: it looks for reactions involving the specified lipid and/or its more specific forms.",
    "ground_truth_query": "PREFIX SWISSLIPID: <https://swisslipids.org/rdf/SLM_>\nPREFIX owl: <http://www.w3.org/2002/07/owl#>\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX rh: <http://rdf.rhea-db.org/>\n\n# Example 5\nSELECT ?startId ?startName ?id ?name ?chebi ?rhea ?rheaEquation \nWHERE\n{\n  # SwissLipids query (list of) identifier(s)\n  VALUES ?startId { SWISSLIPID:000399814 }\n  # name\n  ?startId rdfs:label ?startName .\n  # Retrieve children lipids \n  ?id rdfs:subClassOf* ?startId .\n  ?id rdfs:label ?name .\n  # ChEBI x-ref\n  ?id owl:equivalentClass ?chebi .\n  # federated query to Rhea\n  SERVICE <https://sparql.rhea-db.org/sparql> {\n  \t?rhea rh:equation ?rheaEquation .\n  \t?rhea rh:side/rh:contains/rh:compound/rh:chebi ?chebi .\n  }    \n} \nORDER BY  ?startId ?id",
    "target_endpoint": "https://sparql.swisslipids.org/sparql/",
    "federates_with": [
      "https://sparql.rhea-db.org/sparql"
    ],
    "endpoint_set": "SwissLipids",
    "file_path": "SwissLipids/5.ttl",
    "predicted_query": "# https://sparql.swisslipids.org/sparql/\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>\nPREFIX sl: <http://swisslipids.org/rdf#>\nPREFIX rhea: <http://rdf.rhea-db.org/>\n\nSELECT DISTINCT ?rheaId ?equation\nWHERE {\n  # Find related lipids from SwissLipids based on SWISSLIPID:000399814 and Ceramide\n  {\n    # Query SwissLipids for lipids related to SWISSLIPID:000399814\n    SERVICE <https://sparql.swisslipids.org/sparql/> {\n      {\n        ?lipid sl:id \"SWISSLIPID:000399814\" .\n      }\n      UNION\n      {\n        ?lipid rdfs:label ?label .\n        FILTER (contains(lcase(?label), \"ceramide\"))\n      }\n      ?lipid sl:name ?lipidName .\n    }\n  }\n\n  # Find reactions in RheaDB involving the lipids found in SwissLipids\n  SERVICE <https://sparql.rhea-db.org/sparql/> {\n    {\n      ?rheaReaction rhea:equation ?equation .\n      ?rheaReaction rdfs:label ?rheaId .\n      ?rheaReaction rhea:has_participant ?participant .\n      FILTER (contains(lcase(?equation), lcase(?lipidName))) # Filter reactions by lipid name\n    }\n  }\n}",
    "predicted_endpoint": "https://sparql.swisslipids.org/sparql/",
    "predicted_endpoint_equal_to_target_endpoint": true,
    "predicted_endpoint_in_federates_with": false,
    "predicted_endpoint_or_federated_endpoint": true,
    "run_id_langsmith": "62557be2-56f3-4551-bfb8-dcd0aa70d4a5",
    "evaluation_timestamp": "2025-05-12T04:07:45.893544",
    "question_understanding_prompt_tokens": 302,
    "question_understanding_completion_tokens": 67,
    "question_understanding_total_tokens": 369,
    "sparql_query_construction_prompt_tokens": 2143,
    "sparql_query_construction_completion_tokens": 0,
    "sparql_query_construction_total_tokens": 2143,
    "is_valid_sparql": true,
    "sparql_syntax_error": "syntactically correct",
    "result_eval_f1_score": 0.0,
    "result_eval_precision": 0.0,
    "result_eval_recall": 0.0,
    "error_occured_at_endpoint": false,
    "predicted_query_result_is_empty": true,
    "ground_truth_query_result_is_empty": false,
    "error_occured_at_endpoint_message": "no error, but empty result"
  },
  {
    "resource": "https://sparql.swisslipids.org/.well-known/sparql-examples/34",
    "natural_language_question": "Lipids affected by human enzymes",
    "ground_truth_query": "PREFIX owl: <http://www.w3.org/2002/07/owl#>\nPREFIX rh: <http://rdf.rhea-db.org/>\nPREFIX taxon: <http://purl.uniprot.org/taxonomy/>\nPREFIX up: <http://purl.uniprot.org/core/>\n\nSELECT ?swisslipid  {\n  ?swisslipid owl:equivalentClass ?chebi .\n  SERVICE <https://sparql.rhea-db.org/sparql> {\n    ?rhea rh:side/rh:contains/rh:compound ?compound .\n\t?compound (rh:chebi|(rh:reactivePart/rh:chebi)|(rh:underlyingChebi/rh:chebi)) ?metabolite . \n  }\n  SERVICE <https://sparql.uniprot.org/sparql> {\n    ?catalyticActivityAnnotation up:catalyticActivity/up:catalyzedReaction ?rhea .\n    ?protein up:annotation ?catalyticActivityAnnotation ;\n             up:organism taxon:9606 .\n  }\n}\nLIMIT 1",
    "target_endpoint": "https://sparql.swisslipids.org/sparql/",
    "federates_with": [
      "https://sparql.uniprot.org/sparql",
      "https://sparql.rhea-db.org/sparql"
    ],
    "endpoint_set": "SwissLipids",
    "file_path": "SwissLipids/34.ttl",
    "predicted_query": "# https://sparql.swisslipids.org/sparql/\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>\nPREFIX sl: <http://swisslipids.org/rdf#>\nPREFIX up: <http://purl.uniprot.org/core/>\n\nSELECT DISTINCT ?lipidName ?enzymeName\nWHERE {\n  # Find lipids in SwissLipids\n  SERVICE <https://sparql.swisslipids.org/sparql/> {\n    ?lipid rdf:type sl:Lipid .\n    ?lipid rdfs:label ?lipidName .\n  }\n\n  # Attempt to find reactions in RheaDB involving these lipids.  This is an optional step as not all lipids may have Rhea mappings.\n  OPTIONAL {\n    SERVICE <https://sparql.rhea-db.org/sparql/> {\n      ?reaction rdfs:label ?reactionName .\n      ?reaction rdfs:comment ?reactionComment .\n      FILTER (contains(lcase(?reactionComment), lcase(?lipidName))) # Check if the reaction comment mentions the lipid.  This is a heuristic.\n      ?reaction rhea:equation ?equation .\n    }\n  }\n\n  # Find human enzymes in UniProt that might be involved in these reactions (or related to the lipids).\n  SERVICE <https://sparql.uniprot.org/sparql/> {\n    ?enzyme a up:Protein .\n    ?enzyme up:organism <http://purl.uniprot.org/taxonomy/9606> .  # Human\n    ?enzyme rdfs:label ?enzymeName .\n    # Attempt to link enzymes to reactions or lipids.  This is a heuristic and might not always be accurate.\n    FILTER (contains(lcase(?enzymeName), lcase(?lipidName)) || contains(lcase(?enzymeName), lcase(?reactionName)))\n  }\n}",
    "predicted_endpoint": "https://sparql.swisslipids.org/sparql/",
    "predicted_endpoint_equal_to_target_endpoint": true,
    "predicted_endpoint_in_federates_with": false,
    "predicted_endpoint_or_federated_endpoint": true,
    "run_id_langsmith": "487b43c8-7255-4682-9fbc-6eaff05a93eb",
    "evaluation_timestamp": "2025-05-12T04:09:18.562508",
    "question_understanding_prompt_tokens": 245,
    "question_understanding_completion_tokens": 21,
    "question_understanding_total_tokens": 266,
    "sparql_query_construction_prompt_tokens": 1912,
    "sparql_query_construction_completion_tokens": 634,
    "sparql_query_construction_total_tokens": 2546,
    "is_valid_sparql": false,
    "sparql_syntax_error": "Line 21, column 17: Unresolved prefixed name: rhea:equation",
    "result_eval_f1_score": 0.0,
    "result_eval_precision": 0.0,
    "result_eval_recall": 0.0,
    "error_occured_at_endpoint": false,
    "predicted_query_result_is_empty": true,
    "ground_truth_query_result_is_empty": false,
    "error_occured_at_endpoint_message": "syntactically not correct"
  },
  {
    "resource": "https://sparql.uniprot.org/.well-known/sparql-examples/118_biosodafrontend_rat_brain_human_cancer",
    "natural_language_question": "What are the Homo sapiens genes associated with cancer and their orthologs expressed in the Rattus norvegicus brain?",
    "ground_truth_query": "PREFIX up:<http://purl.uniprot.org/core/>\nPREFIX taxon:<http://purl.uniprot.org/taxonomy/>\nPREFIX rdfs:<http://www.w3.org/2000/01/rdf-schema#>\nPREFIX orth:<http://purl.org/net/orth#>\nPREFIX dcterms:<http://purl.org/dc/terms/>\nPREFIX obo:<http://purl.obolibrary.org/obo/>\nPREFIX lscr:<http://purl.org/lscr#>\nPREFIX genex:<http://purl.org/genex#>\nPREFIX sio: <http://semanticscience.org/resource/>\nSELECT ?gene ?orthologous_protein2 WHERE {\n  {\n    SELECT ?protein1 WHERE {\n      ?protein1 a up:Protein;\n        up:organism/up:scientificName 'Homo sapiens' ;\n        up:annotation ?annotation .\n      ?annotation rdfs:comment ?annotation_text.\n      ?annotation a up:Disease_Annotation .\n      FILTER CONTAINS (?annotation_text, \"cancer\")\n    }\n  }\n  SERVICE <https://sparql.omabrowser.org/sparql/> {\n    SELECT ?orthologous_protein2 ?protein1 ?gene WHERE {\n      ?protein_OMA a orth:Protein .\n      ?orthologous_protein2 a orth:Protein .\n      ?cluster a orth:OrthologsCluster .\n      ?cluster orth:hasHomologousMember ?node1 .\n      ?cluster orth:hasHomologousMember ?node2 .\n      ?node2 orth:hasHomologousMember* ?protein_OMA .\n      ?node1 orth:hasHomologousMember* ?orthologous_protein2 \n      .?orthologous_protein2 orth:organism/obo:RO_0002162/up:scientificName 'Rattus norvegicus' .\n      ?orthologous_protein2 sio:SIO_010079 ?gene .\n      ?protein_OMA lscr:xrefUniprot ?protein1 .\n      FILTER(?node1 != ?node2)\n    }\n  }\n  SERVICE <https://www.bgee.org/sparql/> {\n    ?gene genex:isExpressedIn ?anatEntity .\n    ?anatEntity rdfs:label 'brain' .\n    ?gene orth:organism ?org . \n    ?org obo:RO_0002162 taxon:10116 .\n  }\n}",
    "target_endpoint": "https://sparql.uniprot.org/sparql",
    "federates_with": [
      "https://sparql.omabrowser.org/sparql/",
      "https://www.bgee.org/sparql/"
    ],
    "endpoint_set": "Uniprot",
    "file_path": "UniProt/118_biosodafrontend_rat_brain_human_cancer.ttl",
    "predicted_query": "# https://sparql.uniprot.org/sparql\nPREFIX up: <http://purl.uniprot.org/core/>\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX taxon: <http://purl.uniprot.org/taxonomy/>\nPREFIX disease: <http://purl.uniprot.org/diseases/>\n\nSELECT DISTINCT ?humanGene ?humanGeneName ?ratOrtholog ?ratOrthologName\nWHERE {\n  # Find human genes associated with cancer\n  SERVICE <https://sparql.uniprot.org/sparql> {\n    ?humanGene a up:Protein .\n    ?humanGene up:organism taxon:9606 .  # Homo sapiens\n    ?humanGene up:annotation ?diseaseAnnotation .\n    ?diseaseAnnotation a up:Disease_Annotation .\n    ?diseaseAnnotation up:disease disease:2602 . # Breast cancer.  Could broaden to other cancers if needed.\n    ?humanGene rdfs:label ?humanGeneName .\n\n    # Find orthologs in Rattus norvegicus\n    ?humanGene up:sequence ?sequence .\n    ?ratOrtholog up:sequence ?ratSequence .\n    ?ratOrtholog up:organism taxon:10116 . # Rattus norvegicus\n    ?ratOrtholog up:sequence ?ratSequence .\n    ?ratOrtholog rdfs:label ?ratOrthologName .\n    FILTER (?humanGene != ?ratOrtholog) # Ensure it's an ortholog, not the same protein\n  }\n\n  # Attempt to filter for expression in brain.  This part is speculative.\n  # It assumes UniProt has expression data, which may not be the case.\n  # If UniProt doesn't have expression data, this part would need to be adapted\n  # to query another database (e.g., Bgee) if it were available in the context.\n  SERVICE <https://sparql.uniprot.org/sparql> {\n     ?ratOrtholog up:expression ?expression .\n     ?expression up:expressedIn \"brain\" .  # This is a very optimistic assumption about the property and value.\n  }\n}",
    "predicted_endpoint": "https://sparql.uniprot.org/sparql",
    "predicted_endpoint_equal_to_target_endpoint": true,
    "predicted_endpoint_in_federates_with": false,
    "predicted_endpoint_or_federated_endpoint": true,
    "run_id_langsmith": "976c4ba3-4965-4cf3-bf6f-83e815dc65e2",
    "evaluation_timestamp": "2025-05-12T04:09:28.807354",
    "question_understanding_prompt_tokens": 265,
    "question_understanding_completion_tokens": 47,
    "question_understanding_total_tokens": 312,
    "sparql_query_construction_prompt_tokens": 2709,
    "sparql_query_construction_completion_tokens": 0,
    "sparql_query_construction_total_tokens": 2709,
    "is_valid_sparql": true,
    "sparql_syntax_error": "syntactically correct",
    "result_eval_f1_score": 0.0,
    "result_eval_precision": 0.0,
    "result_eval_recall": 0.0,
    "error_occured_at_endpoint": true,
    "predicted_query_result_is_empty": true,
    "ground_truth_query_result_is_empty": true,
    "error_occured_at_endpoint_message": "The read operation timed out"
  },
  {
    "resource": "https://sparql.uniprot.org/.well-known/sparql-examples/51",
    "natural_language_question": "Find all proteins linked to arachidonate (CHEBI:32395)",
    "ground_truth_query": "PREFIX CHEBI: <http://purl.obolibrary.org/obo/CHEBI_>\nPREFIX rh: <http://rdf.rhea-db.org/>\nPREFIX skos: <http://www.w3.org/2004/02/skos/core#>\nPREFIX up: <http://purl.uniprot.org/core/>\n\n\nSELECT \n    DISTINCT\n        ?uniprot\n        ?uniprotID\n        ?recname\n        ?gene\n        ?chebi\n        ?uniprotName\nWHERE {\n  SERVICE <https://sparql.rhea-db.org/sparql> {\n     VALUES (?chebi) { (CHEBI:32395) }\n     ?rhea rh:side/rh:contains/rh:compound ?compound .\n     ?compound rh:chebi ?chebi .\n     ?chebi up:name ?uniprotName .\n  }\n  ?uniprot up:annotation/up:catalyticActivity/up:catalyzedReaction ?rhea .\n  ?uniprot up:mnemonic ?uniprotID .\n  ?uniprot up:recommendedName/up:fullName ?recname .\n  OPTIONAL {?uniprot up:encodedBy/skos:prefLabel ?gene .}\n}",
    "target_endpoint": "https://sparql.uniprot.org/sparql/",
    "federates_with": [
      "https://sparql.rhea-db.org/sparql"
    ],
    "endpoint_set": "Uniprot",
    "file_path": "UniProt/51_all_proteins_linked_to_arachidonate.ttl",
    "predicted_query": "# https://sparql.uniprot.org/sparql\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX up: <http://purl.uniprot.org/core/>\nPREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>\nPREFIX rhea: <http://rdf.rhea-db.org/>\nPREFIX chebi: <http://purl.obolibrary.org/obo/>\n\nSELECT DISTINCT ?protein ?proteinName\nWHERE {\n  # Find proteins in UniProt that are enzymes (have a Rhea reaction cross-reference)\n  SERVICE <https://sparql.uniprot.org/sparql> {\n    ?protein a up:Protein .\n    ?protein rdfs:label ?proteinName .\n    ?protein up:annotation ?annotation .\n    ?annotation rdf:type up:CatalyticActivityAnnotation .\n    ?annotation rdfs:seeAlso ?rheaReactionUniProt . # Link to Rhea reaction\n    FILTER (REGEX(STR(?rheaReactionUniProt), \"rhea-db.org\")) # Ensure it's a Rhea URI\n  }\n\n  # Find Rhea reactions that involve arachidonate (CHEBI:32395)\n  SERVICE <https://sparql.rhea-db.org/sparql> {\n    ?rheaReaction rhea: Rhea_has_participant chebi:CHEBI_32395 . # arachidonate is a participant\n    FILTER STR(?rheaReaction) = STR(?rheaReactionUniProt) # Ensure the Rhea reaction matches the one from UniProt\n  }\n}",
    "predicted_endpoint": "https://sparql.uniprot.org/sparql",
    "predicted_endpoint_equal_to_target_endpoint": true,
    "predicted_endpoint_in_federates_with": false,
    "predicted_endpoint_or_federated_endpoint": true,
    "run_id_langsmith": "bdc307eb-b687-4fa9-a109-0b6833cd5f58",
    "evaluation_timestamp": "2025-05-12T04:19:39.673761",
    "question_understanding_prompt_tokens": 253,
    "question_understanding_completion_tokens": 31,
    "question_understanding_total_tokens": 284,
    "sparql_query_construction_prompt_tokens": 2212,
    "sparql_query_construction_completion_tokens": 651,
    "sparql_query_construction_total_tokens": 2863,
    "is_valid_sparql": false,
    "sparql_syntax_error": "Lexical error at line 22, column 45.  Encountered: '32' (32), after prefix \"Rhea_has_participant\"",
    "result_eval_f1_score": 0.0,
    "result_eval_precision": 0.0,
    "result_eval_recall": 0.0,
    "error_occured_at_endpoint": false,
    "predicted_query_result_is_empty": true,
    "ground_truth_query_result_is_empty": false,
    "error_occured_at_endpoint_message": "syntactically not correct"
  },
  {
    "resource": "https://sparql.uniprot.org/.well-known/sparql-examples/40",
    "natural_language_question": "Retrieve human enzymes that metabolize sphingolipids and are annotated in ChEMBL",
    "ground_truth_query": "PREFIX CHEBI: <http://purl.obolibrary.org/obo/CHEBI_>\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX rh: <http://rdf.rhea-db.org/>\nPREFIX taxon: <http://purl.uniprot.org/taxonomy/>\nPREFIX up: <http://purl.uniprot.org/core/>\n\nSELECT DISTINCT ?protein ?chemblEntry\nWHERE {\n  SERVICE <https://sparql.rhea-db.org/sparql> {\n    ?rhea rdfs:subClassOf rh:Reaction ;\n      rh:side/rh:contains/rh:compound/rh:chebi/rdfs:subClassOf+ CHEBI:26739 .\n  }\n  ?ca up:catalyzedReaction ?rhea .\n  ?protein up:annotation/up:catalyticActivity ?ca ;\n    up:organism taxon:9606 ;\n    rdfs:seeAlso ?chemblEntry .\n  ?chemblEntry up:database <http://purl.uniprot.org/database/ChEMBL> .\n}\nLIMIT 10",
    "target_endpoint": "https://sparql.uniprot.org/sparql/",
    "federates_with": [
      "https://sparql.rhea-db.org/sparql"
    ],
    "endpoint_set": "Uniprot",
    "file_path": "UniProt/40_human_enzymes_that_metabolize_sphingolipids.ttl",
    "predicted_query": "# https://sparql.swisslipids.org/sparql/\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX sl: <http://swisslipids.org/rdf#>\nPREFIX up: <http://purl.uniprot.org/core/>\n\nSELECT DISTINCT ?enzyme ?enzymeName\nWHERE {\n  # Find enzymes that metabolize sphingolipids in SwissLipids\n  SERVICE <https://sparql.swisslipids.org/sparql/> {\n    ?enzyme sl:catalyzes ?reaction .\n    ?reaction sl:hasLipidParticipant ?lipid .\n    ?lipid a sl:Sphingolipid . # Filter for sphingolipids\n    ?enzyme rdfs:label ?enzymeName .\n  }\n\n  # Filter for human enzymes using UniProt\n  SERVICE <https://sparql.uniprot.org/sparql> {\n    ?protein up:annotation ?enzyme . # Link to UniProt using the enzyme URI\n    ?protein up:organism <http://purl.uniprot.org/taxonomy/9606> . # Filter for Homo sapiens (human)\n  }\n}",
    "predicted_endpoint": "https://sparql.swisslipids.org/sparql/",
    "predicted_endpoint_equal_to_target_endpoint": false,
    "predicted_endpoint_in_federates_with": false,
    "predicted_endpoint_or_federated_endpoint": false,
    "run_id_langsmith": "5407836a-f1c6-46ef-9326-f189d7de1e10",
    "evaluation_timestamp": "2025-05-12T04:19:46.995679",
    "question_understanding_prompt_tokens": 257,
    "question_understanding_completion_tokens": 33,
    "question_understanding_total_tokens": 290,
    "sparql_query_construction_prompt_tokens": 2039,
    "sparql_query_construction_completion_tokens": 0,
    "sparql_query_construction_total_tokens": 2039,
    "is_valid_sparql": true,
    "sparql_syntax_error": "syntactically correct",
    "result_eval_f1_score": 0.0,
    "result_eval_precision": 0.0,
    "result_eval_recall": 0.0,
    "error_occured_at_endpoint": true,
    "predicted_query_result_is_empty": true,
    "ground_truth_query_result_is_empty": true,
    "error_occured_at_endpoint_message": "The read operation timed out"
  },
  {
    "resource": "https://sparql.uniprot.org/.well-known/sparql-examples/49",
    "natural_language_question": "Retrieve the UniProtKB proteins, their catalyzed Rhea reactions, their encoding genes (Ensembl) and the anatomic entities where the genes are expressed (UBERON anatomic entites from Bgee expression data resource).",
    "ground_truth_query": "PREFIX CHEBI: <http://purl.obolibrary.org/obo/CHEBI_>\nPREFIX genex: <http://purl.org/genex#>\nPREFIX lscr: <http://purl.org/lscr#>\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX rh: <http://rdf.rhea-db.org/>\nPREFIX taxon: <http://purl.uniprot.org/taxonomy/>\nPREFIX up: <http://purl.uniprot.org/core/>\n\nSELECT DISTINCT ?protein ?ensemblGene ?reaction ?anatomicEntityLabel ?anatomicEntity\nWHERE {\n  # federated query to Rhea enadpoint\n  {\n    SELECT DISTINCT ?reaction WHERE {\n      SERVICE <https://sparql.rhea-db.org/sparql> {\n        ?reaction rdfs:subClassOf rh:Reaction ;\n          rh:equation ?reactionEquation ;\n          rh:side ?reactionSide .\n        ?reactionSide rh:contains ?participant .\n        ?participant rh:compound ?compound .\n        # compound constraint (CHEBI:16113 == cholesterol)\n        ?compound rh:chebi CHEBI:16113 .\n      }\n    }\n  }\n  # taxonomy constraint (taxon:9606 == Homo sapiens)\n  ?protein up:organism taxon:9606 ;\n    up:annotation ?a ;\n    rdfs:seeAlso / up:transcribedFrom ?ensemblGene .\n  ?a a up:Catalytic_Activity_Annotation ;\n    up:catalyticActivity ?ca .\n  ?ca up:catalyzedReaction ?reaction .\n  # federated query to Bgee (expression data)\n  BIND(IRI(REPLACE(STR(?ensemblGene), \"\\\\.[0-9]+$\", \"\")) AS ?ensemblGeneNoVersion)\n  SERVICE <https://www.bgee.org/sparql/> {\n    ?gene lscr:xrefEnsemblGene ?ensemblGeneNoVersion ;\n      genex:isExpressedIn ?anatomicEntity .\n    ?anatomicEntity rdfs:label ?anatomicEntityLabel .\n  }\n}",
    "target_endpoint": "https://sparql.uniprot.org/sparql/",
    "federates_with": [
      "https://sparql.rhea-db.org/sparql",
      "https://www.bgee.org/sparql/"
    ],
    "endpoint_set": "Uniprot",
    "file_path": "UniProt/49_tissues_where_genes_metabolizing_cholestrol_are_expressed.ttl",
    "predicted_query": "# https://sparql.uniprot.org/sparql\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX up: <http://purl.uniprot.org/core/>\nPREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>\n\nSELECT DISTINCT ?protein ?proteinName ?reaction ?gene ?anatomicalEntity\nWHERE {\n  # Get proteins from UniProtKB\n  ?protein a up:Protein .\n  ?protein rdfs:label ?proteinName .\n\n  # Link to Rhea DB to get reactions catalyzed by the protein\n  SERVICE <https://sparql.rhea-db.org/sparql> {\n    ?reaction rdfs:label ?reactionName .\n    ?reaction rdfs:comment ?reactionComment .\n    ?proteinReference <http://purl.uniprot.org/core/database> <http://purl.uniprot.org/> .\n    ?proteinReference <http://purl.uniprot.org/core/identifier> ?proteinName . # Link using protein name\n    ?reaction <http://purl.obolibrary.org/obo/RO_0002333> ?proteinReference . # catalyzed by relation\n  }\n\n  # Assuming a link from UniProt to Ensembl via gene name.  This might need adjustment based on actual data.\n  SERVICE <http://sparql.uniprot.org/sparql> {\n      ?protein up:encodedBy ?gene .\n  }\n\n  # Link to Bgee to get anatomical entities where the gene is expressed.  This requires a Bgee SPARQL endpoint.\n  # Since no Bgee endpoint is provided, I'll assume a hypothetical one and a property for gene expression.\n  SERVICE <http://bgee.org/sparql/> { # Replace with the actual Bgee endpoint if available\n    ?geneExpressionObservation <http://example.org/expressedIn> ?anatomicalEntity . # Replace with the actual property\n    ?geneExpressionObservation <http://example.org/gene> ?gene . # Replace with the actual property linking to the gene\n    ?anatomicalEntity rdfs:label ?anatomicalEntityName .\n  }\n}",
    "predicted_endpoint": "https://sparql.uniprot.org/sparql",
    "predicted_endpoint_equal_to_target_endpoint": true,
    "predicted_endpoint_in_federates_with": false,
    "predicted_endpoint_or_federated_endpoint": true,
    "run_id_langsmith": "cb530506-fa78-45d5-b6dd-cdd14d006ee0",
    "evaluation_timestamp": "2025-05-12T04:29:59.956364",
    "question_understanding_prompt_tokens": 280,
    "question_understanding_completion_tokens": 76,
    "question_understanding_total_tokens": 356,
    "sparql_query_construction_prompt_tokens": 4648,
    "sparql_query_construction_completion_tokens": 605,
    "sparql_query_construction_total_tokens": 5253,
    "is_valid_sparql": true,
    "sparql_syntax_error": "syntactically correct",
    "result_eval_f1_score": 0.0,
    "result_eval_precision": 0.0,
    "result_eval_recall": 0.0,
    "error_occured_at_endpoint": true,
    "predicted_query_result_is_empty": true,
    "ground_truth_query_result_is_empty": true,
    "error_occured_at_endpoint_message": "QueryBadFormed: A bad request has been sent to the endpoint: probably the SPARQL query is badly formed."
  },
  {
    "resource": "https://sparql.uniprot.org/.well-known/sparql-examples/53",
    "natural_language_question": "Find mouse homologs in OMABrowser of human enzymes that catalyze reactions involving sterols (CHEBI:15889). Federating with Rhea and OMABrowser.",
    "ground_truth_query": "PREFIX CHEBI: <http://purl.obolibrary.org/obo/CHEBI_>\nPREFIX lscr: <http://purl.org/lscr#>\nPREFIX orth: <http://purl.org/net/orth#>\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX rh: <http://rdf.rhea-db.org/>\nPREFIX taxon: <http://purl.uniprot.org/taxonomy/>\nPREFIX up: <http://purl.uniprot.org/core/>\n\nSELECT\n  DISTINCT\n    ?chebi\n    ?reaction\n    ?humanProtein\n    ?mouseProtein\n    ?cluster \nWHERE {\n  SERVICE <https://sparql.rhea-db.org/sparql> {\n    ?reaction rdfs:subClassOf rh:Reaction .\n    ?reaction rh:side/rh:contains/rh:compound ?compound .\n    ?compound rh:chebi ?chebi .\n    ?chebi rdfs:subClassOf* CHEBI:15889\n  }\n\n  ?humanProtein up:organism taxon:9606 .\n  ?humanProtein up:annotation ?a .\n  ?a a up:Catalytic_Activity_Annotation .\n  ?a up:catalyticActivity ?ca .\n  ?ca up:catalyzedReaction ?reaction .\n\n  SERVICE  <https://sparql.omabrowser.org/sparql> {\n    ?cluster a orth:ParalogsCluster .\n    ?cluster orth:hasHomologousMember ?node1 , ?node2 .\n    ?node1 orth:hasHomologousMember* ?orthoProtein1 .\n    ?node2 orth:hasHomologousMember* ?orthoProtein2 .\n    ?orthoProtein1 lscr:xrefUniprot ?mouseProtein .\n    ?orthoProtein2 lscr:xrefUniprot ?humanProtein .\n    # inTaxon mouse\n    ?orthoProtein1 orth:organism/<http://purl.obolibrary.org/obo/RO_0002162> taxon:10090 . \n  }\n}",
    "target_endpoint": "https://sparql.uniprot.org/sparql/",
    "federates_with": [
      "https://sparql.rhea-db.org/sparql",
      "https://sparql.omabrowser.org/sparql"
    ],
    "endpoint_set": "Uniprot",
    "file_path": "UniProt/53_mouse_homologs_of_sterol_enzymes_via_omabrowser.ttl",
    "predicted_query": "# https://sparql.rhea-db.org/sparql\nPREFIX rhea: <http://rdf.rhea-db.org/>\nPREFIX chebi: <http://purl.obolibrary.org/obo/CHEBI_>\nPREFIX uniprot: <http://purl.uniprot.org/core/>\nPREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>\nPREFIX oma: <http://purl.orthodb.org/>\n\nSELECT DISTINCT ?mouse_homolog ?human_enzyme_name\nWHERE {\n  # Find reactions involving sterols (CHEBI:15889) in Rhea\n  ?reaction rhea: Rhea_has_reactant chebi:15889 .\n\n  # Find the enzyme (UniProt ID) that catalyzes the reaction\n  ?reaction rhea: Rhea_has_enzyme ?enzyme_uri .\n  ?enzyme_uri rdfs:seeAlso ?uniprot_id . # Assuming rdfs:seeAlso links to UniProt\n\n  SERVICE <https://sparql.uniprot.org/sparql> {\n    # Find human enzymes in UniProt\n    ?human_enzyme a uniprot:Protein ;\n                  rdfs:label ?human_enzyme_name ;\n                  uniprot:organism <http://purl.uniprot.org/taxonomy/9606> . # Homo sapiens\n    FILTER (STR(?human_enzyme) = STR(?uniprot_id)) # Link UniProt ID from Rhea to UniProt\n    ?human_enzyme uniprot:sequence ?sequence .\n\n    #Federate with OMA to find mouse homologs\n    SERVICE <http://sparql.omabrowser.org/sparql> {\n          ?homologEntry oma:hasHomologousMember ?human_enzyme .\n          ?homologEntry oma:hasHomologousMember ?mouse_homolog_uniprot .\n          ?mouse_homolog_uniprot a oma:Protein .\n          ?mouse_homolog_uniprot <http://www.w3.org/2000/01/rdf-schema#label> ?mouse_homolog_label .\n          FILTER CONTAINS(STR(?mouse_homolog_label), \"Mus musculus\")\n          BIND(STR(?mouse_homolog_uniprot) AS ?mouse_homolog)\n      }\n  }\n}",
    "predicted_endpoint": "https://sparql.rhea-db.org/sparql",
    "predicted_endpoint_equal_to_target_endpoint": false,
    "predicted_endpoint_in_federates_with": true,
    "predicted_endpoint_or_federated_endpoint": true,
    "run_id_langsmith": "ee0d2af2-5a18-4a8c-9e17-bc2e24b9ed45",
    "evaluation_timestamp": "2025-05-12T04:30:16.245618",
    "question_understanding_prompt_tokens": 277,
    "question_understanding_completion_tokens": 60,
    "question_understanding_total_tokens": 337,
    "sparql_query_construction_prompt_tokens": 3764,
    "sparql_query_construction_completion_tokens": 0,
    "sparql_query_construction_total_tokens": 3764,
    "is_valid_sparql": false,
    "sparql_syntax_error": "Lexical error at line 11, column 36.  Encountered: '32' (32), after prefix \"Rhea_has_reactant\"",
    "result_eval_f1_score": 0.0,
    "result_eval_precision": 0.0,
    "result_eval_recall": 0.0,
    "error_occured_at_endpoint": false,
    "predicted_query_result_is_empty": true,
    "ground_truth_query_result_is_empty": false,
    "error_occured_at_endpoint_message": "syntactically not correct"
  },
  {
    "resource": "https://sparql.uniprot.org/.well-known/sparql-examples/52",
    "natural_language_question": "Retrieve drugs that target human enzymes involved in sterol metabolism (federated query with Rhea and ChEMBL via IDSM/Elixir czech republic).",
    "ground_truth_query": "PREFIX CHEBI: <http://purl.obolibrary.org/obo/CHEBI_>\nPREFIX cco: <http://rdf.ebi.ac.uk/terms/chembl#>\nPREFIX chebihash: <http://purl.obolibrary.org/obo/chebi#>\nPREFIX owl: <http://www.w3.org/2002/07/owl#>\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX rh: <http://rdf.rhea-db.org/>\nPREFIX skos: <http://www.w3.org/2004/02/skos/core#>\nPREFIX taxon: <http://purl.uniprot.org/taxonomy/>\nPREFIX up: <http://purl.uniprot.org/core/>\n\nSELECT\n        DISTINCT\n            ?protein\n            ?proteinFullName\n            ?activityType\n            ?standardActivityValue\n            ?standardActivityUnit\n            ?chemblMolecule\n            ?chemlbMoleculePrefLabel\nWHERE\n  {\n  # ChEBI: retrieve members of the ChEBI class ChEBI:15889 (sterol)\n  # Rhea: retrieve the reactions involving these ChEBI as participants\n  SERVICE <https://sparql.rhea-db.org/sparql> {\n    ?reaction rdfs:subClassOf  rh:Reaction ;\n\t      rh:status        rh:Approved ;\n\t      rh:side          ?reactionSide .\n    ?reactionSide\n\t      rh:contains      ?participant .\n    ?participant rh:compound  ?compound\n    {\n      ?compound  rh:chebi  ?chebi .\n      ?chebi (rdfs:subClassOf)+ CHEBI:15889\n    } UNION {\n      ?compound  rh:chebi           ?chebi .\n      ?chebi2   rdfs:subClassOf     ?chebiRestriction .\n      ?chebiRestriction\n\t\ta           owl:Restriction ;\n\t\towl:onProperty      chebihash:has_major_microspecies_at_pH_7_3 ;\n\t\towl:someValuesFrom  ?chebi .\n      ?chebi2 (rdfs:subClassOf)+ CHEBI:15889\n    }\n  }\n  # UniProt: retrieve the human (taxid:9606) enzymes catalyzing these Rhea reactions\n  ?ca       up:catalyzedReaction  ?reaction .\n  ?a        up:catalyticActivity  ?ca .\n  ?protein  up:annotation         ?a ;\n\t    up:organism           taxon:9606 ;\n\t    up:recommendedName    ?proteinRecName .\n  ?proteinRecName\n\t    up:fullName           ?proteinFullName .\n  # Find drugs in wikidata that interact with the UniProt Proteins\n  # ChEMBL: retrieve the corresponding targets and with drugs in clinical phase 4\n  # Via https://idsm.elixir-czech.cz/sparql/\n  SERVICE <https://idsm.elixir-czech.cz/sparql/endpoint/idsm> {\n    ?activity a cco:Activity ;\n      cco:hasMolecule ?chemblMolecule ;\n      cco:hasAssay ?assay ;\n      cco:standardType ?activityType ;\n      cco:standardValue ?standardActivityValue ;\n      cco:standardUnits ?standardActivityUnit .\n    ?chemblMolecule cco:highestDevelopmentPhase ?highestDevelopmentPhase ;\n      rdfs:label ?chemblMoleculeLabel ;\n      skos:prefLabel ?chemlbMoleculePrefLabel .\n    FILTER (?highestDevelopmentPhase > 3)\n    ?assay cco:hasTarget ?target .\n    ?target cco:hasTargetComponent/cco:targetCmptXref ?protein .\n    ?protein a cco:UniprotRef .\n  }\n}",
    "target_endpoint": "https://sparql.uniprot.org/sparql/",
    "federates_with": [
      "https://sparql.rhea-db.org/sparql",
      "https://idsm.elixir-czech.cz/sparql/endpoint/idsm"
    ],
    "endpoint_set": "Uniprot",
    "file_path": "UniProt/52_drugs_targeting_sterol_metabolism.ttl",
    "predicted_query": "# https://sparql.rhea-db.org/sparql\nPREFIX rhea: <http://rdf.rhea-db.org/>\nPREFIX chebi: <http://purl.obolibrary.org/obo/CHEBI_>\nPREFIX obo: <http://purl.obolibrary.org/obo/>\nPREFIX dc: <http://purl.org/dc/elements/1.1/>\n\nSELECT DISTINCT ?drug\nWHERE {\n  # Find Rhea reactions related to sterol metabolism\n  SERVICE <https://sparql.rhea-db.org/sparql> {\n    ?reaction rhea:equation ?equation .\n    ?reaction dc:description ?description .\n    FILTER (CONTAINS(LCASE(?description), \"sterol metabolism\")) .\n    ?reaction rhea:status rhea:approved .\n    ?reaction rhea:directionalReaction ?directionalReaction .\n    ?directionalReaction rhea:enzyme ?enzyme .\n  }\n\n  # Find the UniProt ID of the enzyme\n  SERVICE <https://sparql.uniprot.org/sparql> {\n    ?enzyme uniprot:xref ?uniprotID .\n    ?uniprotID rdf:type up:Protein .\n    ?uniprotID rdfs:seeAlso ?gene .\n    ?gene dcterms:isPartOf <http://purl.uniprot.org/taxonomy/9606> . # Filter for human\n  }\n\n  # Find drugs that target the enzyme using IDSM/Elixir czech republic to link to ChEMBL\n  SERVICE <https://idsm.elixir-czech.cz/sparql> {\n    ?drugTarget dcterms:identifier ?gene . # Link to the gene symbol\n    ?drug a chembl:Drug ;\n              dcterms:relation ?drugTarget .\n  }\n}",
    "predicted_endpoint": "https://sparql.rhea-db.org/sparql",
    "predicted_endpoint_equal_to_target_endpoint": false,
    "predicted_endpoint_in_federates_with": true,
    "predicted_endpoint_or_federated_endpoint": true,
    "run_id_langsmith": "39f77d2b-1c4c-4ccb-9602-6d5c10831ba2",
    "evaluation_timestamp": "2025-05-12T04:30:25.360668",
    "question_understanding_prompt_tokens": 270,
    "question_understanding_completion_tokens": 28,
    "question_understanding_total_tokens": 298,
    "sparql_query_construction_prompt_tokens": 2417,
    "sparql_query_construction_completion_tokens": 608,
    "sparql_query_construction_total_tokens": 3025,
    "is_valid_sparql": false,
    "sparql_syntax_error": "Line 21, column 13: Unresolved prefixed name: uniprot:xref",
    "result_eval_f1_score": 0.0,
    "result_eval_precision": 0.0,
    "result_eval_recall": 0.0,
    "error_occured_at_endpoint": false,
    "predicted_query_result_is_empty": true,
    "ground_truth_query_result_is_empty": false,
    "error_occured_at_endpoint_message": "syntactically not correct"
  },
  {
    "resource": "https://sparql.uniprot.org/.well-known/sparql-examples/54",
    "natural_language_question": "Proteins with binding sites for ligands similar to heme",
    "ground_truth_query": "PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX sachem: <http://bioinfo.uochb.cas.cz/rdf/v1.0/sachem#>\nPREFIX up: <http://purl.uniprot.org/core/>\nPREFIX xsd: <http://www.w3.org/2001/XMLSchema#>\n\nSELECT \n  ?protein\n  ?mnemonic\n  ?proteinName\n  ?ligandSimilarityScore\n  ?ligand\nWHERE {\n  SERVICE <https://idsm.elixir-czech.cz/sparql/endpoint/chebi> {\n    ?ssc sachem:compound ?ligand; \n      sachem:score ?ligandSimilarityScore ;\n      sachem:similaritySearch ?sss .\n        # Smiles of Heme\n    ?sss    sachem:query \"CC1=C(CCC([O-])=O)C2=[N+]3C1=Cc1c(C)c(C=C)c4C=C5C(C)=C(C=C)C6=[N+]5[Fe-]3(n14)n1c(=C6)c(C)c(CCC([O-])=O)c1=C2\";\n      sachem:cutoff \"8e-1\"^^xsd:double ;\n      sachem:aromaticityMode sachem:aromaticityDetect ;\n      sachem:similarityRadius 1 ;\n      sachem:tautomerMode sachem:ignoreTautomers .\n  }\n  ?protein up:mnemonic ?mnemonic ;\n    up:recommendedName/up:fullName ?proteinName ;\n    up:annotation ?annotation .\n  ?annotation a up:Binding_Site_Annotation ;\n      up:ligand/rdfs:subClassOf ?ligand .\n}\nORDER BY DESC(?ligandSimilarityScore)",
    "target_endpoint": "https://sparql.uniprot.org/sparql/",
    "federates_with": [
      "https://idsm.elixir-czech.cz/sparql/endpoint/chebi"
    ],
    "endpoint_set": "Uniprot",
    "file_path": "UniProt/54_binding_sites_for_ligands_similar_to_heme_sachem.ttl",
    "predicted_query": "# https://sparql.uniprot.org/sparql\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX up: <http://purl.uniprot.org/core/>\nPREFIX chebi: <http://purl.obolibrary.org/obo/CHEBI_>\n\nSELECT DISTINCT ?protein ?proteinName\nWHERE {\n  # Find proteins with binding sites\n  ?protein a up:Protein .\n  ?protein rdfs:label ?proteinName .\n  ?protein up:annotation ?bindingSiteAnnotation .\n  ?bindingSiteAnnotation a up:Binding_Site .\n  ?bindingSiteAnnotation rdfs:comment ?bindingSiteDescription .\n\n  # Find ligands associated with the binding site\n  FILTER (CONTAINS(LCASE(?bindingSiteDescription), \"ligand\")) # Filter for binding sites that mention ligands\n\n  #OPTIONAL {  #Optional block to retrieve ligand information from UniProt if available.\n  #  ?bindingSiteAnnotation up:ligand ?ligand .\n  #  ?ligand rdfs:label ?ligandName .\n  #}\n\n  # Find similar compounds to Heme in ChEBI.  Using SERVICE to query ChEBI via Rhea.\n  SERVICE <https://sparql.rhea-db.org/sparql> {\n    PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\n    PREFIX chebi: <http://purl.obolibrary.org/obo/CHEBI_>\n\n    # Find ChEBI entities similar to Heme.  This part might need adjustment based on the exact ChEBI properties for similarity.\n    # This is a placeholder, as direct similarity queries in SPARQL are complex.  A more sophisticated approach might involve cheminformatics tools.\n    ?heme chebi:CHEBI_147291 . #Heme chebi ID\n    ?similarCompound rdfs:subClassOf* ?heme . # Find subclasses (potentially similar compounds).  This is a simplification.\n    ?similarCompound rdfs:label ?similarCompoundName .\n  }\n\n  # Attempt to link UniProt ligands (if available) to ChEBI similar compounds.  This is challenging without a direct identifier mapping.\n  #FILTER (CONTAINS(LCASE(?ligandName), LCASE(?similarCompoundName))) # Crude string matching.  Needs improvement.\n  # The link between UniProt and ChEBI is difficult without proper identifiers.  This query relies on string matching, which is unreliable.\n}",
    "predicted_endpoint": "https://sparql.uniprot.org/sparql",
    "predicted_endpoint_equal_to_target_endpoint": true,
    "predicted_endpoint_in_federates_with": false,
    "predicted_endpoint_or_federated_endpoint": true,
    "run_id_langsmith": "ba76d04f-0be6-4181-8b22-f075c5774417",
    "evaluation_timestamp": "2025-05-12T04:30:35.455447",
    "question_understanding_prompt_tokens": 247,
    "question_understanding_completion_tokens": 29,
    "question_understanding_total_tokens": 276,
    "sparql_query_construction_prompt_tokens": 2324,
    "sparql_query_construction_completion_tokens": 0,
    "sparql_query_construction_total_tokens": 2324,
    "is_valid_sparql": false,
    "sparql_syntax_error": "Encountered \" \"prefix\" \"PREFIX \"\" at line 25, column 5.\nWas expecting one of:\n     ...\n     ...\n     ...\n     ...\n     ...\n     ...\n    \"select\" ...\n    \"values\" ...\n    \"graph\" ...\n    \"optional\" ...\n    \"minus\" ...\n    \"bind\" ...\n    \"service\" ...\n    \"filter\" ...\n    \"true\" ...\n    \"false\" ...\n     ...\n     ...\n     ...\n     ...\n     ...\n     ...\n     ...\n     ...\n     ...\n     ...\n     ...\n     ...\n     ...\n    \"(\" ...\n     ...\n    \"{\" ...\n    \"}\" ...\n    \"[\" ...\n     ...\n    \"<<(\" ...\n    \"<<\" ...",
    "result_eval_f1_score": 0.0,
    "result_eval_precision": 0.0,
    "result_eval_recall": 0.0,
    "error_occured_at_endpoint": false,
    "predicted_query_result_is_empty": true,
    "ground_truth_query_result_is_empty": false,
    "error_occured_at_endpoint_message": "syntactically not correct"
  },
  {
    "resource": "https://sparql.uniprot.org/.well-known/sparql-examples/43",
    "natural_language_question": "Connect patents cited in UniProtKB with those in the patent database at EPO via publication number, whose grant date is more than twenty years in the past.",
    "ground_truth_query": "PREFIX patent: <http://data.epo.org/linked-data/def/patent/>\nPREFIX skos: <http://www.w3.org/2004/02/skos/core#>\nPREFIX up: <http://purl.uniprot.org/core/>\n\nSELECT ?grantDate ?patent ?application ?applicationNo\nWHERE\n{\n    ?citation a up:Patent_Citation ;\n  skos:exactMatch ?patent .\n  BIND(SUBSTR(STR(?patent), 35) AS ?applicationNo)\n  BIND(SUBSTR(STR(?patent), 33, 2) AS ?countryCode)\n  SERVICE <https://data.epo.org/linked-data/query>{\n    ?publication patent:publicationNumber ?applicationNo ;\n      patent:application ?application .\n    ?application patent:grantDate ?grantDate .\n  }\n  BIND((year(now()) - 20) AS ?thisYearMinusTwenty)\n  BIND(year(?grantDate) AS ?grantYear)\n  FILTER(?grantYear < ?thisYearMinusTwenty)\n} ORDER BY ?grantYear",
    "target_endpoint": "https://sparql.uniprot.org/sparql/",
    "federates_with": [
      "https://data.epo.org/linked-data/query"
    ],
    "endpoint_set": "Uniprot",
    "file_path": "UniProt/43_patents_used_in_uniprot_granted_twenty_years_in_the_past.ttl",
    "predicted_query": "# https://sparql.uniprot.org/sparql\nPREFIX up: <http://purl.uniprot.org/core/>\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX dcterms: <http://purl.org/dc/terms/>\nPREFIX bibo: <http://purl.org/ontology/bibo/>\nPREFIX xsd: <http://www.w3.org/2001/XMLSchema#>\n\nSELECT DISTINCT ?uniprotEntry ?patentPublicationNumber\nWHERE {\n  # Query UniProt for entries with patent citations\n  SERVICE <https://sparql.uniprot.org/sparql> {\n    ?uniprotEntry a up:Protein ; # Assuming UniProt entries are of type Protein\n                  dcterms:references ?patent . # Patents are referenced\n\n    ?patent a bibo:Patent ; # Assuming patents are of type Patent\n            bibo:publication ?patentPublication . # Get the publication\n\n    ?patentPublication bibo:identifier ?patentPublicationNumber ; # Get the publication number\n                       dcterms:issued ?publicationDate . # Get the publication date\n\n    # Filter patents based on publication date (proxy for grant date)\n    FILTER (year(?publicationDate) < (year(now()) - 20))\n  }\n}",
    "predicted_endpoint": "https://sparql.uniprot.org/sparql",
    "predicted_endpoint_equal_to_target_endpoint": true,
    "predicted_endpoint_in_federates_with": false,
    "predicted_endpoint_or_federated_endpoint": true,
    "run_id_langsmith": "55f9d7af-ae84-4b8f-ba37-3498f701cee9",
    "evaluation_timestamp": "2025-05-12T04:30:43.277777",
    "question_understanding_prompt_tokens": 272,
    "question_understanding_completion_tokens": 47,
    "question_understanding_total_tokens": 319,
    "sparql_query_construction_prompt_tokens": 1688,
    "sparql_query_construction_completion_tokens": 0,
    "sparql_query_construction_total_tokens": 1688,
    "is_valid_sparql": true,
    "sparql_syntax_error": "syntactically correct",
    "result_eval_f1_score": 0.0,
    "result_eval_precision": 0.0,
    "result_eval_recall": 0.0,
    "error_occured_at_endpoint": false,
    "predicted_query_result_is_empty": true,
    "ground_truth_query_result_is_empty": false,
    "error_occured_at_endpoint_message": "no error, but empty result"
  },
  {
    "resource": "https://sparql.uniprot.org/.well-known/sparql-examples/45",
    "natural_language_question": "Retrieve drugs that target human enzymes involved in sterol metabolism (federated query with WikiData and Rhea).",
    "ground_truth_query": "PREFIX CHEBI: <http://purl.obolibrary.org/obo/CHEBI_>\nPREFIX chebihash: <http://purl.obolibrary.org/obo/chebi#>\nPREFIX owl: <http://www.w3.org/2002/07/owl#>\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX rh: <http://rdf.rhea-db.org/>\nPREFIX taxon: <http://purl.uniprot.org/taxonomy/>\nPREFIX uniprotkb: <http://purl.uniprot.org/uniprot/>\nPREFIX up: <http://purl.uniprot.org/core/>\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\n\nSELECT DISTINCT ?protein ?proteinFullName ?wikiChemical ?wikiChemicalLabel ?medicalConditionTreatedLabel\nWHERE {\n  # ChEBI: retrieve members of the ChEBI class ChEBI:15889 (sterol)\n  # Rhea: retrieve the reactions involving these ChEBI as participants\n  SERVICE <https://sparql.rhea-db.org/sparql> {\n    ?reaction rdfs:subClassOf rh:Reaction ;\n      rh:status rh:Approved ;\n      rh:side ?reactionSide .\n    ?reactionSide\n      rh:contains ?participant .\n    ?participant rh:compound ?compound\n    {\n      ?compound rh:chebi ?chebi .\n      ?chebi (rdfs:subClassOf)+ CHEBI:15889\n    } UNION {\n      ?compound rh:chebi ?chebi .\n      ?chebi2 rdfs:subClassOf ?chebiRestriction .\n      ?chebiRestriction\n\t\ta owl:Restriction ;\n\t\towl:onProperty chebihash:has_major_microspecies_at_pH_7_3 ;\n\t\towl:someValuesFrom ?chebi .\n      ?chebi2 (rdfs:subClassOf)+ CHEBI:15889\n    }\n  }\n  # UniProt: retrieve the human (taxid:9606) enzymes catalyzing these Rhea reactions\n  ?ca up:catalyzedReaction  ?reaction .\n  ?a up:catalyticActivity  ?ca .\n  ?proteinIRI  up:annotation ?a ;\n    up:organism taxon:9606 ;\n    up:recommendedName ?proteinRecName .\n  ?proteinRecName up:fullName ?proteinFullName .\n  # Find drugs in wikidata that interact with the UniProt Proteins\n  BIND (SUBSTR(STR(?proteinIRI), STRLEN(STR(uniprotkb:))+1) AS ?protein)\n  SERVICE <https://query.wikidata.org/sparql> {\n    ?wp wdt:P352  ?protein .\n    ?wikiChemical wdt:P129 ?wp . # Physically interacts with\n    ?wikiChemical rdfs:label ?wikiChemicalLabel .\n    ?wikiChemical wdt:P2175 ?wmc . # Medical conndition treated\n    ?wmc rdfs:label ?medicalConditionTreatedLabel .\n    FILTER(lang(?medicalConditionTreatedLabel) = 'en')\n    FILTER(lang(?wikiChemicalLabel) = 'en')\n  }\n}",
    "target_endpoint": "https://sparql.uniprot.org/sparql/",
    "federates_with": [
      "https://query.wikidata.org/sparql",
      "https://sparql.rhea-db.org/sparql"
    ],
    "endpoint_set": "Uniprot",
    "file_path": "UniProt/45_drugs_targeting_human_sterol_metabolism_enzymes.ttl",
    "predicted_query": "# https://sparql.rhea-db.org/sparql\nPREFIX rhea: <http://rdf.rhea-db.org/>\nPREFIX chebi: <http://purl.obolibrary.org/obo/CHEBI_>\nPREFIX uniprot: <http://purl.uniprot.org/core/>\nPREFIX taxon: <http://purl.uniprot.org/taxonomy/>\nPREFIX wd: <http://www.wikidata.org/entity/>\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\nPREFIX biocyc: <http://identifiers.org/biocyc/>\n\nSELECT DISTINCT ?drug ?enzymeLabel ?rheaReaction ?reactionLabel\nWHERE {\n  # Find Rhea reactions involving sterols\n  SERVICE <https://sparql.rhea-db.org/sparql> {\n    ?rheaReaction rhea: Rhea_has_reactant chebi:15889 .  # CHEBI:15889 is sterol\n    ?rheaReaction rhea:rheaIsTransportReaction \"false\"^^xsd:boolean . # Filter transport reactions\n    ?rheaReaction rhea:enzyme ?enzyme .\n    ?reactionLabel rdfs:label ?rheaReaction .\n  }\n\n  # Get UniProt ID of the enzyme and filter for human enzymes\n  SERVICE <https://sparql.uniprot.org/sparql> {\n    ?enzyme uniprot:xref ?uniprotEnzyme .\n    ?uniprotEnzyme a uniprot:Protein .\n    ?uniprotEnzyme uniprot:organism taxon:9606 .  # 9606 is Homo sapiens\n    ?uniprotEnzyme rdfs:label ?enzymeLabel .\n  }\n\n  # Find drugs that target the enzyme in Wikidata\n  SERVICE <https://query.wikidata.org/sparql> {\n    ?drug wdt:P2175 ?uniprotEnzyme .  # P2175 is \"pharmacological action\"\n    ?drug wdt:P31 wd:Q12140 . # instance of drug\n  }\n}",
    "predicted_endpoint": "https://sparql.rhea-db.org/sparql",
    "predicted_endpoint_equal_to_target_endpoint": false,
    "predicted_endpoint_in_federates_with": true,
    "predicted_endpoint_or_federated_endpoint": true,
    "run_id_langsmith": "fd4a1201-99e3-4b9b-be6e-e826439dc614",
    "evaluation_timestamp": "2025-05-12T04:30:51.267307",
    "question_understanding_prompt_tokens": 258,
    "question_understanding_completion_tokens": 31,
    "question_understanding_total_tokens": 289,
    "sparql_query_construction_prompt_tokens": 2102,
    "sparql_query_construction_completion_tokens": 0,
    "sparql_query_construction_total_tokens": 2102,
    "is_valid_sparql": false,
    "sparql_syntax_error": "Lexical error at line 14, column 42.  Encountered: '32' (32), after prefix \"Rhea_has_reactant\"",
    "result_eval_f1_score": 0.0,
    "result_eval_precision": 0.0,
    "result_eval_recall": 0.0,
    "error_occured_at_endpoint": false,
    "predicted_query_result_is_empty": true,
    "ground_truth_query_result_is_empty": false,
    "error_occured_at_endpoint_message": "syntactically not correct"
  },
  {
    "resource": "https://sparql.uniprot.org/.well-known/sparql-examples/42",
    "natural_language_question": "Connect patents cited in UniProtKB with those in the patent database at EPO via publication number.",
    "ground_truth_query": "PREFIX patent: <http://data.epo.org/linked-data/def/patent/>\nPREFIX skos: <http://www.w3.org/2004/02/skos/core#>\nPREFIX up: <http://purl.uniprot.org/core/>\n\nSELECT ?citation ?patent ?application ?applicationNo\nWHERE\n{\n  ?citation a up:Patent_Citation ;\n    skos:exactMatch ?patent .\n  FILTER(CONTAINS(STR(?patent), 'EP'))\n  BIND(SUBSTR(STR(?patent), 35) AS ?applicationNo)\n  SERVICE <https://data.epo.org/linked-data/query>{\n    ?application patent:publicationNumber ?applicationNo\n  }\n}",
    "target_endpoint": "https://sparql.uniprot.org/sparql/",
    "federates_with": [
      "https://data.epo.org/linked-data/query"
    ],
    "endpoint_set": "Uniprot",
    "file_path": "UniProt/42_connect_patents_to_epo.ttl",
    "predicted_query": "# https://sparql.uniprot.org/sparql\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX up: <http://purl.uniprot.org/core/>\n\nSELECT DISTINCT ?uniprotEntry ?patentIdentifier\nWHERE {\n  # Retrieve UniProtKB entries and their associated patent identifiers.\n  SERVICE <https://sparql.uniprot.org/sparql> {\n    ?uniprotEntry a up:Protein ;\n                  rdfs:seeAlso ?patentResource . # Assuming rdfs:seeAlso links to external resources\n\n    # Filter for resources that look like patent identifiers.\n    FILTER CONTAINS(STR(?patentResource), \"patent\") # Adjust filter as needed based on actual data\n    BIND(STR(?patentResource) AS ?patentIdentifier)\n  }\n  \n  #OPTIONAL {\n  #  SERVICE <hypothetical_epo_endpoint> { # Replace with actual EPO endpoint if available\n  #    ?epoPatent a <PatentClass> ; # Replace with actual class for patents\n  #             <publicationNumberProperty> ?patentIdentifier . # Replace with actual property for publication number\n  #  }\n  #}\n}",
    "predicted_endpoint": "https://sparql.uniprot.org/sparql",
    "predicted_endpoint_equal_to_target_endpoint": true,
    "predicted_endpoint_in_federates_with": false,
    "predicted_endpoint_or_federated_endpoint": true,
    "run_id_langsmith": "055f3432-7499-4f7c-ad13-b68ba3b57873",
    "evaluation_timestamp": "2025-05-12T04:30:59.102324",
    "question_understanding_prompt_tokens": 254,
    "question_understanding_completion_tokens": 35,
    "question_understanding_total_tokens": 289,
    "sparql_query_construction_prompt_tokens": 1900,
    "sparql_query_construction_completion_tokens": 403,
    "sparql_query_construction_total_tokens": 2303,
    "is_valid_sparql": true,
    "sparql_syntax_error": "syntactically correct",
    "result_eval_f1_score": 0.0,
    "result_eval_precision": 0.0,
    "result_eval_recall": 0.0,
    "error_occured_at_endpoint": true,
    "predicted_query_result_is_empty": true,
    "ground_truth_query_result_is_empty": true,
    "error_occured_at_endpoint_message": "The read operation timed out"
  },
  {
    "resource": "https://sparql.uniprot.org/.well-known/sparql-examples/67_draft_human_metabolome",
    "natural_language_question": "Generate a draft human metabolome",
    "ground_truth_query": "PREFIX chebislash: <http://purl.obolibrary.org/obo/chebi/>\nPREFIX rh: <http://rdf.rhea-db.org/>\nPREFIX taxon: <http://purl.uniprot.org/taxonomy/>\nPREFIX up: <http://purl.uniprot.org/core/>\n\nSELECT\n?uniprot ?mnemonic ?rhea ?chebi ?smiles ?inchiKey\nWHERE\n{\n  ?uniprot up:annotation/up:catalyticActivity/up:catalyzedReaction ?rhea ;\n        up:organism taxon:9606 ;\n        up:mnemonic ?mnemonic .\n  SERVICE <https://sparql.rhea-db.org/sparql> {\n\t?rhea rh:side/rh:contains/rh:compound ?compound .\n    ?compound (rh:chebi|(rh:reactivePart/rh:chebi)|(rh:underlyingChebi/rh:chebi)) ?chebi .\n   }\n   ?chebi chebislash:smiles ?smiles ;\n          chebislash:inchikey ?inchiKey .\n}",
    "target_endpoint": "https://sparql.uniprot.org/sparql/",
    "federates_with": [
      "https://sparql.rhea-db.org/sparql"
    ],
    "endpoint_set": "Uniprot",
    "file_path": "UniProt/67_draft_human_metabolome.ttl",
    "predicted_query": "# https://sparql.uniprot.org/sparql\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX up: <http://purl.uniprot.org/core/>\nPREFIX taxon: <http://purl.uniprot.org/taxonomy/>\n\nSELECT DISTINCT ?metabolite ?metaboliteName\nWHERE {\n  # Find proteins associated with Homo sapiens in UniProt\n  SERVICE <https://sparql.uniprot.org/sparql> {\n    ?protein a up:Protein .\n    ?protein up:organism taxon:9606 .  # Homo sapiens\n    ?protein rdfs:seeAlso ?rheaReaction . # Link to Rhea\n  }\n\n  # Get metabolite information from Rhea\n  SERVICE <https://sparql.rhea-db.org/sparql> {\n    ?rheaReaction a <http://rdf.rhea-db.org/schema#Reaction> .\n    {\n      ?rheaReaction <http://rdf.rhea-db.org/schema#left>  ?metaboliteURI .\n    }\n    UNION\n    {\n      ?rheaReaction <http://rdf.rhea-db.org/schema#right> ?metaboliteURI .\n    }\n    ?metaboliteURI rdfs:label ?metaboliteName .\n    BIND(STR(?metaboliteURI) AS ?metabolite)\n  }\n}",
    "predicted_endpoint": "https://sparql.uniprot.org/sparql",
    "predicted_endpoint_equal_to_target_endpoint": true,
    "predicted_endpoint_in_federates_with": false,
    "predicted_endpoint_or_federated_endpoint": true,
    "run_id_langsmith": "5091d6b1-fbfe-4c5c-988e-561ee8870383",
    "evaluation_timestamp": "2025-05-12T04:41:07.156963",
    "question_understanding_prompt_tokens": 246,
    "question_understanding_completion_tokens": 20,
    "question_understanding_total_tokens": 266,
    "sparql_query_construction_prompt_tokens": 1449,
    "sparql_query_construction_completion_tokens": 538,
    "sparql_query_construction_total_tokens": 1987,
    "is_valid_sparql": true,
    "sparql_syntax_error": "syntactically correct",
    "result_eval_f1_score": 0.0,
    "result_eval_precision": 0.0,
    "result_eval_recall": 0.0,
    "error_occured_at_endpoint": false,
    "predicted_query_result_is_empty": true,
    "ground_truth_query_result_is_empty": false,
    "error_occured_at_endpoint_message": "no error, but empty result"
  },
  {
    "resource": "https://sparql.uniprot.org/.well-known/sparql-examples/36",
    "natural_language_question": "Find the orthologous proteins for UniProtKB entry P05067 using the <a href=\"http://www.orthod.org\">OrthoDB database</a>",
    "ground_truth_query": "PREFIX orthodb: <http://purl.orthodb.org/>\nPREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX skos: <http://www.w3.org/2004/02/skos/core#>\nPREFIX uniprotkb: <http://purl.uniprot.org/uniprot/>\nPREFIX up: <http://purl.uniprot.org/core/>\n\nSELECT\n  ?protein\n  ?orthoGroup\n  ?scientificName\n  ?functionComment\n  ?prefferedGeneName\n  ((STRLEN(?value) - ?medianLength) as ?deviationFromMedianLength)\nWHERE\n{\n  uniprotkb:P05067 a up:Protein ;\n        up:organism/up:scientificName ?scientificName ;\n        rdfs:seeAlso ?orthoGroup ;\n        up:encodedBy/skos:prefLabel ?prefferedGeneName ;\n          up:sequence/rdf:value ?value .\n  OPTIONAL {\n    ?protein up:annotation ?functionAnnotation .\n    ?functionAnnotation a up:Function_Annotation ;\n      rdfs:comment ?functionComment .\n  }\n  SERVICE <https://sparql.orthodb.org/sparql>{\n    ?orthoGroup orthodb:ogMedianProteinLength ?medianLength .\n    ?orthoGroup orthodb:hasMember ?xref .\n    ?xref orthodb:xref/orthodb:xrefResource uniprotkb:P05067 .\n  }\n}\nLIMIT 985915",
    "target_endpoint": "https://sparql.uniprot.org/sparql/",
    "federates_with": [
      "https://sparql.orthodb.org/sparql"
    ],
    "endpoint_set": "Uniprot",
    "file_path": "UniProt/36_orthologous_proteins_via_orthodb.ttl",
    "predicted_query": "# https://sparql.uniprot.org/sparql\nPREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX up: <http://purl.uniprot.org/core/>\n\nSELECT DISTINCT ?orthologousProtein ?geneName ?organismName\nWHERE {\n  # Find orthologous proteins for UniProt entry P05067\n  VALUES ?uniprotEntry { \"http://purl.uniprot.org/uniprot/P05067\" } # Binding the UniProt ID\n\n  ?uniprotEntry up:sequence ?sequence . #Ensuring that the UniProt ID is valid and has a sequence\n\n  ?protein up:interactor ?uniprotEntry .\n  ?protein a up:Protein .\n  ?protein up:organism ?organism .\n  ?organism rdfs:label ?organismName .\n  ?protein rdfs:label ?geneName .\n  ?protein up:interactor ?orthologousProtein .\n  FILTER (?orthologousProtein != ?uniprotEntry) #Exclude the same protein\n}",
    "predicted_endpoint": "https://sparql.uniprot.org/sparql",
    "predicted_endpoint_equal_to_target_endpoint": true,
    "predicted_endpoint_in_federates_with": false,
    "predicted_endpoint_or_federated_endpoint": true,
    "run_id_langsmith": "a2f81da8-b736-4444-972f-92b70ee8fea7",
    "evaluation_timestamp": "2025-05-12T04:47:17.480755",
    "question_understanding_prompt_tokens": 273,
    "question_understanding_completion_tokens": 41,
    "question_understanding_total_tokens": 314,
    "sparql_query_construction_prompt_tokens": 2173,
    "sparql_query_construction_completion_tokens": 372,
    "sparql_query_construction_total_tokens": 2545,
    "is_valid_sparql": true,
    "sparql_syntax_error": "syntactically correct",
    "result_eval_f1_score": 0.0,
    "result_eval_precision": 0.0,
    "result_eval_recall": 0.0,
    "error_occured_at_endpoint": false,
    "predicted_query_result_is_empty": true,
    "ground_truth_query_result_is_empty": false,
    "error_occured_at_endpoint_message": "no error, but empty result"
  },
  {
    "resource": "https://sparql.uniprot.org/.well-known/sparql-examples/60",
    "natural_language_question": "Find human proteins that catalyze reactions where substrates or product have a <a href=\"https://www.ebi.ac.uk/chebi/searchId.do?chebiId=CHEBI:35516\">Cholestane skeleton</a>",
    "ground_truth_query": "PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX rh: <http://rdf.rhea-db.org/>\nPREFIX sachem: <http://bioinfo.uochb.cas.cz/rdf/v1.0/sachem#>\nPREFIX taxon: <http://purl.uniprot.org/taxonomy/>\nPREFIX up: <http://purl.uniprot.org/core/>\n\nSELECT\n  DISTINCT\n    ?protein\n    ?disease\n    ?rhea\n    ?chebi\n    ?omim\nWHERE {\n    # Find complete ChEBIs with a Cholestane skeleton, via the Czech Elixir node IDSM Sachem chemical substructure search.\n    SERVICE <https://idsm.elixir-czech.cz/sparql/endpoint/chebi> {\n      ?chebi sachem:substructureSearch [\n        sachem:query\n\"[C@]12(CCC3CCCC[C@]3(C)[C@@]1([H])CC[C@]1(C)[C@@]([H])([C@@](C)([H])CCCC(C)C)CC[C@@]21[H])[H]\"\n].\n   }\n   # Use the fact that UniProt catalytic activities are annotated using Rhea \n   # Mapping the found ChEBIs to Rhea reactions\n   SERVICE <https://sparql.rhea-db.org/sparql>{\n     ?rhea rh:side/rh:contains/rh:compound/rdfs:subClassOf ?chebi .\n   }\n   # Match the found Rhea reactions with human UniProtKB proteins\n   ?protein up:annotation/up:catalyticActivity/up:catalyzedReaction ?rhea .\n   ?protein up:organism taxon:9606 .\n   # Find only those human entries that have an annotated related disease, and optionaly map these to OMIM\n   ?protein up:annotation/up:disease ?disease .\n   OPTIONAL {\n     ?disease rdfs:seeAlso ?omim .\n     ?omim up:database <http://purl.uniprot.org/database/MIM>\n   }\n}",
    "target_endpoint": "https://sparql.uniprot.org/sparql/",
    "federates_with": [
      "https://idsm.elixir-czech.cz/sparql/endpoint/chebi",
      "https://sparql.rhea-db.org/sparql"
    ],
    "endpoint_set": "Uniprot",
    "file_path": "UniProt/60_enzymes_working_on_substrate_with_Cholestene_backbone.ttl",
    "predicted_query": "# https://sparql.uniprot.org/sparql\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX up: <http://purl.uniprot.org/core/>\nPREFIX taxon: <http://purl.uniprot.org/taxonomy/>\nPREFIX rhea: <http://rdf.rhea-db.org/>\nPREFIX chebi: <http://purl.obolibrary.org/obo/CHEBI_>\n\nSELECT DISTINCT ?protein ?proteinName ?reaction ?reactionId\nWHERE {\n  # Find human proteins\n  ?protein a up:Protein .\n  ?protein up:organism taxon:9606 .\n  ?protein rdfs:label ?proteinName .\n\n  # Link protein to a reaction via EC number (if available)\n  OPTIONAL { ?protein up:ecNumber ?ecNumber . }\n\n  # Federated query to RheaDB to find reactions with Cholestane skeleton as substrate or product\n  SERVICE <https://sparql.rhea-db.org/sparql> {\n    ?reaction a rhea:Reaction .\n    ?reaction rhea:equation ?equation .\n    ?reaction rhea:id ?reactionId .\n\n    # Reaction involves Cholestane skeleton as substrate or product\n    { ?reaction rhea:has_substrate chebi:35516 }\n    UNION\n    { ?reaction rhea:has_product chebi:35516 }\n\n    # Link Rhea reaction to EC number (if available)\n    OPTIONAL { ?reaction rhea:ec ?ecNumber . }\n  }\n\n  # Filter based on EC number if available\n  FILTER ( !bound(?ecNumber) || EXISTS { ?protein up:ecNumber ?ecNumber } )\n}",
    "predicted_endpoint": "https://sparql.uniprot.org/sparql",
    "predicted_endpoint_equal_to_target_endpoint": true,
    "predicted_endpoint_in_federates_with": false,
    "predicted_endpoint_or_federated_endpoint": true,
    "run_id_langsmith": "2fa42132-1586-4959-8f4c-216f4b108ce0",
    "evaluation_timestamp": "2025-05-12T04:47:41.139838",
    "question_understanding_prompt_tokens": 293,
    "question_understanding_completion_tokens": 38,
    "question_understanding_total_tokens": 331,
    "sparql_query_construction_prompt_tokens": 3494,
    "sparql_query_construction_completion_tokens": 727,
    "sparql_query_construction_total_tokens": 4221,
    "is_valid_sparql": true,
    "sparql_syntax_error": "syntactically correct",
    "result_eval_f1_score": 0.0,
    "result_eval_precision": 0.0,
    "result_eval_recall": 0.0,
    "error_occured_at_endpoint": false,
    "predicted_query_result_is_empty": true,
    "ground_truth_query_result_is_empty": false,
    "error_occured_at_endpoint_message": "no error, but empty result"
  },
  {
    "resource": "https://sparql.uniprot.org/.well-known/sparql-examples/70_enzymes_interacting_with_molecules_similar_to_dopamine",
    "natural_language_question": "Look for enzymes catalyzing reactions with molecules similar to dopamine.",
    "ground_truth_query": "PREFIX CHEBI: <http://purl.obolibrary.org/obo/CHEBI_>\nPREFIX rh: <http://rdf.rhea-db.org/>\nPREFIX sachem: <http://bioinfo.uochb.cas.cz/rdf/v1.0/sachem#>\nPREFIX up: <http://purl.uniprot.org/core/>\n\nSELECT\n  ?protein\n  ?rhea\n  ?chebi\nWHERE {\n  # Use the smiles of dopamine CHEBI:18243\n  SERVICE <https://idsm.elixir-czech.cz/sparql/endpoint/chebi>{\n    ?chebi sachem:similarCompoundSearch [\n      sachem:query \"NCCc1ccc(O)c(O)c1\" ] .\n  }\n  GRAPH<https://sparql.rhea-db.org/rhea>{\n    ?rhea rh:side/rh:contains/rh:compound ?compound .\n    ?compound (rh:chebi|(rh:reactivePart/rh:chebi)|(rh:underlyingChebi/rh:chebi)) ?chebi .\n  }\n  ?protein up:reviewed true ;\n    up:annotation ?caa .\n  ?caa up:catalyticActivity/up:catalyzedReaction ?rhea .\n}",
    "target_endpoint": "https://sparql.uniprot.org/sparql/",
    "federates_with": [
      "https://idsm.elixir-czech.cz/sparql/endpoint/chebi"
    ],
    "endpoint_set": "Uniprot",
    "file_path": "UniProt/70_enzymes_interacting_with_molecules_similar_to_dopamine.ttl",
    "predicted_query": "# https://sparql.rhea-db.org/sparql\nPREFIX rhea: <http://rdf.rhea-db.org/>\nPREFIX chebi: <http://purl.obolibrary.org/obo/CHEBI_>\nPREFIX uniprot: <http://purl.uniprot.org/core/>\nPREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\n\nSELECT DISTINCT ?enzyme ?enzymeName ?reaction ?reactionEquation\nWHERE {\n  # Find reactions in Rhea that involve dopamine\n  SERVICE <https://sparql.rhea-db.org/sparql> {\n    ?reaction rhea: Rhea_has_participant chebi:15377 .  #CHEBI ID for dopamine\n    ?reaction rdfs:label ?reactionEquation .\n    ?reaction rhea: Rhea_has_direction ?direction .\n    ?direction rhea: Rhea_has_catalyzed_by ?enzymeUri .\n    ?enzymeUri rdfs:label ?enzymeName .\n    BIND(strafter(str(?enzymeUri), \"http://rdf.rhea-db.org/Compound/\") AS ?enzyme) # Extract enzyme ID\n  }\n\n  # Retrieve enzyme information from UniProt\n  SERVICE <https://sparql.uniprot.org/sparql> {\n    ?enzymeUri uniprot:database ?db .\n    FILTER(CONTAINS(str(?db), \"UniProtKB\")) . # Filter for UniProtKB entries\n    FILTER(STRENDS(str(?enzymeUri), ?enzyme)) # Ensure the UniProt URI ends with the extracted enzyme ID\n    BIND( IRI(concat(\"http://purl.uniprot.org/uniprot/\", ?enzyme)) AS ?enzymeUniprotUri)\n    ?enzymeUniprotUri rdfs:label ?enzymeNameUniprot .\n    BIND (?enzymeNameUniprot AS ?enzymeName)\n    BIND (?enzymeUniprotUri AS ?enzyme)\n  }\n}",
    "predicted_endpoint": "https://sparql.rhea-db.org/sparql",
    "predicted_endpoint_equal_to_target_endpoint": false,
    "predicted_endpoint_in_federates_with": false,
    "predicted_endpoint_or_federated_endpoint": false,
    "run_id_langsmith": "6ddf3e4b-7a13-4270-add2-28c34cdeb0db",
    "evaluation_timestamp": "2025-05-12T04:47:51.887000",
    "question_understanding_prompt_tokens": 250,
    "question_understanding_completion_tokens": 26,
    "question_understanding_total_tokens": 276,
    "sparql_query_construction_prompt_tokens": 2433,
    "sparql_query_construction_completion_tokens": 591,
    "sparql_query_construction_total_tokens": 3024,
    "is_valid_sparql": false,
    "sparql_syntax_error": "Lexical error at line 12, column 41.  Encountered: '32' (32), after prefix \"Rhea_has_participant\"",
    "result_eval_f1_score": 0.0,
    "result_eval_precision": 0.0,
    "result_eval_recall": 0.0,
    "error_occured_at_endpoint": false,
    "predicted_query_result_is_empty": true,
    "ground_truth_query_result_is_empty": false,
    "error_occured_at_endpoint_message": "syntactically not correct"
  },
  {
    "resource": "https://sparql.uniprot.org/.well-known/sparql-examples/38",
    "natural_language_question": "For the human entry P05067 (Amyloid-beta precursor protein) find the gene start ends in WikiData",
    "ground_truth_query": "PREFIX p: <http://www.wikidata.org/prop/>\nPREFIX pq: <http://www.wikidata.org/prop/qualifier/>\nPREFIX ps: <http://www.wikidata.org/prop/statement/>\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX uniprotkb: <http://purl.uniprot.org/uniprot/>\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\n\n\nSELECT \n\t?protein \n\t?begin\n\t?end\n\t?chromosome\n\t?assembly\nWHERE {\n    {\n        BIND(uniprotkb:P05067 AS ?proteinIRI)\n        BIND (SUBSTR(STR(?proteinIRI), STRLEN(STR(uniprotkb:))+1) AS ?protein)\n    }\n    SERVICE <https://query.wikidata.org/sparql> {\n        ?wp wdt:P352 ?protein ;\n            wdt:P702 ?wg . \n        ?wg p:P644   ?wgss .\n        ?wgss ps:P644        ?begin ;\n          pq:P1057/wdt:P1813 ?chromosome ;\n          pq:P659/rdfs:label ?assembly .\n        ?wg p:P645 ?wgse .\n        ?wgse ps:P645        ?end ;\n          pq:P1057/wdt:P1813 ?chromosome ;\n          pq:P659/rdfs:label ?assembly .\n        FILTER(lang(?assembly) = \"en\")\n  } \n}",
    "target_endpoint": "https://sparql.uniprot.org/sparql/",
    "federates_with": [
      "https://query.wikidata.org/sparql"
    ],
    "endpoint_set": "Uniprot",
    "file_path": "UniProt/38_find_gene_region_in_wikidata_for_known_entry.ttl",
    "predicted_query": "# https://sparql.uniprot.org/sparql\nPREFIX up: <http://purl.uniprot.org/core/>\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX wd: <http://www.wikidata.org/entity/>\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\n\nSELECT ?geneStart ?geneEnd\nWHERE {\n  # Find the UniProt entry for Amyloid-beta precursor protein (P05067)\n  VALUES ?protein { <http://purl.uniprot.org/uniprot/P05067> }\n\n  # Link the UniProt entry to a gene\n  ?protein a up:Protein ;\n           up:encodedBy ?gene .\n\n  #OPTIONAL {\n  #  ?protein rdfs:seeAlso ?wikidataLink .\n  #  FILTER (CONTAINS(str(?wikidataLink), \"wikidata.org\"))\n  #  BIND(IRI(REPLACE(str(?wikidataLink), \"^.*(Q[0-9]+)$\", \"http://www.wikidata.org/entity/$1\")) AS ?wikidataEntity)\n  #}\n\n  # Find the WikiData ID associated with the gene via cross-reference.\n  ?gene up:database ?dbXref .\n  ?dbXref up:databaseType <http://purl.uniprot.org/database/Wikidata> .\n  ?dbXref up:identifier ?wikidataID .\n  BIND(wd: as ?wdPrefix)\n  BIND(IRI(concat(str(?wdPrefix), ?wikidataID)) AS ?wikidataEntity)\n\n\n  # Query WikiData for gene start and end positions.\n  SERVICE <https://query.wikidata.org/sparql> {\n    OPTIONAL { ?wikidataEntity wdt:P582 ?geneEnd . } # Property for end time\n    OPTIONAL { ?wikidataEntity wdt:P571 ?geneStart . } # Property for inception\n  }\n}",
    "predicted_endpoint": "https://sparql.uniprot.org/sparql",
    "predicted_endpoint_equal_to_target_endpoint": true,
    "predicted_endpoint_in_federates_with": false,
    "predicted_endpoint_or_federated_endpoint": true,
    "run_id_langsmith": "4686829d-dba3-45d7-8f0c-5f9841603c03",
    "evaluation_timestamp": "2025-05-12T04:48:00.582678",
    "question_understanding_prompt_tokens": 264,
    "question_understanding_completion_tokens": 52,
    "question_understanding_total_tokens": 316,
    "sparql_query_construction_prompt_tokens": 2434,
    "sparql_query_construction_completion_tokens": 0,
    "sparql_query_construction_total_tokens": 2434,
    "is_valid_sparql": true,
    "sparql_syntax_error": "syntactically correct",
    "result_eval_f1_score": 0.0,
    "result_eval_precision": 0.0,
    "result_eval_recall": 0.0,
    "error_occured_at_endpoint": false,
    "predicted_query_result_is_empty": true,
    "ground_truth_query_result_is_empty": false,
    "error_occured_at_endpoint_message": "no error, but empty result"
  },
  {
    "resource": "https://sparql.uniprot.org/.well-known/sparql-examples/117_biosodafrontend_glioblastoma_orthologs_rat",
    "natural_language_question": "Which are the proteins associated with glioblastoma and the orthologs expressed in the rat brain?",
    "ground_truth_query": "PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX obo: <http://purl.obolibrary.org/obo/>\nPREFIX orth: <http://purl.org/net/orth#>\nPREFIX sio: <http://semanticscience.org/resource/>\nPREFIX taxon: <http://purl.uniprot.org/taxonomy/>\nPREFIX up: <http://purl.uniprot.org/core/>\nPREFIX lscr: <http://purl.org/lscr#>\nPREFIX genex: <http://purl.org/genex#>\nSELECT DISTINCT ?protein ?orthologous_protein ?gene ?annotation_text WHERE {\n  {\n  \tSELECT ?protein ?annotation_text WHERE {\n      ?protein a up:Protein ;\n          up:organism taxon:9606 ;\n          up:annotation ?annotation .\n      ?annotation rdfs:comment ?annotation_text .\n      ?annotation a up:Disease_Annotation .\n      FILTER CONTAINS (?annotation_text, \"glioblastoma\")\n    }\n  }\n  SERVICE <https://sparql.omabrowser.org/sparql/> {\n    SELECT ?orthologous_protein ?protein ?gene WHERE {\n    ?protein_OMA a orth:Protein .\n    ?orthologous_protein a orth:Protein .\n    ?cluster a orth:OrthologsCluster .\n    ?cluster orth:hasHomologousMember ?node1 .\n    ?cluster\n    orth:hasHomologousMember ?node2 .\n    ?node2 orth:hasHomologousMember* ?protein_OMA .\n    ?node1 orth:hasHomologousMember* ?orthologous_protein .\n    ?orthologous_protein orth:organism/obo:RO_0002162 taxon:10116 . # rattus norvegicus\n    ?orthologous_protein sio:SIO_010079 ?gene .\n    ?protein_OMA lscr:xrefUniprot ?protein .\n    FILTER(?node1 != ?node2)\n\t\t}\n\t}\n  SERVICE <https://www.bgee.org/sparql/> {\n    ?gene genex:isExpressedIn ?a .\n    ?a rdfs:label \"brain\" .\n    ?gene orth:organism ?s . \n    ?s obo:RO_0002162 taxon:10116.\n\t}\n}",
    "target_endpoint": "https://sparql.uniprot.org/sparql",
    "federates_with": [
      "https://sparql.omabrowser.org/sparql/",
      "https://www.bgee.org/sparql/"
    ],
    "endpoint_set": "Uniprot",
    "file_path": "UniProt/117_biosodafrontend_glioblastoma_orthologs_rat.ttl",
    "predicted_query": "# https://sparql.uniprot.org/sparql\nPREFIX up: <http://purl.uniprot.org/core/>\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX taxon: <http://purl.uniprot.org/taxonomy/>\n\nSELECT DISTINCT ?protein ?proteinName ?ortholog ?orthologName\nWHERE {\n  # Find proteins associated with Glioblastoma\n  ?disease a up:Disease .\n  ?disease rdfs:label \"Glioblastoma\" . # Match the Glioblastoma entity\n  ?protein up:annotation ?diseaseAnnotation .\n  ?diseaseAnnotation a up:Disease_Annotation .\n  ?diseaseAnnotation up:annotated ?protein .\n  ?protein rdfs:label ?proteinName .\n\n  # Find orthologs of these proteins\n  ?protein up:equivalent ?ortholog .\n  ?ortholog a up:Protein .\n  ?ortholog rdfs:label ?orthologName .\n  ?ortholog up:organism taxon:10116 . # Rat taxonomy ID\n\n  # Optional: Filter orthologs expressed in rat brain (if such information exists in UniProt)\n  # This part might require additional properties or relationships depending on the data model.\n  # FILTER EXISTS {\n  #   ?ortholog up:expressedIn \"Rat Brain\" .  # Example: Replace with the actual property if available\n  # }\n}",
    "predicted_endpoint": "https://sparql.uniprot.org/sparql",
    "predicted_endpoint_equal_to_target_endpoint": true,
    "predicted_endpoint_in_federates_with": false,
    "predicted_endpoint_or_federated_endpoint": true,
    "run_id_langsmith": "a7cb6a25-0bda-4a09-9a9d-6e4b42e81178",
    "evaluation_timestamp": "2025-05-12T04:48:09.780618",
    "question_understanding_prompt_tokens": 259,
    "question_understanding_completion_tokens": 40,
    "question_understanding_total_tokens": 299,
    "sparql_query_construction_prompt_tokens": 2265,
    "sparql_query_construction_completion_tokens": 0,
    "sparql_query_construction_total_tokens": 2265,
    "is_valid_sparql": true,
    "sparql_syntax_error": "syntactically correct",
    "result_eval_f1_score": 0.0,
    "result_eval_precision": 0.0,
    "result_eval_recall": 0.0,
    "error_occured_at_endpoint": false,
    "predicted_query_result_is_empty": true,
    "ground_truth_query_result_is_empty": false,
    "error_occured_at_endpoint_message": "no error, but empty result"
  },
  {
    "resource": "https://sparql.uniprot.org/.well-known/sparql-examples/116_biosodafrontend_rabit_mouse_orthologs",
    "natural_language_question": "Rabbit's proteins encoded by genes that are orthologous to Mouse's HBB-Y gene and their cross reference links to Uniprot",
    "ground_truth_query": "PREFIX lscr: <http://purl.org/lscr#>\nPREFIX orth: <http://purl.org/net/orth#>\nPREFIX up: <http://purl.uniprot.org/core/>\nPREFIX obo: <http://purl.obolibrary.org/obo/>\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nSELECT DISTINCT ?PROTEIN_1 ?PROTEIN_2 ?UNIPROT_XREF_1 ?UNIPROT_XREF_2 WHERE {\n\t?taxon_1 up:commonName 'Mouse' .\n\t?taxon_2 up:commonName 'Rabbit' .\n\tSERVICE <https://sparql.omabrowser.org/sparql/> {\n\t\t?cluster a orth:OrthologsCluster .\n\t\t?cluster orth:hasHomologousMember ?node1 .\n\t\t?cluster orth:hasHomologousMember ?node2 .\n\t\t?node2 orth:hasHomologousMember* ?PROTEIN_2 .\n\t\t?node1 orth:hasHomologousMember* ?PROTEIN_1 .\n\t\t?PROTEIN_1 a orth:Protein .\n\t\t?PROTEIN_1 orth:organism/obo:RO_0002162 ?taxon_1 ;\n\t\t\trdfs:label 'HBB-Y' ;\n\t\t\tlscr:xrefUniprot ?UNIPROT_XREF_1 .\n\t\t?PROTEIN_2 a orth:Protein .\n\t\t?PROTEIN_2 orth:organism/obo:RO_0002162 ?taxon_2 .\n\t\t?PROTEIN_2 lscr:xrefUniprot ?UNIPROT_XREF_2 .\n\t\tFILTER ( ?node1 != ?node2 )\n\t}\n}",
    "target_endpoint": "https://sparql.uniprot.org/sparql",
    "federates_with": [
      "https://sparql.omabrowser.org/sparql/"
    ],
    "endpoint_set": "Uniprot",
    "file_path": "UniProt/116_biosodafrontend_rabit_mouse_orthologs.ttl",
    "predicted_query": "# https://sparql.uniprot.org/sparql\nPREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX up: <http://purl.uniprot.org/core/>\nPREFIX taxon: <http://purl.uniprot.org/taxonomy/>\n\nSELECT DISTINCT ?rabbitProtein ?rabbitProteinName\nWHERE {\n  # Find Rabbit proteins\n  ?rabbitProtein a up:Protein ;\n                 up:organism taxon:2697570 ; # Rabbit taxon\n                 rdfs:label ?rabbitProteinName .\n\n  # Find Mouse HBB-Y gene and its associated protein.  Assuming HBB-Y is a gene name/label.\n  SERVICE <https://sparql.uniprot.org/sparql> {\n    SELECT ?mouseProtein WHERE {\n      ?mouseProtein a up:Protein ;\n                    up:organism taxon:129386 ; # Mouse taxon\n                    rdfs:label ?mouseGeneName .\n      FILTER (CONTAINS(lcase(?mouseGeneName), \"HBB-Y\"))\n    }\n  }\n\n  # Assuming orthology is represented by a property, e.g., up:orthologousTo.  This might need adjustment.\n  # This part might require a different endpoint if UniProt doesn't directly store orthology.\n  ?rabbitProtein up:orthologousTo ?mouseProtein .\n}",
    "predicted_endpoint": "https://sparql.uniprot.org/sparql",
    "predicted_endpoint_equal_to_target_endpoint": true,
    "predicted_endpoint_in_federates_with": false,
    "predicted_endpoint_or_federated_endpoint": true,
    "run_id_langsmith": "fbdbca90-eef0-4756-8575-d77c23cd4924",
    "evaluation_timestamp": "2025-05-12T04:48:19.331054",
    "question_understanding_prompt_tokens": 267,
    "question_understanding_completion_tokens": 49,
    "question_understanding_total_tokens": 316,
    "sparql_query_construction_prompt_tokens": 3425,
    "sparql_query_construction_completion_tokens": 580,
    "sparql_query_construction_total_tokens": 4005,
    "is_valid_sparql": true,
    "sparql_syntax_error": "syntactically correct",
    "result_eval_f1_score": 0.0,
    "result_eval_precision": 0.0,
    "result_eval_recall": 0.0,
    "error_occured_at_endpoint": false,
    "predicted_query_result_is_empty": true,
    "ground_truth_query_result_is_empty": false,
    "error_occured_at_endpoint_message": "no error, but empty result"
  },
  {
    "resource": "https://sparql.uniprot.org/.well-known/sparql-examples/29",
    "natural_language_question": "Use <a href=\"http://allie.dbcls.jp/\">ALLIE</a> a service for Abbreviation / Long Form in Japanese and English to search in UniProt using Japanese.",
    "ground_truth_query": "PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX up: <http://purl.uniprot.org/core/>\n\nSELECT ?protein ?englishLabelStr\nWHERE {\n    SERVICE <https://data.allie.dbcls.jp/sparql>{\n        ?x rdfs:label \"アミロイド前駆体タンパク質\"@ja ;\n            rdfs:label ?englishLabel .\n        FILTER(lang(?englishLabel) = \"en\")\n    }\n    BIND (STR(?englishLabel) AS ?englishLabelStr)\n    ?protein a up:Protein .\n    {\n        ?protein (up:recommendedName|up:alternativeName) ?structuredName .\n    }\n    UNION\n    {\n        VALUES(?partType){(up:domain) (up:component)}\n            ?protein ?partType ?part .\n        ?part (up:recommendedName|up:alternativeName) ?structuredName .\n    }\n    ?structuredName ?anyKindOfName  ?englishLabelStr .\n    ?anyKindOfName rdfs:subPropertyOf up:structuredNameType .\n}",
    "target_endpoint": "https://sparql.uniprot.org/sparql/",
    "federates_with": [
      "https://data.allie.dbcls.jp/sparql"
    ],
    "endpoint_set": "Uniprot",
    "file_path": "UniProt/29_search_uniprot_in_japanese_with_allie.ttl",
    "predicted_query": "# https://sparql.uniprot.org/sparql\n# Search UniProt for proteins related to a term (assumed to be translated from Japanese using ALLIE).\n# This query assumes the user has already used ALLIE to translate their Japanese query into a term suitable for UniProt.\n# The query searches for the term in various fields, including protein name, gene name, and keywords.\n\nPREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX up: <http://purl.uniprot.org/core/>\nPREFIX uniprot: <http://purl.uniprot.org/uniprot/>\n\nSELECT ?protein ?proteinName ?geneName ?keyword\nWHERE {\n  ?protein a up:Protein .\n  ?protein rdfs:label ?proteinName . # Protein name\n\n  # Optional: Check for gene name\n  OPTIONAL { ?protein up:encodedBy ?gene .\n             ?gene rdfs:label ?geneName .\n           }\n  # Optional: Check for keywords\n  OPTIONAL { ?protein up:keyword ?keywordResource .\n             ?keywordResource rdfs:label ?keyword .\n           }\n\n  # Filter: Search for the translated term in protein name, gene name, or keyword.\n  FILTER (CONTAINS(LCASE(?proteinName), \"translated_term\") ||  # Replace \"translated_term\" with the actual translated term from ALLIE\n          (BOUND(?geneName) && CONTAINS(LCASE(?geneName), \"translated_term\")) ||\n          (BOUND(?keyword) && CONTAINS(LCASE(?keyword), \"translated_term\"))\n         )\n}",
    "predicted_endpoint": "https://sparql.uniprot.org/sparql",
    "predicted_endpoint_equal_to_target_endpoint": true,
    "predicted_endpoint_in_federates_with": false,
    "predicted_endpoint_or_federated_endpoint": true,
    "run_id_langsmith": "dc64bf7a-139e-4f39-bb04-5eb8ce9e351b",
    "evaluation_timestamp": "2025-05-12T04:48:30.134952",
    "question_understanding_prompt_tokens": 279,
    "question_understanding_completion_tokens": 22,
    "question_understanding_total_tokens": 301,
    "sparql_query_construction_prompt_tokens": 1898,
    "sparql_query_construction_completion_tokens": 737,
    "sparql_query_construction_total_tokens": 2635,
    "is_valid_sparql": true,
    "sparql_syntax_error": "syntactically correct",
    "result_eval_f1_score": 0.0,
    "result_eval_precision": 0.0,
    "result_eval_recall": 0.0,
    "error_occured_at_endpoint": true,
    "predicted_query_result_is_empty": true,
    "ground_truth_query_result_is_empty": true,
    "error_occured_at_endpoint_message": "The read operation timed out"
  },
  {
    "resource": "https://sparql.rhea-db.org/.well-known/sparql-examples/94_Select_all_approved_reactions_with_CHEBI_or_one_of_its_descendant_optional_UniProtKB_reviewed_EC",
    "natural_language_question": "Select all approved reactions with CHEBI:17815 (a 1,2-diacyl-sn-glycerol) or one of its descendant. Display links to UniProtKB/Swiss-Prot entries via EC numbers if the link rhea-ec exists.",
    "ground_truth_query": "PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX rh:<http://rdf.rhea-db.org/>\nPREFIX CHEBI:<http://purl.obolibrary.org/obo/CHEBI_>\nPREFIX up:<http://purl.uniprot.org/core/>\n\nSELECT\n  distinct\n    ?reaction\n    ?enzyme\n    (count(distinct ?protein) as ?proteinCount)\nWHERE {\n  ?reaction rdfs:subClassOf rh:Reaction .\n  ?reaction rh:status rh:Approved .\n  ?reaction rh:side ?reactionSide .\n\n  OPTIONAL {?reaction rh:ec ?enzyme .\n    SERVICE <https://sparql.uniprot.org/sparql> {\n      ?protein up:reviewed true .\n      ?protein up:enzyme ?enzyme.\n    }\n  } .\n  ?reactionSide rh:contains ?participant .\n  ?participant rh:compound ?compound .\n  ?compound rh:chebi ?chebi .\n  ?chebi rdfs:subClassOf* CHEBI:17815 .\n}\nGROUP BY ?reaction ?enzyme\nORDER BY ?reaction\nLIMIT 985915",
    "target_endpoint": "https://sparql.rhea-db.org/sparql",
    "federates_with": [
      "https://sparql.uniprot.org/sparql"
    ],
    "endpoint_set": "Rhea",
    "file_path": "Rhea/94_Select_all_approved_reactions_with_CHEBI_or_one_of_its_descendant_optional_UniProtKB_reviewed_EC.ttl",
    "predicted_query": "# https://sparql.rhea-db.org/sparql\nPREFIX rhea: <http://rdf.rhea-db.org/>\nPREFIX chebi: <http://purl.obolibrary.org/obo/CHEBI_>\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>\n\nSELECT DISTINCT ?reaction ?reactionLabel ?uniprotLink\nWHERE {\n  # Find reactions involving CHEBI:17815 or its descendants\n  {\n    ?reactant rdfs:subClassOf* chebi:17815 .\n  }\n  UNION\n  {\n    BIND(chebi:17815 AS ?reactant)\n  }\n  ?reaction rhea:has_reactant ?reactant .\n  ?reaction rdf:type rhea:Reaction .\n  ?reaction rdfs:label ?reactionLabel .\n\n  # Optionally link to UniProt via EC number\n  OPTIONAL {\n    ?reaction rhea:ec ?ecNumber .\n    SERVICE <https://sparql.uniprot.org/sparql> {\n      ?uniprotLink <http://purl.uniprot.org/core/citation> ?ecNumber .\n    }\n  }\n}",
    "predicted_endpoint": "https://sparql.rhea-db.org/sparql",
    "predicted_endpoint_equal_to_target_endpoint": true,
    "predicted_endpoint_in_federates_with": false,
    "predicted_endpoint_or_federated_endpoint": true,
    "run_id_langsmith": "407fef00-fe3a-462a-915e-ff696ad90e8f",
    "evaluation_timestamp": "2025-05-12T04:58:39.150178",
    "question_understanding_prompt_tokens": 292,
    "question_understanding_completion_tokens": 86,
    "question_understanding_total_tokens": 378,
    "sparql_query_construction_prompt_tokens": 2097,
    "sparql_query_construction_completion_tokens": 585,
    "sparql_query_construction_total_tokens": 2682,
    "is_valid_sparql": true,
    "sparql_syntax_error": "syntactically correct",
    "result_eval_f1_score": 0.0,
    "result_eval_precision": 0.0,
    "result_eval_recall": 0.0,
    "error_occured_at_endpoint": false,
    "predicted_query_result_is_empty": true,
    "ground_truth_query_result_is_empty": false,
    "error_occured_at_endpoint_message": "no error, but empty result"
  },
  {
    "resource": "https://sparql.rhea-db.org/.well-known/sparql-examples/11",
    "natural_language_question": "Distribution of reactions according to the first class of the enzyme classification (federated query)",
    "ground_truth_query": "PREFIX ec: <http://purl.uniprot.org/enzyme/>\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX rh: <http://rdf.rhea-db.org/>\nPREFIX skos: <http://www.w3.org/2004/02/skos/core#>\n\n# Query 11\n# Retrieve the count of reactions mapped to each level (main class) of the enzyme classification\n#\n# This query mimics the Filter section of the Rhea website (Browse all reactions)\n# https://www.rhea-db.org/rhea?query=\nSELECT ?ecClass (STR(?ecName) AS ?ecClassName) (COUNT(?rhea) AS ?rheaCount)\nWHERE {\n  SERVICE <https://sparql.uniprot.org/sparql> {\n    VALUES (?ecClass) { (ec:1.-.-.-)(ec:2.-.-.-)(ec:3.-.-.-)(ec:4.-.-.-)(ec:5.-.-.-) (ec:6.-.-.-) (ec:7.-.-.-)}\n    ?ecNumber rdfs:subClassOf ?ecClass .\n    ?ecClass skos:prefLabel ?ecName .\n  }\n  ?rhea rdfs:subClassOf rh:Reaction .\n  ?rhea rh:ec ?ecNumber .\n} GROUP BY ?ecClass ?ecName",
    "target_endpoint": "https://sparql.rhea-db.org/sparql",
    "federates_with": [
      "https://sparql.uniprot.org/sparql"
    ],
    "endpoint_set": "Rhea",
    "file_path": "Rhea/11.ttl",
    "predicted_query": "# https://sparql.rhea-db.org/sparql\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX rhea: <http://rdf.rhea-db.org/>\nPREFIX chebi: <http://purl.obolibrary.org/obo/CHEBI_>\n\nSELECT ?firstLevelEC (COUNT(DISTINCT ?reaction) AS ?reactionCount)\nWHERE {\n  # Subquery to get Rhea reactions associated with EC numbers\n  {\n    SELECT DISTINCT ?reaction ?ec\n    WHERE {\n      ?reaction a rhea:Reaction .\n      ?reaction rhea:ec ?ec .\n    }\n  }\n\n  BIND(SUBSTR(?ec, 1, 1) AS ?firstLevelEC) # Extract the first level EC class\n\n}\nGROUP BY ?firstLevelEC\nORDER BY DESC(?reactionCount)",
    "predicted_endpoint": "https://sparql.rhea-db.org/sparql",
    "predicted_endpoint_equal_to_target_endpoint": true,
    "predicted_endpoint_in_federates_with": false,
    "predicted_endpoint_or_federated_endpoint": true,
    "run_id_langsmith": "af04bced-58b3-4874-8824-4992fefd6128",
    "evaluation_timestamp": "2025-05-12T04:58:47.554017",
    "question_understanding_prompt_tokens": 253,
    "question_understanding_completion_tokens": 27,
    "question_understanding_total_tokens": 280,
    "sparql_query_construction_prompt_tokens": 1721,
    "sparql_query_construction_completion_tokens": 0,
    "sparql_query_construction_total_tokens": 1721,
    "is_valid_sparql": true,
    "sparql_syntax_error": "syntactically correct",
    "result_eval_f1_score": 0.0,
    "result_eval_precision": 0.0,
    "result_eval_recall": 0.0,
    "error_occured_at_endpoint": false,
    "predicted_query_result_is_empty": true,
    "ground_truth_query_result_is_empty": false,
    "error_occured_at_endpoint_message": "no error, but empty result"
  },
  {
    "resource": "https://sparql.rhea-db.org/.well-known/sparql-examples/109_Distribution_of_reactions_according_to_the_first_level_of_enzyme_classification",
    "natural_language_question": "Distribution of reactions according to the first level of enzyme classification",
    "ground_truth_query": "\nPREFIX rh:<http://rdf.rhea-db.org/>\nPREFIX ec:<http://purl.uniprot.org/enzyme/>\nPREFIX rdfs:<http://www.w3.org/2000/01/rdf-schema#>\nPREFIX skos:<http://www.w3.org/2004/02/skos/core#>\n\nSELECT\n  ?ecClass\n  (str(?ecName) as ?ecClassName)\n  (count(?reaction) as ?reactionCount)\nWHERE\n{\n  SERVICE <http://sparql.uniprot.org/sparql> {\n    VALUES (?ecClass) { (ec:1.-.-.-)(ec:2.-.-.-)(ec:3.-.-.-)(ec:4.-.-.-)(ec:5.-.-.-) (ec:6.-.-.-) (ec:7.-.-.-) }\n    ?ecNumber rdfs:subClassOf ?ecClass .\n    ?ecClass skos:prefLabel ?ecName .\n  }\n  ?reaction rdfs:subClassOf rh:Reaction .\n  ?reaction rh:ec ?ecNumber .\n}\nGROUP BY ?ecClass ?ecName\n",
    "target_endpoint": "https://sparql.rhea-db.org/sparql",
    "federates_with": [
      "http://sparql.uniprot.org/sparql"
    ],
    "endpoint_set": "Rhea",
    "file_path": "Rhea/109_Distribution_of_reactions_according_to_the_first_level_of_enzyme_classification.ttl",
    "predicted_query": "# https://sparql.rhea-db.org/sparql\nPREFIX rhea: <http://rdf.rhea-db.org/>\nPREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\n\nSELECT ?firstLevelEnzymeClassification (COUNT(DISTINCT ?reaction) AS ?reactionCount)\nWHERE {\n  # Get reactions from Rhea\n  SERVICE <https://sparql.rhea-db.org/sparql> {\n    ?reaction rdf:type rhea:Reaction .\n    # Assuming there's a property linking reactions to enzymes.  This might need adjustment.\n    OPTIONAL { ?reaction rhea:enzyme ?enzyme . }\n  }\n\n  # Federate with UniProt to get enzyme classification.  This assumes UniProt contains enzyme classification data.\n  SERVICE <https://sparql.uniprot.org/sparql> {\n    OPTIONAL {\n      ?enzyme uniprot:classifiedWith ?enzymeClass .  # Assuming a property like 'classifiedWith' exists.  Adjust as needed.\n      # Extract the first level of the enzyme classification.  This is a placeholder.\n      # The exact method depends on how the enzyme classification is represented in UniProt.\n      # Example: If enzymeClass is a string like \"1.2.3.4\", you might use SUBSTR.\n      BIND (SUBSTR(STR(?enzymeClass), 1, 1) AS ?firstLevelEnzymeClassification) # Example using SUBSTR\n    }\n  }\n  FILTER (BOUND(?firstLevelEnzymeClassification)) # only keep results where we have a first level enzyme classification\n}\nGROUP BY ?firstLevelEnzymeClassification\nORDER BY DESC(?reactionCount)",
    "predicted_endpoint": "https://sparql.rhea-db.org/sparql",
    "predicted_endpoint_equal_to_target_endpoint": true,
    "predicted_endpoint_in_federates_with": false,
    "predicted_endpoint_or_federated_endpoint": true,
    "run_id_langsmith": "0ffb76ff-c28a-429f-8391-6014d986608a",
    "evaluation_timestamp": "2025-05-12T04:58:56.263319",
    "question_understanding_prompt_tokens": 246,
    "question_understanding_completion_tokens": 27,
    "question_understanding_total_tokens": 273,
    "sparql_query_construction_prompt_tokens": 1721,
    "sparql_query_construction_completion_tokens": 0,
    "sparql_query_construction_total_tokens": 1721,
    "is_valid_sparql": false,
    "sparql_syntax_error": "Line 18, column 15: Unresolved prefixed name: uniprot:classifiedWith",
    "result_eval_f1_score": 0.0,
    "result_eval_precision": 0.0,
    "result_eval_recall": 0.0,
    "error_occured_at_endpoint": false,
    "predicted_query_result_is_empty": true,
    "ground_truth_query_result_is_empty": false,
    "error_occured_at_endpoint_message": "syntactically not correct"
  },
  {
    "resource": "https://sparql.rhea-db.org/.well-known/sparql-examples/12",
    "natural_language_question": "Select all Rhea reactions linked to protein sequences (enzymes and transporters) in UniProtKB",
    "ground_truth_query": "PREFIX rh: <http://rdf.rhea-db.org/>\nPREFIX up: <http://purl.uniprot.org/core/>\n\n# Query 12\n# Select all Rhea reactions used to annotate enzyme sequences in UniProtKB\n# return the number of UniProtKB entries\n# Federated query using a service to UniProt SPARQL endpoint\n#\n# This query corresponds to the Rhea website query:\n# https://www.rhea-db.org/rhea?query=uniprot:*\n#\nSELECT ?uniprotCount ?rhea ?accession ?equation \nWHERE {\n  SERVICE <https://sparql.uniprot.org/sparql> { \n  \tSELECT ?rhea (count(?uniprot) as ?uniprotCount) {\n      ?uniprot up:annotation/up:catalyticActivity/up:catalyzedReaction ?rhea . \n  \t}\n  \tGROUP BY ?rhea\n  }\n  ?rhea rh:accession ?accession .\n  ?rhea rh:equation ?equation .\n}",
    "target_endpoint": "https://sparql.rhea-db.org/sparql",
    "federates_with": [
      "https://sparql.uniprot.org/sparql"
    ],
    "endpoint_set": "Rhea",
    "file_path": "Rhea/12.ttl",
    "predicted_query": "# https://sparql.rhea-db.org/sparql\nPREFIX rhea: <http://rdf.rhea-db.org/>\nPREFIX uniprot: <http://purl.uniprot.org/core/>\n\nSELECT DISTINCT ?rheaReaction\nWHERE {\n  # Select Rhea reactions\n  ?rheaReaction a rhea:Reaction .\n\n  # Find Rhea reactions that have participants that are enzymes (proteins)\n  ?rheaReaction rhea:equation ?equation .\n  ?equation rhea:side ?side .\n  ?side rhea:contains ?compound .\n  ?compound rhea:accession ?chebi . # Assuming enzymes are represented via ChEBI\n\n  # Link to UniProtKB entries via a SERVICE clause\n  SERVICE <https://sparql.uniprot.org/sparql> {\n    # Find UniProtKB entries that are proteins and are linked to the ChEBI ID\n    ?protein a uniprot:Protein ;\n             uniprot:enzyme ?enzyme . # Assuming enzyme annotation links to ChEBI\n\n    FILTER CONTAINS(str(?enzyme), str(?chebi)) # Match the ChEBI ID from Rhea with the enzyme annotation in UniProt\n  }\n}",
    "predicted_endpoint": "https://sparql.rhea-db.org/sparql",
    "predicted_endpoint_equal_to_target_endpoint": true,
    "predicted_endpoint_in_federates_with": false,
    "predicted_endpoint_or_federated_endpoint": true,
    "run_id_langsmith": "b807bd38-9024-4ff8-a446-3b55ff6110f1",
    "evaluation_timestamp": "2025-05-12T04:59:03.835248",
    "question_understanding_prompt_tokens": 257,
    "question_understanding_completion_tokens": 30,
    "question_understanding_total_tokens": 287,
    "sparql_query_construction_prompt_tokens": 1792,
    "sparql_query_construction_completion_tokens": 0,
    "sparql_query_construction_total_tokens": 1792,
    "is_valid_sparql": true,
    "sparql_syntax_error": "syntactically correct",
    "result_eval_f1_score": 0.0,
    "result_eval_precision": 0.0,
    "result_eval_recall": 0.0,
    "error_occured_at_endpoint": false,
    "predicted_query_result_is_empty": true,
    "ground_truth_query_result_is_empty": false,
    "error_occured_at_endpoint_message": "no error, but empty result"
  },
  {
    "resource": "https://sparql.rhea-db.org/.well-known/sparql-examples/112_Total_number_of_reaction_ec_protein_links",
    "natural_language_question": "Total number of <reaction> <ec> <protein> links",
    "ground_truth_query": "PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX rh:<http://rdf.rhea-db.org/>\nPREFIX ec:<http://purl.uniprot.org/enzyme/>\nPREFIX up:<http://purl.uniprot.org/core/>\n\nSELECT\n  (count(?reaction) as ?reactionEcProteinLinkCount)\nWHERE {\n  ?reaction rdfs:subClassOf rh:Reaction .\n  ?reaction rh:ec ?enzyme\n  SERVICE <http://sparql.uniprot.org/sparql> {\n    ?protein up:reviewed true .\n    ?protein up:enzyme ?enzyme.\n  }\n}",
    "target_endpoint": "https://sparql.rhea-db.org/sparql",
    "federates_with": [
      "http://sparql.uniprot.org/sparql"
    ],
    "endpoint_set": "Rhea",
    "file_path": "Rhea/112_Total_number_of_reaction_ec_protein_links.ttl",
    "predicted_query": "# https://sparql.uniprot.org/sparql\nPREFIX rhea: <http://rdf.rhea-db.org/>\nPREFIX uniprot: <http://purl.uniprot.org/core/>\nPREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>\n\nSELECT (COUNT(DISTINCT ?reactionProteinPair) AS ?totalLinks)\nWHERE {\n  # Subquery to find proteins associated with EC numbers in UniProt\n  SERVICE <https://sparql.uniprot.org/sparql> {\n    SELECT DISTINCT ?protein ?ecNumber WHERE {\n      ?protein a uniprot:Protein .\n      ?protein uniprot:annotation ?annotation .\n      ?annotation rdf:type uniprot:EC_Annotation .\n      ?annotation uniprot:ecNumber ?ecNumber .\n    }\n  }\n\n  # Subquery to find reactions associated with EC numbers in Rhea\n  SERVICE <https://sparql.rhea-db.org/sparql> {\n    SELECT DISTINCT ?reaction ?ecNumber WHERE {\n      ?reaction a rhea:Reaction .\n      ?reaction rhea:equation ?equation . #Not really needed, but to ensure we are dealing with a reaction\n      ?reaction rhea:ec ?ecNumber .\n    }\n  }\n\n  # Join the results on the EC number to link reactions and proteins\n  BIND(IRI(CONCAT(STR(?reaction), STR(?protein))) AS ?reactionProteinPair) # Create a unique identifier for each reaction-protein pair\n}",
    "predicted_endpoint": "https://sparql.uniprot.org/sparql",
    "predicted_endpoint_equal_to_target_endpoint": false,
    "predicted_endpoint_in_federates_with": false,
    "predicted_endpoint_or_federated_endpoint": false,
    "run_id_langsmith": "89f9e43a-5029-4037-9790-df1725a6a8d6",
    "evaluation_timestamp": "2025-05-12T04:59:12.433395",
    "question_understanding_prompt_tokens": 253,
    "question_understanding_completion_tokens": 24,
    "question_understanding_total_tokens": 277,
    "sparql_query_construction_prompt_tokens": 2283,
    "sparql_query_construction_completion_tokens": 0,
    "sparql_query_construction_total_tokens": 2283,
    "is_valid_sparql": true,
    "sparql_syntax_error": "syntactically correct",
    "result_eval_f1_score": 0.0,
    "result_eval_precision": 0.0,
    "result_eval_recall": 0.0,
    "error_occured_at_endpoint": false,
    "predicted_query_result_is_empty": false,
    "ground_truth_query_result_is_empty": false,
    "error_occured_at_endpoint_message": "no error"
  },
  {
    "resource": "https://sparql.rhea-db.org/.well-known/sparql-examples/19_draft_human_metabolome",
    "natural_language_question": "Generate a draft human metabolome",
    "ground_truth_query": "PREFIX chebislash: <http://purl.obolibrary.org/obo/chebi/>\nPREFIX rh: <http://rdf.rhea-db.org/>\nPREFIX taxon: <http://purl.uniprot.org/taxonomy/>\nPREFIX up: <http://purl.uniprot.org/core/>\n\nSELECT\n  ?uniprot ?mnemonic ?rhea ?chebi ?smiles ?inchiKey\nWHERE\n{\n  ?rhea rh:side/rh:contains/rh:compound ?compound .\n  ?compound (rh:chebi|(rh:reactivePart/rh:chebi)|(rh:underlyingChebi/rh:chebi)) ?chebi .\n  ?chebi chebislash:smiles ?smiles ;\n          chebislash:inchikey ?inchiKey .\n  SERVICE <https://sparql.uniprot.org/sparql> {\n     ?uniprot up:annotation/up:catalyticActivity/up:catalyzedReaction ?rhea ;\n                                             up:organism taxon:9606 ;\n                                             up:mnemonic ?mnemonic .\n\n   }\n}",
    "target_endpoint": "https://sparql.rhea-db.org/sparql/",
    "federates_with": [
      "https://sparql.uniprot.org/sparql"
    ],
    "endpoint_set": "Rhea",
    "file_path": "Rhea/19_draft_human_metabolome.ttl",
    "predicted_query": "# https://sparql.uniprot.org/sparql\nPREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX up: <http://purl.uniprot.org/core/>\nPREFIX taxon: <http://purl.uniprot.org/taxonomy/>\n\nSELECT DISTINCT ?protein ?gene ?function ?reaction ?lipidName\nWHERE {\n  # Find human proteins in UniProt\n  SERVICE <https://sparql.uniprot.org/sparql> {\n    ?protein a up:Protein .\n    ?protein up:organism taxon:9606 .  # Homo sapiens\n    ?protein rdfs:label ?gene .\n    OPTIONAL { ?protein up:function ?function . }\n    # Link to Rhea reactions (if available)\n    OPTIONAL { ?protein up:encodedBy ?gene .\n               ?gene rdfs:seeAlso ?reaction .\n               FILTER (STRSTARTS(str(?reaction), \"http://rdf.rhea-db.org\"))\n             }\n  }\n  \n  # Find corresponding Rhea reactions\n  SERVICE <https://sparql.rhea-db.org/sparql> {\n    OPTIONAL {\n      ?reaction rdfs:label ?reactionName .\n    }\n  }\n  \n  # Find corresponding lipids in SwissLipids\n  SERVICE <https://sparql.swisslipids.org/sparql/> {\n   OPTIONAL {\n      ?lipid a <http://www.swisslipids.org/rdf/SwissLipids#Lipid> .\n      ?lipid rdfs:label ?lipidName .\n    }\n  }\n}",
    "predicted_endpoint": "https://sparql.uniprot.org/sparql",
    "predicted_endpoint_equal_to_target_endpoint": false,
    "predicted_endpoint_in_federates_with": true,
    "predicted_endpoint_or_federated_endpoint": true,
    "run_id_langsmith": "059a1529-a50f-4c98-9244-ecbe8eae4509",
    "evaluation_timestamp": "2025-05-12T04:59:26.057618",
    "question_understanding_prompt_tokens": 245,
    "question_understanding_completion_tokens": 22,
    "question_understanding_total_tokens": 267,
    "sparql_query_construction_prompt_tokens": 1449,
    "sparql_query_construction_completion_tokens": 573,
    "sparql_query_construction_total_tokens": 2022,
    "is_valid_sparql": true,
    "sparql_syntax_error": "syntactically correct",
    "result_eval_f1_score": 0.0,
    "result_eval_precision": 0.0,
    "result_eval_recall": 0.0,
    "error_occured_at_endpoint": true,
    "predicted_query_result_is_empty": true,
    "ground_truth_query_result_is_empty": true,
    "error_occured_at_endpoint_message": "The read operation timed out"
  },
  {
    "resource": "https://sparql.rhea-db.org/.well-known/sparql-examples/20_search_chemical_names_in_japanese",
    "natural_language_question": "Search for Chemical names starting in Japanese, translated to english using allie",
    "ground_truth_query": "PREFIX oboInOwl: <http://www.geneontology.org/formats/oboInOwl#>\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\n\nSELECT\n*\nWHERE {\nSERVICE <https://data.allie.dbcls.jp/sparql>{\n        ?x rdfs:label \"1,2,4-トリクロロベンゼン\"@ja ;\n            rdfs:label ?englishLabel .\n        FILTER(lang(?englishLabel) = \"en\")\n    }\n  BIND(STR(?englishLabel) AS ?englishLabelStr)\n  ?chebi rdfs:label|oboInOwl:hasSynonym ?englishLabelStr .\n}",
    "target_endpoint": "https://sparql.rhea-db.org/sparql/",
    "federates_with": [
      "https://data.allie.dbcls.jp/sparql"
    ],
    "endpoint_set": "Rhea",
    "file_path": "Rhea/20_search_chemical_names_in_japanese.ttl",
    "predicted_query": "# https://sparql.rhea-db.org/sparql\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX chebi: <http://purl.obolibrary.org/obo/CHEBI_>\nPREFIX skos: <http://www.w3.org/2004/02/skos/core#>\n\nSELECT DISTINCT ?chebi_name_en\nWHERE {\n  # Query ChEBI for chemical entities\n  SERVICE <https://sparql.rhea-db.org/sparql> {\n    ?chebi_uri rdfs:label ?chebi_name .\n    FILTER STRSTARTS(LCASE(?chebi_name), \"japanese\") # Filter for names starting with \"japanese\" (case-insensitive)\n    \n    # Attempt to find an English translation using skos:prefLabel\n    OPTIONAL {\n      ?chebi_uri skos:prefLabel ?chebi_name_en .\n      FILTER (LANG(?chebi_name_en) = \"en\") # Filter for English labels\n    }\n    \n    # If no direct English label is found, return the original name\n    BIND(IF(BOUND(?chebi_name_en), ?chebi_name_en, ?chebi_name) AS ?chebi_name_en)\n  }\n}",
    "predicted_endpoint": "https://sparql.rhea-db.org/sparql",
    "predicted_endpoint_equal_to_target_endpoint": true,
    "predicted_endpoint_in_federates_with": false,
    "predicted_endpoint_or_federated_endpoint": true,
    "run_id_langsmith": "d8385d42-1014-4cd6-a69e-6fbb0e511000",
    "evaluation_timestamp": "2025-05-12T05:09:36.881109",
    "question_understanding_prompt_tokens": 251,
    "question_understanding_completion_tokens": 23,
    "question_understanding_total_tokens": 274,
    "sparql_query_construction_prompt_tokens": 1478,
    "sparql_query_construction_completion_tokens": 503,
    "sparql_query_construction_total_tokens": 1981,
    "is_valid_sparql": false,
    "sparql_syntax_error": "BIND: Variable used when already in-scope: ?chebi_name_en in BIND(if(bound(?chebi_name_en), ?chebi_name_en, ?chebi_name) AS ?chebi_name_en)",
    "result_eval_f1_score": 0.0,
    "result_eval_precision": 0.0,
    "result_eval_recall": 0.0,
    "error_occured_at_endpoint": false,
    "predicted_query_result_is_empty": true,
    "ground_truth_query_result_is_empty": false,
    "error_occured_at_endpoint_message": "syntactically not correct"
  },
  {
    "resource": "https://sparql.rhea-db.org/.well-known/sparql-examples/117_Retrieve_parent_reactions_and_their_catalyzing_enzymes_for_a_metabolite_that_is_not_directly_involved_in_a_reaction",
    "natural_language_question": "Retrieve parent reactions (and their catalyzing enzymes) for a metabolite that is not directly involved in a reaction (ex: CHEBI:83137).",
    "ground_truth_query": "PREFIX CHEBI: <http://purl.obolibrary.org/obo/CHEBI_>\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX rh:<http://rdf.rhea-db.org/>\nPREFIX ec:<http://purl.uniprot.org/enzyme/>\nPREFIX up:<http://purl.uniprot.org/core/>\nPREFIX taxon:<http://purl.uniprot.org/taxonomy/>\nPREFIX keywords:<http://purl.uniprot.org/keywords/>\n\nSELECT\n  ?chebi\n  ?ecNumber\n  (count(?protein) as ?proteinCount)\n  ?reaction\n  ?equation\nWHERE {\n  ?reaction rdfs:subClassOf rh:Reaction .\n  ?reaction rh:status rh:Approved .\n  ?reaction rh:equation ?equation .\n  ?reaction rh:ec ?ecNumber .\n  ?reaction rh:side ?reactionSide .\n  ?reactionSide rh:contains ?participant .\n  ?participant rh:compound ?compound .\n  ?compound rh:chebi ?chebi .\n  CHEBI:83137 rdfs:subClassOf+ ?chebi.\n\n  SERVICE <https://sparql.uniprot.org/sparql> {\n  ?protein a up:Protein .\n  ?protein up:reviewed true .\n    {?protein up:enzyme ?ecNumber}\n  UNION\n    {?protein up:domain/up:enzyme ?ecNumber}\n  UNION\n    {?protein up:component/up:enzyme ?ecNumber} .\n  }\n} \nGROUP BY ?chebi ?ecNumber ?reaction ?equation",
    "target_endpoint": "https://sparql.rhea-db.org/sparql",
    "federates_with": [
      "https://sparql.uniprot.org/sparql"
    ],
    "endpoint_set": "Rhea",
    "file_path": "Rhea/117_Retrieve_parent_reactions_and_their_catalyzing_enzymes_for_a_metabolite_that_is_not_directly_involved_in_a_reaction.ttl",
    "predicted_query": "# https://sparql.rhea-db.org/sparql\nPREFIX rhea: <http://rdf.rhea-db.org/>\nPREFIX chebi: <http://purl.obolibrary.org/obo/CHEBI_>\nPREFIX uniprot: <http://purl.uniprot.org/core/>\n\nSELECT DISTINCT ?reaction ?reactionId ?enzyme ?enzymeName\nWHERE {\n  # Find reactions that have CHEBI:83137 as a product\n  ?reaction rhea:right ?chebi83137 .\n  FILTER (?chebi83137 = chebi:83137) .\n  ?reaction rhea:id ?reactionId .\n\n  # Find enzymes catalyzing the reaction using UniProt\n  SERVICE <https://sparql.uniprot.org/sparql> {\n    ?enzyme uniprot:catalyticActivity ?reactionId . # Assuming uniprot:catalyticActivity links to Rhea reaction IDs\n    ?enzyme rdfs:label ?enzymeName .\n  }\n}",
    "predicted_endpoint": "https://sparql.rhea-db.org/sparql",
    "predicted_endpoint_equal_to_target_endpoint": true,
    "predicted_endpoint_in_federates_with": false,
    "predicted_endpoint_or_federated_endpoint": true,
    "run_id_langsmith": "f3b2e7ab-3ab3-4d42-99ba-33ca431cb4a7",
    "evaluation_timestamp": "2025-05-12T05:09:44.373999",
    "question_understanding_prompt_tokens": 271,
    "question_understanding_completion_tokens": 42,
    "question_understanding_total_tokens": 313,
    "sparql_query_construction_prompt_tokens": 2156,
    "sparql_query_construction_completion_tokens": 0,
    "sparql_query_construction_total_tokens": 2156,
    "is_valid_sparql": false,
    "sparql_syntax_error": "Line 16, column 13: Unresolved prefixed name: rdfs:label",
    "result_eval_f1_score": 0.0,
    "result_eval_precision": 0.0,
    "result_eval_recall": 0.0,
    "error_occured_at_endpoint": false,
    "predicted_query_result_is_empty": true,
    "ground_truth_query_result_is_empty": false,
    "error_occured_at_endpoint_message": "syntactically not correct"
  },
  {
    "resource": "https://sparql.rhea-db.org/.well-known/sparql-examples/18",
    "natural_language_question": "Use <a href=\"https://idsm.elixir-czech.cz/sparql\">IDSM Sachem</a> to find ChEBIs with a a <a href=\"https://www.ebi.ac.uk/chebi/searchId.do?chebiId=CHEBI:35516\">Cholestane</a> skeleton (in SMILES). Then match returned ChEBIs to Rhea undirected reactions.",
    "ground_truth_query": "PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX rh: <http://rdf.rhea-db.org/>\nPREFIX sachem: <http://bioinfo.uochb.cas.cz/rdf/v1.0/sachem#>\n\n\nSELECT \n  ?rhea \n  ?chebi\nWHERE {\n  SERVICE <https://idsm.elixir-czech.cz/sparql/endpoint/chebi> {\n    ?chebi sachem:substructureSearch [\n        sachem:query \"[C@]12(CCC3CCCC[C@]3(C)[C@@]1([H])CC[C@]1(C)[C@@]([H])([C@@](C)([H])CCCC(C)C)CC[C@@]21[H])[H]\" ].\n  }\n  ?rhea rh:side/rh:contains/rh:compound/rdfs:subClassOf ?chebi .\n}",
    "target_endpoint": "https://sparql.rhea-db.org/sparql",
    "federates_with": [
      "https://idsm.elixir-czech.cz/sparql/endpoint/chebi"
    ],
    "endpoint_set": "Rhea",
    "file_path": "Rhea/18.ttl",
    "predicted_query": "# https://sparql.rhea-db.org/sparql\nPREFIX rhea: <http://rdf.rhea-db.org/>\nPREFIX chebi: <http://purl.obolibrary.org/obo/CHEBI_>\n\nSELECT DISTINCT ?reaction ?reactionName\nWHERE {\n  # Subquery to get ChEBI IDs with Cholestane skeleton from IDSM Sachem\n  SERVICE <https://idsm.elixir-czech.cz/sparql> {\n    PREFIX ids: <https://idsm.elixir-czech.cz/ontology/>\n    PREFIX chebi: <http://purl.obolibrary.org/obo/CHEBI_>\n    \n    SELECT DISTINCT ?chebiID WHERE {\n      ?structure ids:has_structure_depiction ?smiles .\n      ?structure ids:represents ?chebiID .\n      FILTER (?chebiID = chebi:35516) #Filtering for Cholestane skeleton\n    }\n  } # End of IDSM Sachem subquery\n\n  # Find Rhea undirected reactions involving the ChEBI IDs\n  ?reaction rhea: Rhea_has_participant ?chebiID .\n  ?reaction a rhea: Rhea_undirected_reaction .\n  ?reaction rdfs:label ?reactionName .\n}",
    "predicted_endpoint": "https://sparql.rhea-db.org/sparql",
    "predicted_endpoint_equal_to_target_endpoint": true,
    "predicted_endpoint_in_federates_with": false,
    "predicted_endpoint_or_federated_endpoint": true,
    "run_id_langsmith": "bba3101b-1098-4511-9e3b-36868dd752ce",
    "evaluation_timestamp": "2025-05-12T05:09:52.749991",
    "question_understanding_prompt_tokens": 331,
    "question_understanding_completion_tokens": 52,
    "question_understanding_total_tokens": 383,
    "sparql_query_construction_prompt_tokens": 2567,
    "sparql_query_construction_completion_tokens": 482,
    "sparql_query_construction_total_tokens": 3049,
    "is_valid_sparql": false,
    "sparql_syntax_error": "Encountered \" \"prefix\" \"PREFIX \"\" at line 9, column 5.\nWas expecting one of:\n     ...\n     ...\n     ...\n     ...\n     ...\n     ...\n    \"select\" ...\n    \"values\" ...\n    \"graph\" ...\n    \"optional\" ...\n    \"minus\" ...\n    \"bind\" ...\n    \"service\" ...\n    \"filter\" ...\n    \"true\" ...\n    \"false\" ...\n     ...\n     ...\n     ...\n     ...\n     ...\n     ...\n     ...\n     ...\n     ...\n     ...\n     ...\n     ...\n     ...\n    \"(\" ...\n     ...\n    \"{\" ...\n    \"}\" ...\n    \"[\" ...\n     ...\n    \"<<(\" ...\n    \"<<\" ...",
    "result_eval_f1_score": 0.0,
    "result_eval_precision": 0.0,
    "result_eval_recall": 0.0,
    "error_occured_at_endpoint": false,
    "predicted_query_result_is_empty": true,
    "ground_truth_query_result_is_empty": false,
    "error_occured_at_endpoint_message": "syntactically not correct"
  },
  {
    "resource": "https://sparql.rhea-db.org/.well-known/sparql-examples/115_Retrieve_the_set_of_metabolites_involved_in_reactions_catalyzed_by_human_genes_HUMAN_reference_proteome",
    "natural_language_question": "Retrieve the set of metabolites involved in reactions catalyzed by human genes (HUMAN reference proteome)",
    "ground_truth_query": "\nPREFIX rh:<http://rdf.rhea-db.org/>\nPREFIX taxon:<http://purl.uniprot.org/taxonomy/>\nPREFIX ec:<http://purl.uniprot.org/enzyme/>\nPREFIX rdfs:<http://www.w3.org/2000/01/rdf-schema#>\nPREFIX up:<http://purl.uniprot.org/core/>\nPREFIX keywords:<http://purl.uniprot.org/keywords/>\n\nSELECT\n  ?chebi\n  ?reaction\n  ?ecNumber\n  ?protein\n  ?ensemblTranscript\n  ?ensemblGene\nWHERE {\n  SERVICE <https://sparql.uniprot.org/sparql> {\n    ?protein a up:Protein .\n    ?protein up:reviewed true .\n    ?protein up:organism taxon:9606 .\n    ?protein up:classifiedWith keywords:1185 .\n\n    ?protein rdfs:seeAlso ?ensemblTranscript .\n    ?ensemblTranscript a up:Transcript_Resource .\n    ?ensemblTranscript up:database <http://purl.uniprot.org/database/Ensembl> .\n    ?ensemblTranscript up:transcribedFrom ?ensemblGene .\n\n      {?protein up:enzyme ?ecNumber .}\n    UNION\n      {?protein up:domain/up:enzyme ?ecNumber .}\n    UNION\n      {?protein up:component/up:enzyme ?ecNumber .}\n  }\n\n  ?reaction rdfs:subClassOf rh:Reaction .\n  ?reaction rh:status rh:Approved .\n  ?reaction rh:ec ?ecNumber .\n  ?reaction rh:side ?reactionSide .\n  ?reactionSide rh:contains ?participant .\n  ?participant rh:compound ?compound .\n  ?compound rh:chebi ?chebi . # only considering small molecules participants\n}",
    "target_endpoint": "https://sparql.rhea-db.org/sparql",
    "federates_with": [
      "https://sparql.uniprot.org/sparql"
    ],
    "endpoint_set": "Rhea",
    "file_path": "Rhea/115_Retrieve_the_set_of_metabolites_involved_in_reactions_catalyzed_by_human_genes_HUMAN_reference_proteome.ttl",
    "predicted_query": "# https://sparql.uniprot.org/sparql\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX up: <http://purl.uniprot.org/core/>\nPREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>\nPREFIX rhea: <http://rdf.rhea-db.org/>\nPREFIX chebi: <http://purl.obolibrary.org/obo/CHEBI_>\n\nSELECT DISTINCT ?metabolite\nWHERE {\n  # Query UniProt for human proteins and their Rhea reactions\n  SERVICE <https://sparql.uniprot.org/sparql> {\n    SELECT DISTINCT ?protein ?rheaId WHERE {\n      ?protein a up:Protein .\n      ?protein up:organism <http://purl.uniprot.org/taxonomy/9606> . # Homo sapiens (Human)\n      ?protein rdfs:seeAlso ?rheaResource .\n      FILTER (REGEX(STR(?rheaResource), \"rhea.db.org\"))\n      BIND(STRAFTER(STR(?rheaResource), \"http://rdf.rhea-db.org/\") AS ?rheaId)\n    }\n  }\n\n  # Query Rhea DB for metabolites involved in the reactions\n  SERVICE <https://sparql.rhea-db.org/sparql> {\n    ?reaction rhea:id ?rheaId .\n    {\n      ?reaction rhea:has_reactant ?metaboliteURI .\n    }\n    UNION\n    {\n      ?reaction rhea:has_product ?metaboliteURI .\n    }\n    ?metaboliteURI rdfs:label ?metabolite .\n    #FILTER (STRSTARTS(STR(?metaboliteURI), \"http://purl.obolibrary.org/obo/CHEBI_\"))\n  }\n}",
    "predicted_endpoint": "https://sparql.uniprot.org/sparql",
    "predicted_endpoint_equal_to_target_endpoint": false,
    "predicted_endpoint_in_federates_with": true,
    "predicted_endpoint_or_federated_endpoint": true,
    "run_id_langsmith": "113c90d3-fc1c-4465-992a-9cf04eca9f35",
    "evaluation_timestamp": "2025-05-12T05:10:01.450041",
    "question_understanding_prompt_tokens": 256,
    "question_understanding_completion_tokens": 26,
    "question_understanding_total_tokens": 282,
    "sparql_query_construction_prompt_tokens": 2399,
    "sparql_query_construction_completion_tokens": 638,
    "sparql_query_construction_total_tokens": 3037,
    "is_valid_sparql": true,
    "sparql_syntax_error": "syntactically correct",
    "result_eval_f1_score": 0.0,
    "result_eval_precision": 0.0,
    "result_eval_recall": 0.0,
    "error_occured_at_endpoint": false,
    "predicted_query_result_is_empty": true,
    "ground_truth_query_result_is_empty": false,
    "error_occured_at_endpoint_message": "no error, but empty result"
  }
]