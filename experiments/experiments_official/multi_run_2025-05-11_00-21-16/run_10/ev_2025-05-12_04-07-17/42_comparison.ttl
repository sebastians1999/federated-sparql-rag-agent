
# Natural Language Question
# =======================
Connect patents cited in UniProtKB with those in the patent database at EPO via publication number.

# Target Endpoint
# ===============
https://sparql.uniprot.org/sparql/

# Ground Truth Query
# =================
PREFIX patent: <http://data.epo.org/linked-data/def/patent/>
PREFIX skos: <http://www.w3.org/2004/02/skos/core#>
PREFIX up: <http://purl.uniprot.org/core/>

SELECT ?citation ?patent ?application ?applicationNo
WHERE
{
  ?citation a up:Patent_Citation ;
    skos:exactMatch ?patent .
  FILTER(CONTAINS(STR(?patent), 'EP'))
  BIND(SUBSTR(STR(?patent), 35) AS ?applicationNo)
  SERVICE <https://data.epo.org/linked-data/query>{
    ?application patent:publicationNumber ?applicationNo
  }
}

# Predicted Query
# ==============
# https://sparql.uniprot.org/sparql
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
PREFIX up: <http://purl.uniprot.org/core/>

SELECT DISTINCT ?uniprotEntry ?patentIdentifier
WHERE {
  # Retrieve UniProtKB entries and their associated patent identifiers.
  SERVICE <https://sparql.uniprot.org/sparql> {
    ?uniprotEntry a up:Protein ;
                  rdfs:seeAlso ?patentResource . # Assuming rdfs:seeAlso links to external resources

    # Filter for resources that look like patent identifiers.
    FILTER CONTAINS(STR(?patentResource), "patent") # Adjust filter as needed based on actual data
    BIND(STR(?patentResource) AS ?patentIdentifier)
  }
  
  #OPTIONAL {
  #  SERVICE <hypothetical_epo_endpoint> { # Replace with actual EPO endpoint if available
  #    ?epoPatent a <PatentClass> ; # Replace with actual class for patents
  #             <publicationNumberProperty> ?patentIdentifier . # Replace with actual property for publication number
  #  }
  #}
}
