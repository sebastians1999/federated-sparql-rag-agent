
# Natural Language Question
# =======================
Generate a draft human metabolome

# Target Endpoint
# ===============
https://sparql.uniprot.org/sparql/

# Ground Truth Query
# =================
PREFIX chebislash: <http://purl.obolibrary.org/obo/chebi/>
PREFIX rh: <http://rdf.rhea-db.org/>
PREFIX taxon: <http://purl.uniprot.org/taxonomy/>
PREFIX up: <http://purl.uniprot.org/core/>

SELECT
?uniprot ?mnemonic ?rhea ?chebi ?smiles ?inchiKey
WHERE
{
  ?uniprot up:annotation/up:catalyticActivity/up:catalyzedReaction ?rhea ;
        up:organism taxon:9606 ;
        up:mnemonic ?mnemonic .
  SERVICE <https://sparql.rhea-db.org/sparql> {
	?rhea rh:side/rh:contains/rh:compound ?compound .
    ?compound (rh:chebi|(rh:reactivePart/rh:chebi)|(rh:underlyingChebi/rh:chebi)) ?chebi .
   }
   ?chebi chebislash:smiles ?smiles ;
          chebislash:inchikey ?inchiKey .
}

# Predicted Query
# ==============
# https://sparql.uniprot.org/sparql
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
PREFIX up: <http://purl.uniprot.org/core/>
PREFIX taxon: <http://purl.uniprot.org/taxonomy/>

SELECT DISTINCT ?metabolite ?metaboliteName
WHERE {
  # Find proteins associated with Homo sapiens in UniProt
  SERVICE <https://sparql.uniprot.org/sparql> {
    ?protein a up:Protein .
    ?protein up:organism taxon:9606 .  # Homo sapiens
    ?protein rdfs:seeAlso ?rheaReaction .
    FILTER (REGEX(STR(?rheaReaction), "rhea-db.org"))
  }

  # Get the metabolites involved in the reactions from Rhea
  SERVICE <https://sparql.rhea-db.org/sparql> {
    ?rheaReaction rdfs:label ?reactionName .
    ?rheaReaction rhea:equation ?equation .
    ?equation rdfs:label ?equationLabel .
    
    # Split the equation label to extract metabolite names (simplified approach)
    # This assumes metabolites are listed in the equation
    VALUES ?separator { "+" "=" }  # Common separators in Rhea equations
    BIND(STRSPLIT(?equationLabel, ?separator) AS ?parts)
    
    FILTER(LENGTH(?parts) > 0) # Ensure there are parts after splitting
    
    # Iterate through the parts and extract potential metabolite names
    FILTER (CONTAINS(STR(?equationLabel), ?metaboliteName))
    BIND (STRAFTER(STR(?equationLabel), ?separator) AS ?metaboliteName)
    BIND (IRI(CONCAT("http://purl.obolibrary.org/obo/CHEBI_", REPLACE(STR(?metaboliteName), "[^0-9]", ""))) AS ?metabolite) # Attempt to create a ChEBI IRI
  }
  
  #Optional: Include lipid metabolites from SwissLipids (if needed)
  #SERVICE <https://sparql.swisslipids.org/sparql/> {
  #  ?lipid a sl:Lipid .
  #  ?lipid rdfs:label ?lipidName .
  #  BIND(?lipid AS ?metabolite)
  #  BIND(?lipidName AS ?metaboliteName)
  #}
}
