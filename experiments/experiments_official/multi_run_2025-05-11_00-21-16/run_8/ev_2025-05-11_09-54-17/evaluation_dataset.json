[
  {
    "resource": "https://sparql.swisslipids.org/.well-known/sparql-examples/16",
    "natural_language_question": "For a given lipid (SWISSLIPID:000399814, Ceramide), return a list of all enzymes in UniProtKB/Swiss-Prot annotated to catalyze reactions involving that lipid.\nThis query does not consider the hierarchy: it looks for reactions and enzymes only for the specified lipid.",
    "ground_truth_query": "PREFIX SWISSLIPID: <https://swisslipids.org/rdf/SLM_>\nPREFIX owl: <http://www.w3.org/2002/07/owl#>\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX rh: <http://rdf.rhea-db.org/>\nPREFIX up: <http://purl.uniprot.org/core/>\n\n# Example 16\nSELECT ?startId ?startName ?uniprot\nWHERE\n{\n  # SwissLipids query (list of) identifier(s)\n  VALUES ?startId { SWISSLIPID:000399814 }\n  # name\n  ?startId rdfs:label ?startName .\n  # ChEBI x-ref\n  ?startId owl:equivalentClass ?chebi .\n  # federated query to Rhea\n  SERVICE <https://sparql.rhea-db.org/sparql> {\n  \t?rhea rh:side/rh:contains/rh:compound/rh:chebi ?chebi .\n  }    \n  # federated query to UniProt\n  SERVICE <https://sparql.uniprot.org/sparql> {\n    ?uniprot up:reviewed true .\n    ?uniprot up:annotation/up:catalyticActivity/up:catalyzedReaction ?rhea .\n  }\n} \nORDER BY ?startId",
    "target_endpoint": "https://sparql.swisslipids.org/sparql/",
    "federates_with": [
      "https://sparql.uniprot.org/sparql",
      "https://sparql.rhea-db.org/sparql"
    ],
    "endpoint_set": "SwissLipids",
    "file_path": "SwissLipids/16.ttl",
    "predicted_query": "# https://sparql.swisslipids.org/sparql/\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>\nPREFIX sl: <http://www.swisslipids.org/rdf#>\n\nSELECT DISTINCT ?enzymeName ?reaction\nWHERE {\n  # Find reactions associated with the given lipid in SwissLipids\n  SERVICE <https://sparql.swisslipids.org/sparql/> {\n    VALUES ?lipid { sl:SWISSLIPID_000399814 } # SWISSLIPID:000399814\n    ?reaction sl:is_reaction_of ?lipid .\n  }\n  \n  # Find enzymes that catalyze the reaction in Rhea\n  SERVICE <https://sparql.rhea-db.org/sparql> {\n    ?rhea_reaction rdfs:sameAs ?reaction .\n    ?rhea_reaction rhea:equation ?equation .\n    ?equation rhea:enzyme ?enzyme .\n  }\n\n  # Get enzyme names from UniProtKB/Swiss-Prot\n  SERVICE <https://sparql.uniprot.org/sparql> {\n    ?enzyme uniprot:reviewed \"true\"^^xsd:boolean . # Filter for Swiss-Prot entries\n    ?enzyme rdfs:label ?enzymeName .\n  }\n}",
    "predicted_endpoint": "https://sparql.swisslipids.org/sparql/",
    "predicted_endpoint_equal_to_target_endpoint": true,
    "predicted_endpoint_in_federates_with": false,
    "predicted_endpoint_or_federated_endpoint": true,
    "run_id_langsmith": "beba13bc-f654-4641-920d-99b104fbbf9e",
    "evaluation_timestamp": "2025-05-11T09:54:32.350900",
    "question_understanding_prompt_tokens": 303,
    "question_understanding_completion_tokens": 72,
    "question_understanding_total_tokens": 375,
    "sparql_query_construction_prompt_tokens": 3313,
    "sparql_query_construction_completion_tokens": 505,
    "sparql_query_construction_total_tokens": 3818,
    "is_valid_sparql": false,
    "sparql_syntax_error": "Line 17, column 20: Unresolved prefixed name: rhea:equation",
    "result_eval_f1_score": 0.0,
    "result_eval_precision": 0.0,
    "result_eval_recall": 0.0,
    "error_occured_at_endpoint": false,
    "predicted_query_result_is_empty": true,
    "ground_truth_query_result_is_empty": false,
    "error_occured_at_endpoint_message": "syntactically not correct"
  },
  {
    "resource": "https://sparql.swisslipids.org/.well-known/sparql-examples/6",
    "natural_language_question": "For a given lipid (SWISSLIPID:000399814, Ceramide), return a list of all corresponding reactions (Rhea IDs and equation), as well as their enzymes as annotated in UniProtKB/Swiss-Prot) enzymes themselves (ID and protein name).\nThis query does not consider the hierarchy: it looks for reactions and enzymes only for the specified lipid.",
    "ground_truth_query": "PREFIX SWISSLIPID: <https://swisslipids.org/rdf/SLM_>\nPREFIX owl: <http://www.w3.org/2002/07/owl#>\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX rh: <http://rdf.rhea-db.org/>\nPREFIX up: <http://purl.uniprot.org/core/>\n\n# Example 6\nSELECT ?startId ?startName ?chebi ?rhea ?rheaEquation ?uniprot ?uniprotName\nWHERE\n{\n  # SwissLipids query (list of) identifier(s)\n  VALUES ?startId { SWISSLIPID:000399814 }\n  # name\n  ?startId rdfs:label ?startName .\n  # ChEBI x-ref\n  ?startId owl:equivalentClass ?chebi .\n  # federated query to Rhea\n  SERVICE <https://sparql.rhea-db.org/sparql> {\n  \t?rhea rh:equation ?rheaEquation .\n  \t?rhea rh:side/rh:contains/rh:compound/rh:chebi ?chebi .\n  }    \n  # federated query to UniProt\n  SERVICE <https://sparql.uniprot.org/sparql> {\n    ?uniprot up:reviewed true .\n    ?uniprot up:recommendedName/up:fullName ?uniprotName .\n    ?uniprot up:annotation/up:catalyticActivity/up:catalyzedReaction ?rhea .\n  }\n} \nORDER BY ?startId",
    "target_endpoint": "https://sparql.swisslipids.org/sparql/",
    "federates_with": [
      "https://sparql.uniprot.org/sparql",
      "https://sparql.rhea-db.org/sparql"
    ],
    "endpoint_set": "SwissLipids",
    "file_path": "SwissLipids/6.ttl",
    "predicted_query": "# https://sparql.swisslipids.org/sparql/\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>\nPREFIX sl: <http://swisslipids.org/rdf#>\nPREFIX rhea: <http://rdf.rhea-db.org/>\nPREFIX uniprot: <http://purl.uniprot.org/core/>\n\nSELECT DISTINCT ?rheaId ?equation ?enzymeId ?proteinName\nWHERE {\n  # Query SwissLipids to find reactions associated with the given lipid\n  SERVICE <https://sparql.swisslipids.org/sparql/> {\n    BIND(sl:SWISSLIPID_000399814 AS ?lipid) #SWISSLIPID:000399814\n    ?lipid sl:participates_in ?reaction .\n    ?reaction rdfs:seeAlso ?rheaId .\n    FILTER (contains(str(?rheaId), \"rhea.db.org\"))\n  }\n\n  # Query Rhea to retrieve the equation for each Rhea ID\n  SERVICE <https://sparql.rhea-db.org/sparql> {\n    ?rheaId rdf:type rhea:Reaction .\n    ?rheaId rhea:equation ?equation .\n    FILTER (STR(?rheaId) IN (STR(?rhea))) # Filter to only include Rhea IDs from SwissLipids\n  }\n\n  # Query UniProt to find enzymes associated with the reactions\n  SERVICE <https://sparql.uniprot.org/sparql> {\n    ?enzyme uniprot:catalyticActivity ?rheaId .\n    ?enzyme a uniprot:Protein .\n    ?enzyme rdfs:label ?proteinName .\n    BIND(URI(REPLACE(STR(?enzyme), \"http://purl.uniprot.org/uniprot/\", \"http://identifiers.org/uniprot/\")) AS ?enzymeId) # Create enzyme ID\n    FILTER (STR(?rheaId) IN (STR(?rhea))) # Filter to only include Rhea IDs from SwissLipids\n  }\n}",
    "predicted_endpoint": "https://sparql.swisslipids.org/sparql/",
    "predicted_endpoint_equal_to_target_endpoint": true,
    "predicted_endpoint_in_federates_with": false,
    "predicted_endpoint_or_federated_endpoint": true,
    "run_id_langsmith": "64b505d0-1606-482b-be07-e93d1479e74d",
    "evaluation_timestamp": "2025-05-11T09:54:42.734455",
    "question_understanding_prompt_tokens": 318,
    "question_understanding_completion_tokens": 89,
    "question_understanding_total_tokens": 407,
    "sparql_query_construction_prompt_tokens": 2859,
    "sparql_query_construction_completion_tokens": 0,
    "sparql_query_construction_total_tokens": 2859,
    "is_valid_sparql": true,
    "sparql_syntax_error": "syntactically correct",
    "result_eval_f1_score": 0.0,
    "result_eval_precision": 0.0,
    "result_eval_recall": 0.0,
    "error_occured_at_endpoint": false,
    "predicted_query_result_is_empty": true,
    "ground_truth_query_result_is_empty": false,
    "error_occured_at_endpoint_message": "no error, but empty result"
  },
  {
    "resource": "https://sparql.swisslipids.org/.well-known/sparql-examples/5",
    "natural_language_question": "For a given lipid (SWISSLIPID:000399814, Ceramide), return a list of all corresponding reactions (Rhea IDs and equation).\nThis query does consider the hierarchy: it looks for reactions involving the specified lipid and/or its more specific forms.",
    "ground_truth_query": "PREFIX SWISSLIPID: <https://swisslipids.org/rdf/SLM_>\nPREFIX owl: <http://www.w3.org/2002/07/owl#>\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX rh: <http://rdf.rhea-db.org/>\n\n# Example 5\nSELECT ?startId ?startName ?id ?name ?chebi ?rhea ?rheaEquation \nWHERE\n{\n  # SwissLipids query (list of) identifier(s)\n  VALUES ?startId { SWISSLIPID:000399814 }\n  # name\n  ?startId rdfs:label ?startName .\n  # Retrieve children lipids \n  ?id rdfs:subClassOf* ?startId .\n  ?id rdfs:label ?name .\n  # ChEBI x-ref\n  ?id owl:equivalentClass ?chebi .\n  # federated query to Rhea\n  SERVICE <https://sparql.rhea-db.org/sparql> {\n  \t?rhea rh:equation ?rheaEquation .\n  \t?rhea rh:side/rh:contains/rh:compound/rh:chebi ?chebi .\n  }    \n} \nORDER BY  ?startId ?id",
    "target_endpoint": "https://sparql.swisslipids.org/sparql/",
    "federates_with": [
      "https://sparql.rhea-db.org/sparql"
    ],
    "endpoint_set": "SwissLipids",
    "file_path": "SwissLipids/5.ttl",
    "predicted_query": "# https://sparql.swisslipids.org/sparql/\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>\nPREFIX sl: <http://www.swisslipids.org/rdf#>\n\nSELECT DISTINCT ?rheaId ?equation\nWHERE {\n  # Get the subclasses of the given lipid from SwissLipids\n  SERVICE <https://sparql.swisslipids.org/sparql/> {\n    VALUES ?lipid { <http://www.swisslipids.org/rdf/SWISSLIPID:000399814> } # SWISSLIPID:000399814 is the identifier for Ceramide\n    ?subClass rdfs:subClassOf* ?lipid .\n  }\n  \n  # Find reactions in RheaDB that involve the lipid or its subclasses\n  SERVICE <https://sparql.rhea-db.org/sparql/> {\n    ?reaction rdfs:label ?equation ;\n              <http://purl.obolibrary.org/obo/RO_0002406> ?chebi . #RO_0002406: has participant\n    ?chebi a <http://purl.obolibrary.org/obo/CHEBI_24431> . # CHEBI_24431 is the class of chemical entities\n    \n    # Filter reactions involving the lipid or its subclasses\n    FILTER (STRSTARTS(STR(?chebi), \"http://purl.obolibrary.org/obo/CHEBI_\"))\n    \n    # Extract Rhea ID from the reaction URI\n    BIND(STRAFTER(STR(?reaction), \"http://rdf.rhea-db.org/\") AS ?rheaId)\n    \n    # Filter reactions involving the lipid or its subclasses\n    FILTER (CONTAINS(STR(?equation), STR(STRAFTER(STR(?subClass), \"http://www.swisslipids.org/rdf/\"))))\n  }\n}",
    "predicted_endpoint": "https://sparql.swisslipids.org/sparql/",
    "predicted_endpoint_equal_to_target_endpoint": true,
    "predicted_endpoint_in_federates_with": false,
    "predicted_endpoint_or_federated_endpoint": true,
    "run_id_langsmith": "a9d368f0-3f7d-4ac4-9d79-7df2db57e643",
    "evaluation_timestamp": "2025-05-11T09:54:53.367255",
    "question_understanding_prompt_tokens": 296,
    "question_understanding_completion_tokens": 65,
    "question_understanding_total_tokens": 361,
    "sparql_query_construction_prompt_tokens": 1783,
    "sparql_query_construction_completion_tokens": 0,
    "sparql_query_construction_total_tokens": 1783,
    "is_valid_sparql": true,
    "sparql_syntax_error": "syntactically correct",
    "result_eval_f1_score": 0.0,
    "result_eval_precision": 0.0,
    "result_eval_recall": 0.0,
    "error_occured_at_endpoint": false,
    "predicted_query_result_is_empty": true,
    "ground_truth_query_result_is_empty": false,
    "error_occured_at_endpoint_message": "no error, but empty result"
  },
  {
    "resource": "https://sparql.swisslipids.org/.well-known/sparql-examples/34",
    "natural_language_question": "Lipids affected by human enzymes",
    "ground_truth_query": "PREFIX owl: <http://www.w3.org/2002/07/owl#>\nPREFIX rh: <http://rdf.rhea-db.org/>\nPREFIX taxon: <http://purl.uniprot.org/taxonomy/>\nPREFIX up: <http://purl.uniprot.org/core/>\n\nSELECT ?swisslipid  {\n  ?swisslipid owl:equivalentClass ?chebi .\n  SERVICE <https://sparql.rhea-db.org/sparql> {\n    ?rhea rh:side/rh:contains/rh:compound ?compound .\n\t?compound (rh:chebi|(rh:reactivePart/rh:chebi)|(rh:underlyingChebi/rh:chebi)) ?metabolite . \n  }\n  SERVICE <https://sparql.uniprot.org/sparql> {\n    ?catalyticActivityAnnotation up:catalyticActivity/up:catalyzedReaction ?rhea .\n    ?protein up:annotation ?catalyticActivityAnnotation ;\n             up:organism taxon:9606 .\n  }\n}\nLIMIT 1",
    "target_endpoint": "https://sparql.swisslipids.org/sparql/",
    "federates_with": [
      "https://sparql.uniprot.org/sparql",
      "https://sparql.rhea-db.org/sparql"
    ],
    "endpoint_set": "SwissLipids",
    "file_path": "SwissLipids/34.ttl",
    "predicted_query": "# https://sparql.uniprot.org/sparql\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX up: <http://purl.uniprot.org/core/>\nPREFIX taxon: <http://purl.uniprot.org/taxonomy/>\n\nSELECT DISTINCT ?lipidName\nWHERE {\n  # Find human proteins (enzymes) in UniProt\n  SERVICE <https://sparql.uniprot.org/sparql> {\n    SELECT DISTINCT ?enzyme ?enzymeName WHERE {\n      ?enzyme a up:Protein .\n      ?enzyme up:organism taxon:9606 .  # 9606 is the NCBI taxonomy ID for Homo sapiens\n      ?enzyme rdfs:label ?enzymeName .\n      FILTER (CONTAINS(LCASE(?enzymeName), \"enzyme\")) # Filter for enzymes\n    }\n  }\n\n  # Find reactions in Rhea involving these enzymes\n  SERVICE <https://sparql.rhea-db.org/sparql> {\n    ?reaction rdfs:comment ?enzymeName . # Link Rhea reactions to enzyme names from UniProt\n    ?reaction rdfs:label ?reactionLabel .\n  }\n\n  # Find lipids involved in these reactions using SwissLipids\n  SERVICE <https://sparql.swisslipids.org/sparql/> {\n    ?lipid a <http://www.swisslipids.org/rdf/SwissLipids#Lipid> .\n    ?lipid <http://www.swisslipids.org/rdf/SwissLipids#name> ?lipidName .\n    FILTER (CONTAINS(?reactionLabel, ?lipidName)) # Filter for lipids involved in the reaction\n  }\n}",
    "predicted_endpoint": "https://sparql.uniprot.org/sparql",
    "predicted_endpoint_equal_to_target_endpoint": false,
    "predicted_endpoint_in_federates_with": true,
    "predicted_endpoint_or_federated_endpoint": true,
    "run_id_langsmith": "56203416-fb70-48e2-a984-c3bc0febc493",
    "evaluation_timestamp": "2025-05-11T09:55:02.452741",
    "question_understanding_prompt_tokens": 245,
    "question_understanding_completion_tokens": 20,
    "question_understanding_total_tokens": 265,
    "sparql_query_construction_prompt_tokens": 1912,
    "sparql_query_construction_completion_tokens": 567,
    "sparql_query_construction_total_tokens": 2479,
    "is_valid_sparql": true,
    "sparql_syntax_error": "syntactically correct",
    "result_eval_f1_score": 0.0,
    "result_eval_precision": 0.0,
    "result_eval_recall": 0.0,
    "error_occured_at_endpoint": false,
    "predicted_query_result_is_empty": true,
    "ground_truth_query_result_is_empty": false,
    "error_occured_at_endpoint_message": "no error, but empty result"
  },
  {
    "resource": "https://sparql.uniprot.org/.well-known/sparql-examples/118_biosodafrontend_rat_brain_human_cancer",
    "natural_language_question": "What are the Homo sapiens genes associated with cancer and their orthologs expressed in the Rattus norvegicus brain?",
    "ground_truth_query": "PREFIX up:<http://purl.uniprot.org/core/>\nPREFIX taxon:<http://purl.uniprot.org/taxonomy/>\nPREFIX rdfs:<http://www.w3.org/2000/01/rdf-schema#>\nPREFIX orth:<http://purl.org/net/orth#>\nPREFIX dcterms:<http://purl.org/dc/terms/>\nPREFIX obo:<http://purl.obolibrary.org/obo/>\nPREFIX lscr:<http://purl.org/lscr#>\nPREFIX genex:<http://purl.org/genex#>\nPREFIX sio: <http://semanticscience.org/resource/>\nSELECT ?gene ?orthologous_protein2 WHERE {\n  {\n    SELECT ?protein1 WHERE {\n      ?protein1 a up:Protein;\n        up:organism/up:scientificName 'Homo sapiens' ;\n        up:annotation ?annotation .\n      ?annotation rdfs:comment ?annotation_text.\n      ?annotation a up:Disease_Annotation .\n      FILTER CONTAINS (?annotation_text, \"cancer\")\n    }\n  }\n  SERVICE <https://sparql.omabrowser.org/sparql/> {\n    SELECT ?orthologous_protein2 ?protein1 ?gene WHERE {\n      ?protein_OMA a orth:Protein .\n      ?orthologous_protein2 a orth:Protein .\n      ?cluster a orth:OrthologsCluster .\n      ?cluster orth:hasHomologousMember ?node1 .\n      ?cluster orth:hasHomologousMember ?node2 .\n      ?node2 orth:hasHomologousMember* ?protein_OMA .\n      ?node1 orth:hasHomologousMember* ?orthologous_protein2 \n      .?orthologous_protein2 orth:organism/obo:RO_0002162/up:scientificName 'Rattus norvegicus' .\n      ?orthologous_protein2 sio:SIO_010079 ?gene .\n      ?protein_OMA lscr:xrefUniprot ?protein1 .\n      FILTER(?node1 != ?node2)\n    }\n  }\n  SERVICE <https://www.bgee.org/sparql/> {\n    ?gene genex:isExpressedIn ?anatEntity .\n    ?anatEntity rdfs:label 'brain' .\n    ?gene orth:organism ?org . \n    ?org obo:RO_0002162 taxon:10116 .\n  }\n}",
    "target_endpoint": "https://sparql.uniprot.org/sparql",
    "federates_with": [
      "https://sparql.omabrowser.org/sparql/",
      "https://www.bgee.org/sparql/"
    ],
    "endpoint_set": "Uniprot",
    "file_path": "UniProt/118_biosodafrontend_rat_brain_human_cancer.ttl",
    "predicted_query": "# https://sparql.uniprot.org/sparql\nPREFIX up: <http://purl.uniprot.org/core/>\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX taxon: <http://purl.uniprot.org/taxonomy/>\nPREFIX obo: <http://purl.obolibrary.org/obo/>\n\nSELECT DISTINCT ?humanGene ?ratOrtholog\nWHERE {\n  # Find human genes associated with cancer\n  SERVICE <https://sparql.uniprot.org/sparql> {\n    ?humanGene a up:Protein .\n    ?humanGene up:organism taxon:9606 .  # Homo sapiens\n    ?humanGene up:annotation ?cancerAnnotation .\n    ?cancerAnnotation a up:Disease ;\n                       rdfs:label ?cancerLabel .\n    FILTER (CONTAINS(LCASE(?cancerLabel), \"cancer\")) . # Filter for cancer-related diseases\n\n    # Find orthologs in Rattus norvegicus\n    ?humanGene obo:RO_0002434 ?ratOrtholog .\n    ?ratOrtholog a up:Protein .\n    ?ratOrtholog up:organism taxon:10116 . # Rattus norvegicus\n  }\n  # Assuming that if an ortholog exists in Rattus norvegicus, it *could* be expressed in the brain.\n  # If there was a brain-specific expression database in the context, we would use it.\n}",
    "predicted_endpoint": "https://sparql.uniprot.org/sparql",
    "predicted_endpoint_equal_to_target_endpoint": true,
    "predicted_endpoint_in_federates_with": false,
    "predicted_endpoint_or_federated_endpoint": true,
    "run_id_langsmith": "1208d7d5-d9c4-45f9-aca4-65fba53dce4f",
    "evaluation_timestamp": "2025-05-11T09:55:20.009926",
    "question_understanding_prompt_tokens": 265,
    "question_understanding_completion_tokens": 47,
    "question_understanding_total_tokens": 312,
    "sparql_query_construction_prompt_tokens": 2709,
    "sparql_query_construction_completion_tokens": 0,
    "sparql_query_construction_total_tokens": 2709,
    "is_valid_sparql": true,
    "sparql_syntax_error": "syntactically correct",
    "result_eval_f1_score": 0.0,
    "result_eval_precision": 0.0,
    "result_eval_recall": 0.0,
    "error_occured_at_endpoint": false,
    "predicted_query_result_is_empty": true,
    "ground_truth_query_result_is_empty": false,
    "error_occured_at_endpoint_message": "no error, but empty result"
  },
  {
    "resource": "https://sparql.uniprot.org/.well-known/sparql-examples/51",
    "natural_language_question": "Find all proteins linked to arachidonate (CHEBI:32395)",
    "ground_truth_query": "PREFIX CHEBI: <http://purl.obolibrary.org/obo/CHEBI_>\nPREFIX rh: <http://rdf.rhea-db.org/>\nPREFIX skos: <http://www.w3.org/2004/02/skos/core#>\nPREFIX up: <http://purl.uniprot.org/core/>\n\n\nSELECT \n    DISTINCT\n        ?uniprot\n        ?uniprotID\n        ?recname\n        ?gene\n        ?chebi\n        ?uniprotName\nWHERE {\n  SERVICE <https://sparql.rhea-db.org/sparql> {\n     VALUES (?chebi) { (CHEBI:32395) }\n     ?rhea rh:side/rh:contains/rh:compound ?compound .\n     ?compound rh:chebi ?chebi .\n     ?chebi up:name ?uniprotName .\n  }\n  ?uniprot up:annotation/up:catalyticActivity/up:catalyzedReaction ?rhea .\n  ?uniprot up:mnemonic ?uniprotID .\n  ?uniprot up:recommendedName/up:fullName ?recname .\n  OPTIONAL {?uniprot up:encodedBy/skos:prefLabel ?gene .}\n}",
    "target_endpoint": "https://sparql.uniprot.org/sparql/",
    "federates_with": [
      "https://sparql.rhea-db.org/sparql"
    ],
    "endpoint_set": "Uniprot",
    "file_path": "UniProt/51_all_proteins_linked_to_arachidonate.ttl",
    "predicted_query": "# https://sparql.uniprot.org/sparql\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX up: <http://purl.uniprot.org/core/>\nPREFIX chebi: <http://purl.obolibrary.org/obo/>\nPREFIX rhea: <http://rdf.rhea-db.org/>\n\nSELECT DISTINCT ?protein ?proteinName\nWHERE {\n  # Find reactions in Rhea involving arachidonate (CHEBI:32395)\n  SERVICE <https://sparql.rhea-db.org/sparql> {\n    ?reaction rhea: Rhea_has_participant chebi:CHEBI_32395 .\n  }\n  \n  # Find proteins in UniProt that participate in these reactions\n  SERVICE <https://sparql.uniprot.org/sparql> {\n    ?protein up:annotation ?reaction . # Assuming a direct link via annotation.  May need adjustment.\n    ?protein rdfs:label ?proteinName .\n  }\n}",
    "predicted_endpoint": "https://sparql.uniprot.org/sparql",
    "predicted_endpoint_equal_to_target_endpoint": true,
    "predicted_endpoint_in_federates_with": false,
    "predicted_endpoint_or_federated_endpoint": true,
    "run_id_langsmith": "e7841bcd-578b-4c84-934a-633814a48374",
    "evaluation_timestamp": "2025-05-11T09:55:32.457406",
    "question_understanding_prompt_tokens": 253,
    "question_understanding_completion_tokens": 31,
    "question_understanding_total_tokens": 284,
    "sparql_query_construction_prompt_tokens": 1980,
    "sparql_query_construction_completion_tokens": 0,
    "sparql_query_construction_total_tokens": 1980,
    "is_valid_sparql": false,
    "sparql_syntax_error": "Lexical error at line 11, column 41.  Encountered: '32' (32), after prefix \"Rhea_has_participant\"",
    "result_eval_f1_score": 0.0,
    "result_eval_precision": 0.0,
    "result_eval_recall": 0.0,
    "error_occured_at_endpoint": false,
    "predicted_query_result_is_empty": true,
    "ground_truth_query_result_is_empty": false,
    "error_occured_at_endpoint_message": "syntactically not correct"
  },
  {
    "resource": "https://sparql.uniprot.org/.well-known/sparql-examples/40",
    "natural_language_question": "Retrieve human enzymes that metabolize sphingolipids and are annotated in ChEMBL",
    "ground_truth_query": "PREFIX CHEBI: <http://purl.obolibrary.org/obo/CHEBI_>\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX rh: <http://rdf.rhea-db.org/>\nPREFIX taxon: <http://purl.uniprot.org/taxonomy/>\nPREFIX up: <http://purl.uniprot.org/core/>\n\nSELECT DISTINCT ?protein ?chemblEntry\nWHERE {\n  SERVICE <https://sparql.rhea-db.org/sparql> {\n    ?rhea rdfs:subClassOf rh:Reaction ;\n      rh:side/rh:contains/rh:compound/rh:chebi/rdfs:subClassOf+ CHEBI:26739 .\n  }\n  ?ca up:catalyzedReaction ?rhea .\n  ?protein up:annotation/up:catalyticActivity ?ca ;\n    up:organism taxon:9606 ;\n    rdfs:seeAlso ?chemblEntry .\n  ?chemblEntry up:database <http://purl.uniprot.org/database/ChEMBL> .\n}\nLIMIT 10",
    "target_endpoint": "https://sparql.uniprot.org/sparql/",
    "federates_with": [
      "https://sparql.rhea-db.org/sparql"
    ],
    "endpoint_set": "Uniprot",
    "file_path": "UniProt/40_human_enzymes_that_metabolize_sphingolipids.ttl",
    "predicted_query": "# https://sparql.uniprot.org/sparql\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX up: <http://purl.uniprot.org/core/>\nPREFIX taxon: <http://purl.uniprot.org/taxonomy/>\nPREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>\nPREFIX chebi: <http://purl.obolibrary.org/obo/>\n\nSELECT DISTINCT ?enzyme ?enzymeName\nWHERE {\n  # Find human enzymes in UniProt\n  SERVICE <https://sparql.uniprot.org/sparql> {\n    ?enzyme a up:Protein .\n    ?enzyme up:organism taxon:9606 .  # Homo sapiens\n    ?enzyme rdfs:label ?enzymeName .\n    ?enzyme up:annotation ?annotation .\n    ?annotation rdf:type <http://purl.uniprot.org/core/CatalyticActivity> . # Filter for enzymes\n  }\n\n  # Find enzymes in SwissLipids that are involved in sphingolipid metabolism\n  SERVICE <https://sparql.swisslipids.org/sparql/> {\n    ?reaction a <http://rdf.swisslipids.org/vocabulary/Reaction> .\n    ?reaction <http://rdf.swisslipids.org/vocabulary/enzyme> ?enzyme .\n    ?reaction <http://rdf.swisslipids.org/vocabulary/substrate> ?sphingolipid .\n    ?sphingolipid a chebi:CHEBI_64583 . # Sphingomyelin as a representative sphingolipid\n  }\n}",
    "predicted_endpoint": "https://sparql.uniprot.org/sparql",
    "predicted_endpoint_equal_to_target_endpoint": true,
    "predicted_endpoint_in_federates_with": false,
    "predicted_endpoint_or_federated_endpoint": true,
    "run_id_langsmith": "5ab0c973-4204-4f96-9c57-c65ea732a5b7",
    "evaluation_timestamp": "2025-05-11T09:55:43.024735",
    "question_understanding_prompt_tokens": 247,
    "question_understanding_completion_tokens": 33,
    "question_understanding_total_tokens": 280,
    "sparql_query_construction_prompt_tokens": 2319,
    "sparql_query_construction_completion_tokens": 626,
    "sparql_query_construction_total_tokens": 2945,
    "is_valid_sparql": true,
    "sparql_syntax_error": "syntactically correct",
    "result_eval_f1_score": 0.0,
    "result_eval_precision": 0.0,
    "result_eval_recall": 0.0,
    "error_occured_at_endpoint": true,
    "predicted_query_result_is_empty": true,
    "ground_truth_query_result_is_empty": true,
    "error_occured_at_endpoint_message": "QueryBadFormed: A bad request has been sent to the endpoint: probably the SPARQL query is badly formed."
  },
  {
    "resource": "https://sparql.uniprot.org/.well-known/sparql-examples/49",
    "natural_language_question": "Retrieve the UniProtKB proteins, their catalyzed Rhea reactions, their encoding genes (Ensembl) and the anatomic entities where the genes are expressed (UBERON anatomic entites from Bgee expression data resource).",
    "ground_truth_query": "PREFIX CHEBI: <http://purl.obolibrary.org/obo/CHEBI_>\nPREFIX genex: <http://purl.org/genex#>\nPREFIX lscr: <http://purl.org/lscr#>\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX rh: <http://rdf.rhea-db.org/>\nPREFIX taxon: <http://purl.uniprot.org/taxonomy/>\nPREFIX up: <http://purl.uniprot.org/core/>\n\nSELECT DISTINCT ?protein ?ensemblGene ?reaction ?anatomicEntityLabel ?anatomicEntity\nWHERE {\n  # federated query to Rhea enadpoint\n  {\n    SELECT DISTINCT ?reaction WHERE {\n      SERVICE <https://sparql.rhea-db.org/sparql> {\n        ?reaction rdfs:subClassOf rh:Reaction ;\n          rh:equation ?reactionEquation ;\n          rh:side ?reactionSide .\n        ?reactionSide rh:contains ?participant .\n        ?participant rh:compound ?compound .\n        # compound constraint (CHEBI:16113 == cholesterol)\n        ?compound rh:chebi CHEBI:16113 .\n      }\n    }\n  }\n  # taxonomy constraint (taxon:9606 == Homo sapiens)\n  ?protein up:organism taxon:9606 ;\n    up:annotation ?a ;\n    rdfs:seeAlso / up:transcribedFrom ?ensemblGene .\n  ?a a up:Catalytic_Activity_Annotation ;\n    up:catalyticActivity ?ca .\n  ?ca up:catalyzedReaction ?reaction .\n  # federated query to Bgee (expression data)\n  BIND(IRI(REPLACE(STR(?ensemblGene), \"\\\\.[0-9]+$\", \"\")) AS ?ensemblGeneNoVersion)\n  SERVICE <https://www.bgee.org/sparql/> {\n    ?gene lscr:xrefEnsemblGene ?ensemblGeneNoVersion ;\n      genex:isExpressedIn ?anatomicEntity .\n    ?anatomicEntity rdfs:label ?anatomicEntityLabel .\n  }\n}",
    "target_endpoint": "https://sparql.uniprot.org/sparql/",
    "federates_with": [
      "https://sparql.rhea-db.org/sparql",
      "https://www.bgee.org/sparql/"
    ],
    "endpoint_set": "Uniprot",
    "file_path": "UniProt/49_tissues_where_genes_metabolizing_cholestrol_are_expressed.ttl",
    "predicted_query": "# https://sparql.uniprot.org/sparql\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX up: <http://purl.uniprot.org/core/>\nPREFIX uniprot: <http://purl.uniprot.org/uniprot/>\n\nSELECT DISTINCT ?protein ?proteinName ?reaction ?gene ?anatomicalEntity\nWHERE {\n  # Get UniProt proteins and their names\n  SERVICE <https://sparql.uniprot.org/sparql> {\n    ?protein a up:Protein ;\n             rdfs:label ?proteinName .\n  }\n\n  # Find Rhea reactions catalyzed by the proteins\n  SERVICE <https://sparql.rhea-db.org/sparql> {\n    ?reaction rdfs:label ?reactionName .\n    ?reaction rdfs:comment ?reactionComment .\n    FILTER (CONTAINS(STR(?reactionComment), STR(?proteinName))) # Filter reactions based on protein name\n  }\n\n  # Link UniProt to Ensembl genes (this part might need adjustment based on the actual predicates)\n  SERVICE <https://sparql.uniprot.org/sparql> {\n    ?protein up:encodedBy ?gene . # Assuming up:encodedBy links to gene identifiers.  May need adjustment.\n  }\n\n  # Find anatomical entities where the genes are expressed using Bgee (hypothetical link)\n  SERVICE <https://sparql.swisslipids.org/sparql/> { #Assuming Bgee is accessible via SwissLipids SPARQL endpoint\n    # This is a placeholder.  The actual properties and classes will depend on the Bgee/UBERON data model.\n    # Assuming some link between genes and anatomical entities via expression data.\n    ?gene <http://example.org/expressedIn> ?expressionData .  # Replace with actual property\n    ?expressionData <http://example.org/expressedInAnatomicalEntity> ?anatomicalEntity . # Replace with actual property\n    ?anatomicalEntity rdfs:label ?anatomicalEntityName .\n  }\n}",
    "predicted_endpoint": "https://sparql.uniprot.org/sparql",
    "predicted_endpoint_equal_to_target_endpoint": true,
    "predicted_endpoint_in_federates_with": false,
    "predicted_endpoint_or_federated_endpoint": true,
    "run_id_langsmith": "64e203a7-b815-455d-a374-7576a33141a9",
    "evaluation_timestamp": "2025-05-11T09:56:01.178775",
    "question_understanding_prompt_tokens": 282,
    "question_understanding_completion_tokens": 77,
    "question_understanding_total_tokens": 359,
    "sparql_query_construction_prompt_tokens": 3993,
    "sparql_query_construction_completion_tokens": 0,
    "sparql_query_construction_total_tokens": 3993,
    "is_valid_sparql": true,
    "sparql_syntax_error": "syntactically correct",
    "result_eval_f1_score": 0.0,
    "result_eval_precision": 0.0,
    "result_eval_recall": 0.0,
    "error_occured_at_endpoint": true,
    "predicted_query_result_is_empty": true,
    "ground_truth_query_result_is_empty": true,
    "error_occured_at_endpoint_message": "The read operation timed out"
  },
  {
    "resource": "https://sparql.uniprot.org/.well-known/sparql-examples/53",
    "natural_language_question": "Find mouse homologs in OMABrowser of human enzymes that catalyze reactions involving sterols (CHEBI:15889). Federating with Rhea and OMABrowser.",
    "ground_truth_query": "PREFIX CHEBI: <http://purl.obolibrary.org/obo/CHEBI_>\nPREFIX lscr: <http://purl.org/lscr#>\nPREFIX orth: <http://purl.org/net/orth#>\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX rh: <http://rdf.rhea-db.org/>\nPREFIX taxon: <http://purl.uniprot.org/taxonomy/>\nPREFIX up: <http://purl.uniprot.org/core/>\n\nSELECT\n  DISTINCT\n    ?chebi\n    ?reaction\n    ?humanProtein\n    ?mouseProtein\n    ?cluster \nWHERE {\n  SERVICE <https://sparql.rhea-db.org/sparql> {\n    ?reaction rdfs:subClassOf rh:Reaction .\n    ?reaction rh:side/rh:contains/rh:compound ?compound .\n    ?compound rh:chebi ?chebi .\n    ?chebi rdfs:subClassOf* CHEBI:15889\n  }\n\n  ?humanProtein up:organism taxon:9606 .\n  ?humanProtein up:annotation ?a .\n  ?a a up:Catalytic_Activity_Annotation .\n  ?a up:catalyticActivity ?ca .\n  ?ca up:catalyzedReaction ?reaction .\n\n  SERVICE  <https://sparql.omabrowser.org/sparql> {\n    ?cluster a orth:ParalogsCluster .\n    ?cluster orth:hasHomologousMember ?node1 , ?node2 .\n    ?node1 orth:hasHomologousMember* ?orthoProtein1 .\n    ?node2 orth:hasHomologousMember* ?orthoProtein2 .\n    ?orthoProtein1 lscr:xrefUniprot ?mouseProtein .\n    ?orthoProtein2 lscr:xrefUniprot ?humanProtein .\n    # inTaxon mouse\n    ?orthoProtein1 orth:organism/<http://purl.obolibrary.org/obo/RO_0002162> taxon:10090 . \n  }\n}",
    "target_endpoint": "https://sparql.uniprot.org/sparql/",
    "federates_with": [
      "https://sparql.rhea-db.org/sparql",
      "https://sparql.omabrowser.org/sparql"
    ],
    "endpoint_set": "Uniprot",
    "file_path": "UniProt/53_mouse_homologs_of_sterol_enzymes_via_omabrowser.ttl",
    "predicted_query": "# https://sparql.rhea-db.org/sparql/\nPREFIX rhea: <http://rdf.rhea-db.org/>\nPREFIX chebi: <http://purl.obolibrary.org/obo/CHEBI_>\nPREFIX uniprot: <http://purl.uniprot.org/core/>\nPREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>\nPREFIX oma: <http://purl.orthodb.org/>\n\nSELECT DISTINCT ?humanEnzyme ?mouseHomolog\nWHERE {\n  # Find Rhea reactions involving sterols (CHEBI:15889)\n  SERVICE <https://sparql.rhea-db.org/sparql/> {\n    ?reaction rhea: Rhea_has_reactant chebi:15889 .\n    ?reaction rhea: Rhea_has_enzyme ?enzyme .\n    BIND(strafter(str(?enzyme), \"uniprot:\") AS ?enzymeID) # Extract enzyme ID\n  }\n\n  # Verify that the enzyme is a human enzyme and get its UniProt ID\n  SERVICE <https://sparql.uniprot.org/sparql> {\n    ?humanEnzyme a uniprot:Protein .\n    ?humanEnzyme uniprot:database rhea:?enzymeID . # Link to Rhea enzyme ID\n    ?humanEnzyme uniprot:organism <http://purl.uniprot.org/taxonomy/9606> . # Filter for human\n  }\n\n  # Find mouse homologs of the human enzyme using OMA\n  SERVICE <http://sparql.omabrowser.org/sparql> {\n    ?homologousPair oma:member ?humanEnzyme ;\n                     oma:member ?mouseHomolog .\n    ?mouseHomolog uniprot:organism <http://purl.uniprot.org/taxonomy/10090> . # Filter for mouse\n  }\n}",
    "predicted_endpoint": "https://sparql.rhea-db.org/sparql/",
    "predicted_endpoint_equal_to_target_endpoint": false,
    "predicted_endpoint_in_federates_with": true,
    "predicted_endpoint_or_federated_endpoint": true,
    "run_id_langsmith": "865c6ccc-03ae-4562-9f13-df7cf6fb18cc",
    "evaluation_timestamp": "2025-05-11T10:06:37.243333",
    "question_understanding_prompt_tokens": 277,
    "question_understanding_completion_tokens": 41,
    "question_understanding_total_tokens": 318,
    "sparql_query_construction_prompt_tokens": 2745,
    "sparql_query_construction_completion_tokens": 0,
    "sparql_query_construction_total_tokens": 2745,
    "is_valid_sparql": false,
    "sparql_syntax_error": "Lexical error at line 12, column 38.  Encountered: '32' (32), after prefix \"Rhea_has_reactant\"",
    "result_eval_f1_score": 0.0,
    "result_eval_precision": 0.0,
    "result_eval_recall": 0.0,
    "error_occured_at_endpoint": false,
    "predicted_query_result_is_empty": true,
    "ground_truth_query_result_is_empty": false,
    "error_occured_at_endpoint_message": "syntactically not correct"
  },
  {
    "resource": "https://sparql.uniprot.org/.well-known/sparql-examples/52",
    "natural_language_question": "Retrieve drugs that target human enzymes involved in sterol metabolism (federated query with Rhea and ChEMBL via IDSM/Elixir czech republic).",
    "ground_truth_query": "PREFIX CHEBI: <http://purl.obolibrary.org/obo/CHEBI_>\nPREFIX cco: <http://rdf.ebi.ac.uk/terms/chembl#>\nPREFIX chebihash: <http://purl.obolibrary.org/obo/chebi#>\nPREFIX owl: <http://www.w3.org/2002/07/owl#>\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX rh: <http://rdf.rhea-db.org/>\nPREFIX skos: <http://www.w3.org/2004/02/skos/core#>\nPREFIX taxon: <http://purl.uniprot.org/taxonomy/>\nPREFIX up: <http://purl.uniprot.org/core/>\n\nSELECT\n        DISTINCT\n            ?protein\n            ?proteinFullName\n            ?activityType\n            ?standardActivityValue\n            ?standardActivityUnit\n            ?chemblMolecule\n            ?chemlbMoleculePrefLabel\nWHERE\n  {\n  # ChEBI: retrieve members of the ChEBI class ChEBI:15889 (sterol)\n  # Rhea: retrieve the reactions involving these ChEBI as participants\n  SERVICE <https://sparql.rhea-db.org/sparql> {\n    ?reaction rdfs:subClassOf  rh:Reaction ;\n\t      rh:status        rh:Approved ;\n\t      rh:side          ?reactionSide .\n    ?reactionSide\n\t      rh:contains      ?participant .\n    ?participant rh:compound  ?compound\n    {\n      ?compound  rh:chebi  ?chebi .\n      ?chebi (rdfs:subClassOf)+ CHEBI:15889\n    } UNION {\n      ?compound  rh:chebi           ?chebi .\n      ?chebi2   rdfs:subClassOf     ?chebiRestriction .\n      ?chebiRestriction\n\t\ta           owl:Restriction ;\n\t\towl:onProperty      chebihash:has_major_microspecies_at_pH_7_3 ;\n\t\towl:someValuesFrom  ?chebi .\n      ?chebi2 (rdfs:subClassOf)+ CHEBI:15889\n    }\n  }\n  # UniProt: retrieve the human (taxid:9606) enzymes catalyzing these Rhea reactions\n  ?ca       up:catalyzedReaction  ?reaction .\n  ?a        up:catalyticActivity  ?ca .\n  ?protein  up:annotation         ?a ;\n\t    up:organism           taxon:9606 ;\n\t    up:recommendedName    ?proteinRecName .\n  ?proteinRecName\n\t    up:fullName           ?proteinFullName .\n  # Find drugs in wikidata that interact with the UniProt Proteins\n  # ChEMBL: retrieve the corresponding targets and with drugs in clinical phase 4\n  # Via https://idsm.elixir-czech.cz/sparql/\n  SERVICE <https://idsm.elixir-czech.cz/sparql/endpoint/idsm> {\n    ?activity a cco:Activity ;\n      cco:hasMolecule ?chemblMolecule ;\n      cco:hasAssay ?assay ;\n      cco:standardType ?activityType ;\n      cco:standardValue ?standardActivityValue ;\n      cco:standardUnits ?standardActivityUnit .\n    ?chemblMolecule cco:highestDevelopmentPhase ?highestDevelopmentPhase ;\n      rdfs:label ?chemblMoleculeLabel ;\n      skos:prefLabel ?chemlbMoleculePrefLabel .\n    FILTER (?highestDevelopmentPhase > 3)\n    ?assay cco:hasTarget ?target .\n    ?target cco:hasTargetComponent/cco:targetCmptXref ?protein .\n    ?protein a cco:UniprotRef .\n  }\n}",
    "target_endpoint": "https://sparql.uniprot.org/sparql/",
    "federates_with": [
      "https://sparql.rhea-db.org/sparql",
      "https://idsm.elixir-czech.cz/sparql/endpoint/idsm"
    ],
    "endpoint_set": "Uniprot",
    "file_path": "UniProt/52_drugs_targeting_sterol_metabolism.ttl",
    "predicted_query": "# https://sparql.rhea-db.org/sparql\nPREFIX rhea: <http://rdf.rhea-db.org/>\nPREFIX chebi: <http://purl.obolibrary.org/obo/CHEBI_>\nPREFIX uniprot: <http://purl.uniprot.org/core/>\nPREFIX taxon: <http://purl.uniprot.org/taxonomy/>\n\nSELECT DISTINCT ?drug\nWHERE {\n  # Find Rhea reactions related to sterol metabolism\n  SERVICE <https://sparql.rhea-db.org/sparql> {\n    ?reaction rhea:equation ?equation .\n    FILTER (CONTAINS(LCASE(?equation), \"sterol\")) . # Reactions with sterol in equation\n    ?reaction rhea:status rhea:approved .\n    ?reaction rhea:directionalReaction ?directionalReaction .\n    ?directionalReaction rhea:enzyme ?enzyme .\n  }\n\n  # Find human enzymes in UniProt\n  SERVICE <https://sparql.uniprot.org/sparql> {\n    ?enzyme uniprot:encodedBy ?protein .\n    ?protein uniprot:organism taxon:9606 .  # Homo sapiens (human)\n  }\n\n  # Find drugs targeting these enzymes via IDSM/Elixir Czech Republic\n  SERVICE <https://idsm.elixir-czech.cz/sparql> {\n    # Assuming a simplified model where drug targets are directly linked to UniProt IDs\n    # and that the target is an enzyme.  Adapt the property as needed based on the\n    # IDSM endpoint's schema.  This is a placeholder and needs to be verified.\n    ?drug <http://example.com/targets> ?protein . # Replace with the actual property\n    ?protein a <http://purl.uniprot.org/core/Protein> . # Ensure it's a protein\n  }\n}",
    "predicted_endpoint": "https://sparql.rhea-db.org/sparql",
    "predicted_endpoint_equal_to_target_endpoint": false,
    "predicted_endpoint_in_federates_with": true,
    "predicted_endpoint_or_federated_endpoint": true,
    "run_id_langsmith": "7e54b01a-1163-4c1f-b0d3-9c3a8baeb614",
    "evaluation_timestamp": "2025-05-11T10:06:46.642884",
    "question_understanding_prompt_tokens": 270,
    "question_understanding_completion_tokens": 28,
    "question_understanding_total_tokens": 298,
    "sparql_query_construction_prompt_tokens": 2417,
    "sparql_query_construction_completion_tokens": 607,
    "sparql_query_construction_total_tokens": 3024,
    "is_valid_sparql": true,
    "sparql_syntax_error": "syntactically correct",
    "result_eval_f1_score": 0.0,
    "result_eval_precision": 0.0,
    "result_eval_recall": 0.0,
    "error_occured_at_endpoint": false,
    "predicted_query_result_is_empty": true,
    "ground_truth_query_result_is_empty": false,
    "error_occured_at_endpoint_message": "no error, but empty result"
  },
  {
    "resource": "https://sparql.uniprot.org/.well-known/sparql-examples/54",
    "natural_language_question": "Proteins with binding sites for ligands similar to heme",
    "ground_truth_query": "PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX sachem: <http://bioinfo.uochb.cas.cz/rdf/v1.0/sachem#>\nPREFIX up: <http://purl.uniprot.org/core/>\nPREFIX xsd: <http://www.w3.org/2001/XMLSchema#>\n\nSELECT \n  ?protein\n  ?mnemonic\n  ?proteinName\n  ?ligandSimilarityScore\n  ?ligand\nWHERE {\n  SERVICE <https://idsm.elixir-czech.cz/sparql/endpoint/chebi> {\n    ?ssc sachem:compound ?ligand; \n      sachem:score ?ligandSimilarityScore ;\n      sachem:similaritySearch ?sss .\n        # Smiles of Heme\n    ?sss    sachem:query \"CC1=C(CCC([O-])=O)C2=[N+]3C1=Cc1c(C)c(C=C)c4C=C5C(C)=C(C=C)C6=[N+]5[Fe-]3(n14)n1c(=C6)c(C)c(CCC([O-])=O)c1=C2\";\n      sachem:cutoff \"8e-1\"^^xsd:double ;\n      sachem:aromaticityMode sachem:aromaticityDetect ;\n      sachem:similarityRadius 1 ;\n      sachem:tautomerMode sachem:ignoreTautomers .\n  }\n  ?protein up:mnemonic ?mnemonic ;\n    up:recommendedName/up:fullName ?proteinName ;\n    up:annotation ?annotation .\n  ?annotation a up:Binding_Site_Annotation ;\n      up:ligand/rdfs:subClassOf ?ligand .\n}\nORDER BY DESC(?ligandSimilarityScore)",
    "target_endpoint": "https://sparql.uniprot.org/sparql/",
    "federates_with": [
      "https://idsm.elixir-czech.cz/sparql/endpoint/chebi"
    ],
    "endpoint_set": "Uniprot",
    "file_path": "UniProt/54_binding_sites_for_ligands_similar_to_heme_sachem.ttl",
    "predicted_query": "# https://sparql.uniprot.org/sparql\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX up: <http://purl.uniprot.org/core/>\nPREFIX chebi: <http://purl.obolibrary.org/obo/CHEBI_>\n\nSELECT DISTINCT ?protein ?proteinName\nWHERE {\n  # Find proteins in UniProt that have a binding site\n  SERVICE <https://sparql.uniprot.org/sparql> {\n    ?protein a up:Protein .\n    ?protein rdfs:label ?proteinName .\n    ?protein up:annotation ?bindingSiteAnnotation .\n    ?bindingSiteAnnotation a up:Binding_Site .\n    ?bindingSiteAnnotation rdfs:comment ?bindingSiteDescription .\n\n    # Filter for binding sites that mention \"heme\" or similar ligands\n    FILTER (CONTAINS(LCASE(?bindingSiteDescription), \"heme\"))\n  }\n  \n  #Optional:  Extend the search to include proteins that bind to ligands similar to heme using Rhea and ChEBI\n  #SERVICE <https://sparql.rhea-db.org/sparql> {\n  #  ?reaction rdfs:comment ?reactionDescription .\n  #  FILTER (CONTAINS(LCASE(?reactionDescription), \"heme\")) .\n  #  ?reaction rhea:equation ?equation .\n  #  ?equation rdfs:label ?ligand .\n  #}\n  #SERVICE <https://sparql.swisslipids.org/sparql/> {\n  #  ?lipid a sl:Lipid .\n  #  ?lipid rdfs:label ?lipidName .\n  #  FILTER (CONTAINS(LCASE(?lipidName), \"heme\"))\n  #}\n}",
    "predicted_endpoint": "https://sparql.uniprot.org/sparql",
    "predicted_endpoint_equal_to_target_endpoint": true,
    "predicted_endpoint_in_federates_with": false,
    "predicted_endpoint_or_federated_endpoint": true,
    "run_id_langsmith": "5e722e04-1955-4ba8-a5c2-b702cd8fc565",
    "evaluation_timestamp": "2025-05-11T10:07:32.491670",
    "question_understanding_prompt_tokens": 248,
    "question_understanding_completion_tokens": 28,
    "question_understanding_total_tokens": 276,
    "sparql_query_construction_prompt_tokens": 2621,
    "sparql_query_construction_completion_tokens": 599,
    "sparql_query_construction_total_tokens": 3220,
    "is_valid_sparql": true,
    "sparql_syntax_error": "syntactically correct",
    "result_eval_f1_score": 0.0,
    "result_eval_precision": 0.0,
    "result_eval_recall": 0.0,
    "error_occured_at_endpoint": false,
    "predicted_query_result_is_empty": true,
    "ground_truth_query_result_is_empty": false,
    "error_occured_at_endpoint_message": "no error, but empty result"
  },
  {
    "resource": "https://sparql.uniprot.org/.well-known/sparql-examples/43",
    "natural_language_question": "Connect patents cited in UniProtKB with those in the patent database at EPO via publication number, whose grant date is more than twenty years in the past.",
    "ground_truth_query": "PREFIX patent: <http://data.epo.org/linked-data/def/patent/>\nPREFIX skos: <http://www.w3.org/2004/02/skos/core#>\nPREFIX up: <http://purl.uniprot.org/core/>\n\nSELECT ?grantDate ?patent ?application ?applicationNo\nWHERE\n{\n    ?citation a up:Patent_Citation ;\n  skos:exactMatch ?patent .\n  BIND(SUBSTR(STR(?patent), 35) AS ?applicationNo)\n  BIND(SUBSTR(STR(?patent), 33, 2) AS ?countryCode)\n  SERVICE <https://data.epo.org/linked-data/query>{\n    ?publication patent:publicationNumber ?applicationNo ;\n      patent:application ?application .\n    ?application patent:grantDate ?grantDate .\n  }\n  BIND((year(now()) - 20) AS ?thisYearMinusTwenty)\n  BIND(year(?grantDate) AS ?grantYear)\n  FILTER(?grantYear < ?thisYearMinusTwenty)\n} ORDER BY ?grantYear",
    "target_endpoint": "https://sparql.uniprot.org/sparql/",
    "federates_with": [
      "https://data.epo.org/linked-data/query"
    ],
    "endpoint_set": "Uniprot",
    "file_path": "UniProt/43_patents_used_in_uniprot_granted_twenty_years_in_the_past.ttl",
    "predicted_query": "# https://sparql.uniprot.org/sparql\nPREFIX up: <http://purl.uniprot.org/core/>\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\n\nSELECT ?uniprotEntry ?patentPublicationNumber ?patentTitle ?grantDate\nWHERE {\n  # Query UniProtKB for entries with patent citations\n  SERVICE <https://sparql.uniprot.org/sparql> {\n    ?uniprotEntry a up:Protein ; # Assuming UniProt entries are of type Protein\n                  up:citation ?citation .\n    ?citation up:publication ?patent .\n    ?patent a up:Patent ; # Assuming patents are of type Patent\n            up:publicationNumber ?patentPublicationNumber .\n  }\n\n  # Simulate querying an EPO endpoint (hypothetical) and filter by grant date\n  # Assuming an EPO endpoint exists and has patent information\n  # and that it uses the same publication number and a grant date property\n  BIND (NOW() AS ?now)\n  BIND (YEAR(?now) - 20 AS ?cutoffYear)\n  FILTER (YEAR(?grantDate) < ?cutoffYear) # Filter patents granted more than 20 years ago\n\n  # Simulate retrieving patent title (assuming it exists in UniProt or EPO)\n  OPTIONAL {\n     SERVICE <https://sparql.uniprot.org/sparql> {\n        ?citation rdfs:label ?patentTitle . # Attempt to get title from UniProt\n     }\n  }\n  BIND (\"Simulated Grant Date\" AS ?grantDate) # Simulate the grant date\n}",
    "predicted_endpoint": "https://sparql.uniprot.org/sparql",
    "predicted_endpoint_equal_to_target_endpoint": true,
    "predicted_endpoint_in_federates_with": false,
    "predicted_endpoint_or_federated_endpoint": true,
    "run_id_langsmith": "da6ac196-6201-45fa-ba6d-3456e19826eb",
    "evaluation_timestamp": "2025-05-11T10:07:50.034547",
    "question_understanding_prompt_tokens": 265,
    "question_understanding_completion_tokens": 47,
    "question_understanding_total_tokens": 312,
    "sparql_query_construction_prompt_tokens": 1688,
    "sparql_query_construction_completion_tokens": 0,
    "sparql_query_construction_total_tokens": 1688,
    "is_valid_sparql": true,
    "sparql_syntax_error": "syntactically correct",
    "result_eval_f1_score": 0.0,
    "result_eval_precision": 0.0,
    "result_eval_recall": 0.0,
    "error_occured_at_endpoint": false,
    "predicted_query_result_is_empty": true,
    "ground_truth_query_result_is_empty": false,
    "error_occured_at_endpoint_message": "no error, but empty result"
  },
  {
    "resource": "https://sparql.uniprot.org/.well-known/sparql-examples/45",
    "natural_language_question": "Retrieve drugs that target human enzymes involved in sterol metabolism (federated query with WikiData and Rhea).",
    "ground_truth_query": "PREFIX CHEBI: <http://purl.obolibrary.org/obo/CHEBI_>\nPREFIX chebihash: <http://purl.obolibrary.org/obo/chebi#>\nPREFIX owl: <http://www.w3.org/2002/07/owl#>\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX rh: <http://rdf.rhea-db.org/>\nPREFIX taxon: <http://purl.uniprot.org/taxonomy/>\nPREFIX uniprotkb: <http://purl.uniprot.org/uniprot/>\nPREFIX up: <http://purl.uniprot.org/core/>\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\n\nSELECT DISTINCT ?protein ?proteinFullName ?wikiChemical ?wikiChemicalLabel ?medicalConditionTreatedLabel\nWHERE {\n  # ChEBI: retrieve members of the ChEBI class ChEBI:15889 (sterol)\n  # Rhea: retrieve the reactions involving these ChEBI as participants\n  SERVICE <https://sparql.rhea-db.org/sparql> {\n    ?reaction rdfs:subClassOf rh:Reaction ;\n      rh:status rh:Approved ;\n      rh:side ?reactionSide .\n    ?reactionSide\n      rh:contains ?participant .\n    ?participant rh:compound ?compound\n    {\n      ?compound rh:chebi ?chebi .\n      ?chebi (rdfs:subClassOf)+ CHEBI:15889\n    } UNION {\n      ?compound rh:chebi ?chebi .\n      ?chebi2 rdfs:subClassOf ?chebiRestriction .\n      ?chebiRestriction\n\t\ta owl:Restriction ;\n\t\towl:onProperty chebihash:has_major_microspecies_at_pH_7_3 ;\n\t\towl:someValuesFrom ?chebi .\n      ?chebi2 (rdfs:subClassOf)+ CHEBI:15889\n    }\n  }\n  # UniProt: retrieve the human (taxid:9606) enzymes catalyzing these Rhea reactions\n  ?ca up:catalyzedReaction  ?reaction .\n  ?a up:catalyticActivity  ?ca .\n  ?proteinIRI  up:annotation ?a ;\n    up:organism taxon:9606 ;\n    up:recommendedName ?proteinRecName .\n  ?proteinRecName up:fullName ?proteinFullName .\n  # Find drugs in wikidata that interact with the UniProt Proteins\n  BIND (SUBSTR(STR(?proteinIRI), STRLEN(STR(uniprotkb:))+1) AS ?protein)\n  SERVICE <https://query.wikidata.org/sparql> {\n    ?wp wdt:P352  ?protein .\n    ?wikiChemical wdt:P129 ?wp . # Physically interacts with\n    ?wikiChemical rdfs:label ?wikiChemicalLabel .\n    ?wikiChemical wdt:P2175 ?wmc . # Medical conndition treated\n    ?wmc rdfs:label ?medicalConditionTreatedLabel .\n    FILTER(lang(?medicalConditionTreatedLabel) = 'en')\n    FILTER(lang(?wikiChemicalLabel) = 'en')\n  }\n}",
    "target_endpoint": "https://sparql.uniprot.org/sparql/",
    "federates_with": [
      "https://query.wikidata.org/sparql",
      "https://sparql.rhea-db.org/sparql"
    ],
    "endpoint_set": "Uniprot",
    "file_path": "UniProt/45_drugs_targeting_human_sterol_metabolism_enzymes.ttl",
    "predicted_query": "# https://sparql.uniprot.org/sparql\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX up: <http://purl.uniprot.org/core/>\nPREFIX taxon: <http://purl.uniprot.org/taxonomy/>\nPREFIX wd: <http://www.wikidata.org/entity/>\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\nPREFIX chebi: <http://purl.obolibrary.org/obo/CHEBI#>\nPREFIX rhea: <http://rdf.rhea-db.org/>\n\nSELECT DISTINCT ?drug ?enzymeLabel ?reaction\nWHERE {\n  # Find human enzymes from UniProt\n  SERVICE <https://sparql.uniprot.org/sparql> {\n    ?enzyme a up:Protein ;\n            up:organism taxon:9606 ; # Homo sapiens\n            rdfs:label ?enzymeLabel .\n  }\n\n  # Find reactions in Rhea involving sterols\n  SERVICE <https://sparql.rhea-db.org/sparql> {\n    ?reaction rhea:equation ?equation .\n    ?reaction rhea:hasParticipant ?sterol .\n    ?sterol a chebi:CHEBI_15889 .  # sterol in ChEBI\n    ?reaction rhea:catalyzedBy ?enzymeUri .\n    FILTER (STRSTARTS(str(?enzymeUri), \"http://purl.uniprot.org/uniprot/\")) # Ensure enzyme URI is a UniProt URI\n    BIND(IRI(REPLACE(STR(?enzymeUri), \"http://purl.uniprot.org/uniprot/\", \"http://purl.uniprot.org/uniprotkb/\")) AS ?enzyme) # Convert UniProt URI to match UniProt endpoint\n  }\n\n  # Find drugs targeting the enzymes in Wikidata\n  SERVICE <https://query.wikidata.org/sparql> {\n    ?drug wdt:P2175 ?enzymeWikidata . # P2175 is \"pharmacological action\"\n    ?enzymeWikidata wdt:P703 wd:Q15978631 . # target sterol metabolic process\n    ?enzymeWikidata wdt:P279* wd:Q8054 . # enzyme\n    ?enzymeWikidata wdt:P2868 ?enzymeLabel . # enzyme target\n  }\n}",
    "predicted_endpoint": "https://sparql.uniprot.org/sparql",
    "predicted_endpoint_equal_to_target_endpoint": true,
    "predicted_endpoint_in_federates_with": false,
    "predicted_endpoint_or_federated_endpoint": true,
    "run_id_langsmith": "be933bad-13cf-4ccd-a5dc-c75692cdfecf",
    "evaluation_timestamp": "2025-05-11T10:07:59.355361",
    "question_understanding_prompt_tokens": 261,
    "question_understanding_completion_tokens": 28,
    "question_understanding_total_tokens": 289,
    "sparql_query_construction_prompt_tokens": 2100,
    "sparql_query_construction_completion_tokens": 0,
    "sparql_query_construction_total_tokens": 2100,
    "is_valid_sparql": true,
    "sparql_syntax_error": "syntactically correct",
    "result_eval_f1_score": 0.0,
    "result_eval_precision": 0.0,
    "result_eval_recall": 0.0,
    "error_occured_at_endpoint": false,
    "predicted_query_result_is_empty": true,
    "ground_truth_query_result_is_empty": false,
    "error_occured_at_endpoint_message": "no error, but empty result"
  },
  {
    "resource": "https://sparql.uniprot.org/.well-known/sparql-examples/42",
    "natural_language_question": "Connect patents cited in UniProtKB with those in the patent database at EPO via publication number.",
    "ground_truth_query": "PREFIX patent: <http://data.epo.org/linked-data/def/patent/>\nPREFIX skos: <http://www.w3.org/2004/02/skos/core#>\nPREFIX up: <http://purl.uniprot.org/core/>\n\nSELECT ?citation ?patent ?application ?applicationNo\nWHERE\n{\n  ?citation a up:Patent_Citation ;\n    skos:exactMatch ?patent .\n  FILTER(CONTAINS(STR(?patent), 'EP'))\n  BIND(SUBSTR(STR(?patent), 35) AS ?applicationNo)\n  SERVICE <https://data.epo.org/linked-data/query>{\n    ?application patent:publicationNumber ?applicationNo\n  }\n}",
    "target_endpoint": "https://sparql.uniprot.org/sparql/",
    "federates_with": [
      "https://data.epo.org/linked-data/query"
    ],
    "endpoint_set": "Uniprot",
    "file_path": "UniProt/42_connect_patents_to_epo.ttl",
    "predicted_query": "# https://sparql.uniprot.org/sparql\nPREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX up: <http://purl.uniprot.org/core/>\n\n# Query UniProtKB for entries with patent citations\nSELECT DISTINCT ?uniprotEntry ?patentPublicationNumber\nWHERE {\n  ?uniprotEntry a up:Protein .\n  ?uniprotEntry up:citation ?citation .\n  ?citation rdf:type up:Patent .\n  ?citation rdfs:label ?patentPublicationNumber . # Assuming patent publication number is available as a label\n\n  #Illustrative example of how to query a hypothetical EPO endpoint\n  #SERVICE <hypothetical_epo_endpoint> {\n  #  ?epoPatent a <hypothetical_epo_patent_class> .\n  #  ?epoPatent <hypothetical_publication_number_property> ?patentPublicationNumber .\n  #  ?epoPatent <hypothetical_title_property> ?epoPatentTitle .\n  #}\n}\n#The query retrieves UniProt entries and their associated patent publication numbers.\n#The SERVICE block is commented out because there is no EPO endpoint provided.\n#If an EPO endpoint were available, the commented SERVICE block would be uncommented and adapted to query the EPO database for patents with matching publication numbers.",
    "predicted_endpoint": "https://sparql.uniprot.org/sparql",
    "predicted_endpoint_equal_to_target_endpoint": true,
    "predicted_endpoint_in_federates_with": false,
    "predicted_endpoint_or_federated_endpoint": true,
    "run_id_langsmith": "02fa91d6-2a6b-4d04-a163-9624c67d72eb",
    "evaluation_timestamp": "2025-05-11T10:08:22.086474",
    "question_understanding_prompt_tokens": 258,
    "question_understanding_completion_tokens": 35,
    "question_understanding_total_tokens": 293,
    "sparql_query_construction_prompt_tokens": 1900,
    "sparql_query_construction_completion_tokens": 474,
    "sparql_query_construction_total_tokens": 2374,
    "is_valid_sparql": true,
    "sparql_syntax_error": "syntactically correct",
    "result_eval_f1_score": 0.0,
    "result_eval_precision": 0.0,
    "result_eval_recall": 0.0,
    "error_occured_at_endpoint": false,
    "predicted_query_result_is_empty": true,
    "ground_truth_query_result_is_empty": false,
    "error_occured_at_endpoint_message": "no error, but empty result"
  },
  {
    "resource": "https://sparql.uniprot.org/.well-known/sparql-examples/67_draft_human_metabolome",
    "natural_language_question": "Generate a draft human metabolome",
    "ground_truth_query": "PREFIX chebislash: <http://purl.obolibrary.org/obo/chebi/>\nPREFIX rh: <http://rdf.rhea-db.org/>\nPREFIX taxon: <http://purl.uniprot.org/taxonomy/>\nPREFIX up: <http://purl.uniprot.org/core/>\n\nSELECT\n?uniprot ?mnemonic ?rhea ?chebi ?smiles ?inchiKey\nWHERE\n{\n  ?uniprot up:annotation/up:catalyticActivity/up:catalyzedReaction ?rhea ;\n        up:organism taxon:9606 ;\n        up:mnemonic ?mnemonic .\n  SERVICE <https://sparql.rhea-db.org/sparql> {\n\t?rhea rh:side/rh:contains/rh:compound ?compound .\n    ?compound (rh:chebi|(rh:reactivePart/rh:chebi)|(rh:underlyingChebi/rh:chebi)) ?chebi .\n   }\n   ?chebi chebislash:smiles ?smiles ;\n          chebislash:inchikey ?inchiKey .\n}",
    "target_endpoint": "https://sparql.uniprot.org/sparql/",
    "federates_with": [
      "https://sparql.rhea-db.org/sparql"
    ],
    "endpoint_set": "Uniprot",
    "file_path": "UniProt/67_draft_human_metabolome.ttl",
    "predicted_query": "# https://sparql.uniprot.org/sparql\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX up: <http://purl.uniprot.org/core/>\nPREFIX taxon: <http://purl.uniprot.org/taxonomy/>\nPREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>\nPREFIX rhea: <http://rdf.rhea-db.org/>\n\nSELECT DISTINCT ?metabolite ?metaboliteName\nWHERE {\n  # Find human proteins in UniProt\n  SERVICE <https://sparql.uniprot.org/sparql> {\n    ?protein a up:Protein .\n    ?protein up:organism taxon:9606 .  # Homo sapiens (Human)\n    ?protein rdfs:label ?proteinName .\n  }\n\n  # Try to link to Rhea reactions involving these proteins\n  SERVICE <https://sparql.rhea-db.org/sparql> {\n    ?reaction rhea:enzyme ?proteinURI . # Link Rhea reactions to UniProt protein URI\n    FILTER (STRSTARTS(str(?proteinURI), \"http://purl.uniprot.org/uniprot/\")) # Ensure URI is a uniprot one\n    ?reaction rhea:has_participant ?metabolite .\n    ?metabolite rdfs:label ?metaboliteName .\n  }\n  \n  #OPTIONAL: Consider SwissLipids for lipid metabolites (if applicable, add a SERVICE block here)\n  #SERVICE <https://sparql.swisslipids.org/sparql/> {\n  #  ?lipid a <http://www.swisslipids.org/rdf/SwissLipids#Lipid> .\n  #  ?lipid rdfs:label ?metaboliteName .\n  #  BIND(?lipid AS ?metabolite)\n  #}\n}",
    "predicted_endpoint": "https://sparql.uniprot.org/sparql",
    "predicted_endpoint_equal_to_target_endpoint": true,
    "predicted_endpoint_in_federates_with": false,
    "predicted_endpoint_or_federated_endpoint": true,
    "run_id_langsmith": "fdcb0a68-43e3-40c9-b460-dd0fa551c2f3",
    "evaluation_timestamp": "2025-05-11T10:08:30.175995",
    "question_understanding_prompt_tokens": 244,
    "question_understanding_completion_tokens": 20,
    "question_understanding_total_tokens": 264,
    "sparql_query_construction_prompt_tokens": 1305,
    "sparql_query_construction_completion_tokens": 0,
    "sparql_query_construction_total_tokens": 1305,
    "is_valid_sparql": true,
    "sparql_syntax_error": "syntactically correct",
    "result_eval_f1_score": 0.0,
    "result_eval_precision": 0.0,
    "result_eval_recall": 0.0,
    "error_occured_at_endpoint": false,
    "predicted_query_result_is_empty": true,
    "ground_truth_query_result_is_empty": false,
    "error_occured_at_endpoint_message": "no error, but empty result"
  },
  {
    "resource": "https://sparql.uniprot.org/.well-known/sparql-examples/36",
    "natural_language_question": "Find the orthologous proteins for UniProtKB entry P05067 using the <a href=\"http://www.orthod.org\">OrthoDB database</a>",
    "ground_truth_query": "PREFIX orthodb: <http://purl.orthodb.org/>\nPREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX skos: <http://www.w3.org/2004/02/skos/core#>\nPREFIX uniprotkb: <http://purl.uniprot.org/uniprot/>\nPREFIX up: <http://purl.uniprot.org/core/>\n\nSELECT\n  ?protein\n  ?orthoGroup\n  ?scientificName\n  ?functionComment\n  ?prefferedGeneName\n  ((STRLEN(?value) - ?medianLength) as ?deviationFromMedianLength)\nWHERE\n{\n  uniprotkb:P05067 a up:Protein ;\n        up:organism/up:scientificName ?scientificName ;\n        rdfs:seeAlso ?orthoGroup ;\n        up:encodedBy/skos:prefLabel ?prefferedGeneName ;\n          up:sequence/rdf:value ?value .\n  OPTIONAL {\n    ?protein up:annotation ?functionAnnotation .\n    ?functionAnnotation a up:Function_Annotation ;\n      rdfs:comment ?functionComment .\n  }\n  SERVICE <https://sparql.orthodb.org/sparql>{\n    ?orthoGroup orthodb:ogMedianProteinLength ?medianLength .\n    ?orthoGroup orthodb:hasMember ?xref .\n    ?xref orthodb:xref/orthodb:xrefResource uniprotkb:P05067 .\n  }\n}\nLIMIT 985915",
    "target_endpoint": "https://sparql.uniprot.org/sparql/",
    "federates_with": [
      "https://sparql.orthodb.org/sparql"
    ],
    "endpoint_set": "Uniprot",
    "file_path": "UniProt/36_orthologous_proteins_via_orthodb.ttl",
    "predicted_query": "# https://sparql.uniprot.org/sparql\nPREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX up: <http://purl.uniprot.org/core/>\n\nSELECT DISTINCT ?orthologousProtein ?geneName ?organismName\nWHERE {\n  # Find orthologous proteins related to P05067\n  {\n    SELECT DISTINCT ?gene ?organism WHERE {\n      VALUES ?protein { <http://purl.uniprot.org/uniprot/P05067> } # Focus on the specified UniProt entry\n      ?protein up:databaseCrossReference ?gene .\n      ?gene a up:Gene ;\n            up:organism ?organism .\n    }\n  }\n  ?orthologousProtein up:gene ?gene .\n  ?orthologousProtein up:organism ?organism .\n  ?orthologousProtein rdfs:label ?geneName .\n  ?organism rdfs:label ?organismName .\n  FILTER (?orthologousProtein != <http://purl.uniprot.org/uniprot/P05067>) # Exclude the original protein\n}",
    "predicted_endpoint": "https://sparql.uniprot.org/sparql",
    "predicted_endpoint_equal_to_target_endpoint": true,
    "predicted_endpoint_in_federates_with": false,
    "predicted_endpoint_or_federated_endpoint": true,
    "run_id_langsmith": "ecdcc3fe-56d8-4bff-847a-759c57a628f3",
    "evaluation_timestamp": "2025-05-11T10:08:42.650454",
    "question_understanding_prompt_tokens": 275,
    "question_understanding_completion_tokens": 44,
    "question_understanding_total_tokens": 319,
    "sparql_query_construction_prompt_tokens": 2814,
    "sparql_query_construction_completion_tokens": 378,
    "sparql_query_construction_total_tokens": 3192,
    "is_valid_sparql": true,
    "sparql_syntax_error": "syntactically correct",
    "result_eval_f1_score": 0.0,
    "result_eval_precision": 0.0,
    "result_eval_recall": 0.0,
    "error_occured_at_endpoint": false,
    "predicted_query_result_is_empty": true,
    "ground_truth_query_result_is_empty": false,
    "error_occured_at_endpoint_message": "no error, but empty result"
  },
  {
    "resource": "https://sparql.uniprot.org/.well-known/sparql-examples/60",
    "natural_language_question": "Find human proteins that catalyze reactions where substrates or product have a <a href=\"https://www.ebi.ac.uk/chebi/searchId.do?chebiId=CHEBI:35516\">Cholestane skeleton</a>",
    "ground_truth_query": "PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX rh: <http://rdf.rhea-db.org/>\nPREFIX sachem: <http://bioinfo.uochb.cas.cz/rdf/v1.0/sachem#>\nPREFIX taxon: <http://purl.uniprot.org/taxonomy/>\nPREFIX up: <http://purl.uniprot.org/core/>\n\nSELECT\n  DISTINCT\n    ?protein\n    ?disease\n    ?rhea\n    ?chebi\n    ?omim\nWHERE {\n    # Find complete ChEBIs with a Cholestane skeleton, via the Czech Elixir node IDSM Sachem chemical substructure search.\n    SERVICE <https://idsm.elixir-czech.cz/sparql/endpoint/chebi> {\n      ?chebi sachem:substructureSearch [\n        sachem:query\n\"[C@]12(CCC3CCCC[C@]3(C)[C@@]1([H])CC[C@]1(C)[C@@]([H])([C@@](C)([H])CCCC(C)C)CC[C@@]21[H])[H]\"\n].\n   }\n   # Use the fact that UniProt catalytic activities are annotated using Rhea \n   # Mapping the found ChEBIs to Rhea reactions\n   SERVICE <https://sparql.rhea-db.org/sparql>{\n     ?rhea rh:side/rh:contains/rh:compound/rdfs:subClassOf ?chebi .\n   }\n   # Match the found Rhea reactions with human UniProtKB proteins\n   ?protein up:annotation/up:catalyticActivity/up:catalyzedReaction ?rhea .\n   ?protein up:organism taxon:9606 .\n   # Find only those human entries that have an annotated related disease, and optionaly map these to OMIM\n   ?protein up:annotation/up:disease ?disease .\n   OPTIONAL {\n     ?disease rdfs:seeAlso ?omim .\n     ?omim up:database <http://purl.uniprot.org/database/MIM>\n   }\n}",
    "target_endpoint": "https://sparql.uniprot.org/sparql/",
    "federates_with": [
      "https://idsm.elixir-czech.cz/sparql/endpoint/chebi",
      "https://sparql.rhea-db.org/sparql"
    ],
    "endpoint_set": "Uniprot",
    "file_path": "UniProt/60_enzymes_working_on_substrate_with_Cholestene_backbone.ttl",
    "predicted_query": "# https://sparql.uniprot.org/sparql\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX up: <http://purl.uniprot.org/core/>\nPREFIX taxon: <http://purl.uniprot.org/taxonomy/>\nPREFIX rhea: <http://rdf.rhea-db.org/>\nPREFIX chebi: <http://purl.obolibrary.org/obo/>\n\nSELECT DISTINCT ?protein ?proteinName ?reaction ?reactionEquation\nWHERE {\n  # Find human proteins in UniProt\n  SERVICE <https://sparql.uniprot.org/sparql> {\n    ?protein a up:Protein .\n    ?protein up:organism taxon:9606 .  # Homo sapiens\n    ?protein rdfs:label ?proteinName .\n  }\n\n  # Find reactions catalyzed by these proteins in Rhea\n  SERVICE <https://sparql.rhea-db.org/sparql> {\n    ?reaction rhea:enzyme ?protein .\n    ?reaction rdfs:label ?reactionEquation .\n    {\n      # Check if the reaction has a substrate that is a Cholestane skeleton\n      ?reaction rhea:has_substrate ?substrate .\n      ?substrate chebi:is_a chebi:CHEBI_35516 . # Cholestane skeleton\n    }\n    UNION\n    {\n      # Check if the reaction has a product that is a Cholestane skeleton\n      ?reaction rhea:has_product ?product .\n      ?product chebi:is_a chebi:CHEBI_35516 . # Cholestane skeleton\n    }\n  }\n}",
    "predicted_endpoint": "https://sparql.uniprot.org/sparql",
    "predicted_endpoint_equal_to_target_endpoint": true,
    "predicted_endpoint_in_federates_with": false,
    "predicted_endpoint_or_federated_endpoint": true,
    "run_id_langsmith": "41e76322-6262-4107-9031-c36aeba006b1",
    "evaluation_timestamp": "2025-05-11T10:09:09.247497",
    "question_understanding_prompt_tokens": 293,
    "question_understanding_completion_tokens": 38,
    "question_understanding_total_tokens": 331,
    "sparql_query_construction_prompt_tokens": 3494,
    "sparql_query_construction_completion_tokens": 669,
    "sparql_query_construction_total_tokens": 4163,
    "is_valid_sparql": true,
    "sparql_syntax_error": "syntactically correct",
    "result_eval_f1_score": 0.0,
    "result_eval_precision": 0.0,
    "result_eval_recall": 0.0,
    "error_occured_at_endpoint": false,
    "predicted_query_result_is_empty": true,
    "ground_truth_query_result_is_empty": false,
    "error_occured_at_endpoint_message": "no error, but empty result"
  },
  {
    "resource": "https://sparql.uniprot.org/.well-known/sparql-examples/70_enzymes_interacting_with_molecules_similar_to_dopamine",
    "natural_language_question": "Look for enzymes catalyzing reactions with molecules similar to dopamine.",
    "ground_truth_query": "PREFIX CHEBI: <http://purl.obolibrary.org/obo/CHEBI_>\nPREFIX rh: <http://rdf.rhea-db.org/>\nPREFIX sachem: <http://bioinfo.uochb.cas.cz/rdf/v1.0/sachem#>\nPREFIX up: <http://purl.uniprot.org/core/>\n\nSELECT\n  ?protein\n  ?rhea\n  ?chebi\nWHERE {\n  # Use the smiles of dopamine CHEBI:18243\n  SERVICE <https://idsm.elixir-czech.cz/sparql/endpoint/chebi>{\n    ?chebi sachem:similarCompoundSearch [\n      sachem:query \"NCCc1ccc(O)c(O)c1\" ] .\n  }\n  GRAPH<https://sparql.rhea-db.org/rhea>{\n    ?rhea rh:side/rh:contains/rh:compound ?compound .\n    ?compound (rh:chebi|(rh:reactivePart/rh:chebi)|(rh:underlyingChebi/rh:chebi)) ?chebi .\n  }\n  ?protein up:reviewed true ;\n    up:annotation ?caa .\n  ?caa up:catalyticActivity/up:catalyzedReaction ?rhea .\n}",
    "target_endpoint": "https://sparql.uniprot.org/sparql/",
    "federates_with": [
      "https://idsm.elixir-czech.cz/sparql/endpoint/chebi"
    ],
    "endpoint_set": "Uniprot",
    "file_path": "UniProt/70_enzymes_interacting_with_molecules_similar_to_dopamine.ttl",
    "predicted_query": "# https://sparql.rhea-db.org/sparql\nPREFIX rhea: <http://rdf.rhea-db.org/>\nPREFIX chebi: <http://purl.obolibrary.org/obo/CHEBI_>\nPREFIX uniprot: <http://purl.uniprot.org/core/>\n\nSELECT DISTINCT ?enzyme ?reaction\nWHERE {\n  # Find reactions in Rhea involving dopamine\n  SERVICE <https://sparql.rhea-db.org/sparql> {\n    ?reaction rhea: Rhea-has-participant chebi:16708 .  #CHEBI ID for adenine. I am using this as a placeholder as I don't have the CHEBI ID for dopamine.\n  }\n  \n  # Find enzymes in UniProt that catalyze these reactions\n  SERVICE <https://sparql.uniprot.org/sparql> {\n    ?enzyme uniprot:catalyticActivity ?reaction .\n  }\n}",
    "predicted_endpoint": "https://sparql.rhea-db.org/sparql",
    "predicted_endpoint_equal_to_target_endpoint": false,
    "predicted_endpoint_in_federates_with": false,
    "predicted_endpoint_or_federated_endpoint": false,
    "run_id_langsmith": "f8cafb97-3433-41b8-a59a-b0ad36661d0d",
    "evaluation_timestamp": "2025-05-11T10:09:33.567707",
    "question_understanding_prompt_tokens": 248,
    "question_understanding_completion_tokens": 27,
    "question_understanding_total_tokens": 275,
    "sparql_query_construction_prompt_tokens": 2103,
    "sparql_query_construction_completion_tokens": 0,
    "sparql_query_construction_total_tokens": 2103,
    "is_valid_sparql": false,
    "sparql_syntax_error": "Lexical error at line 10, column 41.  Encountered: '32' (32), after prefix \"Rhea-has-participant\"",
    "result_eval_f1_score": 0.0,
    "result_eval_precision": 0.0,
    "result_eval_recall": 0.0,
    "error_occured_at_endpoint": false,
    "predicted_query_result_is_empty": true,
    "ground_truth_query_result_is_empty": false,
    "error_occured_at_endpoint_message": "syntactically not correct"
  },
  {
    "resource": "https://sparql.uniprot.org/.well-known/sparql-examples/38",
    "natural_language_question": "For the human entry P05067 (Amyloid-beta precursor protein) find the gene start ends in WikiData",
    "ground_truth_query": "PREFIX p: <http://www.wikidata.org/prop/>\nPREFIX pq: <http://www.wikidata.org/prop/qualifier/>\nPREFIX ps: <http://www.wikidata.org/prop/statement/>\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX uniprotkb: <http://purl.uniprot.org/uniprot/>\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\n\n\nSELECT \n\t?protein \n\t?begin\n\t?end\n\t?chromosome\n\t?assembly\nWHERE {\n    {\n        BIND(uniprotkb:P05067 AS ?proteinIRI)\n        BIND (SUBSTR(STR(?proteinIRI), STRLEN(STR(uniprotkb:))+1) AS ?protein)\n    }\n    SERVICE <https://query.wikidata.org/sparql> {\n        ?wp wdt:P352 ?protein ;\n            wdt:P702 ?wg . \n        ?wg p:P644   ?wgss .\n        ?wgss ps:P644        ?begin ;\n          pq:P1057/wdt:P1813 ?chromosome ;\n          pq:P659/rdfs:label ?assembly .\n        ?wg p:P645 ?wgse .\n        ?wgse ps:P645        ?end ;\n          pq:P1057/wdt:P1813 ?chromosome ;\n          pq:P659/rdfs:label ?assembly .\n        FILTER(lang(?assembly) = \"en\")\n  } \n}",
    "target_endpoint": "https://sparql.uniprot.org/sparql/",
    "federates_with": [
      "https://query.wikidata.org/sparql"
    ],
    "endpoint_set": "Uniprot",
    "file_path": "UniProt/38_find_gene_region_in_wikidata_for_known_entry.ttl",
    "predicted_query": "# https://sparql.uniprot.org/sparql\nPREFIX up: <http://purl.uniprot.org/core/>\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX wd: <http://www.wikidata.org/entity/>\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\n\nSELECT ?geneName ?wikidataGene ?geneStart ?geneEnd\nWHERE {\n  # Find the gene associated with the UniProt entry P05067\n  {\n    SELECT ?gene WHERE {\n      ?protein a up:Protein .\n      ?protein up:accession \"P05067\" .\n      ?protein up:encodedBy ?gene .\n    }\n  }\n\n  ?gene rdfs:label ?geneName .\n\n  #Federate with WikiData to get gene start and end positions\n  SERVICE <https://query.wikidata.org/sparql> {\n    OPTIONAL {\n      ?wikidataGene wdt:P351 ?geneName .  # P351 is the UniProt ID property in WikiData\n      OPTIONAL { ?wikidataGene wdt:P637 ?geneStart . }   # P637 is the \"start codon\" property\n      OPTIONAL { ?wikidataGene wdt:P638 ?geneEnd . }     # P638 is the \"stop codon\" property\n    }\n  }\n}",
    "predicted_endpoint": "https://sparql.uniprot.org/sparql",
    "predicted_endpoint_equal_to_target_endpoint": true,
    "predicted_endpoint_in_federates_with": false,
    "predicted_endpoint_or_federated_endpoint": true,
    "run_id_langsmith": "6be6b1cb-2d25-4490-877e-8ea9108f3522",
    "evaluation_timestamp": "2025-05-11T10:09:44.210640",
    "question_understanding_prompt_tokens": 264,
    "question_understanding_completion_tokens": 53,
    "question_understanding_total_tokens": 317,
    "sparql_query_construction_prompt_tokens": 2813,
    "sparql_query_construction_completion_tokens": 533,
    "sparql_query_construction_total_tokens": 3346,
    "is_valid_sparql": true,
    "sparql_syntax_error": "syntactically correct",
    "result_eval_f1_score": 0.0,
    "result_eval_precision": 0.0,
    "result_eval_recall": 0.0,
    "error_occured_at_endpoint": false,
    "predicted_query_result_is_empty": true,
    "ground_truth_query_result_is_empty": false,
    "error_occured_at_endpoint_message": "no error, but empty result"
  },
  {
    "resource": "https://sparql.uniprot.org/.well-known/sparql-examples/117_biosodafrontend_glioblastoma_orthologs_rat",
    "natural_language_question": "Which are the proteins associated with glioblastoma and the orthologs expressed in the rat brain?",
    "ground_truth_query": "PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX obo: <http://purl.obolibrary.org/obo/>\nPREFIX orth: <http://purl.org/net/orth#>\nPREFIX sio: <http://semanticscience.org/resource/>\nPREFIX taxon: <http://purl.uniprot.org/taxonomy/>\nPREFIX up: <http://purl.uniprot.org/core/>\nPREFIX lscr: <http://purl.org/lscr#>\nPREFIX genex: <http://purl.org/genex#>\nSELECT DISTINCT ?protein ?orthologous_protein ?gene ?annotation_text WHERE {\n  {\n  \tSELECT ?protein ?annotation_text WHERE {\n      ?protein a up:Protein ;\n          up:organism taxon:9606 ;\n          up:annotation ?annotation .\n      ?annotation rdfs:comment ?annotation_text .\n      ?annotation a up:Disease_Annotation .\n      FILTER CONTAINS (?annotation_text, \"glioblastoma\")\n    }\n  }\n  SERVICE <https://sparql.omabrowser.org/sparql/> {\n    SELECT ?orthologous_protein ?protein ?gene WHERE {\n    ?protein_OMA a orth:Protein .\n    ?orthologous_protein a orth:Protein .\n    ?cluster a orth:OrthologsCluster .\n    ?cluster orth:hasHomologousMember ?node1 .\n    ?cluster\n    orth:hasHomologousMember ?node2 .\n    ?node2 orth:hasHomologousMember* ?protein_OMA .\n    ?node1 orth:hasHomologousMember* ?orthologous_protein .\n    ?orthologous_protein orth:organism/obo:RO_0002162 taxon:10116 . # rattus norvegicus\n    ?orthologous_protein sio:SIO_010079 ?gene .\n    ?protein_OMA lscr:xrefUniprot ?protein .\n    FILTER(?node1 != ?node2)\n\t\t}\n\t}\n  SERVICE <https://www.bgee.org/sparql/> {\n    ?gene genex:isExpressedIn ?a .\n    ?a rdfs:label \"brain\" .\n    ?gene orth:organism ?s . \n    ?s obo:RO_0002162 taxon:10116.\n\t}\n}",
    "target_endpoint": "https://sparql.uniprot.org/sparql",
    "federates_with": [
      "https://sparql.omabrowser.org/sparql/",
      "https://www.bgee.org/sparql/"
    ],
    "endpoint_set": "Uniprot",
    "file_path": "UniProt/117_biosodafrontend_glioblastoma_orthologs_rat.ttl",
    "predicted_query": "# https://sparql.uniprot.org/sparql\nPREFIX up: <http://purl.uniprot.org/core/>\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX taxon: <http://purl.uniprot.org/taxonomy/>\n\nSELECT DISTINCT ?protein ?proteinName\nWHERE {\n  # Find proteins associated with glioblastoma\n  {\n    SELECT DISTINCT ?protein\n    WHERE {\n      ?disease a up:Disease .\n      ?disease rdfs:label \"glioblastoma\" . #Match with the glioblastoma label\n      ?protein up:annotation ?disease .\n    }\n  }\n\n  # Find orthologs expressed in rat brain\n  {\n    SELECT DISTINCT ?protein\n    WHERE {\n      ?organism a up:Taxon .\n      ?organism rdfs:label \"rat brain\" . #Match with the rat brain label\n      ?protein up:organism ?organism .\n    }\n  }\n  \n  ?protein a up:Protein .\n  ?protein rdfs:label ?proteinName .\n}",
    "predicted_endpoint": "https://sparql.uniprot.org/sparql",
    "predicted_endpoint_equal_to_target_endpoint": true,
    "predicted_endpoint_in_federates_with": false,
    "predicted_endpoint_or_federated_endpoint": true,
    "run_id_langsmith": "e0703f2d-a204-4072-aedb-21730882617c",
    "evaluation_timestamp": "2025-05-11T10:09:53.833821",
    "question_understanding_prompt_tokens": 255,
    "question_understanding_completion_tokens": 37,
    "question_understanding_total_tokens": 292,
    "sparql_query_construction_prompt_tokens": 2262,
    "sparql_query_construction_completion_tokens": 0,
    "sparql_query_construction_total_tokens": 2262,
    "is_valid_sparql": true,
    "sparql_syntax_error": "syntactically correct",
    "result_eval_f1_score": 0.0,
    "result_eval_precision": 0.0,
    "result_eval_recall": 0.0,
    "error_occured_at_endpoint": false,
    "predicted_query_result_is_empty": true,
    "ground_truth_query_result_is_empty": false,
    "error_occured_at_endpoint_message": "no error, but empty result"
  },
  {
    "resource": "https://sparql.uniprot.org/.well-known/sparql-examples/116_biosodafrontend_rabit_mouse_orthologs",
    "natural_language_question": "Rabbit's proteins encoded by genes that are orthologous to Mouse's HBB-Y gene and their cross reference links to Uniprot",
    "ground_truth_query": "PREFIX lscr: <http://purl.org/lscr#>\nPREFIX orth: <http://purl.org/net/orth#>\nPREFIX up: <http://purl.uniprot.org/core/>\nPREFIX obo: <http://purl.obolibrary.org/obo/>\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nSELECT DISTINCT ?PROTEIN_1 ?PROTEIN_2 ?UNIPROT_XREF_1 ?UNIPROT_XREF_2 WHERE {\n\t?taxon_1 up:commonName 'Mouse' .\n\t?taxon_2 up:commonName 'Rabbit' .\n\tSERVICE <https://sparql.omabrowser.org/sparql/> {\n\t\t?cluster a orth:OrthologsCluster .\n\t\t?cluster orth:hasHomologousMember ?node1 .\n\t\t?cluster orth:hasHomologousMember ?node2 .\n\t\t?node2 orth:hasHomologousMember* ?PROTEIN_2 .\n\t\t?node1 orth:hasHomologousMember* ?PROTEIN_1 .\n\t\t?PROTEIN_1 a orth:Protein .\n\t\t?PROTEIN_1 orth:organism/obo:RO_0002162 ?taxon_1 ;\n\t\t\trdfs:label 'HBB-Y' ;\n\t\t\tlscr:xrefUniprot ?UNIPROT_XREF_1 .\n\t\t?PROTEIN_2 a orth:Protein .\n\t\t?PROTEIN_2 orth:organism/obo:RO_0002162 ?taxon_2 .\n\t\t?PROTEIN_2 lscr:xrefUniprot ?UNIPROT_XREF_2 .\n\t\tFILTER ( ?node1 != ?node2 )\n\t}\n}",
    "target_endpoint": "https://sparql.uniprot.org/sparql",
    "federates_with": [
      "https://sparql.omabrowser.org/sparql/"
    ],
    "endpoint_set": "Uniprot",
    "file_path": "UniProt/116_biosodafrontend_rabit_mouse_orthologs.ttl",
    "predicted_query": "# https://sparql.uniprot.org/sparql\nPREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX up: <http://purl.uniprot.org/core/>\nPREFIX taxon: <http://purl.uniprot.org/taxonomy/>\n\nSELECT DISTINCT ?rabbitProtein ?uniprotCrossReference\nWHERE {\n  # Find mouse proteins encoded by the HBB-Y gene\n  SERVICE <https://sparql.uniprot.org/sparql> {\n    VALUES ?geneName { \"HBB-Y\" } # The gene name\n    ?mouseGene a up:Gene .\n    ?mouseGene rdfs:label ?geneName .\n    ?mouseProtein up:encodedBy ?mouseGene .\n    ?mouseProtein up:organism taxon:10090 .  # Mouse NCBI Taxonomy ID\n  }\n\n  # Find orthologous rabbit proteins\n  SERVICE <https://sparql.uniprot.org/sparql> {\n    ?rabbitProtein up:sequence ?sequence .\n    ?rabbitProtein up:organism taxon:9986 . # Rabbit NCBI Taxonomy ID\n    ?rabbitProtein up:orthologousTo ?mouseProtein .\n    OPTIONAL { ?rabbitProtein up:database ?uniprotCrossReference . } # Get cross-references\n  }\n}",
    "predicted_endpoint": "https://sparql.uniprot.org/sparql",
    "predicted_endpoint_equal_to_target_endpoint": true,
    "predicted_endpoint_in_federates_with": false,
    "predicted_endpoint_or_federated_endpoint": true,
    "run_id_langsmith": "4ef67c65-4343-481a-b804-bfd5c6b80f38",
    "evaluation_timestamp": "2025-05-11T10:10:04.372229",
    "question_understanding_prompt_tokens": 269,
    "question_understanding_completion_tokens": 49,
    "question_understanding_total_tokens": 318,
    "sparql_query_construction_prompt_tokens": 2978,
    "sparql_query_construction_completion_tokens": 0,
    "sparql_query_construction_total_tokens": 2978,
    "is_valid_sparql": true,
    "sparql_syntax_error": "syntactically correct",
    "result_eval_f1_score": 0.0,
    "result_eval_precision": 0.0,
    "result_eval_recall": 0.0,
    "error_occured_at_endpoint": false,
    "predicted_query_result_is_empty": true,
    "ground_truth_query_result_is_empty": false,
    "error_occured_at_endpoint_message": "no error, but empty result"
  },
  {
    "resource": "https://sparql.uniprot.org/.well-known/sparql-examples/29",
    "natural_language_question": "Use <a href=\"http://allie.dbcls.jp/\">ALLIE</a> a service for Abbreviation / Long Form in Japanese and English to search in UniProt using Japanese.",
    "ground_truth_query": "PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX up: <http://purl.uniprot.org/core/>\n\nSELECT ?protein ?englishLabelStr\nWHERE {\n    SERVICE <https://data.allie.dbcls.jp/sparql>{\n        ?x rdfs:label \"アミロイド前駆体タンパク質\"@ja ;\n            rdfs:label ?englishLabel .\n        FILTER(lang(?englishLabel) = \"en\")\n    }\n    BIND (STR(?englishLabel) AS ?englishLabelStr)\n    ?protein a up:Protein .\n    {\n        ?protein (up:recommendedName|up:alternativeName) ?structuredName .\n    }\n    UNION\n    {\n        VALUES(?partType){(up:domain) (up:component)}\n            ?protein ?partType ?part .\n        ?part (up:recommendedName|up:alternativeName) ?structuredName .\n    }\n    ?structuredName ?anyKindOfName  ?englishLabelStr .\n    ?anyKindOfName rdfs:subPropertyOf up:structuredNameType .\n}",
    "target_endpoint": "https://sparql.uniprot.org/sparql/",
    "federates_with": [
      "https://data.allie.dbcls.jp/sparql"
    ],
    "endpoint_set": "Uniprot",
    "file_path": "UniProt/29_search_uniprot_in_japanese_with_allie.ttl",
    "predicted_query": "# https://sparql.uniprot.org/sparql\nPREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX up: <http://purl.uniprot.org/core/>\n\n# Query UniProt for entries related to the term \"ALLIE\"\nSELECT ?protein ?proteinName ?organismName\nWHERE {\n  ?protein a up:Protein .\n  ?protein rdfs:label ?proteinName . # Get the protein name\n\n  # Filter proteins whose name contains \"ALLIE\".  This is a simplification\n  # because we don't have the Japanese translation from the ALLIE service.\n  FILTER (CONTAINS(LCASE(?proteinName), \"allie\"))\n\n  # Get the organism name\n  ?protein up:organism ?organism .\n  ?organism rdfs:label ?organismName .\n}",
    "predicted_endpoint": "https://sparql.uniprot.org/sparql",
    "predicted_endpoint_equal_to_target_endpoint": true,
    "predicted_endpoint_in_federates_with": false,
    "predicted_endpoint_or_federated_endpoint": true,
    "run_id_langsmith": "34ccb842-3281-45a6-a69c-ea39b4d7fccf",
    "evaluation_timestamp": "2025-05-11T10:10:24.741938",
    "question_understanding_prompt_tokens": 280,
    "question_understanding_completion_tokens": 22,
    "question_understanding_total_tokens": 302,
    "sparql_query_construction_prompt_tokens": 1898,
    "sparql_query_construction_completion_tokens": 541,
    "sparql_query_construction_total_tokens": 2439,
    "is_valid_sparql": true,
    "sparql_syntax_error": "syntactically correct",
    "result_eval_f1_score": 0.0,
    "result_eval_precision": 0.0,
    "result_eval_recall": 0.0,
    "error_occured_at_endpoint": false,
    "predicted_query_result_is_empty": true,
    "ground_truth_query_result_is_empty": false,
    "error_occured_at_endpoint_message": "no error, but empty result"
  },
  {
    "resource": "https://sparql.rhea-db.org/.well-known/sparql-examples/94_Select_all_approved_reactions_with_CHEBI_or_one_of_its_descendant_optional_UniProtKB_reviewed_EC",
    "natural_language_question": "Select all approved reactions with CHEBI:17815 (a 1,2-diacyl-sn-glycerol) or one of its descendant. Display links to UniProtKB/Swiss-Prot entries via EC numbers if the link rhea-ec exists.",
    "ground_truth_query": "PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX rh:<http://rdf.rhea-db.org/>\nPREFIX CHEBI:<http://purl.obolibrary.org/obo/CHEBI_>\nPREFIX up:<http://purl.uniprot.org/core/>\n\nSELECT\n  distinct\n    ?reaction\n    ?enzyme\n    (count(distinct ?protein) as ?proteinCount)\nWHERE {\n  ?reaction rdfs:subClassOf rh:Reaction .\n  ?reaction rh:status rh:Approved .\n  ?reaction rh:side ?reactionSide .\n\n  OPTIONAL {?reaction rh:ec ?enzyme .\n    SERVICE <https://sparql.uniprot.org/sparql> {\n      ?protein up:reviewed true .\n      ?protein up:enzyme ?enzyme.\n    }\n  } .\n  ?reactionSide rh:contains ?participant .\n  ?participant rh:compound ?compound .\n  ?compound rh:chebi ?chebi .\n  ?chebi rdfs:subClassOf* CHEBI:17815 .\n}\nGROUP BY ?reaction ?enzyme\nORDER BY ?reaction\nLIMIT 985915",
    "target_endpoint": "https://sparql.rhea-db.org/sparql",
    "federates_with": [
      "https://sparql.uniprot.org/sparql"
    ],
    "endpoint_set": "Rhea",
    "file_path": "Rhea/94_Select_all_approved_reactions_with_CHEBI_or_one_of_its_descendant_optional_UniProtKB_reviewed_EC.ttl",
    "predicted_query": "# https://sparql.rhea-db.org/sparql\nPREFIX rhea: <http://rdf.rhea-db.org/>\nPREFIX chebi: <http://purl.obolibrary.org/obo/CHEBI_>\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>\nPREFIX uniprot: <http://purl.uniprot.org/core/>\n\nSELECT DISTINCT ?reaction ?reactionName ?uniprotEntry\nWHERE {\n  # Find CHEBI:17815 and its descendants\n  {\n    BIND (chebi:17815 AS ?chebiEntity)\n  }\n  UNION\n  {\n    ?chebiEntity rdfs:subClassOf chebi:17815 .\n  }\n\n  # Find reactions that have ?chebiEntity as a participant\n  ?reaction rhea:hasParticipant ?chebiEntity .\n  ?reaction rdfs:label ?reactionName .\n  ?reaction rhea:status rhea:Approved . # Filter for approved reactions\n\n  # Optional: Link to UniProtKB/Swiss-Prot entries via EC numbers\n  OPTIONAL {\n    ?reaction rhea:ec ?ecNumber .\n    SERVICE <https://sparql.uniprot.org/sparql> {\n      ?uniprotEntry uniprot:ecNumber ?ecNumber .\n    }\n  }\n}",
    "predicted_endpoint": "https://sparql.rhea-db.org/sparql",
    "predicted_endpoint_equal_to_target_endpoint": true,
    "predicted_endpoint_in_federates_with": false,
    "predicted_endpoint_or_federated_endpoint": true,
    "run_id_langsmith": "cea8ae87-c1d3-4e41-9555-6ae968488caa",
    "evaluation_timestamp": "2025-05-11T10:14:49.412554",
    "question_understanding_prompt_tokens": 297,
    "question_understanding_completion_tokens": 73,
    "question_understanding_total_tokens": 370,
    "sparql_query_construction_prompt_tokens": 2097,
    "sparql_query_construction_completion_tokens": 620,
    "sparql_query_construction_total_tokens": 2717,
    "is_valid_sparql": true,
    "sparql_syntax_error": "syntactically correct",
    "result_eval_f1_score": 0.0,
    "result_eval_precision": 0.0,
    "result_eval_recall": 0.0,
    "error_occured_at_endpoint": false,
    "predicted_query_result_is_empty": true,
    "ground_truth_query_result_is_empty": false,
    "error_occured_at_endpoint_message": "no error, but empty result"
  },
  {
    "resource": "https://sparql.rhea-db.org/.well-known/sparql-examples/11",
    "natural_language_question": "Distribution of reactions according to the first class of the enzyme classification (federated query)",
    "ground_truth_query": "PREFIX ec: <http://purl.uniprot.org/enzyme/>\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX rh: <http://rdf.rhea-db.org/>\nPREFIX skos: <http://www.w3.org/2004/02/skos/core#>\n\n# Query 11\n# Retrieve the count of reactions mapped to each level (main class) of the enzyme classification\n#\n# This query mimics the Filter section of the Rhea website (Browse all reactions)\n# https://www.rhea-db.org/rhea?query=\nSELECT ?ecClass (STR(?ecName) AS ?ecClassName) (COUNT(?rhea) AS ?rheaCount)\nWHERE {\n  SERVICE <https://sparql.uniprot.org/sparql> {\n    VALUES (?ecClass) { (ec:1.-.-.-)(ec:2.-.-.-)(ec:3.-.-.-)(ec:4.-.-.-)(ec:5.-.-.-) (ec:6.-.-.-) (ec:7.-.-.-)}\n    ?ecNumber rdfs:subClassOf ?ecClass .\n    ?ecClass skos:prefLabel ?ecName .\n  }\n  ?rhea rdfs:subClassOf rh:Reaction .\n  ?rhea rh:ec ?ecNumber .\n} GROUP BY ?ecClass ?ecName",
    "target_endpoint": "https://sparql.rhea-db.org/sparql",
    "federates_with": [
      "https://sparql.uniprot.org/sparql"
    ],
    "endpoint_set": "Rhea",
    "file_path": "Rhea/11.ttl",
    "predicted_query": "# https://sparql.rhea-db.org/sparql\nPREFIX rhea: <http://rdf.rhea-db.org/>\nPREFIX uniprot: <http://purl.uniprot.org/core/>\nPREFIX skos: <http://www.w3.org/2004/02/skos/core#>\n\nSELECT ?enzymeClass (COUNT(DISTINCT ?reaction) AS ?reactionCount)\nWHERE {\n  # Get Rhea reactions and the corresponding UniProt enzyme\n  ?reaction a rhea:Reaction .\n  ?reaction rhea:enzyme ?enzyme .\n\n  # Get the enzyme class from UniProt using the enzyme identifier\n  SERVICE <https://sparql.uniprot.org/sparql> {\n    ?enzyme uniprot:ec ?enzymeClassURI .\n    ?enzymeClassURI skos:prefLabel ?enzymeClass .\n    FILTER (REGEX(STR(?enzymeClassURI), \"^http://purl.uniprot.org/enzyme/\")) # Filter to ensure it's an enzyme class\n  }\n}\nGROUP BY ?enzymeClass\nORDER BY DESC(?reactionCount)",
    "predicted_endpoint": "https://sparql.rhea-db.org/sparql",
    "predicted_endpoint_equal_to_target_endpoint": true,
    "predicted_endpoint_in_federates_with": false,
    "predicted_endpoint_or_federated_endpoint": true,
    "run_id_langsmith": "d474132d-f2f3-45f5-9f74-2ed6951a0d4c",
    "evaluation_timestamp": "2025-05-11T10:14:57.231275",
    "question_understanding_prompt_tokens": 252,
    "question_understanding_completion_tokens": 27,
    "question_understanding_total_tokens": 279,
    "sparql_query_construction_prompt_tokens": 1721,
    "sparql_query_construction_completion_tokens": 0,
    "sparql_query_construction_total_tokens": 1721,
    "is_valid_sparql": true,
    "sparql_syntax_error": "syntactically correct",
    "result_eval_f1_score": 0.0,
    "result_eval_precision": 0.0,
    "result_eval_recall": 0.0,
    "error_occured_at_endpoint": false,
    "predicted_query_result_is_empty": true,
    "ground_truth_query_result_is_empty": false,
    "error_occured_at_endpoint_message": "no error, but empty result"
  },
  {
    "resource": "https://sparql.rhea-db.org/.well-known/sparql-examples/109_Distribution_of_reactions_according_to_the_first_level_of_enzyme_classification",
    "natural_language_question": "Distribution of reactions according to the first level of enzyme classification",
    "ground_truth_query": "\nPREFIX rh:<http://rdf.rhea-db.org/>\nPREFIX ec:<http://purl.uniprot.org/enzyme/>\nPREFIX rdfs:<http://www.w3.org/2000/01/rdf-schema#>\nPREFIX skos:<http://www.w3.org/2004/02/skos/core#>\n\nSELECT\n  ?ecClass\n  (str(?ecName) as ?ecClassName)\n  (count(?reaction) as ?reactionCount)\nWHERE\n{\n  SERVICE <http://sparql.uniprot.org/sparql> {\n    VALUES (?ecClass) { (ec:1.-.-.-)(ec:2.-.-.-)(ec:3.-.-.-)(ec:4.-.-.-)(ec:5.-.-.-) (ec:6.-.-.-) (ec:7.-.-.-) }\n    ?ecNumber rdfs:subClassOf ?ecClass .\n    ?ecClass skos:prefLabel ?ecName .\n  }\n  ?reaction rdfs:subClassOf rh:Reaction .\n  ?reaction rh:ec ?ecNumber .\n}\nGROUP BY ?ecClass ?ecName\n",
    "target_endpoint": "https://sparql.rhea-db.org/sparql",
    "federates_with": [
      "http://sparql.uniprot.org/sparql"
    ],
    "endpoint_set": "Rhea",
    "file_path": "Rhea/109_Distribution_of_reactions_according_to_the_first_level_of_enzyme_classification.ttl",
    "predicted_query": "# https://sparql.rhea-db.org/sparql\nPREFIX rhea: <http://rdf.rhea-db.org/>\nPREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\n\nSELECT ?enzymeClass (COUNT(?reaction) AS ?reactionCount)\nWHERE {\n  # Get reactions from Rhea\n  SERVICE <https://sparql.rhea-db.org/sparql> {\n    ?reaction rdf:type rhea:Reaction .\n  }\n\n  # Try to link reactions to UniProt to get enzyme information.  This is an assumption, as Rhea may not directly link to EC numbers.\n  # We're assuming a predicate like 'rhea:enzyme' or similar exists that links to a UniProt ID.  If not, this part will need adjustment.\n  OPTIONAL {\n    ?reaction rdfs:seeAlso ?uniprotID .  # Assuming rdfs:seeAlso links to UniProt.  Adjust if needed.\n    FILTER (STRSTARTS(STR(?uniprotID), \"http://purl.uniprot.org/uniprot/\")) # Filter to ensure it's a UniProt ID\n\n    # Query UniProt for EC number.\n    SERVICE <https://sparql.uniprot.org/sparql> {\n      ?uniprotResource <http://purl.uniprot.org/core/api/keyword> ?enzymeClassResource . # Assuming this property links to EC.  Adjust if needed.\n      ?enzymeClassResource rdf:type <http://purl.uniprot.org/core/taxonomy/Enzyme> . # Assuming this is the type for enzyme classes\n      ?enzymeClassResource rdfs:label ?enzymeClass . # Get the label of the enzyme class\n      FILTER(REGEX(?uniprotResource, SUBSTR(STR(?uniprotID), 31))) # Filter to match the UniProt ID from Rhea\n    }\n  }\n\n  # If no UniProt link is found, we'll have unbound ?enzymeClass.  We can group these as \"Unclassified\".\n  BIND(IF(BOUND(?enzymeClass), ?enzymeClass, \"Unclassified\") AS ?finalEnzymeClass)\n}\nGROUP BY ?enzymeClass\nORDER BY DESC(?reactionCount)",
    "predicted_endpoint": "https://sparql.rhea-db.org/sparql",
    "predicted_endpoint_equal_to_target_endpoint": true,
    "predicted_endpoint_in_federates_with": false,
    "predicted_endpoint_or_federated_endpoint": true,
    "run_id_langsmith": "e24e1151-6359-44bd-a050-574cda0c38bc",
    "evaluation_timestamp": "2025-05-11T10:15:06.894576",
    "question_understanding_prompt_tokens": 247,
    "question_understanding_completion_tokens": 24,
    "question_understanding_total_tokens": 271,
    "sparql_query_construction_prompt_tokens": 1540,
    "sparql_query_construction_completion_tokens": 625,
    "sparql_query_construction_total_tokens": 2165,
    "is_valid_sparql": true,
    "sparql_syntax_error": "syntactically correct",
    "result_eval_f1_score": 0.0,
    "result_eval_precision": 0.0,
    "result_eval_recall": 0.0,
    "error_occured_at_endpoint": false,
    "predicted_query_result_is_empty": true,
    "ground_truth_query_result_is_empty": false,
    "error_occured_at_endpoint_message": "no error, but empty result"
  },
  {
    "resource": "https://sparql.rhea-db.org/.well-known/sparql-examples/12",
    "natural_language_question": "Select all Rhea reactions linked to protein sequences (enzymes and transporters) in UniProtKB",
    "ground_truth_query": "PREFIX rh: <http://rdf.rhea-db.org/>\nPREFIX up: <http://purl.uniprot.org/core/>\n\n# Query 12\n# Select all Rhea reactions used to annotate enzyme sequences in UniProtKB\n# return the number of UniProtKB entries\n# Federated query using a service to UniProt SPARQL endpoint\n#\n# This query corresponds to the Rhea website query:\n# https://www.rhea-db.org/rhea?query=uniprot:*\n#\nSELECT ?uniprotCount ?rhea ?accession ?equation \nWHERE {\n  SERVICE <https://sparql.uniprot.org/sparql> { \n  \tSELECT ?rhea (count(?uniprot) as ?uniprotCount) {\n      ?uniprot up:annotation/up:catalyticActivity/up:catalyzedReaction ?rhea . \n  \t}\n  \tGROUP BY ?rhea\n  }\n  ?rhea rh:accession ?accession .\n  ?rhea rh:equation ?equation .\n}",
    "target_endpoint": "https://sparql.rhea-db.org/sparql",
    "federates_with": [
      "https://sparql.uniprot.org/sparql"
    ],
    "endpoint_set": "Rhea",
    "file_path": "Rhea/12.ttl",
    "predicted_query": "# https://sparql.rhea-db.org/sparql\nPREFIX rhea: <http://rdf.rhea-db.org/>\nPREFIX up: <http://purl.uniprot.org/core/>\n\nSELECT DISTINCT ?reaction\nWHERE {\n  SERVICE <https://sparql.rhea-db.org/sparql> {\n    ?reaction a rhea:Reaction ;\n              rhea:enzyme ?enzyme .\n  }\n  SERVICE <https://sparql.uniprot.org/sparql> {\n    ?protein up:database ?enzyme .\n    ?protein a up:Protein .\n  }\n}",
    "predicted_endpoint": "https://sparql.rhea-db.org/sparql",
    "predicted_endpoint_equal_to_target_endpoint": true,
    "predicted_endpoint_in_federates_with": false,
    "predicted_endpoint_or_federated_endpoint": true,
    "run_id_langsmith": "81562837-767b-4dbe-9465-bf95ce13927f",
    "evaluation_timestamp": "2025-05-11T10:15:15.789141",
    "question_understanding_prompt_tokens": 255,
    "question_understanding_completion_tokens": 30,
    "question_understanding_total_tokens": 285,
    "sparql_query_construction_prompt_tokens": 2009,
    "sparql_query_construction_completion_tokens": 474,
    "sparql_query_construction_total_tokens": 2483,
    "is_valid_sparql": true,
    "sparql_syntax_error": "syntactically correct",
    "result_eval_f1_score": 0.0,
    "result_eval_precision": 0.0,
    "result_eval_recall": 0.0,
    "error_occured_at_endpoint": false,
    "predicted_query_result_is_empty": true,
    "ground_truth_query_result_is_empty": false,
    "error_occured_at_endpoint_message": "no error, but empty result"
  },
  {
    "resource": "https://sparql.rhea-db.org/.well-known/sparql-examples/112_Total_number_of_reaction_ec_protein_links",
    "natural_language_question": "Total number of <reaction> <ec> <protein> links",
    "ground_truth_query": "PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX rh:<http://rdf.rhea-db.org/>\nPREFIX ec:<http://purl.uniprot.org/enzyme/>\nPREFIX up:<http://purl.uniprot.org/core/>\n\nSELECT\n  (count(?reaction) as ?reactionEcProteinLinkCount)\nWHERE {\n  ?reaction rdfs:subClassOf rh:Reaction .\n  ?reaction rh:ec ?enzyme\n  SERVICE <http://sparql.uniprot.org/sparql> {\n    ?protein up:reviewed true .\n    ?protein up:enzyme ?enzyme.\n  }\n}",
    "target_endpoint": "https://sparql.rhea-db.org/sparql",
    "federates_with": [
      "http://sparql.uniprot.org/sparql"
    ],
    "endpoint_set": "Rhea",
    "file_path": "Rhea/112_Total_number_of_reaction_ec_protein_links.ttl",
    "predicted_query": "# https://sparql.rhea-db.org/sparql\nPREFIX rhea: <http://rdf.rhea-db.org/>\nPREFIX uniprot: <http://purl.uniprot.org/core/>\nPREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\n\nSELECT (COUNT(DISTINCT ?reaction) AS ?totalLinks)\nWHERE {\n  # Query Rhea DB for reactions\n  SERVICE <https://sparql.rhea-db.org/sparql> {\n    ?reaction rdf:type rhea:Reaction .\n  }\n  \n  # Query UniProt for proteins and their EC numbers\n  SERVICE <https://sparql.uniprot.org/sparql> {\n    ?protein a uniprot:Protein ;\n             uniprot:annotation ?annotation .\n    ?annotation a uniprot:EC_line ;\n                rdfs:label ?ecNumber .\n  }\n  \n  # Attempt to link reactions and proteins via EC number.  This assumes a relationship\n  # between Rhea reactions and EC numbers, and UniProt proteins and EC numbers.\n  # The specific predicate linking reactions to EC numbers is unknown, so this is a placeholder.\n  # You might need to explore the Rhea DB schema to find the correct predicate.\n  \n  #BIND(STRBEFORE(?ecNumber, \".\") AS ?ecPrefix) # Extract the first part of the EC number\n  #?reaction rhea:ec ?ecPrefix . # Assuming rhea:ec links to the EC number prefix\n  \n  #This is a placeholder, replace with the correct predicate if available\n  #FILTER EXISTS { ?reaction ?somePredicate ?ecNumber . }\n  \n  #Another placeholder, replace with the correct predicate if available\n  #FILTER EXISTS { ?reaction rdfs:seeAlso ?protein . }\n  \n  #FILTER (STRSTARTS(?ecNumber, \"1.\")) # Example filter for EC number starting with 1\n}",
    "predicted_endpoint": "https://sparql.rhea-db.org/sparql",
    "predicted_endpoint_equal_to_target_endpoint": true,
    "predicted_endpoint_in_federates_with": false,
    "predicted_endpoint_or_federated_endpoint": true,
    "run_id_langsmith": "25698e1a-0c73-486c-8c09-b85245601514",
    "evaluation_timestamp": "2025-05-11T10:15:26.610959",
    "question_understanding_prompt_tokens": 253,
    "question_understanding_completion_tokens": 21,
    "question_understanding_total_tokens": 274,
    "sparql_query_construction_prompt_tokens": 1932,
    "sparql_query_construction_completion_tokens": 0,
    "sparql_query_construction_total_tokens": 1932,
    "is_valid_sparql": true,
    "sparql_syntax_error": "syntactically correct",
    "result_eval_f1_score": 0.0,
    "result_eval_precision": 0.0,
    "result_eval_recall": 0.0,
    "error_occured_at_endpoint": false,
    "predicted_query_result_is_empty": false,
    "ground_truth_query_result_is_empty": false,
    "error_occured_at_endpoint_message": "no error"
  },
  {
    "resource": "https://sparql.rhea-db.org/.well-known/sparql-examples/19_draft_human_metabolome",
    "natural_language_question": "Generate a draft human metabolome",
    "ground_truth_query": "PREFIX chebislash: <http://purl.obolibrary.org/obo/chebi/>\nPREFIX rh: <http://rdf.rhea-db.org/>\nPREFIX taxon: <http://purl.uniprot.org/taxonomy/>\nPREFIX up: <http://purl.uniprot.org/core/>\n\nSELECT\n  ?uniprot ?mnemonic ?rhea ?chebi ?smiles ?inchiKey\nWHERE\n{\n  ?rhea rh:side/rh:contains/rh:compound ?compound .\n  ?compound (rh:chebi|(rh:reactivePart/rh:chebi)|(rh:underlyingChebi/rh:chebi)) ?chebi .\n  ?chebi chebislash:smiles ?smiles ;\n          chebislash:inchikey ?inchiKey .\n  SERVICE <https://sparql.uniprot.org/sparql> {\n     ?uniprot up:annotation/up:catalyticActivity/up:catalyzedReaction ?rhea ;\n                                             up:organism taxon:9606 ;\n                                             up:mnemonic ?mnemonic .\n\n   }\n}",
    "target_endpoint": "https://sparql.rhea-db.org/sparql/",
    "federates_with": [
      "https://sparql.uniprot.org/sparql"
    ],
    "endpoint_set": "Rhea",
    "file_path": "Rhea/19_draft_human_metabolome.ttl",
    "predicted_query": "# https://sparql.uniprot.org/sparql\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX up: <http://purl.uniprot.org/core/>\nPREFIX taxon: <http://purl.uniprot.org/taxonomy/>\nPREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>\n\nSELECT DISTINCT ?metabolite ?metaboliteName\nWHERE {\n  # Find proteins associated with Homo sapiens in UniProt\n  SERVICE <https://sparql.uniprot.org/sparql> {\n    ?protein a up:Protein .\n    ?protein up:organism taxon:9606 .  # Homo sapiens taxonomy ID\n    ?protein rdfs:seeAlso ?rheaReaction .\n  }\n\n  # Use Rhea to find metabolites involved in reactions with these proteins\n  SERVICE <https://sparql.rhea-db.org/sparql> {\n    ?rheaReaction rdfs:sameAs ?rheaId . # Assuming sameAs links to Rhea\n    ?rheaId rdfs:label ?rheaLabel .\n    ?reaction rdfs:comment ?rheaLabel .\n    ?reaction rdfs:seeAlso ?metabolite .\n    ?metabolite rdfs:label ?metaboliteName .\n  }\n  \n  #Optionaly include SwissLipids to find lipid metabolites\n  #SERVICE <https://sparql.swisslipids.org/sparql/> {\n  #  ?lipid rdf:type <http://www.swisslipids.org/rdf/SwissLipids#Lipid> .\n  #  ?lipid rdfs:label ?metaboliteName .\n  #  BIND(STR(?lipid) AS ?metabolite)\n  #}\n}",
    "predicted_endpoint": "https://sparql.uniprot.org/sparql",
    "predicted_endpoint_equal_to_target_endpoint": false,
    "predicted_endpoint_in_federates_with": true,
    "predicted_endpoint_or_federated_endpoint": true,
    "run_id_langsmith": "cf621ae9-f995-41d5-bff7-6ecb9ba1e0fb",
    "evaluation_timestamp": "2025-05-11T10:15:42.144359",
    "question_understanding_prompt_tokens": 247,
    "question_understanding_completion_tokens": 20,
    "question_understanding_total_tokens": 267,
    "sparql_query_construction_prompt_tokens": 1449,
    "sparql_query_construction_completion_tokens": 642,
    "sparql_query_construction_total_tokens": 2091,
    "is_valid_sparql": true,
    "sparql_syntax_error": "syntactically correct",
    "result_eval_f1_score": 0.0,
    "result_eval_precision": 0.0,
    "result_eval_recall": 0.0,
    "error_occured_at_endpoint": false,
    "predicted_query_result_is_empty": true,
    "ground_truth_query_result_is_empty": false,
    "error_occured_at_endpoint_message": "no error, but empty result"
  },
  {
    "resource": "https://sparql.rhea-db.org/.well-known/sparql-examples/20_search_chemical_names_in_japanese",
    "natural_language_question": "Search for Chemical names starting in Japanese, translated to english using allie",
    "ground_truth_query": "PREFIX oboInOwl: <http://www.geneontology.org/formats/oboInOwl#>\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\n\nSELECT\n*\nWHERE {\nSERVICE <https://data.allie.dbcls.jp/sparql>{\n        ?x rdfs:label \"1,2,4-トリクロロベンゼン\"@ja ;\n            rdfs:label ?englishLabel .\n        FILTER(lang(?englishLabel) = \"en\")\n    }\n  BIND(STR(?englishLabel) AS ?englishLabelStr)\n  ?chebi rdfs:label|oboInOwl:hasSynonym ?englishLabelStr .\n}",
    "target_endpoint": "https://sparql.rhea-db.org/sparql/",
    "federates_with": [
      "https://data.allie.dbcls.jp/sparql"
    ],
    "endpoint_set": "Rhea",
    "file_path": "Rhea/20_search_chemical_names_in_japanese.ttl",
    "predicted_query": "# https://sparql.uniprot.org/sparql\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX chebi: <http://purl.obolibrary.org/obo/CHEBI_>\n\nSELECT DISTINCT ?chemicalName\nWHERE {\n  SERVICE <https://sparql.rhea-db.org/sparql> {\n    # Find chemical entities in ChEBI with names starting with \"Japanese\"\n    ?chemical a chebi:24431 . # CHEBI chemical entity\n    ?chemical rdfs:label ?chemicalName .\n    FILTER regex(?chemicalName, \"^Japanese\", \"i\") # Case-insensitive match\n  }\n}",
    "predicted_endpoint": "https://sparql.uniprot.org/sparql",
    "predicted_endpoint_equal_to_target_endpoint": false,
    "predicted_endpoint_in_federates_with": false,
    "predicted_endpoint_or_federated_endpoint": false,
    "run_id_langsmith": "a8cfe5c8-ed24-4fbc-8ad8-ceddc17e52af",
    "evaluation_timestamp": "2025-05-11T10:20:10.513490",
    "question_understanding_prompt_tokens": 254,
    "question_understanding_completion_tokens": 23,
    "question_understanding_total_tokens": 277,
    "sparql_query_construction_prompt_tokens": 1332,
    "sparql_query_construction_completion_tokens": 0,
    "sparql_query_construction_total_tokens": 1332,
    "is_valid_sparql": true,
    "sparql_syntax_error": "syntactically correct",
    "result_eval_f1_score": 0.0,
    "result_eval_precision": 0.0,
    "result_eval_recall": 0.0,
    "error_occured_at_endpoint": false,
    "predicted_query_result_is_empty": true,
    "ground_truth_query_result_is_empty": false,
    "error_occured_at_endpoint_message": "no error, but empty result"
  },
  {
    "resource": "https://sparql.rhea-db.org/.well-known/sparql-examples/117_Retrieve_parent_reactions_and_their_catalyzing_enzymes_for_a_metabolite_that_is_not_directly_involved_in_a_reaction",
    "natural_language_question": "Retrieve parent reactions (and their catalyzing enzymes) for a metabolite that is not directly involved in a reaction (ex: CHEBI:83137).",
    "ground_truth_query": "PREFIX CHEBI: <http://purl.obolibrary.org/obo/CHEBI_>\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX rh:<http://rdf.rhea-db.org/>\nPREFIX ec:<http://purl.uniprot.org/enzyme/>\nPREFIX up:<http://purl.uniprot.org/core/>\nPREFIX taxon:<http://purl.uniprot.org/taxonomy/>\nPREFIX keywords:<http://purl.uniprot.org/keywords/>\n\nSELECT\n  ?chebi\n  ?ecNumber\n  (count(?protein) as ?proteinCount)\n  ?reaction\n  ?equation\nWHERE {\n  ?reaction rdfs:subClassOf rh:Reaction .\n  ?reaction rh:status rh:Approved .\n  ?reaction rh:equation ?equation .\n  ?reaction rh:ec ?ecNumber .\n  ?reaction rh:side ?reactionSide .\n  ?reactionSide rh:contains ?participant .\n  ?participant rh:compound ?compound .\n  ?compound rh:chebi ?chebi .\n  CHEBI:83137 rdfs:subClassOf+ ?chebi.\n\n  SERVICE <https://sparql.uniprot.org/sparql> {\n  ?protein a up:Protein .\n  ?protein up:reviewed true .\n    {?protein up:enzyme ?ecNumber}\n  UNION\n    {?protein up:domain/up:enzyme ?ecNumber}\n  UNION\n    {?protein up:component/up:enzyme ?ecNumber} .\n  }\n} \nGROUP BY ?chebi ?ecNumber ?reaction ?equation",
    "target_endpoint": "https://sparql.rhea-db.org/sparql",
    "federates_with": [
      "https://sparql.uniprot.org/sparql"
    ],
    "endpoint_set": "Rhea",
    "file_path": "Rhea/117_Retrieve_parent_reactions_and_their_catalyzing_enzymes_for_a_metabolite_that_is_not_directly_involved_in_a_reaction.ttl",
    "predicted_query": "# https://sparql.rhea-db.org/sparql\nPREFIX rhea: <http://rdf.rhea-db.org/>\nPREFIX chebi: <http://purl.obolibrary.org/obo/CHEBI_>\nPREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\n\nSELECT DISTINCT ?parentReaction ?enzyme ?enzymeLabel WHERE {\n  # Find reactions involving the metabolite CHEBI:83137\n  {\n    SELECT DISTINCT ?reaction WHERE {\n      VALUES ?metabolite { chebi:83137 }\n      {\n        ?reaction rhea: Rhea_has_reactant ?metabolite .\n      } UNION {\n        ?reaction rhea: Rhea_has_product ?metabolite .\n      }\n    }\n  }\n\n  # Find \"parent\" reactions that use the products or produce the reactants of the initial reactions.\n  # This assumes a parent reaction either consumes the products or produces the reactants.\n  {\n    SELECT DISTINCT ?parentReaction WHERE {\n      {\n        ?parentReaction rhea: Rhea_has_reactant ?reactant .\n        ?reaction rhea: Rhea_has_product ?reactant .\n      } UNION {\n        ?parentReaction rhea: Rhea_has_product ?product .\n        ?reaction rhea: Rhea_has_reactant ?product .\n      }\n    }\n  }\n\n  # Find the enzymes that catalyze the parent reactions\n  ?parentReaction rhea: Rhea_has_enzyme ?enzyme .\n  ?enzyme rdfs:label ?enzymeLabel .\n}",
    "predicted_endpoint": "https://sparql.rhea-db.org/sparql",
    "predicted_endpoint_equal_to_target_endpoint": true,
    "predicted_endpoint_in_federates_with": false,
    "predicted_endpoint_or_federated_endpoint": true,
    "run_id_langsmith": "c454b347-6420-4925-9efb-3192c8395191",
    "evaluation_timestamp": "2025-05-11T10:20:20.549275",
    "question_understanding_prompt_tokens": 273,
    "question_understanding_completion_tokens": 42,
    "question_understanding_total_tokens": 315,
    "sparql_query_construction_prompt_tokens": 2156,
    "sparql_query_construction_completion_tokens": 0,
    "sparql_query_construction_total_tokens": 2156,
    "is_valid_sparql": false,
    "sparql_syntax_error": "Lexical error at line 13, column 42.  Encountered: '32' (32), after prefix \"Rhea_has_reactant\"",
    "result_eval_f1_score": 0.0,
    "result_eval_precision": 0.0,
    "result_eval_recall": 0.0,
    "error_occured_at_endpoint": false,
    "predicted_query_result_is_empty": true,
    "ground_truth_query_result_is_empty": false,
    "error_occured_at_endpoint_message": "syntactically not correct"
  },
  {
    "resource": "https://sparql.rhea-db.org/.well-known/sparql-examples/18",
    "natural_language_question": "Use <a href=\"https://idsm.elixir-czech.cz/sparql\">IDSM Sachem</a> to find ChEBIs with a a <a href=\"https://www.ebi.ac.uk/chebi/searchId.do?chebiId=CHEBI:35516\">Cholestane</a> skeleton (in SMILES). Then match returned ChEBIs to Rhea undirected reactions.",
    "ground_truth_query": "PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX rh: <http://rdf.rhea-db.org/>\nPREFIX sachem: <http://bioinfo.uochb.cas.cz/rdf/v1.0/sachem#>\n\n\nSELECT \n  ?rhea \n  ?chebi\nWHERE {\n  SERVICE <https://idsm.elixir-czech.cz/sparql/endpoint/chebi> {\n    ?chebi sachem:substructureSearch [\n        sachem:query \"[C@]12(CCC3CCCC[C@]3(C)[C@@]1([H])CC[C@]1(C)[C@@]([H])([C@@](C)([H])CCCC(C)C)CC[C@@]21[H])[H]\" ].\n  }\n  ?rhea rh:side/rh:contains/rh:compound/rdfs:subClassOf ?chebi .\n}",
    "target_endpoint": "https://sparql.rhea-db.org/sparql",
    "federates_with": [
      "https://idsm.elixir-czech.cz/sparql/endpoint/chebi"
    ],
    "endpoint_set": "Rhea",
    "file_path": "Rhea/18.ttl",
    "predicted_query": "# https://sparql.rhea-db.org/sparql\nPREFIX rhea: <http://rdf.rhea-db.org/>\nPREFIX chebi: <http://purl.obolibrary.org/obo/CHEBI_>\n\nSELECT DISTINCT ?reaction ?chebiID ?chebiName\nWHERE {\n  # Subquery to get ChEBI IDs from IDSM Sachem that contain the Cholestane skeleton\n  SERVICE <https://idsm.elixir-czech.cz/sparql> {\n    PREFIX ids: <https://idsm.elixir-czech.cz/vocab/>\n    PREFIX skos: <http://www.w3.org/2004/02/skos/core#>\n    \n    SELECT DISTINCT ?chebiID ?chebiName WHERE {\n      ?compound a ids:CompoundEntity ;\n                ids:smiles ?smiles ;\n                skos:exactMatch ?chebiID . # Get the ChEBI ID\n      FILTER CONTAINS(?smiles, \"C[C@H]1\") # Filter for Cholestane skeleton.  This is a simplified SMILES fragment.\n      ?chebiID skos:prefLabel ?chebiName .\n      FILTER (STRSTARTS(STR(?chebiID), \"http://purl.obolibrary.org/obo/CHEBI_\"))\n    }\n  } # End of IDSM Sachem service\n\n  # Use the ChEBI IDs to find Rhea undirected reactions\n  ?reaction rhea:equation ?equation .\n  {\n    ?reaction rhea:left ?participant .\n    ?participant rhea:compound ?chebiID .\n  }\n  UNION\n  {\n    ?reaction rhea:right ?participant .\n    ?participant rhea:compound ?chebiID .\n  }\n}\nLIMIT 100",
    "predicted_endpoint": "https://sparql.rhea-db.org/sparql",
    "predicted_endpoint_equal_to_target_endpoint": true,
    "predicted_endpoint_in_federates_with": false,
    "predicted_endpoint_or_federated_endpoint": true,
    "run_id_langsmith": "3eac54eb-4421-45cc-97ed-eeec9c3b82d5",
    "evaluation_timestamp": "2025-05-11T10:20:31.407323",
    "question_understanding_prompt_tokens": 334,
    "question_understanding_completion_tokens": 52,
    "question_understanding_total_tokens": 386,
    "sparql_query_construction_prompt_tokens": 2567,
    "sparql_query_construction_completion_tokens": 607,
    "sparql_query_construction_total_tokens": 3174,
    "is_valid_sparql": false,
    "sparql_syntax_error": "Encountered \" \"prefix\" \"PREFIX \"\" at line 9, column 5.\nWas expecting one of:\n     ...\n     ...\n     ...\n     ...\n     ...\n     ...\n    \"select\" ...\n    \"values\" ...\n    \"graph\" ...\n    \"optional\" ...\n    \"minus\" ...\n    \"bind\" ...\n    \"service\" ...\n    \"filter\" ...\n    \"true\" ...\n    \"false\" ...\n     ...\n     ...\n     ...\n     ...\n     ...\n     ...\n     ...\n     ...\n     ...\n     ...\n     ...\n     ...\n     ...\n    \"(\" ...\n     ...\n    \"{\" ...\n    \"}\" ...\n    \"[\" ...\n     ...\n    \"<<(\" ...\n    \"<<\" ...",
    "result_eval_f1_score": 0.0,
    "result_eval_precision": 0.0,
    "result_eval_recall": 0.0,
    "error_occured_at_endpoint": false,
    "predicted_query_result_is_empty": true,
    "ground_truth_query_result_is_empty": false,
    "error_occured_at_endpoint_message": "syntactically not correct"
  },
  {
    "resource": "https://sparql.rhea-db.org/.well-known/sparql-examples/115_Retrieve_the_set_of_metabolites_involved_in_reactions_catalyzed_by_human_genes_HUMAN_reference_proteome",
    "natural_language_question": "Retrieve the set of metabolites involved in reactions catalyzed by human genes (HUMAN reference proteome)",
    "ground_truth_query": "\nPREFIX rh:<http://rdf.rhea-db.org/>\nPREFIX taxon:<http://purl.uniprot.org/taxonomy/>\nPREFIX ec:<http://purl.uniprot.org/enzyme/>\nPREFIX rdfs:<http://www.w3.org/2000/01/rdf-schema#>\nPREFIX up:<http://purl.uniprot.org/core/>\nPREFIX keywords:<http://purl.uniprot.org/keywords/>\n\nSELECT\n  ?chebi\n  ?reaction\n  ?ecNumber\n  ?protein\n  ?ensemblTranscript\n  ?ensemblGene\nWHERE {\n  SERVICE <https://sparql.uniprot.org/sparql> {\n    ?protein a up:Protein .\n    ?protein up:reviewed true .\n    ?protein up:organism taxon:9606 .\n    ?protein up:classifiedWith keywords:1185 .\n\n    ?protein rdfs:seeAlso ?ensemblTranscript .\n    ?ensemblTranscript a up:Transcript_Resource .\n    ?ensemblTranscript up:database <http://purl.uniprot.org/database/Ensembl> .\n    ?ensemblTranscript up:transcribedFrom ?ensemblGene .\n\n      {?protein up:enzyme ?ecNumber .}\n    UNION\n      {?protein up:domain/up:enzyme ?ecNumber .}\n    UNION\n      {?protein up:component/up:enzyme ?ecNumber .}\n  }\n\n  ?reaction rdfs:subClassOf rh:Reaction .\n  ?reaction rh:status rh:Approved .\n  ?reaction rh:ec ?ecNumber .\n  ?reaction rh:side ?reactionSide .\n  ?reactionSide rh:contains ?participant .\n  ?participant rh:compound ?compound .\n  ?compound rh:chebi ?chebi . # only considering small molecules participants\n}",
    "target_endpoint": "https://sparql.rhea-db.org/sparql",
    "federates_with": [
      "https://sparql.uniprot.org/sparql"
    ],
    "endpoint_set": "Rhea",
    "file_path": "Rhea/115_Retrieve_the_set_of_metabolites_involved_in_reactions_catalyzed_by_human_genes_HUMAN_reference_proteome.ttl",
    "predicted_query": "# https://sparql.uniprot.org/sparql\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX up: <http://purl.uniprot.org/core/>\nPREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>\nPREFIX rhea: <http://rdf.rhea-db.org/>\nPREFIX chebi: <http://purl.obolibrary.org/obo/CHEBI_>\n\nSELECT DISTINCT ?metaboliteName\nWHERE {\n  # Query UniProt for human proteins (genes) linked to Rhea reactions\n  SERVICE <https://sparql.uniprot.org/sparql> {\n    ?protein a up:Protein .\n    up:organism ?organism .\n    ?organism rdfs:label \"Homo sapiens\" . # Filter for human proteins\n    ?protein rdfs:seeAlso ?rheaReaction . # Link to Rhea reaction\n    FILTER (REGEX(STR(?rheaReaction), \"rhea.db.org\")) # Ensure it's a Rhea URI\n    BIND(IRI(REPLACE(STR(?rheaReaction), \"http://rdf.rhea-db.org/\", \"http://rdf.rhea-db.org/\")) AS ?rheaId)\n  }\n\n  # Query Rhea DB for metabolites involved in the reactions\n  SERVICE <https://sparql.rhea-db.org/sparql> {\n    ?reaction rhea:id ?rheaId .\n    {\n      ?reaction rhea:input ?metabolite .\n    }\n    UNION {\n      ?reaction rhea:output ?metabolite .\n    }\n    ?metabolite rdfs:label ?metaboliteName .\n  }\n}",
    "predicted_endpoint": "https://sparql.uniprot.org/sparql",
    "predicted_endpoint_equal_to_target_endpoint": false,
    "predicted_endpoint_in_federates_with": true,
    "predicted_endpoint_or_federated_endpoint": true,
    "run_id_langsmith": "bd7a4632-d274-4b20-b2aa-acca080fe157",
    "evaluation_timestamp": "2025-05-11T10:20:39.298454",
    "question_understanding_prompt_tokens": 257,
    "question_understanding_completion_tokens": 26,
    "question_understanding_total_tokens": 283,
    "sparql_query_construction_prompt_tokens": 2096,
    "sparql_query_construction_completion_tokens": 0,
    "sparql_query_construction_total_tokens": 2096,
    "is_valid_sparql": false,
    "sparql_syntax_error": "Encountered \" \".\" \". \"\" at line 13, column 27.\nWas expecting one of:\n     ...\n     ...\n     ...\n     ...\n     ...\n     ...\n    \"true\" ...\n    \"false\" ...\n     ...\n     ...\n     ...\n     ...\n     ...\n     ...\n     ...\n     ...\n     ...\n     ...\n     ...\n     ...\n     ...\n    \"(\" ...\n     ...\n    \"[\" ...\n     ...\n    \"<<(\" ...\n    \"<<\" ...",
    "result_eval_f1_score": 0.0,
    "result_eval_precision": 0.0,
    "result_eval_recall": 0.0,
    "error_occured_at_endpoint": false,
    "predicted_query_result_is_empty": true,
    "ground_truth_query_result_is_empty": false,
    "error_occured_at_endpoint_message": "syntactically not correct"
  }
]