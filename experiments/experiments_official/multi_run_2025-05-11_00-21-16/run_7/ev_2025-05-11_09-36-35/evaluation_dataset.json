[
  {
    "resource": "https://sparql.swisslipids.org/.well-known/sparql-examples/16",
    "natural_language_question": "For a given lipid (SWISSLIPID:000399814, Ceramide), return a list of all enzymes in UniProtKB/Swiss-Prot annotated to catalyze reactions involving that lipid.\nThis query does not consider the hierarchy: it looks for reactions and enzymes only for the specified lipid.",
    "ground_truth_query": "PREFIX SWISSLIPID: <https://swisslipids.org/rdf/SLM_>\nPREFIX owl: <http://www.w3.org/2002/07/owl#>\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX rh: <http://rdf.rhea-db.org/>\nPREFIX up: <http://purl.uniprot.org/core/>\n\n# Example 16\nSELECT ?startId ?startName ?uniprot\nWHERE\n{\n  # SwissLipids query (list of) identifier(s)\n  VALUES ?startId { SWISSLIPID:000399814 }\n  # name\n  ?startId rdfs:label ?startName .\n  # ChEBI x-ref\n  ?startId owl:equivalentClass ?chebi .\n  # federated query to Rhea\n  SERVICE <https://sparql.rhea-db.org/sparql> {\n  \t?rhea rh:side/rh:contains/rh:compound/rh:chebi ?chebi .\n  }    \n  # federated query to UniProt\n  SERVICE <https://sparql.uniprot.org/sparql> {\n    ?uniprot up:reviewed true .\n    ?uniprot up:annotation/up:catalyticActivity/up:catalyzedReaction ?rhea .\n  }\n} \nORDER BY ?startId",
    "target_endpoint": "https://sparql.swisslipids.org/sparql/",
    "federates_with": [
      "https://sparql.uniprot.org/sparql",
      "https://sparql.rhea-db.org/sparql"
    ],
    "endpoint_set": "SwissLipids",
    "file_path": "SwissLipids/16.ttl",
    "predicted_query": "# https://sparql.swisslipids.org/sparql/\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>\nPREFIX sl: <http://www.swisslipids.org/rdf#>\n\nSELECT DISTINCT ?enzyme ?enzymeName\nWHERE {\n  # Find reactions associated with the given lipid in SwissLipids\n  SERVICE <https://sparql.swisslipids.org/sparql/> {\n    VALUES ?lipidID { \"SWISSLIPID:000399814\" } #SWISSLIPID:000399814\n    ?lipid sl:identifier ?lipidID .\n    ?reaction sl:participates ?lipid .\n  }\n  \n  # Find enzymes that catalyze those reactions in Rhea\n  SERVICE <https://sparql.rhea-db.org/sparql> {\n    ?rhea_reaction rdfs:label ?reactionName .\n    FILTER CONTAINS(str(?reactionName),str(?reaction)) .\n    ?rhea_reaction rdfs:comment ?enzyme .\n  }\n\n  # Retrieve enzyme information from UniProt\n  SERVICE <https://sparql.uniprot.org/sparql/> {\n    ?enzyme rdfs:label ?enzymeName .\n  }\n}",
    "predicted_endpoint": "https://sparql.swisslipids.org/sparql/",
    "predicted_endpoint_equal_to_target_endpoint": true,
    "predicted_endpoint_in_federates_with": false,
    "predicted_endpoint_or_federated_endpoint": true,
    "run_id_langsmith": "53cd9944-0954-4ac8-a462-70fa53451ae7",
    "evaluation_timestamp": "2025-05-11T09:36:44.706312",
    "question_understanding_prompt_tokens": 303,
    "question_understanding_completion_tokens": 42,
    "question_understanding_total_tokens": 345,
    "sparql_query_construction_prompt_tokens": 2503,
    "sparql_query_construction_completion_tokens": 0,
    "sparql_query_construction_total_tokens": 2503,
    "is_valid_sparql": true,
    "sparql_syntax_error": "syntactically correct",
    "result_eval_f1_score": 0.0,
    "result_eval_precision": 0.0,
    "result_eval_recall": 0.0,
    "error_occured_at_endpoint": false,
    "predicted_query_result_is_empty": true,
    "ground_truth_query_result_is_empty": false,
    "error_occured_at_endpoint_message": "no error, but empty result"
  },
  {
    "resource": "https://sparql.swisslipids.org/.well-known/sparql-examples/6",
    "natural_language_question": "For a given lipid (SWISSLIPID:000399814, Ceramide), return a list of all corresponding reactions (Rhea IDs and equation), as well as their enzymes as annotated in UniProtKB/Swiss-Prot) enzymes themselves (ID and protein name).\nThis query does not consider the hierarchy: it looks for reactions and enzymes only for the specified lipid.",
    "ground_truth_query": "PREFIX SWISSLIPID: <https://swisslipids.org/rdf/SLM_>\nPREFIX owl: <http://www.w3.org/2002/07/owl#>\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX rh: <http://rdf.rhea-db.org/>\nPREFIX up: <http://purl.uniprot.org/core/>\n\n# Example 6\nSELECT ?startId ?startName ?chebi ?rhea ?rheaEquation ?uniprot ?uniprotName\nWHERE\n{\n  # SwissLipids query (list of) identifier(s)\n  VALUES ?startId { SWISSLIPID:000399814 }\n  # name\n  ?startId rdfs:label ?startName .\n  # ChEBI x-ref\n  ?startId owl:equivalentClass ?chebi .\n  # federated query to Rhea\n  SERVICE <https://sparql.rhea-db.org/sparql> {\n  \t?rhea rh:equation ?rheaEquation .\n  \t?rhea rh:side/rh:contains/rh:compound/rh:chebi ?chebi .\n  }    \n  # federated query to UniProt\n  SERVICE <https://sparql.uniprot.org/sparql> {\n    ?uniprot up:reviewed true .\n    ?uniprot up:recommendedName/up:fullName ?uniprotName .\n    ?uniprot up:annotation/up:catalyticActivity/up:catalyzedReaction ?rhea .\n  }\n} \nORDER BY ?startId",
    "target_endpoint": "https://sparql.swisslipids.org/sparql/",
    "federates_with": [
      "https://sparql.uniprot.org/sparql",
      "https://sparql.rhea-db.org/sparql"
    ],
    "endpoint_set": "SwissLipids",
    "file_path": "SwissLipids/6.ttl",
    "predicted_query": "# https://sparql.swisslipids.org/sparql/\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>\nPREFIX sl: <http://swisslipids.org/rdf#>\nPREFIX chebi: <http://purl.obolibrary.org/obo/CHEBI_>\n\nSELECT DISTINCT ?rheaId ?equation ?enzymeId ?proteinName\nWHERE {\n  # Find reactions associated with the given lipid from SwissLipids\n  VALUES ?lipid { sl:SWISSLIPID_000399814 } # SWISSLIPID:000399814 = Ceramide\n  ?reaction sl:reaction_lipid ?lipid .\n  ?reaction sl:reaction_rhea ?rheaId .\n\n  # Get the reaction equation from Rhea\n  SERVICE <https://sparql.rhea-db.org/sparql> {\n    ?rheaId rdfs:label ?equation .\n  }\n\n  # Find enzymes associated with the reaction from SwissLipids\n  ?reaction sl:reaction_enzyme ?enzymeResource .\n\n  # Get the enzyme ID and protein name from UniProt\n  SERVICE <https://sparql.uniprot.org/sparql> {\n    ?enzymeResource rdfs:seeAlso ?enzymeId . # Assuming rdfs:seeAlso links to UniProt\n    ?enzymeId rdf:type <http://purl.uniprot.org/core/Protein> .\n    ?enzymeId rdfs:label ?proteinName .\n  }\n}",
    "predicted_endpoint": "https://sparql.swisslipids.org/sparql/",
    "predicted_endpoint_equal_to_target_endpoint": true,
    "predicted_endpoint_in_federates_with": false,
    "predicted_endpoint_or_federated_endpoint": true,
    "run_id_langsmith": "78caa2e8-8ab0-4519-97a5-534e022bb7ab",
    "evaluation_timestamp": "2025-05-11T09:36:55.752167",
    "question_understanding_prompt_tokens": 319,
    "question_understanding_completion_tokens": 89,
    "question_understanding_total_tokens": 408,
    "sparql_query_construction_prompt_tokens": 3328,
    "sparql_query_construction_completion_tokens": 489,
    "sparql_query_construction_total_tokens": 3817,
    "is_valid_sparql": true,
    "sparql_syntax_error": "syntactically correct",
    "result_eval_f1_score": 0.0,
    "result_eval_precision": 0.0,
    "result_eval_recall": 0.0,
    "error_occured_at_endpoint": false,
    "predicted_query_result_is_empty": true,
    "ground_truth_query_result_is_empty": false,
    "error_occured_at_endpoint_message": "no error, but empty result"
  },
  {
    "resource": "https://sparql.swisslipids.org/.well-known/sparql-examples/5",
    "natural_language_question": "For a given lipid (SWISSLIPID:000399814, Ceramide), return a list of all corresponding reactions (Rhea IDs and equation).\nThis query does consider the hierarchy: it looks for reactions involving the specified lipid and/or its more specific forms.",
    "ground_truth_query": "PREFIX SWISSLIPID: <https://swisslipids.org/rdf/SLM_>\nPREFIX owl: <http://www.w3.org/2002/07/owl#>\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX rh: <http://rdf.rhea-db.org/>\n\n# Example 5\nSELECT ?startId ?startName ?id ?name ?chebi ?rhea ?rheaEquation \nWHERE\n{\n  # SwissLipids query (list of) identifier(s)\n  VALUES ?startId { SWISSLIPID:000399814 }\n  # name\n  ?startId rdfs:label ?startName .\n  # Retrieve children lipids \n  ?id rdfs:subClassOf* ?startId .\n  ?id rdfs:label ?name .\n  # ChEBI x-ref\n  ?id owl:equivalentClass ?chebi .\n  # federated query to Rhea\n  SERVICE <https://sparql.rhea-db.org/sparql> {\n  \t?rhea rh:equation ?rheaEquation .\n  \t?rhea rh:side/rh:contains/rh:compound/rh:chebi ?chebi .\n  }    \n} \nORDER BY  ?startId ?id",
    "target_endpoint": "https://sparql.swisslipids.org/sparql/",
    "federates_with": [
      "https://sparql.rhea-db.org/sparql"
    ],
    "endpoint_set": "SwissLipids",
    "file_path": "SwissLipids/5.ttl",
    "predicted_query": "# https://sparql.swisslipids.org/sparql/\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>\nPREFIX sl: <http://swisslipids.org/rdf#>\nPREFIX chebi: <http://purl.obolibrary.org/obo/CHEBI_>\n\nSELECT DISTINCT ?rheaId ?equation\nWHERE {\n  # Find the lipid and its subclasses in SwissLipids\n  {\n    VALUES ?lipidId { <http://swisslipids.org/rdf/SWISSLIPID:000399814> } # SWISSLIPID:000399814\n    ?lipidId rdfs:subClassOf* ?lipid .\n  }\n  UNION\n  {\n    VALUES ?search_term { \"Ceramide\" }\n    ?l rdf:type sl:Lipid .\n    ?l rdfs:label ?search_term .\n    ?lipid = ?l .\n  }\n\n  # Find reactions in Rhea associated with the lipid or its subclasses\n  SERVICE <https://sparql.rhea-db.org/sparql> {\n    PREFIX rhea: <http://rdf.rhea-db.org/>\n    PREFIX chebi: <http://purl.obolibrary.org/obo/CHEBI_>\n    PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\n\n    ?reaction rhea:equation ?equation .\n    ?reaction rhea:hasParticipant ?participant .\n    ?participant rdfs:label ?lipidLabel . # Use label to match with lipid names\n\n    # Filter reactions based on lipid names\n    FILTER (CONTAINS(lcase(?lipidLabel), lcase(str(?lipid))))\n    BIND(STRBEFORE(STRAFTER(str(?reaction), \"http://rdf.rhea-db.org/\"), \"/\"),xsd:integer) AS ?rheaId\n  }\n}",
    "predicted_endpoint": "https://sparql.swisslipids.org/sparql/",
    "predicted_endpoint_equal_to_target_endpoint": true,
    "predicted_endpoint_in_federates_with": false,
    "predicted_endpoint_or_federated_endpoint": true,
    "run_id_langsmith": "72422921-af63-4b47-851e-f1f8255c81d3",
    "evaluation_timestamp": "2025-05-11T09:37:06.735754",
    "question_understanding_prompt_tokens": 296,
    "question_understanding_completion_tokens": 66,
    "question_understanding_total_tokens": 362,
    "sparql_query_construction_prompt_tokens": 2464,
    "sparql_query_construction_completion_tokens": 685,
    "sparql_query_construction_total_tokens": 3149,
    "is_valid_sparql": false,
    "sparql_syntax_error": "Encountered \" \"=\" \"= \"\" at line 19, column 12.\nWas expecting one of:\n     ...\n     ...\n     ...\n     ...\n     ...\n    \"a\" ...\n    \"(\" ...\n    \"!\" ...\n    \"^\" ...",
    "result_eval_f1_score": 0.0,
    "result_eval_precision": 0.0,
    "result_eval_recall": 0.0,
    "error_occured_at_endpoint": false,
    "predicted_query_result_is_empty": true,
    "ground_truth_query_result_is_empty": false,
    "error_occured_at_endpoint_message": "syntactically not correct"
  },
  {
    "resource": "https://sparql.swisslipids.org/.well-known/sparql-examples/34",
    "natural_language_question": "Lipids affected by human enzymes",
    "ground_truth_query": "PREFIX owl: <http://www.w3.org/2002/07/owl#>\nPREFIX rh: <http://rdf.rhea-db.org/>\nPREFIX taxon: <http://purl.uniprot.org/taxonomy/>\nPREFIX up: <http://purl.uniprot.org/core/>\n\nSELECT ?swisslipid  {\n  ?swisslipid owl:equivalentClass ?chebi .\n  SERVICE <https://sparql.rhea-db.org/sparql> {\n    ?rhea rh:side/rh:contains/rh:compound ?compound .\n\t?compound (rh:chebi|(rh:reactivePart/rh:chebi)|(rh:underlyingChebi/rh:chebi)) ?metabolite . \n  }\n  SERVICE <https://sparql.uniprot.org/sparql> {\n    ?catalyticActivityAnnotation up:catalyticActivity/up:catalyzedReaction ?rhea .\n    ?protein up:annotation ?catalyticActivityAnnotation ;\n             up:organism taxon:9606 .\n  }\n}\nLIMIT 1",
    "target_endpoint": "https://sparql.swisslipids.org/sparql/",
    "federates_with": [
      "https://sparql.uniprot.org/sparql",
      "https://sparql.rhea-db.org/sparql"
    ],
    "endpoint_set": "SwissLipids",
    "file_path": "SwissLipids/34.ttl",
    "predicted_query": "# https://sparql.uniprot.org/sparql\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX up: <http://purl.uniprot.org/core/>\nPREFIX taxon: <http://purl.uniprot.org/taxonomy/>\nPREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>\n\nSELECT DISTINCT ?lipidName\nWHERE {\n  # Find human proteins (enzymes) in UniProt\n  SERVICE <https://sparql.uniprot.org/sparql> {\n    SELECT DISTINCT ?enzyme ?enzymeName WHERE {\n      ?enzyme a up:Protein .\n      ?enzyme up:organism taxon:9606 .  # 9606 is the NCBI taxonomy ID for Homo sapiens\n      ?enzyme rdfs:label ?enzymeName .\n    }\n  }\n\n  # Find reactions in Rhea DB that involve these enzymes\n  SERVICE <https://sparql.rhea-db.org/sparql> {\n    PREFIX rhea: <http://rdf.rhea-db.org/>\n    PREFIX chebi: <http://purl.obolibrary.org/obo/CHEBI_>\n\n    ?reaction rhea:equation ?equation .\n    ?reaction rhea:directionalReaction ?directionalReaction .\n    ?directionalReaction rhea:enzyme ?enzyme . # Link Rhea reaction to enzyme from UniProt\n\n    # Get the ChEBI identifiers of reactants and products in the reaction\n    {\n      ?directionalReaction rhea:reactant ?chebi .\n    }\n    UNION\n    {\n      ?directionalReaction rhea:product ?chebi .\n    }\n  }\n\n  # Find lipids in SwissLipids that match the ChEBI identifiers\n  SERVICE <https://sparql.swisslipids.org/sparql/> {\n    PREFIX sl: <http://swisslipids.org/rdf/>\n    PREFIX chebi: <http://purl.obolibrary.org/obo/CHEBI_>\n\n    ?lipid sl:chebi ?chebi . # Link SwissLipids lipid to ChEBI ID from Rhea\n    ?lipid rdfs:label ?lipidName .\n  }\n}",
    "predicted_endpoint": "https://sparql.uniprot.org/sparql",
    "predicted_endpoint_equal_to_target_endpoint": false,
    "predicted_endpoint_in_federates_with": true,
    "predicted_endpoint_or_federated_endpoint": true,
    "run_id_langsmith": "130a3bbf-2968-48f0-b280-bbfa3cd51b50",
    "evaluation_timestamp": "2025-05-11T09:37:15.216819",
    "question_understanding_prompt_tokens": 245,
    "question_understanding_completion_tokens": 20,
    "question_understanding_total_tokens": 265,
    "sparql_query_construction_prompt_tokens": 1912,
    "sparql_query_construction_completion_tokens": 688,
    "sparql_query_construction_total_tokens": 2600,
    "is_valid_sparql": false,
    "sparql_syntax_error": "Encountered \" \"prefix\" \"PREFIX \"\" at line 20, column 5.\nWas expecting one of:\n     ...\n     ...\n     ...\n     ...\n     ...\n     ...\n    \"select\" ...\n    \"values\" ...\n    \"graph\" ...\n    \"optional\" ...\n    \"minus\" ...\n    \"bind\" ...\n    \"service\" ...\n    \"filter\" ...\n    \"true\" ...\n    \"false\" ...\n     ...\n     ...\n     ...\n     ...\n     ...\n     ...\n     ...\n     ...\n     ...\n     ...\n     ...\n     ...\n     ...\n    \"(\" ...\n     ...\n    \"{\" ...\n    \"}\" ...\n    \"[\" ...\n     ...\n    \"<<(\" ...\n    \"<<\" ...",
    "result_eval_f1_score": 0.0,
    "result_eval_precision": 0.0,
    "result_eval_recall": 0.0,
    "error_occured_at_endpoint": false,
    "predicted_query_result_is_empty": true,
    "ground_truth_query_result_is_empty": false,
    "error_occured_at_endpoint_message": "syntactically not correct"
  },
  {
    "resource": "https://sparql.uniprot.org/.well-known/sparql-examples/118_biosodafrontend_rat_brain_human_cancer",
    "natural_language_question": "What are the Homo sapiens genes associated with cancer and their orthologs expressed in the Rattus norvegicus brain?",
    "ground_truth_query": "PREFIX up:<http://purl.uniprot.org/core/>\nPREFIX taxon:<http://purl.uniprot.org/taxonomy/>\nPREFIX rdfs:<http://www.w3.org/2000/01/rdf-schema#>\nPREFIX orth:<http://purl.org/net/orth#>\nPREFIX dcterms:<http://purl.org/dc/terms/>\nPREFIX obo:<http://purl.obolibrary.org/obo/>\nPREFIX lscr:<http://purl.org/lscr#>\nPREFIX genex:<http://purl.org/genex#>\nPREFIX sio: <http://semanticscience.org/resource/>\nSELECT ?gene ?orthologous_protein2 WHERE {\n  {\n    SELECT ?protein1 WHERE {\n      ?protein1 a up:Protein;\n        up:organism/up:scientificName 'Homo sapiens' ;\n        up:annotation ?annotation .\n      ?annotation rdfs:comment ?annotation_text.\n      ?annotation a up:Disease_Annotation .\n      FILTER CONTAINS (?annotation_text, \"cancer\")\n    }\n  }\n  SERVICE <https://sparql.omabrowser.org/sparql/> {\n    SELECT ?orthologous_protein2 ?protein1 ?gene WHERE {\n      ?protein_OMA a orth:Protein .\n      ?orthologous_protein2 a orth:Protein .\n      ?cluster a orth:OrthologsCluster .\n      ?cluster orth:hasHomologousMember ?node1 .\n      ?cluster orth:hasHomologousMember ?node2 .\n      ?node2 orth:hasHomologousMember* ?protein_OMA .\n      ?node1 orth:hasHomologousMember* ?orthologous_protein2 \n      .?orthologous_protein2 orth:organism/obo:RO_0002162/up:scientificName 'Rattus norvegicus' .\n      ?orthologous_protein2 sio:SIO_010079 ?gene .\n      ?protein_OMA lscr:xrefUniprot ?protein1 .\n      FILTER(?node1 != ?node2)\n    }\n  }\n  SERVICE <https://www.bgee.org/sparql/> {\n    ?gene genex:isExpressedIn ?anatEntity .\n    ?anatEntity rdfs:label 'brain' .\n    ?gene orth:organism ?org . \n    ?org obo:RO_0002162 taxon:10116 .\n  }\n}",
    "target_endpoint": "https://sparql.uniprot.org/sparql",
    "federates_with": [
      "https://sparql.omabrowser.org/sparql/",
      "https://www.bgee.org/sparql/"
    ],
    "endpoint_set": "Uniprot",
    "file_path": "UniProt/118_biosodafrontend_rat_brain_human_cancer.ttl",
    "predicted_query": "# https://sparql.uniprot.org/sparql\nPREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX up: <http://purl.uniprot.org/core/>\nPREFIX taxon: <http://purl.uniprot.org/taxonomy/>\nPREFIX obo: <http://purl.obolibrary.org/obo/>\n\nSELECT DISTINCT ?humanGene ?ratOrtholog ?ratOrthologName\nWHERE {\n  # Find human genes associated with cancer\n  SERVICE <https://sparql.uniprot.org/sparql> {\n    ?humanGene a up:Protein ;\n               up:organism taxon:9606 ; # Homo sapiens\n               up:annotation ?diseaseAnnotation .\n    ?diseaseAnnotation rdf:type up:Disease_Annotation .\n    ?diseaseAnnotation rdfs:label ?diseaseLabel .\n    FILTER (CONTAINS(LCASE(?diseaseLabel), \"cancer\"))\n  }\n\n  # Find rat orthologs of the human genes\n  SERVICE <https://sparql.uniprot.org/sparql> {\n    ?ratOrtholog obo:RO_0002434 ?humanGene ;  # RO_0002434 is the 'orthologous to' relation\n                 a up:Protein ;\n                 up:organism taxon:10116 ;  # Rattus norvegicus\n                 rdfs:label ?ratOrthologName .\n\n    # Filter for rat orthologs with annotations related to brain\n    FILTER (CONTAINS(LCASE(?ratOrthologName), \"brain\") || CONTAINS(LCASE(?ratOrtholog), \"brain\")) # Added filter to find rat orthologs related to brain\n  }\n}",
    "predicted_endpoint": "https://sparql.uniprot.org/sparql",
    "predicted_endpoint_equal_to_target_endpoint": true,
    "predicted_endpoint_in_federates_with": false,
    "predicted_endpoint_or_federated_endpoint": true,
    "run_id_langsmith": "bb41fb7b-0b77-441e-8ce1-aaee3d654d42",
    "evaluation_timestamp": "2025-05-11T09:37:27.988204",
    "question_understanding_prompt_tokens": 261,
    "question_understanding_completion_tokens": 47,
    "question_understanding_total_tokens": 308,
    "sparql_query_construction_prompt_tokens": 3112,
    "sparql_query_construction_completion_tokens": 649,
    "sparql_query_construction_total_tokens": 3761,
    "is_valid_sparql": true,
    "sparql_syntax_error": "syntactically correct",
    "result_eval_f1_score": 0.0,
    "result_eval_precision": 0.0,
    "result_eval_recall": 0.0,
    "error_occured_at_endpoint": false,
    "predicted_query_result_is_empty": true,
    "ground_truth_query_result_is_empty": false,
    "error_occured_at_endpoint_message": "no error, but empty result"
  },
  {
    "resource": "https://sparql.uniprot.org/.well-known/sparql-examples/51",
    "natural_language_question": "Find all proteins linked to arachidonate (CHEBI:32395)",
    "ground_truth_query": "PREFIX CHEBI: <http://purl.obolibrary.org/obo/CHEBI_>\nPREFIX rh: <http://rdf.rhea-db.org/>\nPREFIX skos: <http://www.w3.org/2004/02/skos/core#>\nPREFIX up: <http://purl.uniprot.org/core/>\n\n\nSELECT \n    DISTINCT\n        ?uniprot\n        ?uniprotID\n        ?recname\n        ?gene\n        ?chebi\n        ?uniprotName\nWHERE {\n  SERVICE <https://sparql.rhea-db.org/sparql> {\n     VALUES (?chebi) { (CHEBI:32395) }\n     ?rhea rh:side/rh:contains/rh:compound ?compound .\n     ?compound rh:chebi ?chebi .\n     ?chebi up:name ?uniprotName .\n  }\n  ?uniprot up:annotation/up:catalyticActivity/up:catalyzedReaction ?rhea .\n  ?uniprot up:mnemonic ?uniprotID .\n  ?uniprot up:recommendedName/up:fullName ?recname .\n  OPTIONAL {?uniprot up:encodedBy/skos:prefLabel ?gene .}\n}",
    "target_endpoint": "https://sparql.uniprot.org/sparql/",
    "federates_with": [
      "https://sparql.rhea-db.org/sparql"
    ],
    "endpoint_set": "Uniprot",
    "file_path": "UniProt/51_all_proteins_linked_to_arachidonate.ttl",
    "predicted_query": "# https://sparql.uniprot.org/sparql\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX up: <http://purl.uniprot.org/core/>\nPREFIX chebi: <http://purl.obolibrary.org/obo/>\n\nSELECT DISTINCT ?protein ?proteinName\nWHERE {\n  # Query UniProt for proteins that may be related to arachidonate (CHEBI:32395)\n  SERVICE <https://sparql.uniprot.org/sparql> {\n    ?protein a up:Protein .\n    ?protein rdfs:label ?proteinName .\n    # Attempt to find a direct link between the protein and arachidonate in UniProt.\n    # This assumes there might be a predicate in UniProt that directly links to ChEBI.\n    # Replace up:somePredicate with the actual predicate if it exists.\n    ?protein up:annotation ?annotation .\n    ?annotation up:about chebi:CHEBI_32395 . #CHEBI_32395 is arachidonate\n  }\n}",
    "predicted_endpoint": "https://sparql.uniprot.org/sparql",
    "predicted_endpoint_equal_to_target_endpoint": true,
    "predicted_endpoint_in_federates_with": false,
    "predicted_endpoint_or_federated_endpoint": true,
    "run_id_langsmith": "97803fc0-e96e-4a11-9cd9-18a59b26a48c",
    "evaluation_timestamp": "2025-05-11T09:37:37.874689",
    "question_understanding_prompt_tokens": 256,
    "question_understanding_completion_tokens": 31,
    "question_understanding_total_tokens": 287,
    "sparql_query_construction_prompt_tokens": 1980,
    "sparql_query_construction_completion_tokens": 0,
    "sparql_query_construction_total_tokens": 1980,
    "is_valid_sparql": true,
    "sparql_syntax_error": "syntactically correct",
    "result_eval_f1_score": 0.0,
    "result_eval_precision": 0.0,
    "result_eval_recall": 0.0,
    "error_occured_at_endpoint": false,
    "predicted_query_result_is_empty": true,
    "ground_truth_query_result_is_empty": false,
    "error_occured_at_endpoint_message": "no error, but empty result"
  },
  {
    "resource": "https://sparql.uniprot.org/.well-known/sparql-examples/40",
    "natural_language_question": "Retrieve human enzymes that metabolize sphingolipids and are annotated in ChEMBL",
    "ground_truth_query": "PREFIX CHEBI: <http://purl.obolibrary.org/obo/CHEBI_>\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX rh: <http://rdf.rhea-db.org/>\nPREFIX taxon: <http://purl.uniprot.org/taxonomy/>\nPREFIX up: <http://purl.uniprot.org/core/>\n\nSELECT DISTINCT ?protein ?chemblEntry\nWHERE {\n  SERVICE <https://sparql.rhea-db.org/sparql> {\n    ?rhea rdfs:subClassOf rh:Reaction ;\n      rh:side/rh:contains/rh:compound/rh:chebi/rdfs:subClassOf+ CHEBI:26739 .\n  }\n  ?ca up:catalyzedReaction ?rhea .\n  ?protein up:annotation/up:catalyticActivity ?ca ;\n    up:organism taxon:9606 ;\n    rdfs:seeAlso ?chemblEntry .\n  ?chemblEntry up:database <http://purl.uniprot.org/database/ChEMBL> .\n}\nLIMIT 10",
    "target_endpoint": "https://sparql.uniprot.org/sparql/",
    "federates_with": [
      "https://sparql.rhea-db.org/sparql"
    ],
    "endpoint_set": "Uniprot",
    "file_path": "UniProt/40_human_enzymes_that_metabolize_sphingolipids.ttl",
    "predicted_query": "# https://sparql.swisslipids.org/sparql/\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX sl: <http://swisslipids.org/rdf#>\nPREFIX up: <http://purl.uniprot.org/core/>\nPREFIX taxon: <http://purl.uniprot.org/taxonomy/>\n\nSELECT DISTINCT ?enzymeName ?enzymeUri\nWHERE {\n  # Find reactions that metabolize sphingolipids in SwissLipids\n  ?reaction a sl:Reaction ;\n            sl:isReactionOf sl:Sphingolipid . # Assuming sl:Sphingolipid represents sphingolipids\n\n  # Find enzymes associated with these reactions\n  ?enzymeUri sl:participatesInReaction ?reaction ;\n             a sl:Enzyme .\n  ?enzymeUri rdfs:label ?enzymeName .\n\n  #Federate with UniProt to filter for human enzymes\n  SERVICE <https://sparql.uniprot.org/sparql> {\n    ?enzymeUri up:organism taxon:9606 .  # 9606 is the UniProt taxonomy ID for Homo sapiens\n  }\n}",
    "predicted_endpoint": "https://sparql.swisslipids.org/sparql/",
    "predicted_endpoint_equal_to_target_endpoint": false,
    "predicted_endpoint_in_federates_with": false,
    "predicted_endpoint_or_federated_endpoint": false,
    "run_id_langsmith": "beba925e-ca0b-406b-ab87-47ca78f1d258",
    "evaluation_timestamp": "2025-05-11T09:37:46.916188",
    "question_understanding_prompt_tokens": 257,
    "question_understanding_completion_tokens": 33,
    "question_understanding_total_tokens": 290,
    "sparql_query_construction_prompt_tokens": 2039,
    "sparql_query_construction_completion_tokens": 0,
    "sparql_query_construction_total_tokens": 2039,
    "is_valid_sparql": true,
    "sparql_syntax_error": "syntactically correct",
    "result_eval_f1_score": 0.0,
    "result_eval_precision": 0.0,
    "result_eval_recall": 0.0,
    "error_occured_at_endpoint": false,
    "predicted_query_result_is_empty": true,
    "ground_truth_query_result_is_empty": false,
    "error_occured_at_endpoint_message": "no error, but empty result"
  },
  {
    "resource": "https://sparql.uniprot.org/.well-known/sparql-examples/49",
    "natural_language_question": "Retrieve the UniProtKB proteins, their catalyzed Rhea reactions, their encoding genes (Ensembl) and the anatomic entities where the genes are expressed (UBERON anatomic entites from Bgee expression data resource).",
    "ground_truth_query": "PREFIX CHEBI: <http://purl.obolibrary.org/obo/CHEBI_>\nPREFIX genex: <http://purl.org/genex#>\nPREFIX lscr: <http://purl.org/lscr#>\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX rh: <http://rdf.rhea-db.org/>\nPREFIX taxon: <http://purl.uniprot.org/taxonomy/>\nPREFIX up: <http://purl.uniprot.org/core/>\n\nSELECT DISTINCT ?protein ?ensemblGene ?reaction ?anatomicEntityLabel ?anatomicEntity\nWHERE {\n  # federated query to Rhea enadpoint\n  {\n    SELECT DISTINCT ?reaction WHERE {\n      SERVICE <https://sparql.rhea-db.org/sparql> {\n        ?reaction rdfs:subClassOf rh:Reaction ;\n          rh:equation ?reactionEquation ;\n          rh:side ?reactionSide .\n        ?reactionSide rh:contains ?participant .\n        ?participant rh:compound ?compound .\n        # compound constraint (CHEBI:16113 == cholesterol)\n        ?compound rh:chebi CHEBI:16113 .\n      }\n    }\n  }\n  # taxonomy constraint (taxon:9606 == Homo sapiens)\n  ?protein up:organism taxon:9606 ;\n    up:annotation ?a ;\n    rdfs:seeAlso / up:transcribedFrom ?ensemblGene .\n  ?a a up:Catalytic_Activity_Annotation ;\n    up:catalyticActivity ?ca .\n  ?ca up:catalyzedReaction ?reaction .\n  # federated query to Bgee (expression data)\n  BIND(IRI(REPLACE(STR(?ensemblGene), \"\\\\.[0-9]+$\", \"\")) AS ?ensemblGeneNoVersion)\n  SERVICE <https://www.bgee.org/sparql/> {\n    ?gene lscr:xrefEnsemblGene ?ensemblGeneNoVersion ;\n      genex:isExpressedIn ?anatomicEntity .\n    ?anatomicEntity rdfs:label ?anatomicEntityLabel .\n  }\n}",
    "target_endpoint": "https://sparql.uniprot.org/sparql/",
    "federates_with": [
      "https://sparql.rhea-db.org/sparql",
      "https://www.bgee.org/sparql/"
    ],
    "endpoint_set": "Uniprot",
    "file_path": "UniProt/49_tissues_where_genes_metabolizing_cholestrol_are_expressed.ttl",
    "predicted_query": "# https://sparql.uniprot.org/sparql\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX up: <http://purl.uniprot.org/core/>\nPREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>\n\nSELECT DISTINCT ?protein ?proteinName ?rheaReaction ?gene ?anatomicalEntity\nWHERE {\n  # Query UniProtKB for proteins\n  SERVICE <https://sparql.uniprot.org/sparql> {\n    ?protein a up:Protein .\n    ?protein rdfs:label ?proteinName .\n    # Link to Rhea reactions via cross-reference\n    ?protein up:database ?rheaRef .\n    ?rheaRef rdf:type <http://purl.uniprot.org/database/Rhea> .\n    ?rheaRef rdfs:comment ?rheaReactionId . # Assuming Rhea ID is in the comment\n    BIND(IRI(concat(\"http://rdf.rhea-db.org/\", ?rheaReactionId)) AS ?rheaReaction) # Construct Rhea URI\n    # Link to Ensembl gene via cross-reference\n    ?protein up:database ?ensemblRef .\n    ?ensemblRef rdf:type <http://purl.uniprot.org/database/Ensembl> .\n    ?ensemblRef rdfs:comment ?geneId . # Assuming Ensembl ID is in the comment\n    BIND(IRI(concat(\"http://identifiers.org/ensembl/\", ?geneId)) AS ?gene) # Construct Ensembl URI\n  }\n\n  # Query Rhea for reaction details (optional, can be removed if only ID is needed)\n  #SERVICE <https://sparql.rhea-db.org/sparql> {\n  #  ?rheaReaction rdfs:label ?rheaReactionLabel .\n  #}\n\n  # Query Bgee for anatomical entities where the gene is expressed\n  SERVICE <http://bgee.unil.ch/sparql/> {\n    # Assuming Bgee uses a direct link to Ensembl gene IDs and UBERON IDs\n    ?expression a <http://purl.obolibrary.org/obo/UBERON_0000061> . # Expression class\n    ?expression <http://bgee.unil.ch/ontology/gene> ?gene .\n    ?expression <http://bgee.unil.ch/ontology/anatomicalEntity> ?anatomicalEntity .\n  }\n}\nLIMIT 100",
    "predicted_endpoint": "https://sparql.uniprot.org/sparql",
    "predicted_endpoint_equal_to_target_endpoint": true,
    "predicted_endpoint_in_federates_with": false,
    "predicted_endpoint_or_federated_endpoint": true,
    "run_id_langsmith": "51f4235e-35aa-4bf1-944b-0b3f2d469da2",
    "evaluation_timestamp": "2025-05-11T09:38:00.387827",
    "question_understanding_prompt_tokens": 281,
    "question_understanding_completion_tokens": 71,
    "question_understanding_total_tokens": 352,
    "sparql_query_construction_prompt_tokens": 3993,
    "sparql_query_construction_completion_tokens": 0,
    "sparql_query_construction_total_tokens": 3993,
    "is_valid_sparql": true,
    "sparql_syntax_error": "syntactically correct",
    "result_eval_f1_score": 0.0,
    "result_eval_precision": 0.0,
    "result_eval_recall": 0.0,
    "error_occured_at_endpoint": true,
    "predicted_query_result_is_empty": true,
    "ground_truth_query_result_is_empty": true,
    "error_occured_at_endpoint_message": "QueryBadFormed: A bad request has been sent to the endpoint: probably the SPARQL query is badly formed."
  },
  {
    "resource": "https://sparql.uniprot.org/.well-known/sparql-examples/53",
    "natural_language_question": "Find mouse homologs in OMABrowser of human enzymes that catalyze reactions involving sterols (CHEBI:15889). Federating with Rhea and OMABrowser.",
    "ground_truth_query": "PREFIX CHEBI: <http://purl.obolibrary.org/obo/CHEBI_>\nPREFIX lscr: <http://purl.org/lscr#>\nPREFIX orth: <http://purl.org/net/orth#>\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX rh: <http://rdf.rhea-db.org/>\nPREFIX taxon: <http://purl.uniprot.org/taxonomy/>\nPREFIX up: <http://purl.uniprot.org/core/>\n\nSELECT\n  DISTINCT\n    ?chebi\n    ?reaction\n    ?humanProtein\n    ?mouseProtein\n    ?cluster \nWHERE {\n  SERVICE <https://sparql.rhea-db.org/sparql> {\n    ?reaction rdfs:subClassOf rh:Reaction .\n    ?reaction rh:side/rh:contains/rh:compound ?compound .\n    ?compound rh:chebi ?chebi .\n    ?chebi rdfs:subClassOf* CHEBI:15889\n  }\n\n  ?humanProtein up:organism taxon:9606 .\n  ?humanProtein up:annotation ?a .\n  ?a a up:Catalytic_Activity_Annotation .\n  ?a up:catalyticActivity ?ca .\n  ?ca up:catalyzedReaction ?reaction .\n\n  SERVICE  <https://sparql.omabrowser.org/sparql> {\n    ?cluster a orth:ParalogsCluster .\n    ?cluster orth:hasHomologousMember ?node1 , ?node2 .\n    ?node1 orth:hasHomologousMember* ?orthoProtein1 .\n    ?node2 orth:hasHomologousMember* ?orthoProtein2 .\n    ?orthoProtein1 lscr:xrefUniprot ?mouseProtein .\n    ?orthoProtein2 lscr:xrefUniprot ?humanProtein .\n    # inTaxon mouse\n    ?orthoProtein1 orth:organism/<http://purl.obolibrary.org/obo/RO_0002162> taxon:10090 . \n  }\n}",
    "target_endpoint": "https://sparql.uniprot.org/sparql/",
    "federates_with": [
      "https://sparql.rhea-db.org/sparql",
      "https://sparql.omabrowser.org/sparql"
    ],
    "endpoint_set": "Uniprot",
    "file_path": "UniProt/53_mouse_homologs_of_sterol_enzymes_via_omabrowser.ttl",
    "predicted_query": "# https://sparql.uniprot.org/sparql\nPREFIX rhea: <http://rdf.rhea-db.org/>\nPREFIX chebi: <http://purl.obolibrary.org/obo/CHEBI_>\nPREFIX up: <http://purl.uniprot.org/core/>\nPREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>\nPREFIX oma: <http://omabrowser.org/ontology/>  # Assuming OMABrowser ontology\n\nSELECT DISTINCT ?humanEnzyme ?mouseHomolog\nWHERE {\n  # Find Rhea reactions involving sterols\n  SERVICE <https://sparql.rhea-db.org/sparql> {\n    ?reaction rhea: Rhea_has_reactant chebi:15889 .  # sterol\n    ?reaction rhea: Rhea_has_enzyme ?enzyme .\n  }\n\n  # Find human enzymes that catalyze these reactions and their mouse homologs\n  SERVICE <https://sparql.uniprot.org/sparql> {\n    ?enzyme up:catalyticActivity ?reactionUri . # Link enzyme to reaction (UniProt)\n    FILTER(STRSTARTS(STR(?reactionUri), \"http://rdf.rhea-db.org/\")) # Ensure it's a Rhea reaction\n    ?humanEnzyme a up:Protein .\n    ?humanEnzyme up:encodedBy ?gene .\n    ?gene up:organism <http://purl.uniprot.org/taxonomy/9606> .  # Human\n    ?humanEnzyme rdfs:seeAlso ?enzyme . #Link enzyme to Rhea enzyme\n    ?mouseHomolog a up:Protein .\n    ?mouseHomolog up:encodedBy ?mouseGene .\n    ?mouseGene up:organism <http://purl.uniprot.org/taxonomy/10090> . # Mouse\n    ?mouseHomolog up:sequenceSimilarity ?humanEnzyme . #Find mouse homolog\n  }\n}",
    "predicted_endpoint": "https://sparql.uniprot.org/sparql",
    "predicted_endpoint_equal_to_target_endpoint": true,
    "predicted_endpoint_in_federates_with": false,
    "predicted_endpoint_or_federated_endpoint": true,
    "run_id_langsmith": "bb4963b1-546b-42c4-b9bb-a86d256e11c3",
    "evaluation_timestamp": "2025-05-11T09:38:13.536593",
    "question_understanding_prompt_tokens": 273,
    "question_understanding_completion_tokens": 41,
    "question_understanding_total_tokens": 314,
    "sparql_query_construction_prompt_tokens": 3213,
    "sparql_query_construction_completion_tokens": 755,
    "sparql_query_construction_total_tokens": 3968,
    "is_valid_sparql": false,
    "sparql_syntax_error": "Lexical error at line 12, column 38.  Encountered: '32' (32), after prefix \"Rhea_has_reactant\"",
    "result_eval_f1_score": 0.0,
    "result_eval_precision": 0.0,
    "result_eval_recall": 0.0,
    "error_occured_at_endpoint": false,
    "predicted_query_result_is_empty": true,
    "ground_truth_query_result_is_empty": false,
    "error_occured_at_endpoint_message": "syntactically not correct"
  },
  {
    "resource": "https://sparql.uniprot.org/.well-known/sparql-examples/52",
    "natural_language_question": "Retrieve drugs that target human enzymes involved in sterol metabolism (federated query with Rhea and ChEMBL via IDSM/Elixir czech republic).",
    "ground_truth_query": "PREFIX CHEBI: <http://purl.obolibrary.org/obo/CHEBI_>\nPREFIX cco: <http://rdf.ebi.ac.uk/terms/chembl#>\nPREFIX chebihash: <http://purl.obolibrary.org/obo/chebi#>\nPREFIX owl: <http://www.w3.org/2002/07/owl#>\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX rh: <http://rdf.rhea-db.org/>\nPREFIX skos: <http://www.w3.org/2004/02/skos/core#>\nPREFIX taxon: <http://purl.uniprot.org/taxonomy/>\nPREFIX up: <http://purl.uniprot.org/core/>\n\nSELECT\n        DISTINCT\n            ?protein\n            ?proteinFullName\n            ?activityType\n            ?standardActivityValue\n            ?standardActivityUnit\n            ?chemblMolecule\n            ?chemlbMoleculePrefLabel\nWHERE\n  {\n  # ChEBI: retrieve members of the ChEBI class ChEBI:15889 (sterol)\n  # Rhea: retrieve the reactions involving these ChEBI as participants\n  SERVICE <https://sparql.rhea-db.org/sparql> {\n    ?reaction rdfs:subClassOf  rh:Reaction ;\n\t      rh:status        rh:Approved ;\n\t      rh:side          ?reactionSide .\n    ?reactionSide\n\t      rh:contains      ?participant .\n    ?participant rh:compound  ?compound\n    {\n      ?compound  rh:chebi  ?chebi .\n      ?chebi (rdfs:subClassOf)+ CHEBI:15889\n    } UNION {\n      ?compound  rh:chebi           ?chebi .\n      ?chebi2   rdfs:subClassOf     ?chebiRestriction .\n      ?chebiRestriction\n\t\ta           owl:Restriction ;\n\t\towl:onProperty      chebihash:has_major_microspecies_at_pH_7_3 ;\n\t\towl:someValuesFrom  ?chebi .\n      ?chebi2 (rdfs:subClassOf)+ CHEBI:15889\n    }\n  }\n  # UniProt: retrieve the human (taxid:9606) enzymes catalyzing these Rhea reactions\n  ?ca       up:catalyzedReaction  ?reaction .\n  ?a        up:catalyticActivity  ?ca .\n  ?protein  up:annotation         ?a ;\n\t    up:organism           taxon:9606 ;\n\t    up:recommendedName    ?proteinRecName .\n  ?proteinRecName\n\t    up:fullName           ?proteinFullName .\n  # Find drugs in wikidata that interact with the UniProt Proteins\n  # ChEMBL: retrieve the corresponding targets and with drugs in clinical phase 4\n  # Via https://idsm.elixir-czech.cz/sparql/\n  SERVICE <https://idsm.elixir-czech.cz/sparql/endpoint/idsm> {\n    ?activity a cco:Activity ;\n      cco:hasMolecule ?chemblMolecule ;\n      cco:hasAssay ?assay ;\n      cco:standardType ?activityType ;\n      cco:standardValue ?standardActivityValue ;\n      cco:standardUnits ?standardActivityUnit .\n    ?chemblMolecule cco:highestDevelopmentPhase ?highestDevelopmentPhase ;\n      rdfs:label ?chemblMoleculeLabel ;\n      skos:prefLabel ?chemlbMoleculePrefLabel .\n    FILTER (?highestDevelopmentPhase > 3)\n    ?assay cco:hasTarget ?target .\n    ?target cco:hasTargetComponent/cco:targetCmptXref ?protein .\n    ?protein a cco:UniprotRef .\n  }\n}",
    "target_endpoint": "https://sparql.uniprot.org/sparql/",
    "federates_with": [
      "https://sparql.rhea-db.org/sparql",
      "https://idsm.elixir-czech.cz/sparql/endpoint/idsm"
    ],
    "endpoint_set": "Uniprot",
    "file_path": "UniProt/52_drugs_targeting_sterol_metabolism.ttl",
    "predicted_query": "# https://sparql.rhea-db.org/sparql\nPREFIX rhea: <http://rdf.rhea-db.org/>\nPREFIX chebi: <http://purl.obolibrary.org/obo/CHEBI_>\nPREFIX uniprot: <http://purl.uniprot.org/core/>\nPREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\n\nSELECT DISTINCT ?drug ?enzymeName\nWHERE {\n  # Find Rhea reactions related to sterol metabolism\n  ?reaction rdfs:label ?reactionName .\n  FILTER (CONTAINS(LCASE(?reactionName), \"sterol\")) # Filter reactions for sterol metabolism\n\n  # Get the enzyme(s) involved in the reaction\n  ?reaction rhea:equation ?equation .\n  ?equation rhea:side ?side .\n  ?side rhea:component ?component .\n  ?component rhea:accession ?enzyme .\n\n  # Get enzyme name\n  ?enzyme rdfs:label ?enzymeName .\n\n  # Link Rhea enzyme to UniProt ID (assuming Rhea uses UniProt IDs)\n  ?enzyme rdfs:seeAlso ?uniprotID .\n  FILTER (STRSTARTS(str(?uniprotID), str(uniprot:))) # Ensure it's a UniProt ID\n\n  # Query ChEMBL (via IDSM/Elixir czech republic) for drugs targeting the enzyme\n  SERVICE <IDSM/Elixir czech republic> {\n    # Assuming a property like target:has_target relates a drug to a target\n    # and target:has_accession links the target to a UniProt ID\n    ?drug target:has_target ?target .\n    ?target target:has_accession ?uniprotID .\n    ?target rdfs:label ?targetName .\n    ?drug rdfs:label ?drug .\n  }\n}",
    "predicted_endpoint": "https://sparql.rhea-db.org/sparql",
    "predicted_endpoint_equal_to_target_endpoint": false,
    "predicted_endpoint_in_federates_with": true,
    "predicted_endpoint_or_federated_endpoint": true,
    "run_id_langsmith": "2a0b7839-1cca-486d-ba67-1fcb4879af49",
    "evaluation_timestamp": "2025-05-11T09:38:24.505089",
    "question_understanding_prompt_tokens": 271,
    "question_understanding_completion_tokens": 40,
    "question_understanding_total_tokens": 311,
    "sparql_query_construction_prompt_tokens": 3312,
    "sparql_query_construction_completion_tokens": 659,
    "sparql_query_construction_total_tokens": 3971,
    "is_valid_sparql": false,
    "sparql_syntax_error": "Encountered \" \"<\" \"< \"\" at line 28, column 11.\nWas expecting one of:\n     ...\n     ...\n     ...\n     ...\n     ...\n    \"silent\" ...",
    "result_eval_f1_score": 0.0,
    "result_eval_precision": 0.0,
    "result_eval_recall": 0.0,
    "error_occured_at_endpoint": false,
    "predicted_query_result_is_empty": true,
    "ground_truth_query_result_is_empty": false,
    "error_occured_at_endpoint_message": "syntactically not correct"
  },
  {
    "resource": "https://sparql.uniprot.org/.well-known/sparql-examples/54",
    "natural_language_question": "Proteins with binding sites for ligands similar to heme",
    "ground_truth_query": "PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX sachem: <http://bioinfo.uochb.cas.cz/rdf/v1.0/sachem#>\nPREFIX up: <http://purl.uniprot.org/core/>\nPREFIX xsd: <http://www.w3.org/2001/XMLSchema#>\n\nSELECT \n  ?protein\n  ?mnemonic\n  ?proteinName\n  ?ligandSimilarityScore\n  ?ligand\nWHERE {\n  SERVICE <https://idsm.elixir-czech.cz/sparql/endpoint/chebi> {\n    ?ssc sachem:compound ?ligand; \n      sachem:score ?ligandSimilarityScore ;\n      sachem:similaritySearch ?sss .\n        # Smiles of Heme\n    ?sss    sachem:query \"CC1=C(CCC([O-])=O)C2=[N+]3C1=Cc1c(C)c(C=C)c4C=C5C(C)=C(C=C)C6=[N+]5[Fe-]3(n14)n1c(=C6)c(C)c(CCC([O-])=O)c1=C2\";\n      sachem:cutoff \"8e-1\"^^xsd:double ;\n      sachem:aromaticityMode sachem:aromaticityDetect ;\n      sachem:similarityRadius 1 ;\n      sachem:tautomerMode sachem:ignoreTautomers .\n  }\n  ?protein up:mnemonic ?mnemonic ;\n    up:recommendedName/up:fullName ?proteinName ;\n    up:annotation ?annotation .\n  ?annotation a up:Binding_Site_Annotation ;\n      up:ligand/rdfs:subClassOf ?ligand .\n}\nORDER BY DESC(?ligandSimilarityScore)",
    "target_endpoint": "https://sparql.uniprot.org/sparql/",
    "federates_with": [
      "https://idsm.elixir-czech.cz/sparql/endpoint/chebi"
    ],
    "endpoint_set": "Uniprot",
    "file_path": "UniProt/54_binding_sites_for_ligands_similar_to_heme_sachem.ttl",
    "predicted_query": "# https://sparql.uniprot.org/sparql\nPREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX uniprot: <http://purl.uniprot.org/core/>\n\nSELECT DISTINCT ?protein ?proteinName ?bindingSiteDescription\nWHERE {\n  # Query UniProt for proteins\n  SERVICE <https://sparql.uniprot.org/sparql> {\n    ?protein a uniprot:Protein .\n    ?protein rdfs:label ?proteinName .\n\n    # Find binding sites associated with the protein\n    ?protein uniprot:feature ?bindingSite .\n    ?bindingSite a uniprot:BindingSite .\n    ?bindingSite rdfs:comment ?bindingSiteDescription .\n\n    # Filter for binding sites that bind ligands similar to heme\n    FILTER (CONTAINS(LCASE(?bindingSiteDescription), \"heme\"))\n  }\n}",
    "predicted_endpoint": "https://sparql.uniprot.org/sparql",
    "predicted_endpoint_equal_to_target_endpoint": true,
    "predicted_endpoint_in_federates_with": false,
    "predicted_endpoint_or_federated_endpoint": true,
    "run_id_langsmith": "cd744ac3-ed41-4419-9412-0ce1962108ec",
    "evaluation_timestamp": "2025-05-11T09:38:33.975235",
    "question_understanding_prompt_tokens": 249,
    "question_understanding_completion_tokens": 32,
    "question_understanding_total_tokens": 281,
    "sparql_query_construction_prompt_tokens": 2621,
    "sparql_query_construction_completion_tokens": 413,
    "sparql_query_construction_total_tokens": 3034,
    "is_valid_sparql": true,
    "sparql_syntax_error": "syntactically correct",
    "result_eval_f1_score": 0.0,
    "result_eval_precision": 0.0,
    "result_eval_recall": 0.0,
    "error_occured_at_endpoint": false,
    "predicted_query_result_is_empty": true,
    "ground_truth_query_result_is_empty": false,
    "error_occured_at_endpoint_message": "no error, but empty result"
  },
  {
    "resource": "https://sparql.uniprot.org/.well-known/sparql-examples/43",
    "natural_language_question": "Connect patents cited in UniProtKB with those in the patent database at EPO via publication number, whose grant date is more than twenty years in the past.",
    "ground_truth_query": "PREFIX patent: <http://data.epo.org/linked-data/def/patent/>\nPREFIX skos: <http://www.w3.org/2004/02/skos/core#>\nPREFIX up: <http://purl.uniprot.org/core/>\n\nSELECT ?grantDate ?patent ?application ?applicationNo\nWHERE\n{\n    ?citation a up:Patent_Citation ;\n  skos:exactMatch ?patent .\n  BIND(SUBSTR(STR(?patent), 35) AS ?applicationNo)\n  BIND(SUBSTR(STR(?patent), 33, 2) AS ?countryCode)\n  SERVICE <https://data.epo.org/linked-data/query>{\n    ?publication patent:publicationNumber ?applicationNo ;\n      patent:application ?application .\n    ?application patent:grantDate ?grantDate .\n  }\n  BIND((year(now()) - 20) AS ?thisYearMinusTwenty)\n  BIND(year(?grantDate) AS ?grantYear)\n  FILTER(?grantYear < ?thisYearMinusTwenty)\n} ORDER BY ?grantYear",
    "target_endpoint": "https://sparql.uniprot.org/sparql/",
    "federates_with": [
      "https://data.epo.org/linked-data/query"
    ],
    "endpoint_set": "Uniprot",
    "file_path": "UniProt/43_patents_used_in_uniprot_granted_twenty_years_in_the_past.ttl",
    "predicted_query": "# https://sparql.uniprot.org/sparql\nPREFIX up: <http://purl.uniprot.org/core/>\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\n\nSELECT DISTINCT ?uniprotEntry ?patentPublicationNumber\nWHERE {\n  ?uniprotEntry a up:Protein .  # Assuming UniProt entries are of type Protein\n\n  # Find patent citations associated with the UniProt entry.  This assumes a direct property link.  The actual property might need adjustment.\n  ?uniprotEntry up:citation ?citation .\n  ?citation rdfs:label ?patentPublicationNumber . # Assuming the patent publication number is the rdfs:label of the citation.  This might need adjustment based on the actual UniProt schema.\n  FILTER CONTAINS(str(?patentPublicationNumber), \"-\") # Filter to get only patent publication numbers\n}",
    "predicted_endpoint": "https://sparql.uniprot.org/sparql",
    "predicted_endpoint_equal_to_target_endpoint": true,
    "predicted_endpoint_in_federates_with": false,
    "predicted_endpoint_or_federated_endpoint": true,
    "run_id_langsmith": "8f0591ad-4c20-467a-acd6-922068c1053a",
    "evaluation_timestamp": "2025-05-11T09:38:54.142085",
    "question_understanding_prompt_tokens": 269,
    "question_understanding_completion_tokens": 47,
    "question_understanding_total_tokens": 316,
    "sparql_query_construction_prompt_tokens": 1688,
    "sparql_query_construction_completion_tokens": 0,
    "sparql_query_construction_total_tokens": 1688,
    "is_valid_sparql": true,
    "sparql_syntax_error": "syntactically correct",
    "result_eval_f1_score": 0.0,
    "result_eval_precision": 0.0,
    "result_eval_recall": 0.0,
    "error_occured_at_endpoint": false,
    "predicted_query_result_is_empty": true,
    "ground_truth_query_result_is_empty": false,
    "error_occured_at_endpoint_message": "no error, but empty result"
  },
  {
    "resource": "https://sparql.uniprot.org/.well-known/sparql-examples/45",
    "natural_language_question": "Retrieve drugs that target human enzymes involved in sterol metabolism (federated query with WikiData and Rhea).",
    "ground_truth_query": "PREFIX CHEBI: <http://purl.obolibrary.org/obo/CHEBI_>\nPREFIX chebihash: <http://purl.obolibrary.org/obo/chebi#>\nPREFIX owl: <http://www.w3.org/2002/07/owl#>\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX rh: <http://rdf.rhea-db.org/>\nPREFIX taxon: <http://purl.uniprot.org/taxonomy/>\nPREFIX uniprotkb: <http://purl.uniprot.org/uniprot/>\nPREFIX up: <http://purl.uniprot.org/core/>\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\n\nSELECT DISTINCT ?protein ?proteinFullName ?wikiChemical ?wikiChemicalLabel ?medicalConditionTreatedLabel\nWHERE {\n  # ChEBI: retrieve members of the ChEBI class ChEBI:15889 (sterol)\n  # Rhea: retrieve the reactions involving these ChEBI as participants\n  SERVICE <https://sparql.rhea-db.org/sparql> {\n    ?reaction rdfs:subClassOf rh:Reaction ;\n      rh:status rh:Approved ;\n      rh:side ?reactionSide .\n    ?reactionSide\n      rh:contains ?participant .\n    ?participant rh:compound ?compound\n    {\n      ?compound rh:chebi ?chebi .\n      ?chebi (rdfs:subClassOf)+ CHEBI:15889\n    } UNION {\n      ?compound rh:chebi ?chebi .\n      ?chebi2 rdfs:subClassOf ?chebiRestriction .\n      ?chebiRestriction\n\t\ta owl:Restriction ;\n\t\towl:onProperty chebihash:has_major_microspecies_at_pH_7_3 ;\n\t\towl:someValuesFrom ?chebi .\n      ?chebi2 (rdfs:subClassOf)+ CHEBI:15889\n    }\n  }\n  # UniProt: retrieve the human (taxid:9606) enzymes catalyzing these Rhea reactions\n  ?ca up:catalyzedReaction  ?reaction .\n  ?a up:catalyticActivity  ?ca .\n  ?proteinIRI  up:annotation ?a ;\n    up:organism taxon:9606 ;\n    up:recommendedName ?proteinRecName .\n  ?proteinRecName up:fullName ?proteinFullName .\n  # Find drugs in wikidata that interact with the UniProt Proteins\n  BIND (SUBSTR(STR(?proteinIRI), STRLEN(STR(uniprotkb:))+1) AS ?protein)\n  SERVICE <https://query.wikidata.org/sparql> {\n    ?wp wdt:P352  ?protein .\n    ?wikiChemical wdt:P129 ?wp . # Physically interacts with\n    ?wikiChemical rdfs:label ?wikiChemicalLabel .\n    ?wikiChemical wdt:P2175 ?wmc . # Medical conndition treated\n    ?wmc rdfs:label ?medicalConditionTreatedLabel .\n    FILTER(lang(?medicalConditionTreatedLabel) = 'en')\n    FILTER(lang(?wikiChemicalLabel) = 'en')\n  }\n}",
    "target_endpoint": "https://sparql.uniprot.org/sparql/",
    "federates_with": [
      "https://query.wikidata.org/sparql",
      "https://sparql.rhea-db.org/sparql"
    ],
    "endpoint_set": "Uniprot",
    "file_path": "UniProt/45_drugs_targeting_human_sterol_metabolism_enzymes.ttl",
    "predicted_query": "# https://sparql.uniprot.org/sparql\n# Find drugs that target human enzymes involved in sterol metabolism\n\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX up: <http://purl.uniprot.org/core/>\nPREFIX taxon: <http://purl.uniprot.org/taxonomy/>\nPREFIX rhea: <http://rdf.rhea-db.org/>\nPREFIX chebi: <http://purl.obolibrary.org/obo/CHEBI_>\nPREFIX wd: <http://www.wikidata.org/entity/>\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\n\nSELECT DISTINCT ?drug ?enzymeName WHERE {\n  # Subquery to find human enzymes involved in sterol metabolism\n  {\n    SELECT DISTINCT ?enzyme ?enzymeName WHERE {\n      # Find human enzymes from UniProt\n      SERVICE <https://sparql.uniprot.org/sparql> {\n        ?enzyme a up:Protein .\n        ?enzyme up:organism taxon:9606 .  # Homo sapiens\n        ?enzyme rdfs:label ?enzymeName .\n      }\n\n      # Find enzymes involved in sterol metabolism from Rhea\n      SERVICE <https://sparql.rhea-db.org/sparql> {\n        { ?reaction rhea:equation ?equation .\n          ?reaction rhea:status \"approved\" .\n          ?reaction rhea:directionalReaction ?directionalReaction .\n          ?directionalReaction rhea:hasParticipant ?sterol .\n          ?sterol a chebi:15889 . # sterol\n          ?reaction rhea:catalyzedBy ?enzyme .\n        }\n        UNION\n        {\n          ?reaction rhea:equation ?equation .\n          ?reaction rhea:status \"approved\" .\n          ?reaction rhea:directionalReaction ?directionalReaction .\n          ?directionalReaction rhea:hasParticipant ?sterolEster .\n          ?sterolEster a chebi:35915 . # sterol ester\n          ?reaction rhea:catalyzedBy ?enzyme .\n        }\n      }\n    }\n  }\n\n  # Find drugs targeting those enzymes from Wikidata\n  SERVICE <https://query.wikidata.org/sparql> {\n    ?drug wdt:P2175 ?enzymeWikidata .  # P2175: mechanism of action\n    ?enzymeWikidata wdt:P703 ?human . # P703: found in taxon\n    FILTER(STR(?enzyme) = STR(?human))\n    #OPTIONAL { ?drug wdt:P31/wdt:P279* wd:Q12140 . } #Drug\n    ?drug rdfs:label ?drugLabel .\n    FILTER (lang(?drugLabel) = \"en\")\n  }\n}",
    "predicted_endpoint": "https://sparql.uniprot.org/sparql",
    "predicted_endpoint_equal_to_target_endpoint": true,
    "predicted_endpoint_in_federates_with": false,
    "predicted_endpoint_or_federated_endpoint": true,
    "run_id_langsmith": "9c84a4a5-77a9-44c7-8052-6acc099ff487",
    "evaluation_timestamp": "2025-05-11T09:39:27.840619",
    "question_understanding_prompt_tokens": 261,
    "question_understanding_completion_tokens": 28,
    "question_understanding_total_tokens": 289,
    "sparql_query_construction_prompt_tokens": 2408,
    "sparql_query_construction_completion_tokens": 842,
    "sparql_query_construction_total_tokens": 3250,
    "is_valid_sparql": true,
    "sparql_syntax_error": "syntactically correct",
    "result_eval_f1_score": 0.0,
    "result_eval_precision": 0.0,
    "result_eval_recall": 0.0,
    "error_occured_at_endpoint": false,
    "predicted_query_result_is_empty": true,
    "ground_truth_query_result_is_empty": false,
    "error_occured_at_endpoint_message": "no error, but empty result"
  },
  {
    "resource": "https://sparql.uniprot.org/.well-known/sparql-examples/42",
    "natural_language_question": "Connect patents cited in UniProtKB with those in the patent database at EPO via publication number.",
    "ground_truth_query": "PREFIX patent: <http://data.epo.org/linked-data/def/patent/>\nPREFIX skos: <http://www.w3.org/2004/02/skos/core#>\nPREFIX up: <http://purl.uniprot.org/core/>\n\nSELECT ?citation ?patent ?application ?applicationNo\nWHERE\n{\n  ?citation a up:Patent_Citation ;\n    skos:exactMatch ?patent .\n  FILTER(CONTAINS(STR(?patent), 'EP'))\n  BIND(SUBSTR(STR(?patent), 35) AS ?applicationNo)\n  SERVICE <https://data.epo.org/linked-data/query>{\n    ?application patent:publicationNumber ?applicationNo\n  }\n}",
    "target_endpoint": "https://sparql.uniprot.org/sparql/",
    "federates_with": [
      "https://data.epo.org/linked-data/query"
    ],
    "endpoint_set": "Uniprot",
    "file_path": "UniProt/42_connect_patents_to_epo.ttl",
    "predicted_query": "# https://sparql.uniprot.org/sparql\nPREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX up: <http://purl.uniprot.org/core/>\n\nSELECT ?uniprotEntry ?patentIdentifier\nWHERE {\n  # Retrieve UniProt entries\n  ?uniprotEntry a up:Protein .\n  \n  # Retrieve patent cross-references. Assuming patents are linked via xrefs.\n  ?uniprotEntry up:database ?patentResource .\n  ?patentResource rdfs:label ?patentIdentifier . # Assuming patent identifier is the label\n\n  # Filter for patent identifiers (this is a simplification as we don't have an EPO endpoint)\n  FILTER (CONTAINS(LCASE(?patentIdentifier), \"patent\")) # Basic filter to identify patent-related xrefs\n}",
    "predicted_endpoint": "https://sparql.uniprot.org/sparql",
    "predicted_endpoint_equal_to_target_endpoint": true,
    "predicted_endpoint_in_federates_with": false,
    "predicted_endpoint_or_federated_endpoint": true,
    "run_id_langsmith": "c213addb-256d-425b-b627-4c53c9451fb2",
    "evaluation_timestamp": "2025-05-11T09:39:45.400758",
    "question_understanding_prompt_tokens": 258,
    "question_understanding_completion_tokens": 35,
    "question_understanding_total_tokens": 293,
    "sparql_query_construction_prompt_tokens": 1676,
    "sparql_query_construction_completion_tokens": 0,
    "sparql_query_construction_total_tokens": 1676,
    "is_valid_sparql": true,
    "sparql_syntax_error": "syntactically correct",
    "result_eval_f1_score": 0.0,
    "result_eval_precision": 0.0,
    "result_eval_recall": 0.0,
    "error_occured_at_endpoint": false,
    "predicted_query_result_is_empty": true,
    "ground_truth_query_result_is_empty": false,
    "error_occured_at_endpoint_message": "no error, but empty result"
  },
  {
    "resource": "https://sparql.uniprot.org/.well-known/sparql-examples/67_draft_human_metabolome",
    "natural_language_question": "Generate a draft human metabolome",
    "ground_truth_query": "PREFIX chebislash: <http://purl.obolibrary.org/obo/chebi/>\nPREFIX rh: <http://rdf.rhea-db.org/>\nPREFIX taxon: <http://purl.uniprot.org/taxonomy/>\nPREFIX up: <http://purl.uniprot.org/core/>\n\nSELECT\n?uniprot ?mnemonic ?rhea ?chebi ?smiles ?inchiKey\nWHERE\n{\n  ?uniprot up:annotation/up:catalyticActivity/up:catalyzedReaction ?rhea ;\n        up:organism taxon:9606 ;\n        up:mnemonic ?mnemonic .\n  SERVICE <https://sparql.rhea-db.org/sparql> {\n\t?rhea rh:side/rh:contains/rh:compound ?compound .\n    ?compound (rh:chebi|(rh:reactivePart/rh:chebi)|(rh:underlyingChebi/rh:chebi)) ?chebi .\n   }\n   ?chebi chebislash:smiles ?smiles ;\n          chebislash:inchikey ?inchiKey .\n}",
    "target_endpoint": "https://sparql.uniprot.org/sparql/",
    "federates_with": [
      "https://sparql.rhea-db.org/sparql"
    ],
    "endpoint_set": "Uniprot",
    "file_path": "UniProt/67_draft_human_metabolome.ttl",
    "predicted_query": "# https://sparql.uniprot.org/sparql\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX up: <http://purl.uniprot.org/core/>\nPREFIX taxon: <http://purl.uniprot.org/taxonomy/>\n\nSELECT DISTINCT ?protein ?proteinName ?gene ?reaction ?lipid\nWHERE {\n  # Find proteins associated with Homo sapiens (human) in UniProt\n  SERVICE <https://sparql.uniprot.org/sparql> {\n    ?protein a up:Protein .\n    ?protein up:organism taxon:9606 . # Homo sapiens\n    ?protein rdfs:label ?proteinName .\n    OPTIONAL { ?protein up:encodedBy ?gene . }\n    #Optional { ?protein up:annotation ?annotation .\n    #FILTER (CONTAINS(LCASE(?annotation), \"metabolic\")) . # Filter for proteins with \"metabolic\" annotation - Removed as it might be too restrictive\n  }\n\n  # Find reactions catalyzed by these proteins in Rhea\n  OPTIONAL {\n    SERVICE <https://sparql.rhea-db.org/sparql> {\n      ?reaction rdfs:label ?reactionName .\n      ?reaction <http://purl.obolibrary.org/obo/RO_0002333> ?protein . # catalyzed by\n    }\n  }\n\n  # Find lipids that might be part of the human metabolome in SwissLipids\n  OPTIONAL {\n    SERVICE <https://sparql.swisslipids.org/sparql/> {\n      ?lipid a <http://www.swisslipids.org/rdf/SwissLipids#Lipid> .\n      ?lipid <http://www.w3.org/2000/01/rdf-schema#label> ?lipidName .\n      #FILTER (CONTAINS(LCASE(?lipidName), \"human\")) #Filter for human lipids - Removed as it might be too restrictive\n    }\n  }\n}",
    "predicted_endpoint": "https://sparql.uniprot.org/sparql",
    "predicted_endpoint_equal_to_target_endpoint": true,
    "predicted_endpoint_in_federates_with": false,
    "predicted_endpoint_or_federated_endpoint": true,
    "run_id_langsmith": "05b84a72-1062-4864-8ab9-5c283067d9a8",
    "evaluation_timestamp": "2025-05-11T09:39:55.586758",
    "question_understanding_prompt_tokens": 245,
    "question_understanding_completion_tokens": 20,
    "question_understanding_total_tokens": 265,
    "sparql_query_construction_prompt_tokens": 1305,
    "sparql_query_construction_completion_tokens": 0,
    "sparql_query_construction_total_tokens": 1305,
    "is_valid_sparql": true,
    "sparql_syntax_error": "syntactically correct",
    "result_eval_f1_score": 0.0,
    "result_eval_precision": 0.0,
    "result_eval_recall": 0.0,
    "error_occured_at_endpoint": true,
    "predicted_query_result_is_empty": true,
    "ground_truth_query_result_is_empty": true,
    "error_occured_at_endpoint_message": "QueryBadFormed: A bad request has been sent to the endpoint: probably the SPARQL query is badly formed."
  },
  {
    "resource": "https://sparql.uniprot.org/.well-known/sparql-examples/36",
    "natural_language_question": "Find the orthologous proteins for UniProtKB entry P05067 using the <a href=\"http://www.orthod.org\">OrthoDB database</a>",
    "ground_truth_query": "PREFIX orthodb: <http://purl.orthodb.org/>\nPREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX skos: <http://www.w3.org/2004/02/skos/core#>\nPREFIX uniprotkb: <http://purl.uniprot.org/uniprot/>\nPREFIX up: <http://purl.uniprot.org/core/>\n\nSELECT\n  ?protein\n  ?orthoGroup\n  ?scientificName\n  ?functionComment\n  ?prefferedGeneName\n  ((STRLEN(?value) - ?medianLength) as ?deviationFromMedianLength)\nWHERE\n{\n  uniprotkb:P05067 a up:Protein ;\n        up:organism/up:scientificName ?scientificName ;\n        rdfs:seeAlso ?orthoGroup ;\n        up:encodedBy/skos:prefLabel ?prefferedGeneName ;\n          up:sequence/rdf:value ?value .\n  OPTIONAL {\n    ?protein up:annotation ?functionAnnotation .\n    ?functionAnnotation a up:Function_Annotation ;\n      rdfs:comment ?functionComment .\n  }\n  SERVICE <https://sparql.orthodb.org/sparql>{\n    ?orthoGroup orthodb:ogMedianProteinLength ?medianLength .\n    ?orthoGroup orthodb:hasMember ?xref .\n    ?xref orthodb:xref/orthodb:xrefResource uniprotkb:P05067 .\n  }\n}\nLIMIT 985915",
    "target_endpoint": "https://sparql.uniprot.org/sparql/",
    "federates_with": [
      "https://sparql.orthodb.org/sparql"
    ],
    "endpoint_set": "Uniprot",
    "file_path": "UniProt/36_orthologous_proteins_via_orthodb.ttl",
    "predicted_query": "# https://sparql.uniprot.org/sparql\nPREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX up: <http://purl.uniprot.org/core/>\n\nSELECT DISTINCT ?protein ?ortholog ?orthoDBGroup\nWHERE {\n  # Find orthologs of P05067\n  VALUES ?protein { <http://purl.uniprot.org/uniprot/P05067> } # The UniProt entry of interest\n  ?protein up:sequence ?seq . # Ensure it's a protein entry\n  ?protein up:annotation ?annotation .\n  ?annotation rdf:type up:Ortholog_Annotation . # Filter for ortholog annotations\n  ?annotation rdfs:seeAlso ?ortholog . # Get the ortholog protein\n  OPTIONAL {\n    ?annotation up:orthologousTo ?orthoDBGroup . # Try to get the OrthoDB group, if available\n  }\n}",
    "predicted_endpoint": "https://sparql.uniprot.org/sparql",
    "predicted_endpoint_equal_to_target_endpoint": true,
    "predicted_endpoint_in_federates_with": false,
    "predicted_endpoint_or_federated_endpoint": true,
    "run_id_langsmith": "57e0f4ac-f582-4332-9834-9886a457cbd3",
    "evaluation_timestamp": "2025-05-11T09:40:05.683553",
    "question_understanding_prompt_tokens": 277,
    "question_understanding_completion_tokens": 41,
    "question_understanding_total_tokens": 318,
    "sparql_query_construction_prompt_tokens": 2173,
    "sparql_query_construction_completion_tokens": 352,
    "sparql_query_construction_total_tokens": 2525,
    "is_valid_sparql": true,
    "sparql_syntax_error": "syntactically correct",
    "result_eval_f1_score": 0.0,
    "result_eval_precision": 0.0,
    "result_eval_recall": 0.0,
    "error_occured_at_endpoint": false,
    "predicted_query_result_is_empty": true,
    "ground_truth_query_result_is_empty": false,
    "error_occured_at_endpoint_message": "no error, but empty result"
  },
  {
    "resource": "https://sparql.uniprot.org/.well-known/sparql-examples/60",
    "natural_language_question": "Find human proteins that catalyze reactions where substrates or product have a <a href=\"https://www.ebi.ac.uk/chebi/searchId.do?chebiId=CHEBI:35516\">Cholestane skeleton</a>",
    "ground_truth_query": "PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX rh: <http://rdf.rhea-db.org/>\nPREFIX sachem: <http://bioinfo.uochb.cas.cz/rdf/v1.0/sachem#>\nPREFIX taxon: <http://purl.uniprot.org/taxonomy/>\nPREFIX up: <http://purl.uniprot.org/core/>\n\nSELECT\n  DISTINCT\n    ?protein\n    ?disease\n    ?rhea\n    ?chebi\n    ?omim\nWHERE {\n    # Find complete ChEBIs with a Cholestane skeleton, via the Czech Elixir node IDSM Sachem chemical substructure search.\n    SERVICE <https://idsm.elixir-czech.cz/sparql/endpoint/chebi> {\n      ?chebi sachem:substructureSearch [\n        sachem:query\n\"[C@]12(CCC3CCCC[C@]3(C)[C@@]1([H])CC[C@]1(C)[C@@]([H])([C@@](C)([H])CCCC(C)C)CC[C@@]21[H])[H]\"\n].\n   }\n   # Use the fact that UniProt catalytic activities are annotated using Rhea \n   # Mapping the found ChEBIs to Rhea reactions\n   SERVICE <https://sparql.rhea-db.org/sparql>{\n     ?rhea rh:side/rh:contains/rh:compound/rdfs:subClassOf ?chebi .\n   }\n   # Match the found Rhea reactions with human UniProtKB proteins\n   ?protein up:annotation/up:catalyticActivity/up:catalyzedReaction ?rhea .\n   ?protein up:organism taxon:9606 .\n   # Find only those human entries that have an annotated related disease, and optionaly map these to OMIM\n   ?protein up:annotation/up:disease ?disease .\n   OPTIONAL {\n     ?disease rdfs:seeAlso ?omim .\n     ?omim up:database <http://purl.uniprot.org/database/MIM>\n   }\n}",
    "target_endpoint": "https://sparql.uniprot.org/sparql/",
    "federates_with": [
      "https://idsm.elixir-czech.cz/sparql/endpoint/chebi",
      "https://sparql.rhea-db.org/sparql"
    ],
    "endpoint_set": "Uniprot",
    "file_path": "UniProt/60_enzymes_working_on_substrate_with_Cholestene_backbone.ttl",
    "predicted_query": "# https://sparql.uniprot.org/sparql\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX up: <http://purl.uniprot.org/core/>\nPREFIX taxon: <http://purl.uniprot.org/taxonomy/>\nPREFIX rhea: <http://rdf.rhea-db.org/>\nPREFIX chebi: <http://purl.obolibrary.org/obo/>\n\nSELECT DISTINCT ?protein ?proteinName ?reaction ?reactionEquation\nWHERE {\n  # Find human proteins\n  ?protein a up:Protein ;\n           up:organism taxon:9606 ; # Homo sapiens\n           rdfs:label ?proteinName .\n\n  # Federate with Rhea to find reactions catalyzed by the protein\n  SERVICE <https://sparql.rhea-db.org/sparql> {\n    ?reaction rhea:enzyme ?proteinUri ;\n              rhea:equation ?reactionEquation ;\n              rhea:has_participant ?participant .\n\n    # Federate with ChEBI to check if the substrate or product has a Cholestane skeleton\n    SERVICE <https://sparql.rhea-db.org/sparql> { #Using RheaDB sparql endpoint since it contains CHEBI ids\n      ?participant chebi:is_a chebi:CHEBI_35516 . # Cholestane skeleton\n    }\n    FILTER (STRSTARTS(STR(?proteinUri), STR(?protein))) # Filter to match the protein URI from UniProt\n  }\n}",
    "predicted_endpoint": "https://sparql.uniprot.org/sparql",
    "predicted_endpoint_equal_to_target_endpoint": true,
    "predicted_endpoint_in_federates_with": false,
    "predicted_endpoint_or_federated_endpoint": true,
    "run_id_langsmith": "952fac14-bbc8-47a0-84dd-6bc519398472",
    "evaluation_timestamp": "2025-05-11T09:40:34.303020",
    "question_understanding_prompt_tokens": 292,
    "question_understanding_completion_tokens": 38,
    "question_understanding_total_tokens": 330,
    "sparql_query_construction_prompt_tokens": 3494,
    "sparql_query_construction_completion_tokens": 657,
    "sparql_query_construction_total_tokens": 4151,
    "is_valid_sparql": true,
    "sparql_syntax_error": "syntactically correct",
    "result_eval_f1_score": 0.0,
    "result_eval_precision": 0.0,
    "result_eval_recall": 0.0,
    "error_occured_at_endpoint": false,
    "predicted_query_result_is_empty": true,
    "ground_truth_query_result_is_empty": false,
    "error_occured_at_endpoint_message": "no error, but empty result"
  },
  {
    "resource": "https://sparql.uniprot.org/.well-known/sparql-examples/70_enzymes_interacting_with_molecules_similar_to_dopamine",
    "natural_language_question": "Look for enzymes catalyzing reactions with molecules similar to dopamine.",
    "ground_truth_query": "PREFIX CHEBI: <http://purl.obolibrary.org/obo/CHEBI_>\nPREFIX rh: <http://rdf.rhea-db.org/>\nPREFIX sachem: <http://bioinfo.uochb.cas.cz/rdf/v1.0/sachem#>\nPREFIX up: <http://purl.uniprot.org/core/>\n\nSELECT\n  ?protein\n  ?rhea\n  ?chebi\nWHERE {\n  # Use the smiles of dopamine CHEBI:18243\n  SERVICE <https://idsm.elixir-czech.cz/sparql/endpoint/chebi>{\n    ?chebi sachem:similarCompoundSearch [\n      sachem:query \"NCCc1ccc(O)c(O)c1\" ] .\n  }\n  GRAPH<https://sparql.rhea-db.org/rhea>{\n    ?rhea rh:side/rh:contains/rh:compound ?compound .\n    ?compound (rh:chebi|(rh:reactivePart/rh:chebi)|(rh:underlyingChebi/rh:chebi)) ?chebi .\n  }\n  ?protein up:reviewed true ;\n    up:annotation ?caa .\n  ?caa up:catalyticActivity/up:catalyzedReaction ?rhea .\n}",
    "target_endpoint": "https://sparql.uniprot.org/sparql/",
    "federates_with": [
      "https://idsm.elixir-czech.cz/sparql/endpoint/chebi"
    ],
    "endpoint_set": "Uniprot",
    "file_path": "UniProt/70_enzymes_interacting_with_molecules_similar_to_dopamine.ttl",
    "predicted_query": "# https://sparql.rhea-db.org/sparql\nPREFIX rhea: <http://rdf.rhea-db.org/>\nPREFIX chebi: <http://purl.obolibrary.org/obo/CHEBI_>\nPREFIX uniprot: <http://purl.uniprot.org/core/>\n\nSELECT DISTINCT ?enzyme ?reaction\nWHERE {\n  # Find reactions in Rhea that involve dopamine as a participant\n  SERVICE <https://sparql.rhea-db.org/sparql> {\n    ?reaction rhea: Rhea-has-participant chebi:18253 .  # CHEBI ID for dopamine\n  }\n\n  # Find the enzyme that catalyzes the reaction.  Try to find it directly in Rhea first.\n  SERVICE <https://sparql.rhea-db.org/sparql> {\n    ?reaction rhea:rheaId ?rheaId .\n    OPTIONAL {\n      ?reaction rhea:enzyme ?enzyme .\n    }\n  }\n  \n  # If the enzyme isn't directly linked in Rhea, try linking to UniProt via Rhea xref.\n  OPTIONAL {\n    SERVICE <https://sparql.rhea-db.org/sparql> {\n      ?reaction rhea:xref ?uniprotResource .\n      FILTER CONTAINS(STR(?uniprotResource), \"uniprot\")\n    }\n    \n    SERVICE <https://sparql.uniprot.org/sparql> {\n      ?uniprotResource uniprot:enzyme ?enzyme .\n    }\n  }\n  \n  # Filter out reactions that don't have an enzyme annotation\n  FILTER (BOUND(?enzyme))\n}",
    "predicted_endpoint": "https://sparql.rhea-db.org/sparql",
    "predicted_endpoint_equal_to_target_endpoint": false,
    "predicted_endpoint_in_federates_with": false,
    "predicted_endpoint_or_federated_endpoint": false,
    "run_id_langsmith": "8361521e-d1d6-485e-9720-01292a9b568d",
    "evaluation_timestamp": "2025-05-11T09:40:50.166776",
    "question_understanding_prompt_tokens": 251,
    "question_understanding_completion_tokens": 27,
    "question_understanding_total_tokens": 278,
    "sparql_query_construction_prompt_tokens": 2433,
    "sparql_query_construction_completion_tokens": 509,
    "sparql_query_construction_total_tokens": 2942,
    "is_valid_sparql": false,
    "sparql_syntax_error": "Lexical error at line 10, column 41.  Encountered: '32' (32), after prefix \"Rhea-has-participant\"",
    "result_eval_f1_score": 0.0,
    "result_eval_precision": 0.0,
    "result_eval_recall": 0.0,
    "error_occured_at_endpoint": false,
    "predicted_query_result_is_empty": true,
    "ground_truth_query_result_is_empty": false,
    "error_occured_at_endpoint_message": "syntactically not correct"
  },
  {
    "resource": "https://sparql.uniprot.org/.well-known/sparql-examples/38",
    "natural_language_question": "For the human entry P05067 (Amyloid-beta precursor protein) find the gene start ends in WikiData",
    "ground_truth_query": "PREFIX p: <http://www.wikidata.org/prop/>\nPREFIX pq: <http://www.wikidata.org/prop/qualifier/>\nPREFIX ps: <http://www.wikidata.org/prop/statement/>\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX uniprotkb: <http://purl.uniprot.org/uniprot/>\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\n\n\nSELECT \n\t?protein \n\t?begin\n\t?end\n\t?chromosome\n\t?assembly\nWHERE {\n    {\n        BIND(uniprotkb:P05067 AS ?proteinIRI)\n        BIND (SUBSTR(STR(?proteinIRI), STRLEN(STR(uniprotkb:))+1) AS ?protein)\n    }\n    SERVICE <https://query.wikidata.org/sparql> {\n        ?wp wdt:P352 ?protein ;\n            wdt:P702 ?wg . \n        ?wg p:P644   ?wgss .\n        ?wgss ps:P644        ?begin ;\n          pq:P1057/wdt:P1813 ?chromosome ;\n          pq:P659/rdfs:label ?assembly .\n        ?wg p:P645 ?wgse .\n        ?wgse ps:P645        ?end ;\n          pq:P1057/wdt:P1813 ?chromosome ;\n          pq:P659/rdfs:label ?assembly .\n        FILTER(lang(?assembly) = \"en\")\n  } \n}",
    "target_endpoint": "https://sparql.uniprot.org/sparql/",
    "federates_with": [
      "https://query.wikidata.org/sparql"
    ],
    "endpoint_set": "Uniprot",
    "file_path": "UniProt/38_find_gene_region_in_wikidata_for_known_entry.ttl",
    "predicted_query": "# https://sparql.uniprot.org/sparql\nPREFIX up: <http://purl.uniprot.org/core/>\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX wd: <http://www.wikidata.org/entity/>\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\n\nSELECT ?geneStart ?geneEnd\nWHERE {\n  # Find the UniProt entry for P05067 and link to Wikidata\n  SERVICE <https://sparql.uniprot.org/sparql> {\n    ?protein a up:Protein .\n    ?protein up:accession \"P05067\" .\n    ?protein rdfs:seeAlso ?wikidataLink .\n    FILTER (CONTAINS(str(?wikidataLink), \"wikidata.org\")) # Ensure it's a Wikidata link\n    BIND(IRI(REPLACE(str(?wikidataLink), \"^.*Q\", \"wd:Q\")) AS ?gene) # Extract Wikidata QID\n  }\n\n  # Query WikiData for gene start and end positions\n  SERVICE <https://query.wikidata.org/sparql> {\n    ?gene wdt:P637 ?geneStart .  # Gene start position (P637)\n    ?gene wdt:P638 ?geneEnd .    # Gene end position (P638)\n  }\n}",
    "predicted_endpoint": "https://sparql.uniprot.org/sparql",
    "predicted_endpoint_equal_to_target_endpoint": true,
    "predicted_endpoint_in_federates_with": false,
    "predicted_endpoint_or_federated_endpoint": true,
    "run_id_langsmith": "4c1bb980-5e4a-4705-91d2-a46ba74160a0",
    "evaluation_timestamp": "2025-05-11T09:41:00.302585",
    "question_understanding_prompt_tokens": 264,
    "question_understanding_completion_tokens": 52,
    "question_understanding_total_tokens": 316,
    "sparql_query_construction_prompt_tokens": 2813,
    "sparql_query_construction_completion_tokens": 483,
    "sparql_query_construction_total_tokens": 3296,
    "is_valid_sparql": true,
    "sparql_syntax_error": "syntactically correct",
    "result_eval_f1_score": 0.0,
    "result_eval_precision": 0.0,
    "result_eval_recall": 0.0,
    "error_occured_at_endpoint": false,
    "predicted_query_result_is_empty": true,
    "ground_truth_query_result_is_empty": false,
    "error_occured_at_endpoint_message": "no error, but empty result"
  },
  {
    "resource": "https://sparql.uniprot.org/.well-known/sparql-examples/117_biosodafrontend_glioblastoma_orthologs_rat",
    "natural_language_question": "Which are the proteins associated with glioblastoma and the orthologs expressed in the rat brain?",
    "ground_truth_query": "PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX obo: <http://purl.obolibrary.org/obo/>\nPREFIX orth: <http://purl.org/net/orth#>\nPREFIX sio: <http://semanticscience.org/resource/>\nPREFIX taxon: <http://purl.uniprot.org/taxonomy/>\nPREFIX up: <http://purl.uniprot.org/core/>\nPREFIX lscr: <http://purl.org/lscr#>\nPREFIX genex: <http://purl.org/genex#>\nSELECT DISTINCT ?protein ?orthologous_protein ?gene ?annotation_text WHERE {\n  {\n  \tSELECT ?protein ?annotation_text WHERE {\n      ?protein a up:Protein ;\n          up:organism taxon:9606 ;\n          up:annotation ?annotation .\n      ?annotation rdfs:comment ?annotation_text .\n      ?annotation a up:Disease_Annotation .\n      FILTER CONTAINS (?annotation_text, \"glioblastoma\")\n    }\n  }\n  SERVICE <https://sparql.omabrowser.org/sparql/> {\n    SELECT ?orthologous_protein ?protein ?gene WHERE {\n    ?protein_OMA a orth:Protein .\n    ?orthologous_protein a orth:Protein .\n    ?cluster a orth:OrthologsCluster .\n    ?cluster orth:hasHomologousMember ?node1 .\n    ?cluster\n    orth:hasHomologousMember ?node2 .\n    ?node2 orth:hasHomologousMember* ?protein_OMA .\n    ?node1 orth:hasHomologousMember* ?orthologous_protein .\n    ?orthologous_protein orth:organism/obo:RO_0002162 taxon:10116 . # rattus norvegicus\n    ?orthologous_protein sio:SIO_010079 ?gene .\n    ?protein_OMA lscr:xrefUniprot ?protein .\n    FILTER(?node1 != ?node2)\n\t\t}\n\t}\n  SERVICE <https://www.bgee.org/sparql/> {\n    ?gene genex:isExpressedIn ?a .\n    ?a rdfs:label \"brain\" .\n    ?gene orth:organism ?s . \n    ?s obo:RO_0002162 taxon:10116.\n\t}\n}",
    "target_endpoint": "https://sparql.uniprot.org/sparql",
    "federates_with": [
      "https://sparql.omabrowser.org/sparql/",
      "https://www.bgee.org/sparql/"
    ],
    "endpoint_set": "Uniprot",
    "file_path": "UniProt/117_biosodafrontend_glioblastoma_orthologs_rat.ttl",
    "predicted_query": "# https://sparql.uniprot.org/sparql\nPREFIX up: <http://purl.uniprot.org/core/>\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX taxon: <http://purl.uniprot.org/taxonomy/>\n\nSELECT DISTINCT ?protein ?proteinName ?ortholog ?orthologName\nWHERE {\n  # Find proteins associated with glioblastoma\n  {\n    SELECT DISTINCT ?protein ?proteinName WHERE {\n      ?protein a up:Protein .\n      ?protein up:annotation ?annotation .\n      ?annotation a up:Disease_Annotation .\n      ?annotation rdfs:seeAlso <http://purl.uniprot.org/diseases/2566> . # Glioma URI\n      ?protein rdfs:label ?proteinName .\n    }\n  }\n\n  # Find orthologs of those proteins in rat brain using a federated query to UniProt\n  SERVICE <https://sparql.uniprot.org/sparql> {\n    SELECT DISTINCT ?ortholog ?orthologName WHERE {\n      ?ortholog a up:Protein .\n      ?ortholog up:sequence ?sequence .\n      ?sequence up:organism taxon:10116 .  # Rat taxonomy URI\n      ?ortholog rdfs:label ?orthologName .\n      FILTER EXISTS {\n        ?ortholog up:gene ?gene .\n        ?gene up:orfName ?orfName\n      }\n    }\n  }\n}",
    "predicted_endpoint": "https://sparql.uniprot.org/sparql",
    "predicted_endpoint_equal_to_target_endpoint": true,
    "predicted_endpoint_in_federates_with": false,
    "predicted_endpoint_or_federated_endpoint": true,
    "run_id_langsmith": "60b68fb6-6554-4b0d-905e-04cb13db3860",
    "evaluation_timestamp": "2025-05-11T09:41:28.154056",
    "question_understanding_prompt_tokens": 256,
    "question_understanding_completion_tokens": 37,
    "question_understanding_total_tokens": 293,
    "sparql_query_construction_prompt_tokens": 2544,
    "sparql_query_construction_completion_tokens": 509,
    "sparql_query_construction_total_tokens": 3053,
    "is_valid_sparql": true,
    "sparql_syntax_error": "syntactically correct",
    "result_eval_f1_score": 0.0,
    "result_eval_precision": 0.0,
    "result_eval_recall": 0.0,
    "error_occured_at_endpoint": false,
    "predicted_query_result_is_empty": true,
    "ground_truth_query_result_is_empty": false,
    "error_occured_at_endpoint_message": "no error, but empty result"
  },
  {
    "resource": "https://sparql.uniprot.org/.well-known/sparql-examples/116_biosodafrontend_rabit_mouse_orthologs",
    "natural_language_question": "Rabbit's proteins encoded by genes that are orthologous to Mouse's HBB-Y gene and their cross reference links to Uniprot",
    "ground_truth_query": "PREFIX lscr: <http://purl.org/lscr#>\nPREFIX orth: <http://purl.org/net/orth#>\nPREFIX up: <http://purl.uniprot.org/core/>\nPREFIX obo: <http://purl.obolibrary.org/obo/>\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nSELECT DISTINCT ?PROTEIN_1 ?PROTEIN_2 ?UNIPROT_XREF_1 ?UNIPROT_XREF_2 WHERE {\n\t?taxon_1 up:commonName 'Mouse' .\n\t?taxon_2 up:commonName 'Rabbit' .\n\tSERVICE <https://sparql.omabrowser.org/sparql/> {\n\t\t?cluster a orth:OrthologsCluster .\n\t\t?cluster orth:hasHomologousMember ?node1 .\n\t\t?cluster orth:hasHomologousMember ?node2 .\n\t\t?node2 orth:hasHomologousMember* ?PROTEIN_2 .\n\t\t?node1 orth:hasHomologousMember* ?PROTEIN_1 .\n\t\t?PROTEIN_1 a orth:Protein .\n\t\t?PROTEIN_1 orth:organism/obo:RO_0002162 ?taxon_1 ;\n\t\t\trdfs:label 'HBB-Y' ;\n\t\t\tlscr:xrefUniprot ?UNIPROT_XREF_1 .\n\t\t?PROTEIN_2 a orth:Protein .\n\t\t?PROTEIN_2 orth:organism/obo:RO_0002162 ?taxon_2 .\n\t\t?PROTEIN_2 lscr:xrefUniprot ?UNIPROT_XREF_2 .\n\t\tFILTER ( ?node1 != ?node2 )\n\t}\n}",
    "target_endpoint": "https://sparql.uniprot.org/sparql",
    "federates_with": [
      "https://sparql.omabrowser.org/sparql/"
    ],
    "endpoint_set": "Uniprot",
    "file_path": "UniProt/116_biosodafrontend_rabit_mouse_orthologs.ttl",
    "predicted_query": "# https://sparql.uniprot.org/sparql\nPREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX up: <http://purl.uniprot.org/core/>\nPREFIX taxon: <http://purl.uniprot.org/taxonomy/>\n\nSELECT DISTINCT ?rabbitProtein ?uniprotCrossReference\nWHERE {\n  # Find the Mouse gene HBB-Y\n  SERVICE <https://sparql.uniprot.org/sparql> {\n    VALUES ?mouseTaxon { taxon:10090 }  # Mouse NCBI Taxonomy ID\n    ?mouseGene a up:Gene .\n    ?mouseGene rdfs:label \"HBB-Y\" . # Mouse gene name\n    ?mouseGene up:organism ?mouseTaxon .\n    ?mouseGene up:encodedBy ?mouseProtein .\n  }\n\n  # Find orthologous genes in Rabbit\n  SERVICE <https://sparql.uniprot.org/sparql> {\n    VALUES ?rabbitTaxon { taxon:9986 } # Rabbit NCBI Taxonomy ID\n    ?rabbitGene up:orthologousTo ?mouseGene .\n    ?rabbitGene a up:Gene .\n    ?rabbitGene up:organism ?rabbitTaxon .\n    ?rabbitGene up:encodedBy ?rabbitProtein .\n    \n    # Get UniProt cross-references for the Rabbit protein\n    ?rabbitProtein up:database ?uniprotCrossReference .\n  }\n}",
    "predicted_endpoint": "https://sparql.uniprot.org/sparql",
    "predicted_endpoint_equal_to_target_endpoint": true,
    "predicted_endpoint_in_federates_with": false,
    "predicted_endpoint_or_federated_endpoint": true,
    "run_id_langsmith": "b7a383f7-bfdd-4c03-9747-74b0ae15f51b",
    "evaluation_timestamp": "2025-05-11T09:41:40.763352",
    "question_understanding_prompt_tokens": 268,
    "question_understanding_completion_tokens": 49,
    "question_understanding_total_tokens": 317,
    "sparql_query_construction_prompt_tokens": 2979,
    "sparql_query_construction_completion_tokens": 0,
    "sparql_query_construction_total_tokens": 2979,
    "is_valid_sparql": true,
    "sparql_syntax_error": "syntactically correct",
    "result_eval_f1_score": 0.0,
    "result_eval_precision": 0.0,
    "result_eval_recall": 0.0,
    "error_occured_at_endpoint": false,
    "predicted_query_result_is_empty": true,
    "ground_truth_query_result_is_empty": false,
    "error_occured_at_endpoint_message": "no error, but empty result"
  },
  {
    "resource": "https://sparql.uniprot.org/.well-known/sparql-examples/29",
    "natural_language_question": "Use <a href=\"http://allie.dbcls.jp/\">ALLIE</a> a service for Abbreviation / Long Form in Japanese and English to search in UniProt using Japanese.",
    "ground_truth_query": "PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX up: <http://purl.uniprot.org/core/>\n\nSELECT ?protein ?englishLabelStr\nWHERE {\n    SERVICE <https://data.allie.dbcls.jp/sparql>{\n        ?x rdfs:label \"アミロイド前駆体タンパク質\"@ja ;\n            rdfs:label ?englishLabel .\n        FILTER(lang(?englishLabel) = \"en\")\n    }\n    BIND (STR(?englishLabel) AS ?englishLabelStr)\n    ?protein a up:Protein .\n    {\n        ?protein (up:recommendedName|up:alternativeName) ?structuredName .\n    }\n    UNION\n    {\n        VALUES(?partType){(up:domain) (up:component)}\n            ?protein ?partType ?part .\n        ?part (up:recommendedName|up:alternativeName) ?structuredName .\n    }\n    ?structuredName ?anyKindOfName  ?englishLabelStr .\n    ?anyKindOfName rdfs:subPropertyOf up:structuredNameType .\n}",
    "target_endpoint": "https://sparql.uniprot.org/sparql/",
    "federates_with": [
      "https://data.allie.dbcls.jp/sparql"
    ],
    "endpoint_set": "Uniprot",
    "file_path": "UniProt/29_search_uniprot_in_japanese_with_allie.ttl",
    "predicted_query": "# https://sparql.uniprot.org/sparql\n# The user wants to use ALLIE (Abbreviation / Long Form in Japanese and English)\n# to search UniProt using Japanese. Since ALLIE is not a SPARQL endpoint,\n# we cannot directly query it. However, the user's intention is to search UniProt\n# using Japanese terms/abbreviations.  We'll assume the user has a Japanese term\n# they want to search with.  Since we don't have the actual Japanese term, we'll\n# use a placeholder and demonstrate how the query would work if we had it.\n# We'll search for proteins in UniProt that have annotations containing the\n# (hypothetical) Japanese term.\n\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX up: <http://purl.uniprot.org/core/>\n\nSELECT ?protein ?proteinName ?annotation\nWHERE {\n  # Replace \"仮の日本語用語\" with the actual Japanese term from ALLIE\n  BIND (\"仮の日本語用語\" AS ?japaneseTerm)\n\n  SERVICE <https://sparql.uniprot.org/sparql> {\n    ?protein a up:Protein .\n    ?protein rdfs:label ?proteinName . # Get the protein name\n\n    # Search for annotations that contain the Japanese term.\n    # This assumes that annotations might contain text in Japanese.\n    ?protein up:annotation ?annotation .\n    FILTER (CONTAINS(STR(?annotation), ?japaneseTerm))\n  }\n}",
    "predicted_endpoint": "https://sparql.uniprot.org/sparql",
    "predicted_endpoint_equal_to_target_endpoint": true,
    "predicted_endpoint_in_federates_with": false,
    "predicted_endpoint_or_federated_endpoint": true,
    "run_id_langsmith": "ce3109e2-9726-4c02-b48d-bb10c7e8f197",
    "evaluation_timestamp": "2025-05-11T09:41:51.354027",
    "question_understanding_prompt_tokens": 278,
    "question_understanding_completion_tokens": 22,
    "question_understanding_total_tokens": 300,
    "sparql_query_construction_prompt_tokens": 1898,
    "sparql_query_construction_completion_tokens": 380,
    "sparql_query_construction_total_tokens": 2278,
    "is_valid_sparql": true,
    "sparql_syntax_error": "syntactically correct",
    "result_eval_f1_score": 0.0,
    "result_eval_precision": 0.0,
    "result_eval_recall": 0.0,
    "error_occured_at_endpoint": true,
    "predicted_query_result_is_empty": true,
    "ground_truth_query_result_is_empty": true,
    "error_occured_at_endpoint_message": "Query timed out after 610 seconds (enforced by asyncio). Results may be partial."
  },
  {
    "resource": "https://sparql.rhea-db.org/.well-known/sparql-examples/94_Select_all_approved_reactions_with_CHEBI_or_one_of_its_descendant_optional_UniProtKB_reviewed_EC",
    "natural_language_question": "Select all approved reactions with CHEBI:17815 (a 1,2-diacyl-sn-glycerol) or one of its descendant. Display links to UniProtKB/Swiss-Prot entries via EC numbers if the link rhea-ec exists.",
    "ground_truth_query": "PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX rh:<http://rdf.rhea-db.org/>\nPREFIX CHEBI:<http://purl.obolibrary.org/obo/CHEBI_>\nPREFIX up:<http://purl.uniprot.org/core/>\n\nSELECT\n  distinct\n    ?reaction\n    ?enzyme\n    (count(distinct ?protein) as ?proteinCount)\nWHERE {\n  ?reaction rdfs:subClassOf rh:Reaction .\n  ?reaction rh:status rh:Approved .\n  ?reaction rh:side ?reactionSide .\n\n  OPTIONAL {?reaction rh:ec ?enzyme .\n    SERVICE <https://sparql.uniprot.org/sparql> {\n      ?protein up:reviewed true .\n      ?protein up:enzyme ?enzyme.\n    }\n  } .\n  ?reactionSide rh:contains ?participant .\n  ?participant rh:compound ?compound .\n  ?compound rh:chebi ?chebi .\n  ?chebi rdfs:subClassOf* CHEBI:17815 .\n}\nGROUP BY ?reaction ?enzyme\nORDER BY ?reaction\nLIMIT 985915",
    "target_endpoint": "https://sparql.rhea-db.org/sparql",
    "federates_with": [
      "https://sparql.uniprot.org/sparql"
    ],
    "endpoint_set": "Rhea",
    "file_path": "Rhea/94_Select_all_approved_reactions_with_CHEBI_or_one_of_its_descendant_optional_UniProtKB_reviewed_EC.ttl",
    "predicted_query": "# https://sparql.rhea-db.org/sparql\nPREFIX rhea: <http://rdf.rhea-db.org/>\nPREFIX chebi: <http://purl.obolibrary.org/obo/CHEBI_>\nPREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX up: <http://purl.uniprot.org/core/>\n\nSELECT DISTINCT ?reaction ?reactionLabel ?uniprotLink\nWHERE {\n  # Find CHEBI terms that are 1,2-diacyl-sn-glycerol or a subclass\n  {\n    BIND(chebi:17815 AS ?chebiTerm)\n  }\n  UNION\n  {\n    ?chebiTerm rdfs:subClassOf chebi:17815 .\n  }\n\n  # Find reactions that have ?chebiTerm as a participant and are approved\n  ?reaction rhea:hasParticipant ?chebiTerm .\n  ?reaction rhea:status rhea:Approved .\n  ?reaction rdfs:label ?reactionLabel .\n\n  # Optional: Find EC numbers associated with the reaction and link to UniProt\n  OPTIONAL {\n    ?reaction rhea:ec ?ecNumber .\n    SERVICE <https://sparql.uniprot.org/sparql> {\n      ?uniprotLink up:classifiedWith ?ecNumber .\n    }\n  }\n}",
    "predicted_endpoint": "https://sparql.rhea-db.org/sparql",
    "predicted_endpoint_equal_to_target_endpoint": true,
    "predicted_endpoint_in_federates_with": false,
    "predicted_endpoint_or_federated_endpoint": true,
    "run_id_langsmith": "fe2a6572-8d71-4363-afd3-8140e8ca89d6",
    "evaluation_timestamp": "2025-05-11T09:52:28.246861",
    "question_understanding_prompt_tokens": 294,
    "question_understanding_completion_tokens": 73,
    "question_understanding_total_tokens": 367,
    "sparql_query_construction_prompt_tokens": 2097,
    "sparql_query_construction_completion_tokens": 619,
    "sparql_query_construction_total_tokens": 2716,
    "is_valid_sparql": true,
    "sparql_syntax_error": "syntactically correct",
    "result_eval_f1_score": 0.0,
    "result_eval_precision": 0.0,
    "result_eval_recall": 0.0,
    "error_occured_at_endpoint": false,
    "predicted_query_result_is_empty": true,
    "ground_truth_query_result_is_empty": false,
    "error_occured_at_endpoint_message": "no error, but empty result"
  },
  {
    "resource": "https://sparql.rhea-db.org/.well-known/sparql-examples/11",
    "natural_language_question": "Distribution of reactions according to the first class of the enzyme classification (federated query)",
    "ground_truth_query": "PREFIX ec: <http://purl.uniprot.org/enzyme/>\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX rh: <http://rdf.rhea-db.org/>\nPREFIX skos: <http://www.w3.org/2004/02/skos/core#>\n\n# Query 11\n# Retrieve the count of reactions mapped to each level (main class) of the enzyme classification\n#\n# This query mimics the Filter section of the Rhea website (Browse all reactions)\n# https://www.rhea-db.org/rhea?query=\nSELECT ?ecClass (STR(?ecName) AS ?ecClassName) (COUNT(?rhea) AS ?rheaCount)\nWHERE {\n  SERVICE <https://sparql.uniprot.org/sparql> {\n    VALUES (?ecClass) { (ec:1.-.-.-)(ec:2.-.-.-)(ec:3.-.-.-)(ec:4.-.-.-)(ec:5.-.-.-) (ec:6.-.-.-) (ec:7.-.-.-)}\n    ?ecNumber rdfs:subClassOf ?ecClass .\n    ?ecClass skos:prefLabel ?ecName .\n  }\n  ?rhea rdfs:subClassOf rh:Reaction .\n  ?rhea rh:ec ?ecNumber .\n} GROUP BY ?ecClass ?ecName",
    "target_endpoint": "https://sparql.rhea-db.org/sparql",
    "federates_with": [
      "https://sparql.uniprot.org/sparql"
    ],
    "endpoint_set": "Rhea",
    "file_path": "Rhea/11.ttl",
    "predicted_query": "# https://sparql.uniprot.org/sparql\n# Find the distribution of reactions according to the first class of the enzyme classification\n\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX up: <http://purl.uniprot.org/core/>\nPREFIX uniprot: <http://purl.uniprot.org/uniprot/>\n\nSELECT ?enzymeClass (COUNT(DISTINCT ?reaction) AS ?reactionCount)\nWHERE {\n  # Get UniProt entries with EC numbers\n  SERVICE <https://sparql.uniprot.org/sparql> {\n    ?protein a up:Protein .\n    ?protein up:annotation ?anno .\n    ?anno rdf:type up:EC_Annotation .\n    ?anno rdfs:label ?ecNumber .\n    BIND(SUBSTR(STR(?ecNumber), 1, 1) AS ?enzymeClass) # Extract the first digit of the EC number\n  }\n  \n  # Find corresponding Rhea reactions (assuming a direct link exists via EC number)\n  SERVICE <https://sparql.rhea-db.org/sparql> {\n    ?reaction rdfs:label ?rheaLabel . # Assuming rdfs:label holds the reaction name\n    ?reaction <http://purl.obolibrary.org/obo/RO_0002333> ?enzyme . # Assuming RO_0002333 relates to enzyme\n    ?enzyme rdfs:label ?ecNumber . # Assuming rdfs:label holds the EC number\n    FILTER(STRSTARTS(?ecNumber, ?enzymeClass)) # Filter reactions based on the first digit of the EC number\n  }\n}\nGROUP BY ?enzymeClass\nORDER BY ?enzymeClass",
    "predicted_endpoint": "https://sparql.uniprot.org/sparql",
    "predicted_endpoint_equal_to_target_endpoint": false,
    "predicted_endpoint_in_federates_with": true,
    "predicted_endpoint_or_federated_endpoint": true,
    "run_id_langsmith": "eb82180a-db03-4942-8a1a-edbc881111ac",
    "evaluation_timestamp": "2025-05-11T09:52:46.836783",
    "question_understanding_prompt_tokens": 256,
    "question_understanding_completion_tokens": 26,
    "question_understanding_total_tokens": 282,
    "sparql_query_construction_prompt_tokens": 1370,
    "sparql_query_construction_completion_tokens": 0,
    "sparql_query_construction_total_tokens": 1370,
    "is_valid_sparql": false,
    "sparql_syntax_error": "Line 14, column 11: Unresolved prefixed name: rdf:type",
    "result_eval_f1_score": 0.0,
    "result_eval_precision": 0.0,
    "result_eval_recall": 0.0,
    "error_occured_at_endpoint": false,
    "predicted_query_result_is_empty": true,
    "ground_truth_query_result_is_empty": false,
    "error_occured_at_endpoint_message": "syntactically not correct"
  },
  {
    "resource": "https://sparql.rhea-db.org/.well-known/sparql-examples/109_Distribution_of_reactions_according_to_the_first_level_of_enzyme_classification",
    "natural_language_question": "Distribution of reactions according to the first level of enzyme classification",
    "ground_truth_query": "\nPREFIX rh:<http://rdf.rhea-db.org/>\nPREFIX ec:<http://purl.uniprot.org/enzyme/>\nPREFIX rdfs:<http://www.w3.org/2000/01/rdf-schema#>\nPREFIX skos:<http://www.w3.org/2004/02/skos/core#>\n\nSELECT\n  ?ecClass\n  (str(?ecName) as ?ecClassName)\n  (count(?reaction) as ?reactionCount)\nWHERE\n{\n  SERVICE <http://sparql.uniprot.org/sparql> {\n    VALUES (?ecClass) { (ec:1.-.-.-)(ec:2.-.-.-)(ec:3.-.-.-)(ec:4.-.-.-)(ec:5.-.-.-) (ec:6.-.-.-) (ec:7.-.-.-) }\n    ?ecNumber rdfs:subClassOf ?ecClass .\n    ?ecClass skos:prefLabel ?ecName .\n  }\n  ?reaction rdfs:subClassOf rh:Reaction .\n  ?reaction rh:ec ?ecNumber .\n}\nGROUP BY ?ecClass ?ecName\n",
    "target_endpoint": "https://sparql.rhea-db.org/sparql",
    "federates_with": [
      "http://sparql.uniprot.org/sparql"
    ],
    "endpoint_set": "Rhea",
    "file_path": "Rhea/109_Distribution_of_reactions_according_to_the_first_level_of_enzyme_classification.ttl",
    "predicted_query": "# https://sparql.rhea-db.org/sparql\n# Query to find the distribution of reactions according to the first level of enzyme classification\n\nPREFIX rhea: <http://rdf.rhea-db.org/>\nPREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\n\nSELECT ?enzymeClass (COUNT(DISTINCT ?reaction) AS ?reactionCount)\nWHERE {\n  # Get Rhea reactions\n  SERVICE <https://sparql.rhea-db.org/sparql> {\n    ?reaction rdf:type rhea:Reaction .\n    ?reaction rhea:equation ?equation . #Not really needed, but good to have a reaction\n    OPTIONAL { ?reaction rhea:enzyme ?enzymeUri .}\n  }\n\n  # Get enzyme class from UniProt based on Rhea enzyme URI, and extract the first level EC number\n  SERVICE <https://sparql.uniprot.org/sparql> {\n      OPTIONAL {\n        ?enzymeUri rdfs:seeAlso ?uniprotUri .\n        ?uniprotUri rdfs:seeAlso ?ecUri .\n        FILTER (REGEX(str(?ecUri), \"^http://purl\\\\.uniprot\\\\.org/enzyme/\")) # Ensure it's an EC number URI\n        BIND(SUBSTR(STR(?ecUri), 39, 1) AS ?enzymeClass) # Extract the first level EC number\n      }\n  }\n  FILTER (BOUND(?enzymeClass)) # only keep results where enzymeClass is bound\n}\nGROUP BY ?enzymeClass\nORDER BY DESC(?reactionCount)",
    "predicted_endpoint": "https://sparql.rhea-db.org/sparql",
    "predicted_endpoint_equal_to_target_endpoint": true,
    "predicted_endpoint_in_federates_with": false,
    "predicted_endpoint_or_federated_endpoint": true,
    "run_id_langsmith": "efd44021-5e62-4c58-9b67-e12450b423a4",
    "evaluation_timestamp": "2025-05-11T09:52:54.263794",
    "question_understanding_prompt_tokens": 248,
    "question_understanding_completion_tokens": 24,
    "question_understanding_total_tokens": 272,
    "sparql_query_construction_prompt_tokens": 1540,
    "sparql_query_construction_completion_tokens": 480,
    "sparql_query_construction_total_tokens": 2020,
    "is_valid_sparql": true,
    "sparql_syntax_error": "syntactically correct",
    "result_eval_f1_score": 0.0,
    "result_eval_precision": 0.0,
    "result_eval_recall": 0.0,
    "error_occured_at_endpoint": false,
    "predicted_query_result_is_empty": true,
    "ground_truth_query_result_is_empty": false,
    "error_occured_at_endpoint_message": "no error, but empty result"
  },
  {
    "resource": "https://sparql.rhea-db.org/.well-known/sparql-examples/12",
    "natural_language_question": "Select all Rhea reactions linked to protein sequences (enzymes and transporters) in UniProtKB",
    "ground_truth_query": "PREFIX rh: <http://rdf.rhea-db.org/>\nPREFIX up: <http://purl.uniprot.org/core/>\n\n# Query 12\n# Select all Rhea reactions used to annotate enzyme sequences in UniProtKB\n# return the number of UniProtKB entries\n# Federated query using a service to UniProt SPARQL endpoint\n#\n# This query corresponds to the Rhea website query:\n# https://www.rhea-db.org/rhea?query=uniprot:*\n#\nSELECT ?uniprotCount ?rhea ?accession ?equation \nWHERE {\n  SERVICE <https://sparql.uniprot.org/sparql> { \n  \tSELECT ?rhea (count(?uniprot) as ?uniprotCount) {\n      ?uniprot up:annotation/up:catalyticActivity/up:catalyzedReaction ?rhea . \n  \t}\n  \tGROUP BY ?rhea\n  }\n  ?rhea rh:accession ?accession .\n  ?rhea rh:equation ?equation .\n}",
    "target_endpoint": "https://sparql.rhea-db.org/sparql",
    "federates_with": [
      "https://sparql.uniprot.org/sparql"
    ],
    "endpoint_set": "Rhea",
    "file_path": "Rhea/12.ttl",
    "predicted_query": "# https://sparql.rhea-db.org/sparql\nPREFIX rhea: <http://rdf.rhea-db.org/>\nPREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>\nPREFIX uniprot: <http://purl.uniprot.org/core/>\n\nSELECT DISTINCT ?rheaReaction\nWHERE {\n  # Select Rhea reactions\n  ?rheaReaction rdf:type rhea:Reaction .\n\n  # Find the enzyme associated with the Rhea reaction\n  ?rheaReaction rhea:equation ?equation .\n  ?equation rhea:enzyme ?enzyme .\n\n  # Link to UniProtKB using the enzyme's cross-reference\n  SERVICE <https://sparql.uniprot.org/sparql> {\n    ?enzyme uniprot:xref ?uniprotEntry .\n    ?uniprotEntry rdf:type uniprot:Protein .\n  }\n}",
    "predicted_endpoint": "https://sparql.rhea-db.org/sparql",
    "predicted_endpoint_equal_to_target_endpoint": true,
    "predicted_endpoint_in_federates_with": false,
    "predicted_endpoint_or_federated_endpoint": true,
    "run_id_langsmith": "7e45c1fd-8c9c-4ba7-b874-d241aa9fcff5",
    "evaluation_timestamp": "2025-05-11T09:53:06.927206",
    "question_understanding_prompt_tokens": 255,
    "question_understanding_completion_tokens": 30,
    "question_understanding_total_tokens": 285,
    "sparql_query_construction_prompt_tokens": 1792,
    "sparql_query_construction_completion_tokens": 0,
    "sparql_query_construction_total_tokens": 1792,
    "is_valid_sparql": true,
    "sparql_syntax_error": "syntactically correct",
    "result_eval_f1_score": 0.0,
    "result_eval_precision": 0.0,
    "result_eval_recall": 0.0,
    "error_occured_at_endpoint": false,
    "predicted_query_result_is_empty": true,
    "ground_truth_query_result_is_empty": false,
    "error_occured_at_endpoint_message": "no error, but empty result"
  },
  {
    "resource": "https://sparql.rhea-db.org/.well-known/sparql-examples/112_Total_number_of_reaction_ec_protein_links",
    "natural_language_question": "Total number of <reaction> <ec> <protein> links",
    "ground_truth_query": "PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX rh:<http://rdf.rhea-db.org/>\nPREFIX ec:<http://purl.uniprot.org/enzyme/>\nPREFIX up:<http://purl.uniprot.org/core/>\n\nSELECT\n  (count(?reaction) as ?reactionEcProteinLinkCount)\nWHERE {\n  ?reaction rdfs:subClassOf rh:Reaction .\n  ?reaction rh:ec ?enzyme\n  SERVICE <http://sparql.uniprot.org/sparql> {\n    ?protein up:reviewed true .\n    ?protein up:enzyme ?enzyme.\n  }\n}",
    "target_endpoint": "https://sparql.rhea-db.org/sparql",
    "federates_with": [
      "http://sparql.uniprot.org/sparql"
    ],
    "endpoint_set": "Rhea",
    "file_path": "Rhea/112_Total_number_of_reaction_ec_protein_links.ttl",
    "predicted_query": "# https://sparql.rhea-db.org/sparql\nPREFIX rhea: <http://rdf.rhea-db.org/>\nPREFIX uniprot: <http://purl.uniprot.org/core/>\nPREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>\n\nSELECT COUNT(*) AS ?totalLinks\nWHERE {\n  # Query Rhea for reactions\n  SERVICE <https://sparql.rhea-db.org/sparql> {\n    ?reaction a rhea:Reaction .\n  }\n\n  # Query UniProt for proteins and EC numbers\n  SERVICE <https://sparql.uniprot.org/sparql> {\n    ?protein a uniprot:Protein .\n    ?protein uniprot:annotation ?ecNumberAnnotation .\n    ?ecNumberAnnotation rdf:type uniprot:EC_Annotation .\n    ?ecNumberAnnotation uniprot:value ?ecNumber .\n  }\n\n  # Assuming a link between Rhea reactions and UniProt EC numbers exists,\n  # potentially through a shared EC number. This might require further refinement\n  # based on the actual data structure.  This is a simplification.\n  FILTER (STR(?reaction) = STR(?ecNumber)) # Attempt to link based on string matching.  This is a simplification and may not be accurate.\n}",
    "predicted_endpoint": "https://sparql.rhea-db.org/sparql",
    "predicted_endpoint_equal_to_target_endpoint": true,
    "predicted_endpoint_in_federates_with": false,
    "predicted_endpoint_or_federated_endpoint": true,
    "run_id_langsmith": "e081874f-6d3e-4caa-a6c3-a6b9b56b3f4a",
    "evaluation_timestamp": "2025-05-11T09:53:17.865154",
    "question_understanding_prompt_tokens": 248,
    "question_understanding_completion_tokens": 21,
    "question_understanding_total_tokens": 269,
    "sparql_query_construction_prompt_tokens": 2167,
    "sparql_query_construction_completion_tokens": 484,
    "sparql_query_construction_total_tokens": 2651,
    "is_valid_sparql": false,
    "sparql_syntax_error": "Encountered \" \"count\" \"COUNT \"\" at line 6, column 8.\nWas expecting one of:\n     ...\n     ...\n    \"distinct\" ...\n    \"reduced\" ...\n    \"(\" ...\n    \"*\" ...",
    "result_eval_f1_score": 0.0,
    "result_eval_precision": 0.0,
    "result_eval_recall": 0.0,
    "error_occured_at_endpoint": false,
    "predicted_query_result_is_empty": true,
    "ground_truth_query_result_is_empty": false,
    "error_occured_at_endpoint_message": "syntactically not correct"
  },
  {
    "resource": "https://sparql.rhea-db.org/.well-known/sparql-examples/19_draft_human_metabolome",
    "natural_language_question": "Generate a draft human metabolome",
    "ground_truth_query": "PREFIX chebislash: <http://purl.obolibrary.org/obo/chebi/>\nPREFIX rh: <http://rdf.rhea-db.org/>\nPREFIX taxon: <http://purl.uniprot.org/taxonomy/>\nPREFIX up: <http://purl.uniprot.org/core/>\n\nSELECT\n  ?uniprot ?mnemonic ?rhea ?chebi ?smiles ?inchiKey\nWHERE\n{\n  ?rhea rh:side/rh:contains/rh:compound ?compound .\n  ?compound (rh:chebi|(rh:reactivePart/rh:chebi)|(rh:underlyingChebi/rh:chebi)) ?chebi .\n  ?chebi chebislash:smiles ?smiles ;\n          chebislash:inchikey ?inchiKey .\n  SERVICE <https://sparql.uniprot.org/sparql> {\n     ?uniprot up:annotation/up:catalyticActivity/up:catalyzedReaction ?rhea ;\n                                             up:organism taxon:9606 ;\n                                             up:mnemonic ?mnemonic .\n\n   }\n}",
    "target_endpoint": "https://sparql.rhea-db.org/sparql/",
    "federates_with": [
      "https://sparql.uniprot.org/sparql"
    ],
    "endpoint_set": "Rhea",
    "file_path": "Rhea/19_draft_human_metabolome.ttl",
    "predicted_query": "# https://sparql.uniprot.org/sparql\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX up: <http://purl.uniprot.org/core/>\nPREFIX taxon: <http://purl.uniprot.org/taxonomy/>\n\nSELECT DISTINCT ?metaboliteName ?metaboliteID ?proteinName ?geneName\nWHERE {\n  # Query UniProt for human proteins and related metabolites\n  SERVICE <https://sparql.uniprot.org/sparql> {\n    ?protein a up:Protein .\n    ?protein up:organism taxon:9606 .  # Filter for Homo sapiens (human)\n    ?protein rdfs:label ?proteinName .\n    \n    # Assuming some relation between protein and metabolite exists, e.g., enzyme catalyzing a reaction\n    # Replace with the actual property if known.  This is a placeholder.\n    ?protein up:annotation ?annotation .\n    ?annotation rdfs:comment ?metaboliteName . #Assumes metabolite name is in annotation comment\n    BIND(STRBEFORE(?metaboliteName, \" \") AS ?metaboliteID) #Extracting metabolite ID\n    \n    OPTIONAL { ?protein up:encodedBy ?gene . ?gene rdfs:label ?geneName . }\n  }\n  \n  #Potentially query RheaDB for reactions involving human proteins and metabolites\n  SERVICE <https://sparql.rhea-db.org/sparql> {\n      #This part is highly speculative and requires knowledge of RheaDB schema\n      #FILTER (CONTAINS(STR(?reaction), ?metaboliteID))\n  }\n  \n  #Potentially query SwissLipids for lipid metabolites\n  SERVICE <https://sparql.swisslipids.org/sparql/> {\n      #This part is highly speculative and requires knowledge of SwissLipids schema\n      #FILTER (CONTAINS(STR(?lipid), ?metaboliteName))\n  }\n}",
    "predicted_endpoint": "https://sparql.uniprot.org/sparql",
    "predicted_endpoint_equal_to_target_endpoint": false,
    "predicted_endpoint_in_federates_with": true,
    "predicted_endpoint_or_federated_endpoint": true,
    "run_id_langsmith": "a1d791d9-1d66-412a-965b-48ddcdc15eb7",
    "evaluation_timestamp": "2025-05-11T09:53:27.589504",
    "question_understanding_prompt_tokens": 245,
    "question_understanding_completion_tokens": 20,
    "question_understanding_total_tokens": 265,
    "sparql_query_construction_prompt_tokens": 1305,
    "sparql_query_construction_completion_tokens": 0,
    "sparql_query_construction_total_tokens": 1305,
    "is_valid_sparql": true,
    "sparql_syntax_error": "syntactically correct",
    "result_eval_f1_score": 0.0,
    "result_eval_precision": 0.0,
    "result_eval_recall": 0.0,
    "error_occured_at_endpoint": true,
    "predicted_query_result_is_empty": true,
    "ground_truth_query_result_is_empty": true,
    "error_occured_at_endpoint_message": "QueryBadFormed: A bad request has been sent to the endpoint: probably the SPARQL query is badly formed."
  },
  {
    "resource": "https://sparql.rhea-db.org/.well-known/sparql-examples/20_search_chemical_names_in_japanese",
    "natural_language_question": "Search for Chemical names starting in Japanese, translated to english using allie",
    "ground_truth_query": "PREFIX oboInOwl: <http://www.geneontology.org/formats/oboInOwl#>\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\n\nSELECT\n*\nWHERE {\nSERVICE <https://data.allie.dbcls.jp/sparql>{\n        ?x rdfs:label \"1,2,4-トリクロロベンゼン\"@ja ;\n            rdfs:label ?englishLabel .\n        FILTER(lang(?englishLabel) = \"en\")\n    }\n  BIND(STR(?englishLabel) AS ?englishLabelStr)\n  ?chebi rdfs:label|oboInOwl:hasSynonym ?englishLabelStr .\n}",
    "target_endpoint": "https://sparql.rhea-db.org/sparql/",
    "federates_with": [
      "https://data.allie.dbcls.jp/sparql"
    ],
    "endpoint_set": "Rhea",
    "file_path": "Rhea/20_search_chemical_names_in_japanese.ttl",
    "predicted_query": "# https://sparql.rhea-db.org/sparql\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX chebi: <http://purl.obolibrary.org/obo/CHEBI_>\n\nSELECT DISTINCT ?chebiName\nWHERE {\n  # Use Rhea DB as the primary endpoint and federate with ChEBI\n  SERVICE <https://sparql.rhea-db.org/sparql> {\n    # Find reactions involving chemical entities\n    ?reaction rdfs:label ?reactionLabel .\n    ?reaction rhea:equation ?equation .\n\n    # Extract ChEBI identifiers from the reaction equation\n    FILTER CONTAINS(?equation, \"CHEBI:\")\n    BIND(SUBSTR(STR(?equation), STRLEN(?equation) - (STRLEN(?equation) - (STRLEN(STRBEFORE(?equation, \"CHEBI:\")) + 6))), ?chebiID)\n\n    # Construct the full ChEBI URI\n    BIND(IRI(CONCAT(\"http://purl.obolibrary.org/obo/CHEBI_\", ?chebiID)) AS ?chebiURI)\n\n    # Filter for reactions involving chemical entities with names starting with \"Japanese\"\n    SERVICE <https://sparql.uniprot.org/sparql> {\n      ?chebiURI rdfs:label ?chebiName .\n      FILTER STRSTARTS(LCASE(?chebiName), \"japanese\")\n    }\n  }\n}",
    "predicted_endpoint": "https://sparql.rhea-db.org/sparql",
    "predicted_endpoint_equal_to_target_endpoint": true,
    "predicted_endpoint_in_federates_with": false,
    "predicted_endpoint_or_federated_endpoint": true,
    "run_id_langsmith": "bf5c754a-5bca-4ebd-bc52-1ae3e62b62f0",
    "evaluation_timestamp": "2025-05-11T09:53:39.137064",
    "question_understanding_prompt_tokens": 252,
    "question_understanding_completion_tokens": 27,
    "question_understanding_total_tokens": 279,
    "sparql_query_construction_prompt_tokens": 1478,
    "sparql_query_construction_completion_tokens": 521,
    "sparql_query_construction_total_tokens": 1999,
    "is_valid_sparql": false,
    "sparql_syntax_error": "Line 11, column 15: Unresolved prefixed name: rhea:equation",
    "result_eval_f1_score": 0.0,
    "result_eval_precision": 0.0,
    "result_eval_recall": 0.0,
    "error_occured_at_endpoint": false,
    "predicted_query_result_is_empty": true,
    "ground_truth_query_result_is_empty": false,
    "error_occured_at_endpoint_message": "syntactically not correct"
  },
  {
    "resource": "https://sparql.rhea-db.org/.well-known/sparql-examples/117_Retrieve_parent_reactions_and_their_catalyzing_enzymes_for_a_metabolite_that_is_not_directly_involved_in_a_reaction",
    "natural_language_question": "Retrieve parent reactions (and their catalyzing enzymes) for a metabolite that is not directly involved in a reaction (ex: CHEBI:83137).",
    "ground_truth_query": "PREFIX CHEBI: <http://purl.obolibrary.org/obo/CHEBI_>\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX rh:<http://rdf.rhea-db.org/>\nPREFIX ec:<http://purl.uniprot.org/enzyme/>\nPREFIX up:<http://purl.uniprot.org/core/>\nPREFIX taxon:<http://purl.uniprot.org/taxonomy/>\nPREFIX keywords:<http://purl.uniprot.org/keywords/>\n\nSELECT\n  ?chebi\n  ?ecNumber\n  (count(?protein) as ?proteinCount)\n  ?reaction\n  ?equation\nWHERE {\n  ?reaction rdfs:subClassOf rh:Reaction .\n  ?reaction rh:status rh:Approved .\n  ?reaction rh:equation ?equation .\n  ?reaction rh:ec ?ecNumber .\n  ?reaction rh:side ?reactionSide .\n  ?reactionSide rh:contains ?participant .\n  ?participant rh:compound ?compound .\n  ?compound rh:chebi ?chebi .\n  CHEBI:83137 rdfs:subClassOf+ ?chebi.\n\n  SERVICE <https://sparql.uniprot.org/sparql> {\n  ?protein a up:Protein .\n  ?protein up:reviewed true .\n    {?protein up:enzyme ?ecNumber}\n  UNION\n    {?protein up:domain/up:enzyme ?ecNumber}\n  UNION\n    {?protein up:component/up:enzyme ?ecNumber} .\n  }\n} \nGROUP BY ?chebi ?ecNumber ?reaction ?equation",
    "target_endpoint": "https://sparql.rhea-db.org/sparql",
    "federates_with": [
      "https://sparql.uniprot.org/sparql"
    ],
    "endpoint_set": "Rhea",
    "file_path": "Rhea/117_Retrieve_parent_reactions_and_their_catalyzing_enzymes_for_a_metabolite_that_is_not_directly_involved_in_a_reaction.ttl",
    "predicted_query": "# https://sparql.rhea-db.org/sparql\nPREFIX rhea: <http://rdf.rhea-db.org/>\nPREFIX chebi: <http://purl.obolibrary.org/obo/CHEBI_>\nPREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\n\nSELECT DISTINCT ?reaction ?reactionName ?enzyme ?enzymeName\nWHERE {\n  # Find reactions involving the metabolite CHEBI:83137\n  {\n    ?reaction rhea: Rhea_has_reactant chebi:83137 .\n  }\n  UNION\n  {\n    ?reaction rhea: Rhea_has_product chebi:83137 .\n  }\n  \n  ?reaction rdfs:label ?reactionName .\n  \n  # Find enzymes catalyzing the reaction\n  ?reaction rhea: Rhea_has_proteine ?enzyme .\n  ?enzyme rdfs:label ?enzymeName .\n  \n  FILTER (!CONTAINS(STR(?enzyme), \"CHEBI\")) # Filter out CHEBI identifiers that are sometimes incorrectly labeled as enzymes\n}",
    "predicted_endpoint": "https://sparql.rhea-db.org/sparql",
    "predicted_endpoint_equal_to_target_endpoint": true,
    "predicted_endpoint_in_federates_with": false,
    "predicted_endpoint_or_federated_endpoint": true,
    "run_id_langsmith": "7e6fa0ca-5839-45c7-a96d-8b53d87bf437",
    "evaluation_timestamp": "2025-05-11T09:53:47.081903",
    "question_understanding_prompt_tokens": 274,
    "question_understanding_completion_tokens": 42,
    "question_understanding_total_tokens": 316,
    "sparql_query_construction_prompt_tokens": 2484,
    "sparql_query_construction_completion_tokens": 495,
    "sparql_query_construction_total_tokens": 2979,
    "is_valid_sparql": false,
    "sparql_syntax_error": "Lexical error at line 11, column 38.  Encountered: '32' (32), after prefix \"Rhea_has_reactant\"",
    "result_eval_f1_score": 0.0,
    "result_eval_precision": 0.0,
    "result_eval_recall": 0.0,
    "error_occured_at_endpoint": false,
    "predicted_query_result_is_empty": true,
    "ground_truth_query_result_is_empty": false,
    "error_occured_at_endpoint_message": "syntactically not correct"
  },
  {
    "resource": "https://sparql.rhea-db.org/.well-known/sparql-examples/18",
    "natural_language_question": "Use <a href=\"https://idsm.elixir-czech.cz/sparql\">IDSM Sachem</a> to find ChEBIs with a a <a href=\"https://www.ebi.ac.uk/chebi/searchId.do?chebiId=CHEBI:35516\">Cholestane</a> skeleton (in SMILES). Then match returned ChEBIs to Rhea undirected reactions.",
    "ground_truth_query": "PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX rh: <http://rdf.rhea-db.org/>\nPREFIX sachem: <http://bioinfo.uochb.cas.cz/rdf/v1.0/sachem#>\n\n\nSELECT \n  ?rhea \n  ?chebi\nWHERE {\n  SERVICE <https://idsm.elixir-czech.cz/sparql/endpoint/chebi> {\n    ?chebi sachem:substructureSearch [\n        sachem:query \"[C@]12(CCC3CCCC[C@]3(C)[C@@]1([H])CC[C@]1(C)[C@@]([H])([C@@](C)([H])CCCC(C)C)CC[C@@]21[H])[H]\" ].\n  }\n  ?rhea rh:side/rh:contains/rh:compound/rdfs:subClassOf ?chebi .\n}",
    "target_endpoint": "https://sparql.rhea-db.org/sparql",
    "federates_with": [
      "https://idsm.elixir-czech.cz/sparql/endpoint/chebi"
    ],
    "endpoint_set": "Rhea",
    "file_path": "Rhea/18.ttl",
    "predicted_query": "# https://sparql.rhea-db.org/sparql\nPREFIX rhea: <http://rdf.rhea-db.org/>\nPREFIX chebi: <http://purl.obolibrary.org/obo/CHEBI_>\n\nSELECT DISTINCT ?reaction\nWHERE {\n  # Subquery to get ChEBI IDs with Cholestane skeleton from IDSM Sachem\n  SERVICE <https://idsm.elixir-czech.cz/sparql> {\n    PREFIX ids: <https://idsm.elixir-czech.cz/vocab/>\n    PREFIX chebi: <http://purl.obolibrary.org/obo/CHEBI_>\n    SELECT DISTINCT ?chebiID WHERE {\n      ?compound ids:smiles ?smiles .\n      FILTER CONTAINS(?smiles, \"C[C@H]1[C@@H]2[C@H](C[C@@H]3[C@H](CC[C@@H]4[C@@]3(CC[C@@H](C[C@@H]4C)O)C)C)[C@@]1(C)CC2\") # SMILES for Cholestane skeleton\n      BIND(STRAFTER(str(?compound), \"https://idsm.elixir-czech.cz/compound/CHEBI:\") AS ?chebiID) # Extract ChEBI ID\n    }\n  }\n\n  # Query Rhea DB to find reactions involving the ChEBI IDs\n  SERVICE <https://sparql.rhea-db.org/sparql> {\n    ?reaction rhea: Rhea#equation ?equation .\n    {\n      ?reaction rhea: Rhea#has_reactant chebi: ?chebiID .\n    }\n    UNION\n    {\n      ?reaction rhea: Rhea#has_participant chebi: ?chebiID .\n    }\n  }\n}",
    "predicted_endpoint": "https://sparql.rhea-db.org/sparql",
    "predicted_endpoint_equal_to_target_endpoint": true,
    "predicted_endpoint_in_federates_with": false,
    "predicted_endpoint_or_federated_endpoint": true,
    "run_id_langsmith": "538ac87e-b346-4fd4-82e4-9a34f4428889",
    "evaluation_timestamp": "2025-05-11T09:53:57.914157",
    "question_understanding_prompt_tokens": 329,
    "question_understanding_completion_tokens": 52,
    "question_understanding_total_tokens": 381,
    "sparql_query_construction_prompt_tokens": 2257,
    "sparql_query_construction_completion_tokens": 0,
    "sparql_query_construction_total_tokens": 2257,
    "is_valid_sparql": false,
    "sparql_syntax_error": "Encountered \" \"prefix\" \"PREFIX \"\" at line 9, column 5.\nWas expecting one of:\n     ...\n     ...\n     ...\n     ...\n     ...\n     ...\n    \"select\" ...\n    \"values\" ...\n    \"graph\" ...\n    \"optional\" ...\n    \"minus\" ...\n    \"bind\" ...\n    \"service\" ...\n    \"filter\" ...\n    \"true\" ...\n    \"false\" ...\n     ...\n     ...\n     ...\n     ...\n     ...\n     ...\n     ...\n     ...\n     ...\n     ...\n     ...\n     ...\n     ...\n    \"(\" ...\n     ...\n    \"{\" ...\n    \"}\" ...\n    \"[\" ...\n     ...\n    \"<<(\" ...\n    \"<<\" ...",
    "result_eval_f1_score": 0.0,
    "result_eval_precision": 0.0,
    "result_eval_recall": 0.0,
    "error_occured_at_endpoint": false,
    "predicted_query_result_is_empty": true,
    "ground_truth_query_result_is_empty": false,
    "error_occured_at_endpoint_message": "syntactically not correct"
  },
  {
    "resource": "https://sparql.rhea-db.org/.well-known/sparql-examples/115_Retrieve_the_set_of_metabolites_involved_in_reactions_catalyzed_by_human_genes_HUMAN_reference_proteome",
    "natural_language_question": "Retrieve the set of metabolites involved in reactions catalyzed by human genes (HUMAN reference proteome)",
    "ground_truth_query": "\nPREFIX rh:<http://rdf.rhea-db.org/>\nPREFIX taxon:<http://purl.uniprot.org/taxonomy/>\nPREFIX ec:<http://purl.uniprot.org/enzyme/>\nPREFIX rdfs:<http://www.w3.org/2000/01/rdf-schema#>\nPREFIX up:<http://purl.uniprot.org/core/>\nPREFIX keywords:<http://purl.uniprot.org/keywords/>\n\nSELECT\n  ?chebi\n  ?reaction\n  ?ecNumber\n  ?protein\n  ?ensemblTranscript\n  ?ensemblGene\nWHERE {\n  SERVICE <https://sparql.uniprot.org/sparql> {\n    ?protein a up:Protein .\n    ?protein up:reviewed true .\n    ?protein up:organism taxon:9606 .\n    ?protein up:classifiedWith keywords:1185 .\n\n    ?protein rdfs:seeAlso ?ensemblTranscript .\n    ?ensemblTranscript a up:Transcript_Resource .\n    ?ensemblTranscript up:database <http://purl.uniprot.org/database/Ensembl> .\n    ?ensemblTranscript up:transcribedFrom ?ensemblGene .\n\n      {?protein up:enzyme ?ecNumber .}\n    UNION\n      {?protein up:domain/up:enzyme ?ecNumber .}\n    UNION\n      {?protein up:component/up:enzyme ?ecNumber .}\n  }\n\n  ?reaction rdfs:subClassOf rh:Reaction .\n  ?reaction rh:status rh:Approved .\n  ?reaction rh:ec ?ecNumber .\n  ?reaction rh:side ?reactionSide .\n  ?reactionSide rh:contains ?participant .\n  ?participant rh:compound ?compound .\n  ?compound rh:chebi ?chebi . # only considering small molecules participants\n}",
    "target_endpoint": "https://sparql.rhea-db.org/sparql",
    "federates_with": [
      "https://sparql.uniprot.org/sparql"
    ],
    "endpoint_set": "Rhea",
    "file_path": "Rhea/115_Retrieve_the_set_of_metabolites_involved_in_reactions_catalyzed_by_human_genes_HUMAN_reference_proteome.ttl",
    "predicted_query": "# https://sparql.uniprot.org/sparql\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX up: <http://purl.uniprot.org/core/>\nPREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>\nPREFIX rhea: <http://rdf.rhea-db.org/>\nPREFIX chebi: <http://purl.obolibrary.org/obo/CHEBI_>\n\nSELECT DISTINCT ?metaboliteName\nWHERE {\n  # Find human proteins (genes) in UniProt\n  SERVICE <https://sparql.uniprot.org/sparql> {\n    ?protein a up:Protein ;\n             up:organism <http://purl.uniprot.org/taxonomy/9606> ; # Human\n             rdfs:seeAlso ?rheaReaction . # Link to Rhea reaction\n    FILTER CONTAINS(str(?rheaReaction), \"rhea-db.org\")\n  }\n\n  # Get the Rhea reaction URI\n  BIND(IRI(replace(str(?rheaReaction), \"https://www.rhea-db.org/reaction\", \"http://rdf.rhea-db.org\")) AS ?reactionURI)\n\n  # Find metabolites involved in the reaction in Rhea\n  SERVICE <https://sparql.rhea-db.org/sparql> {\n    ?reactionURI rhea:hasParticipant ?participant .\n    ?participant rdfs:label ?metaboliteName .\n    #OPTIONAL { ?participant chebi:name ?metaboliteName } # Try to get the ChEBI name if available\n  }\n}",
    "predicted_endpoint": "https://sparql.uniprot.org/sparql",
    "predicted_endpoint_equal_to_target_endpoint": false,
    "predicted_endpoint_in_federates_with": true,
    "predicted_endpoint_or_federated_endpoint": true,
    "run_id_langsmith": "fb7c66dc-c678-4145-85ee-29f2ebc28d67",
    "evaluation_timestamp": "2025-05-11T09:54:05.288881",
    "question_understanding_prompt_tokens": 257,
    "question_understanding_completion_tokens": 25,
    "question_understanding_total_tokens": 282,
    "sparql_query_construction_prompt_tokens": 2096,
    "sparql_query_construction_completion_tokens": 0,
    "sparql_query_construction_total_tokens": 2096,
    "is_valid_sparql": true,
    "sparql_syntax_error": "syntactically correct",
    "result_eval_f1_score": 0.0,
    "result_eval_precision": 0.0,
    "result_eval_recall": 0.0,
    "error_occured_at_endpoint": false,
    "predicted_query_result_is_empty": true,
    "ground_truth_query_result_is_empty": false,
    "error_occured_at_endpoint_message": "no error, but empty result"
  }
]