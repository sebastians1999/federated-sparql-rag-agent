[
  {
    "resource": "https://sparql.swisslipids.org/.well-known/sparql-examples/16",
    "natural_language_question": "For a given lipid (SWISSLIPID:000399814, Ceramide), return a list of all enzymes in UniProtKB/Swiss-Prot annotated to catalyze reactions involving that lipid.\nThis query does not consider the hierarchy: it looks for reactions and enzymes only for the specified lipid.",
    "ground_truth_query": "PREFIX SWISSLIPID: <https://swisslipids.org/rdf/SLM_>\nPREFIX owl: <http://www.w3.org/2002/07/owl#>\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX rh: <http://rdf.rhea-db.org/>\nPREFIX up: <http://purl.uniprot.org/core/>\n\n# Example 16\nSELECT ?startId ?startName ?uniprot\nWHERE\n{\n  # SwissLipids query (list of) identifier(s)\n  VALUES ?startId { SWISSLIPID:000399814 }\n  # name\n  ?startId rdfs:label ?startName .\n  # ChEBI x-ref\n  ?startId owl:equivalentClass ?chebi .\n  # federated query to Rhea\n  SERVICE <https://sparql.rhea-db.org/sparql> {\n  \t?rhea rh:side/rh:contains/rh:compound/rh:chebi ?chebi .\n  }    \n  # federated query to UniProt\n  SERVICE <https://sparql.uniprot.org/sparql> {\n    ?uniprot up:reviewed true .\n    ?uniprot up:annotation/up:catalyticActivity/up:catalyzedReaction ?rhea .\n  }\n} \nORDER BY ?startId",
    "target_endpoint": "https://sparql.swisslipids.org/sparql/",
    "federates_with": [
      "https://sparql.uniprot.org/sparql",
      "https://sparql.rhea-db.org/sparql"
    ],
    "endpoint_set": "SwissLipids",
    "file_path": "SwissLipids/16.ttl",
    "predicted_query": "# https://sparql.uniprot.org/sparql\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>\nPREFIX up: <http://purl.uniprot.org/core/>\n\nSELECT DISTINCT ?enzyme ?enzymeName\nWHERE {\n  # Query SwissLipids to find reactions associated with the given lipid\n  SERVICE <https://sparql.swisslipids.org/sparql/> {\n    PREFIX sl: <http://www.swisslipids.org/rdf#>\n    ?lipid sl:identifier \"SWISSLIPID:000399814\" . # The specified lipid\n    ?reaction sl:refersTo ?lipid . # Reactions involving the lipid\n    BIND (?reaction AS ?slReaction)\n  }\n\n  # Query Rhea to find reactions associated with the given lipid\n  SERVICE <https://sparql.rhea-db.org/sparql/> {\n    PREFIX rhea: <http://rdf.rhea-db.org/>\n    ?rheaReaction rhea:equation ?slReaction .\n    BIND (?rheaReaction AS ?reaction)\n  }\n\n  # Find enzymes in UniProt that catalyze these reactions\n  SERVICE <https://sparql.uniprot.org/sparql> {\n    ?enzyme a up:Protein ;\n            up:annotation ?annot .\n    ?annot a up:CatalyticActivityAnnotation ;\n           up:reaction ?reactionUri .\n    FILTER (STRSTARTS(str(?reactionUri), \"http://rdf.rhea-db.org/\")) # Filter to ensure Rhea reaction URIs\n    BIND(IRI(REPLACE(str(?reactionUri), \"http://rdf.rhea-db.org/\", \"rhea:\")) AS ?reaction) # Create rhea id\n    ?enzyme rdfs:label ?enzymeName .\n  }\n  FILTER (?reaction = ?rheaReaction)\n}",
    "predicted_endpoint": "https://sparql.uniprot.org/sparql",
    "predicted_endpoint_equal_to_target_endpoint": false,
    "predicted_endpoint_in_federates_with": true,
    "predicted_endpoint_or_federated_endpoint": true,
    "run_id_langsmith": "b4f03412-44b1-4200-864a-f0b372f5817a",
    "evaluation_timestamp": "2025-05-12T13:13:54.138574",
    "question_understanding_prompt_tokens": 303,
    "question_understanding_completion_tokens": 72,
    "question_understanding_total_tokens": 375,
    "sparql_query_construction_prompt_tokens": 3313,
    "sparql_query_construction_completion_tokens": 722,
    "sparql_query_construction_total_tokens": 4035,
    "is_valid_sparql": false,
    "sparql_syntax_error": "Encountered \" \"prefix\" \"PREFIX \"\" at line 10, column 5.\nWas expecting one of:\n     ...\n     ...\n     ...\n     ...\n     ...\n     ...\n    \"select\" ...\n    \"values\" ...\n    \"graph\" ...\n    \"optional\" ...\n    \"minus\" ...\n    \"bind\" ...\n    \"service\" ...\n    \"filter\" ...\n    \"true\" ...\n    \"false\" ...\n     ...\n     ...\n     ...\n     ...\n     ...\n     ...\n     ...\n     ...\n     ...\n     ...\n     ...\n     ...\n     ...\n    \"(\" ...\n     ...\n    \"{\" ...\n    \"}\" ...\n    \"[\" ...\n     ...\n    \"<<(\" ...\n    \"<<\" ...",
    "result_eval_f1_score": 0.0,
    "result_eval_precision": 0.0,
    "result_eval_recall": 0.0,
    "error_occured_at_endpoint": false,
    "predicted_query_result_is_empty": true,
    "ground_truth_query_result_is_empty": false,
    "error_occured_at_endpoint_message": "syntactically not correct"
  },
  {
    "resource": "https://sparql.swisslipids.org/.well-known/sparql-examples/6",
    "natural_language_question": "For a given lipid (SWISSLIPID:000399814, Ceramide), return a list of all corresponding reactions (Rhea IDs and equation), as well as their enzymes as annotated in UniProtKB/Swiss-Prot) enzymes themselves (ID and protein name).\nThis query does not consider the hierarchy: it looks for reactions and enzymes only for the specified lipid.",
    "ground_truth_query": "PREFIX SWISSLIPID: <https://swisslipids.org/rdf/SLM_>\nPREFIX owl: <http://www.w3.org/2002/07/owl#>\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX rh: <http://rdf.rhea-db.org/>\nPREFIX up: <http://purl.uniprot.org/core/>\n\n# Example 6\nSELECT ?startId ?startName ?chebi ?rhea ?rheaEquation ?uniprot ?uniprotName\nWHERE\n{\n  # SwissLipids query (list of) identifier(s)\n  VALUES ?startId { SWISSLIPID:000399814 }\n  # name\n  ?startId rdfs:label ?startName .\n  # ChEBI x-ref\n  ?startId owl:equivalentClass ?chebi .\n  # federated query to Rhea\n  SERVICE <https://sparql.rhea-db.org/sparql> {\n  \t?rhea rh:equation ?rheaEquation .\n  \t?rhea rh:side/rh:contains/rh:compound/rh:chebi ?chebi .\n  }    \n  # federated query to UniProt\n  SERVICE <https://sparql.uniprot.org/sparql> {\n    ?uniprot up:reviewed true .\n    ?uniprot up:recommendedName/up:fullName ?uniprotName .\n    ?uniprot up:annotation/up:catalyticActivity/up:catalyzedReaction ?rhea .\n  }\n} \nORDER BY ?startId",
    "target_endpoint": "https://sparql.swisslipids.org/sparql/",
    "federates_with": [
      "https://sparql.uniprot.org/sparql",
      "https://sparql.rhea-db.org/sparql"
    ],
    "endpoint_set": "SwissLipids",
    "file_path": "SwissLipids/6.ttl",
    "predicted_query": "# https://sparql.swisslipids.org/sparql/\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>\nPREFIX sl: <http://www.swisslipids.org/rdf#>\n\nSELECT DISTINCT ?rheaID ?equation ?uniprotID ?proteinName\nWHERE {\n  # Query SwissLipids to find reactions associated with the given lipid\n  SERVICE <https://sparql.swisslipids.org/sparql/> {\n    VALUES ?lipid { sl:SWISSLIPID_000399814 } # SWISSLIPID:000399814 = Ceramide\n    ?reaction sl:refersToLipid ?lipid .\n    ?reaction sl:rheaId ?rheaID .\n  }\n\n  # Query Rhea to retrieve the equation for each Rhea ID\n  SERVICE <https://sparql.rhea-db.org/sparql> {\n    ?rhea rdf:type <http://rdf.rhea-db.org/Reaction> ;\n          rdfs:label ?equation .\n    FILTER(STR(?rhea) = STR(?rheaID)) # Ensure the Rhea IDs match\n  }\n\n  # Query UniProt to find enzymes associated with the reactions\n  SERVICE <https://sparql.uniprot.org/sparql> {\n    ?uniprotID rdfs:seeAlso ?rhea .\n    ?uniprotID rdf:type <http://purl.uniprot.org/core/Protein> .\n    ?uniprotID rdfs:label ?proteinName .\n    FILTER(STR(?rhea) = STR(?rheaID)) # Ensure the Rhea IDs match\n  }\n}",
    "predicted_endpoint": "https://sparql.swisslipids.org/sparql/",
    "predicted_endpoint_equal_to_target_endpoint": true,
    "predicted_endpoint_in_federates_with": false,
    "predicted_endpoint_or_federated_endpoint": true,
    "run_id_langsmith": "7b6919c6-a81a-4222-bc78-4a5661899ac6",
    "evaluation_timestamp": "2025-05-12T13:14:07.365801",
    "question_understanding_prompt_tokens": 321,
    "question_understanding_completion_tokens": 89,
    "question_understanding_total_tokens": 410,
    "sparql_query_construction_prompt_tokens": 3328,
    "sparql_query_construction_completion_tokens": 659,
    "sparql_query_construction_total_tokens": 3987,
    "is_valid_sparql": true,
    "sparql_syntax_error": "syntactically correct",
    "result_eval_f1_score": 0.0,
    "result_eval_precision": 0.0,
    "result_eval_recall": 0.0,
    "error_occured_at_endpoint": true,
    "predicted_query_result_is_empty": true,
    "ground_truth_query_result_is_empty": true,
    "error_occured_at_endpoint_message": "The read operation timed out"
  },
  {
    "resource": "https://sparql.swisslipids.org/.well-known/sparql-examples/5",
    "natural_language_question": "For a given lipid (SWISSLIPID:000399814, Ceramide), return a list of all corresponding reactions (Rhea IDs and equation).\nThis query does consider the hierarchy: it looks for reactions involving the specified lipid and/or its more specific forms.",
    "ground_truth_query": "PREFIX SWISSLIPID: <https://swisslipids.org/rdf/SLM_>\nPREFIX owl: <http://www.w3.org/2002/07/owl#>\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX rh: <http://rdf.rhea-db.org/>\n\n# Example 5\nSELECT ?startId ?startName ?id ?name ?chebi ?rhea ?rheaEquation \nWHERE\n{\n  # SwissLipids query (list of) identifier(s)\n  VALUES ?startId { SWISSLIPID:000399814 }\n  # name\n  ?startId rdfs:label ?startName .\n  # Retrieve children lipids \n  ?id rdfs:subClassOf* ?startId .\n  ?id rdfs:label ?name .\n  # ChEBI x-ref\n  ?id owl:equivalentClass ?chebi .\n  # federated query to Rhea\n  SERVICE <https://sparql.rhea-db.org/sparql> {\n  \t?rhea rh:equation ?rheaEquation .\n  \t?rhea rh:side/rh:contains/rh:compound/rh:chebi ?chebi .\n  }    \n} \nORDER BY  ?startId ?id",
    "target_endpoint": "https://sparql.swisslipids.org/sparql/",
    "federates_with": [
      "https://sparql.rhea-db.org/sparql"
    ],
    "endpoint_set": "SwissLipids",
    "file_path": "SwissLipids/5.ttl",
    "predicted_query": "# https://sparql.swisslipids.org/sparql/\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>\nPREFIX sl: <http://swisslipids.org/rdf#>\n\nSELECT DISTINCT ?rheaId ?equation\nWHERE {\n  # Query SwissLipids for the specified lipid and its related forms\n  SERVICE <https://sparql.swisslipids.org/sparql/> {\n    VALUES ?lipid { <http://swisslipids.org/rdf/SWISSLIPID:000399814> } # SWISSLIPID:000399814\n    ?lipid rdfs:label ?lipidLabel .\n  }\n  \n  # Query Rhea DB for reactions involving the lipid\n  SERVICE <https://sparql.rhea-db.org/sparql/> {\n    ?reaction rdfs:label ?equation ;\n              <http://purl.obolibrary.org/obo/RO_0002351> ?rheaId . # has participant\n    \n    # Filter reactions that involve the lipid (either as input or output)\n    {\n      ?reaction <http://purl.obolibrary.org/obo/RHEA_has_input> ?input .\n      ?input rdfs:label ?lipidLabel .\n      FILTER (CONTAINS(lcase(?lipidLabel), lcase(\"Ceramide\")))\n    }\n    UNION\n    {\n      ?reaction <http://purl.obolibrary.org/obo/RHEA_has_output> ?output .\n      ?output rdfs:label ?lipidLabel .\n      FILTER (CONTAINS(lcase(?lipidLabel), lcase(\"Ceramide\")))\n    }\n  }\n}",
    "predicted_endpoint": "https://sparql.swisslipids.org/sparql/",
    "predicted_endpoint_equal_to_target_endpoint": true,
    "predicted_endpoint_in_federates_with": false,
    "predicted_endpoint_or_federated_endpoint": true,
    "run_id_langsmith": "b37a7331-3cc5-4945-905d-46a39642da67",
    "evaluation_timestamp": "2025-05-12T13:24:31.140753",
    "question_understanding_prompt_tokens": 298,
    "question_understanding_completion_tokens": 66,
    "question_understanding_total_tokens": 364,
    "sparql_query_construction_prompt_tokens": 2464,
    "sparql_query_construction_completion_tokens": 697,
    "sparql_query_construction_total_tokens": 3161,
    "is_valid_sparql": true,
    "sparql_syntax_error": "syntactically correct",
    "result_eval_f1_score": 0.0,
    "result_eval_precision": 0.0,
    "result_eval_recall": 0.0,
    "error_occured_at_endpoint": false,
    "predicted_query_result_is_empty": true,
    "ground_truth_query_result_is_empty": false,
    "error_occured_at_endpoint_message": "no error, but empty result"
  },
  {
    "resource": "https://sparql.swisslipids.org/.well-known/sparql-examples/34",
    "natural_language_question": "Lipids affected by human enzymes",
    "ground_truth_query": "PREFIX owl: <http://www.w3.org/2002/07/owl#>\nPREFIX rh: <http://rdf.rhea-db.org/>\nPREFIX taxon: <http://purl.uniprot.org/taxonomy/>\nPREFIX up: <http://purl.uniprot.org/core/>\n\nSELECT ?swisslipid  {\n  ?swisslipid owl:equivalentClass ?chebi .\n  SERVICE <https://sparql.rhea-db.org/sparql> {\n    ?rhea rh:side/rh:contains/rh:compound ?compound .\n\t?compound (rh:chebi|(rh:reactivePart/rh:chebi)|(rh:underlyingChebi/rh:chebi)) ?metabolite . \n  }\n  SERVICE <https://sparql.uniprot.org/sparql> {\n    ?catalyticActivityAnnotation up:catalyticActivity/up:catalyzedReaction ?rhea .\n    ?protein up:annotation ?catalyticActivityAnnotation ;\n             up:organism taxon:9606 .\n  }\n}\nLIMIT 1",
    "target_endpoint": "https://sparql.swisslipids.org/sparql/",
    "federates_with": [
      "https://sparql.uniprot.org/sparql",
      "https://sparql.rhea-db.org/sparql"
    ],
    "endpoint_set": "SwissLipids",
    "file_path": "SwissLipids/34.ttl",
    "predicted_query": "# https://sparql.swisslipids.org/sparql/\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>\nPREFIX sl: <http://swisslipids.org/rdf#>\nPREFIX chebi: <http://purl.obolibrary.org/obo/CHEBI_>\n\nSELECT DISTINCT ?lipidName ?enzymeName\nWHERE {\n  # Find lipids in SwissLipids\n  SERVICE <https://sparql.swisslipids.org/sparql/> {\n    ?lipid rdf:type sl:Lipid .\n    ?lipid rdfs:label ?lipidName .\n  }\n\n  # Find reactions in Rhea involving these lipids as substrates or products\n  SERVICE <https://sparql.rhea-db.org/sparql/> {\n    ?reaction rdfs:label ?reactionName ;\n              rhea:equation ?equation .\n    {\n      ?reaction rhea:has_reactant ?lipid .\n    } UNION {\n      ?reaction rhea:has_product ?lipid .\n    }\n    ?reaction rhea:catalyzed_by ?enzyme .\n  }\n\n  # Find human enzymes in UniProt that catalyze these reactions\n  SERVICE <https://sparql.uniprot.org/sparql/> {\n    ?enzyme uniprot:organism <http://purl.uniprot.org/taxonomy/9606> ; # Homo sapiens\n            rdfs:label ?enzymeName .\n  }\n}",
    "predicted_endpoint": "https://sparql.swisslipids.org/sparql/",
    "predicted_endpoint_equal_to_target_endpoint": true,
    "predicted_endpoint_in_federates_with": false,
    "predicted_endpoint_or_federated_endpoint": true,
    "run_id_langsmith": "84add776-3343-4cf4-893d-295321ac5c92",
    "evaluation_timestamp": "2025-05-12T13:24:44.971666",
    "question_understanding_prompt_tokens": 247,
    "question_understanding_completion_tokens": 22,
    "question_understanding_total_tokens": 269,
    "sparql_query_construction_prompt_tokens": 1912,
    "sparql_query_construction_completion_tokens": 545,
    "sparql_query_construction_total_tokens": 2457,
    "is_valid_sparql": false,
    "sparql_syntax_error": "Line 18, column 15: Unresolved prefixed name: rhea:equation",
    "result_eval_f1_score": 0.0,
    "result_eval_precision": 0.0,
    "result_eval_recall": 0.0,
    "error_occured_at_endpoint": false,
    "predicted_query_result_is_empty": true,
    "ground_truth_query_result_is_empty": false,
    "error_occured_at_endpoint_message": "syntactically not correct"
  },
  {
    "resource": "https://sparql.uniprot.org/.well-known/sparql-examples/118_biosodafrontend_rat_brain_human_cancer",
    "natural_language_question": "What are the Homo sapiens genes associated with cancer and their orthologs expressed in the Rattus norvegicus brain?",
    "ground_truth_query": "PREFIX up:<http://purl.uniprot.org/core/>\nPREFIX taxon:<http://purl.uniprot.org/taxonomy/>\nPREFIX rdfs:<http://www.w3.org/2000/01/rdf-schema#>\nPREFIX orth:<http://purl.org/net/orth#>\nPREFIX dcterms:<http://purl.org/dc/terms/>\nPREFIX obo:<http://purl.obolibrary.org/obo/>\nPREFIX lscr:<http://purl.org/lscr#>\nPREFIX genex:<http://purl.org/genex#>\nPREFIX sio: <http://semanticscience.org/resource/>\nSELECT ?gene ?orthologous_protein2 WHERE {\n  {\n    SELECT ?protein1 WHERE {\n      ?protein1 a up:Protein;\n        up:organism/up:scientificName 'Homo sapiens' ;\n        up:annotation ?annotation .\n      ?annotation rdfs:comment ?annotation_text.\n      ?annotation a up:Disease_Annotation .\n      FILTER CONTAINS (?annotation_text, \"cancer\")\n    }\n  }\n  SERVICE <https://sparql.omabrowser.org/sparql/> {\n    SELECT ?orthologous_protein2 ?protein1 ?gene WHERE {\n      ?protein_OMA a orth:Protein .\n      ?orthologous_protein2 a orth:Protein .\n      ?cluster a orth:OrthologsCluster .\n      ?cluster orth:hasHomologousMember ?node1 .\n      ?cluster orth:hasHomologousMember ?node2 .\n      ?node2 orth:hasHomologousMember* ?protein_OMA .\n      ?node1 orth:hasHomologousMember* ?orthologous_protein2 \n      .?orthologous_protein2 orth:organism/obo:RO_0002162/up:scientificName 'Rattus norvegicus' .\n      ?orthologous_protein2 sio:SIO_010079 ?gene .\n      ?protein_OMA lscr:xrefUniprot ?protein1 .\n      FILTER(?node1 != ?node2)\n    }\n  }\n  SERVICE <https://www.bgee.org/sparql/> {\n    ?gene genex:isExpressedIn ?anatEntity .\n    ?anatEntity rdfs:label 'brain' .\n    ?gene orth:organism ?org . \n    ?org obo:RO_0002162 taxon:10116 .\n  }\n}",
    "target_endpoint": "https://sparql.uniprot.org/sparql",
    "federates_with": [
      "https://sparql.omabrowser.org/sparql/",
      "https://www.bgee.org/sparql/"
    ],
    "endpoint_set": "Uniprot",
    "file_path": "UniProt/118_biosodafrontend_rat_brain_human_cancer.ttl",
    "predicted_query": "# https://sparql.uniprot.org/sparql\nPREFIX up: <http://purl.uniprot.org/core/>\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX taxon: <http://purl.uniprot.org/taxonomy/>\nPREFIX disease: <http://purl.uniprot.org/diseases/>\n\nSELECT DISTINCT ?humanGene ?ratOrtholog ?ratBrainExpression\nWHERE {\n  # Find human genes associated with cancer\n  SERVICE <https://sparql.uniprot.org/sparql> {\n    ?humanGene a up:Protein ;\n               up:organism taxon:9606 ; # Homo sapiens\n               up:annotation ?diseaseAnnotation .\n    ?diseaseAnnotation a up:Disease_Annotation ;\n                       up:disease disease:2602 . # Breast cancer.  Could expand this to other cancer URIs\n\n    ?humanGene rdfs:label ?humanGeneName .\n  }\n\n  # Find orthologs in Rattus norvegicus\n  SERVICE <https://sparql.uniprot.org/sparql> {\n    ?ratOrtholog a up:Protein ;\n                 up:organism taxon:10116 ; # Rattus norvegicus\n                 up:gene ?gene .\n    ?gene up:orthologOf ?humanGene .\n    ?ratOrtholog rdfs:label ?ratOrthologName .\n\n    #Check expression in rat brain (assuming UniProt has expression data)\n    OPTIONAL {\n      ?ratOrtholog up:expression ?ratBrainExpression .\n      FILTER CONTAINS(LCASE(?ratBrainExpression), \"brain\") #Assumes expression annotation contains \"brain\"\n    }\n  }\n}",
    "predicted_endpoint": "https://sparql.uniprot.org/sparql",
    "predicted_endpoint_equal_to_target_endpoint": true,
    "predicted_endpoint_in_federates_with": false,
    "predicted_endpoint_or_federated_endpoint": true,
    "run_id_langsmith": "cf646d1a-34b7-4d50-a230-68eb37239831",
    "evaluation_timestamp": "2025-05-12T13:25:01.106165",
    "question_understanding_prompt_tokens": 259,
    "question_understanding_completion_tokens": 51,
    "question_understanding_total_tokens": 310,
    "sparql_query_construction_prompt_tokens": 3112,
    "sparql_query_construction_completion_tokens": 580,
    "sparql_query_construction_total_tokens": 3692,
    "is_valid_sparql": true,
    "sparql_syntax_error": "syntactically correct",
    "result_eval_f1_score": 0.0,
    "result_eval_precision": 0.0,
    "result_eval_recall": 0.0,
    "error_occured_at_endpoint": false,
    "predicted_query_result_is_empty": true,
    "ground_truth_query_result_is_empty": false,
    "error_occured_at_endpoint_message": "no error, but empty result"
  },
  {
    "resource": "https://sparql.uniprot.org/.well-known/sparql-examples/51",
    "natural_language_question": "Find all proteins linked to arachidonate (CHEBI:32395)",
    "ground_truth_query": "PREFIX CHEBI: <http://purl.obolibrary.org/obo/CHEBI_>\nPREFIX rh: <http://rdf.rhea-db.org/>\nPREFIX skos: <http://www.w3.org/2004/02/skos/core#>\nPREFIX up: <http://purl.uniprot.org/core/>\n\n\nSELECT \n    DISTINCT\n        ?uniprot\n        ?uniprotID\n        ?recname\n        ?gene\n        ?chebi\n        ?uniprotName\nWHERE {\n  SERVICE <https://sparql.rhea-db.org/sparql> {\n     VALUES (?chebi) { (CHEBI:32395) }\n     ?rhea rh:side/rh:contains/rh:compound ?compound .\n     ?compound rh:chebi ?chebi .\n     ?chebi up:name ?uniprotName .\n  }\n  ?uniprot up:annotation/up:catalyticActivity/up:catalyzedReaction ?rhea .\n  ?uniprot up:mnemonic ?uniprotID .\n  ?uniprot up:recommendedName/up:fullName ?recname .\n  OPTIONAL {?uniprot up:encodedBy/skos:prefLabel ?gene .}\n}",
    "target_endpoint": "https://sparql.uniprot.org/sparql/",
    "federates_with": [
      "https://sparql.rhea-db.org/sparql"
    ],
    "endpoint_set": "Uniprot",
    "file_path": "UniProt/51_all_proteins_linked_to_arachidonate.ttl",
    "predicted_query": "# https://sparql.uniprot.org/sparql\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX up: <http://purl.uniprot.org/core/>\nPREFIX chebi: <http://purl.obolibrary.org/obo/>\n\nSELECT DISTINCT ?protein ?proteinName\nWHERE {\n  ?protein a up:Protein .\n  ?protein rdfs:label ?proteinName .\n  # Look for UniProt entries that have a cross-reference to ChEBI:32395\n  ?protein up:databaseCrossReference ?chebiRef .\n  ?chebiRef up:database <http://purl.uniprot.org/database/ChEBI> . # Filter for ChEBI xrefs\n  ?chebiRef up:identifier \"32395\" . #CHEBI ID for arachidonate\n}",
    "predicted_endpoint": "https://sparql.uniprot.org/sparql",
    "predicted_endpoint_equal_to_target_endpoint": true,
    "predicted_endpoint_in_federates_with": false,
    "predicted_endpoint_or_federated_endpoint": true,
    "run_id_langsmith": "4740e970-7566-45bf-b255-6e2c3ab2f850",
    "evaluation_timestamp": "2025-05-12T13:25:14.869532",
    "question_understanding_prompt_tokens": 255,
    "question_understanding_completion_tokens": 31,
    "question_understanding_total_tokens": 286,
    "sparql_query_construction_prompt_tokens": 2212,
    "sparql_query_construction_completion_tokens": 437,
    "sparql_query_construction_total_tokens": 2649,
    "is_valid_sparql": true,
    "sparql_syntax_error": "syntactically correct",
    "result_eval_f1_score": 0.0,
    "result_eval_precision": 0.0,
    "result_eval_recall": 0.0,
    "error_occured_at_endpoint": false,
    "predicted_query_result_is_empty": true,
    "ground_truth_query_result_is_empty": false,
    "error_occured_at_endpoint_message": "no error, but empty result"
  },
  {
    "resource": "https://sparql.uniprot.org/.well-known/sparql-examples/40",
    "natural_language_question": "Retrieve human enzymes that metabolize sphingolipids and are annotated in ChEMBL",
    "ground_truth_query": "PREFIX CHEBI: <http://purl.obolibrary.org/obo/CHEBI_>\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX rh: <http://rdf.rhea-db.org/>\nPREFIX taxon: <http://purl.uniprot.org/taxonomy/>\nPREFIX up: <http://purl.uniprot.org/core/>\n\nSELECT DISTINCT ?protein ?chemblEntry\nWHERE {\n  SERVICE <https://sparql.rhea-db.org/sparql> {\n    ?rhea rdfs:subClassOf rh:Reaction ;\n      rh:side/rh:contains/rh:compound/rh:chebi/rdfs:subClassOf+ CHEBI:26739 .\n  }\n  ?ca up:catalyzedReaction ?rhea .\n  ?protein up:annotation/up:catalyticActivity ?ca ;\n    up:organism taxon:9606 ;\n    rdfs:seeAlso ?chemblEntry .\n  ?chemblEntry up:database <http://purl.uniprot.org/database/ChEMBL> .\n}\nLIMIT 10",
    "target_endpoint": "https://sparql.uniprot.org/sparql/",
    "federates_with": [
      "https://sparql.rhea-db.org/sparql"
    ],
    "endpoint_set": "Uniprot",
    "file_path": "UniProt/40_human_enzymes_that_metabolize_sphingolipids.ttl",
    "predicted_query": "# https://sparql.swisslipids.org/sparql/\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX sl: <http://swisslipids.org/rdf#>\nPREFIX up: <http://purl.uniprot.org/core/>\n\nSELECT DISTINCT ?enzymeName ?enzymeUri\nWHERE {\n  # Find reactions involving sphingolipids in SwissLipids\n  SERVICE <https://sparql.swisslipids.org/sparql/> {\n    ?reaction a sl:Reaction ;\n              sl:reactionName ?reactionName .\n    ?reaction sl:input ?input .\n    ?reaction sl:output ?output .\n\n    # Filter for reactions involving sphingolipids\n    FILTER (CONTAINS(LCASE(?reactionName), \"sphingolipid\"))\n\n    # Get the enzyme associated with the reaction\n    ?enzyme sl:participatesIn ?reaction ;\n            rdfs:label ?enzymeName .\n    BIND(IRI(CONCAT(\"http://purl.uniprot.org/uniprot/\", SUBSTR(STR(?enzyme), 34))) AS ?enzymeUri) # Create UniProt URI\n  }\n  \n  # Filter for human enzymes using UniProt\n  SERVICE <https://sparql.uniprot.org/sparql> {\n    ?enzymeUri a up:Protein ;\n               up:organism <http://purl.uniprot.org/taxonomy/9606> .  # Filter for Homo sapiens (human)\n  }\n}",
    "predicted_endpoint": "https://sparql.swisslipids.org/sparql/",
    "predicted_endpoint_equal_to_target_endpoint": false,
    "predicted_endpoint_in_federates_with": false,
    "predicted_endpoint_or_federated_endpoint": false,
    "run_id_langsmith": "74057a12-6595-49b9-8ae5-17a95f0b3ae3",
    "evaluation_timestamp": "2025-05-12T13:25:26.469583",
    "question_understanding_prompt_tokens": 253,
    "question_understanding_completion_tokens": 33,
    "question_understanding_total_tokens": 286,
    "sparql_query_construction_prompt_tokens": 2039,
    "sparql_query_construction_completion_tokens": 0,
    "sparql_query_construction_total_tokens": 2039,
    "is_valid_sparql": true,
    "sparql_syntax_error": "syntactically correct",
    "result_eval_f1_score": 0.0,
    "result_eval_precision": 0.0,
    "result_eval_recall": 0.0,
    "error_occured_at_endpoint": true,
    "predicted_query_result_is_empty": true,
    "ground_truth_query_result_is_empty": true,
    "error_occured_at_endpoint_message": "The read operation timed out"
  },
  {
    "resource": "https://sparql.uniprot.org/.well-known/sparql-examples/49",
    "natural_language_question": "Retrieve the UniProtKB proteins, their catalyzed Rhea reactions, their encoding genes (Ensembl) and the anatomic entities where the genes are expressed (UBERON anatomic entites from Bgee expression data resource).",
    "ground_truth_query": "PREFIX CHEBI: <http://purl.obolibrary.org/obo/CHEBI_>\nPREFIX genex: <http://purl.org/genex#>\nPREFIX lscr: <http://purl.org/lscr#>\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX rh: <http://rdf.rhea-db.org/>\nPREFIX taxon: <http://purl.uniprot.org/taxonomy/>\nPREFIX up: <http://purl.uniprot.org/core/>\n\nSELECT DISTINCT ?protein ?ensemblGene ?reaction ?anatomicEntityLabel ?anatomicEntity\nWHERE {\n  # federated query to Rhea enadpoint\n  {\n    SELECT DISTINCT ?reaction WHERE {\n      SERVICE <https://sparql.rhea-db.org/sparql> {\n        ?reaction rdfs:subClassOf rh:Reaction ;\n          rh:equation ?reactionEquation ;\n          rh:side ?reactionSide .\n        ?reactionSide rh:contains ?participant .\n        ?participant rh:compound ?compound .\n        # compound constraint (CHEBI:16113 == cholesterol)\n        ?compound rh:chebi CHEBI:16113 .\n      }\n    }\n  }\n  # taxonomy constraint (taxon:9606 == Homo sapiens)\n  ?protein up:organism taxon:9606 ;\n    up:annotation ?a ;\n    rdfs:seeAlso / up:transcribedFrom ?ensemblGene .\n  ?a a up:Catalytic_Activity_Annotation ;\n    up:catalyticActivity ?ca .\n  ?ca up:catalyzedReaction ?reaction .\n  # federated query to Bgee (expression data)\n  BIND(IRI(REPLACE(STR(?ensemblGene), \"\\\\.[0-9]+$\", \"\")) AS ?ensemblGeneNoVersion)\n  SERVICE <https://www.bgee.org/sparql/> {\n    ?gene lscr:xrefEnsemblGene ?ensemblGeneNoVersion ;\n      genex:isExpressedIn ?anatomicEntity .\n    ?anatomicEntity rdfs:label ?anatomicEntityLabel .\n  }\n}",
    "target_endpoint": "https://sparql.uniprot.org/sparql/",
    "federates_with": [
      "https://sparql.rhea-db.org/sparql",
      "https://www.bgee.org/sparql/"
    ],
    "endpoint_set": "Uniprot",
    "file_path": "UniProt/49_tissues_where_genes_metabolizing_cholestrol_are_expressed.ttl",
    "predicted_query": "# https://sparql.uniprot.org/sparql\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX up: <http://purl.uniprot.org/core/>\nPREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>\n\nSELECT DISTINCT ?protein ?proteinName ?reaction ?gene ?anatomicalEntity\nWHERE {\n  # Get UniProt proteins and their names\n  SERVICE <https://sparql.uniprot.org/sparql> {\n    ?protein a up:Protein .\n    ?protein rdfs:label ?proteinName .\n    # Link to Rhea reactions via UniProt's cross-references\n    OPTIONAL { ?protein up:catalyticActivity ?reactionUri .\n               ?reactionUri rdfs:label ?reaction .}\n    # Link to Ensembl Gene IDs\n    OPTIONAL {?protein up:encodedBy ?geneUri .\n             ?geneUri rdfs:label ?gene .} #Assumes gene label is the Ensembl ID\n  }\n\n  #Get anatomical entities from Bgee using the Ensembl gene ID\n  SERVICE <https://sparql.bgee.org/sparql/> {\n    OPTIONAL {\n      ?expression a <http://purl.obolibrary.org/obo/UBERON_0001062> . #Expression\n      ?expression <http://purl.org/dc/terms/source> ?gene . #Link to Ensembl gene ID\n      ?expression <http://purl.obolibrary.org/obo/BFO_0000051> ?anatomicalEntityURI . #part_of relation\n      ?anatomicalEntityURI rdfs:label ?anatomicalEntity .\n    }\n  }\n}",
    "predicted_endpoint": "https://sparql.uniprot.org/sparql",
    "predicted_endpoint_equal_to_target_endpoint": true,
    "predicted_endpoint_in_federates_with": false,
    "predicted_endpoint_or_federated_endpoint": true,
    "run_id_langsmith": "aa499052-116f-4e4a-bf6b-e8fa472f2c26",
    "evaluation_timestamp": "2025-05-12T13:35:53.369043",
    "question_understanding_prompt_tokens": 283,
    "question_understanding_completion_tokens": 70,
    "question_understanding_total_tokens": 353,
    "sparql_query_construction_prompt_tokens": 4633,
    "sparql_query_construction_completion_tokens": 574,
    "sparql_query_construction_total_tokens": 5207,
    "is_valid_sparql": true,
    "sparql_syntax_error": "syntactically correct",
    "result_eval_f1_score": 0.0,
    "result_eval_precision": 0.0,
    "result_eval_recall": 0.0,
    "error_occured_at_endpoint": true,
    "predicted_query_result_is_empty": true,
    "ground_truth_query_result_is_empty": true,
    "error_occured_at_endpoint_message": "QueryBadFormed: A bad request has been sent to the endpoint: probably the SPARQL query is badly formed."
  },
  {
    "resource": "https://sparql.uniprot.org/.well-known/sparql-examples/53",
    "natural_language_question": "Find mouse homologs in OMABrowser of human enzymes that catalyze reactions involving sterols (CHEBI:15889). Federating with Rhea and OMABrowser.",
    "ground_truth_query": "PREFIX CHEBI: <http://purl.obolibrary.org/obo/CHEBI_>\nPREFIX lscr: <http://purl.org/lscr#>\nPREFIX orth: <http://purl.org/net/orth#>\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX rh: <http://rdf.rhea-db.org/>\nPREFIX taxon: <http://purl.uniprot.org/taxonomy/>\nPREFIX up: <http://purl.uniprot.org/core/>\n\nSELECT\n  DISTINCT\n    ?chebi\n    ?reaction\n    ?humanProtein\n    ?mouseProtein\n    ?cluster \nWHERE {\n  SERVICE <https://sparql.rhea-db.org/sparql> {\n    ?reaction rdfs:subClassOf rh:Reaction .\n    ?reaction rh:side/rh:contains/rh:compound ?compound .\n    ?compound rh:chebi ?chebi .\n    ?chebi rdfs:subClassOf* CHEBI:15889\n  }\n\n  ?humanProtein up:organism taxon:9606 .\n  ?humanProtein up:annotation ?a .\n  ?a a up:Catalytic_Activity_Annotation .\n  ?a up:catalyticActivity ?ca .\n  ?ca up:catalyzedReaction ?reaction .\n\n  SERVICE  <https://sparql.omabrowser.org/sparql> {\n    ?cluster a orth:ParalogsCluster .\n    ?cluster orth:hasHomologousMember ?node1 , ?node2 .\n    ?node1 orth:hasHomologousMember* ?orthoProtein1 .\n    ?node2 orth:hasHomologousMember* ?orthoProtein2 .\n    ?orthoProtein1 lscr:xrefUniprot ?mouseProtein .\n    ?orthoProtein2 lscr:xrefUniprot ?humanProtein .\n    # inTaxon mouse\n    ?orthoProtein1 orth:organism/<http://purl.obolibrary.org/obo/RO_0002162> taxon:10090 . \n  }\n}",
    "target_endpoint": "https://sparql.uniprot.org/sparql/",
    "federates_with": [
      "https://sparql.rhea-db.org/sparql",
      "https://sparql.omabrowser.org/sparql"
    ],
    "endpoint_set": "Uniprot",
    "file_path": "UniProt/53_mouse_homologs_of_sterol_enzymes_via_omabrowser.ttl",
    "predicted_query": "# https://sparql.rhea-db.org/sparql/\nPREFIX rhea: <http://rdf.rhea-db.org/>\nPREFIX chebi: <http://purl.obolibrary.org/obo/CHEBI_>\nPREFIX uniprot: <http://purl.uniprot.org/core/>\nPREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>\nPREFIX oma: <http://purl.obolibrary.org/obo/OMA_>\n\nSELECT DISTINCT ?humanEnzyme ?mouseHomolog\nWHERE {\n  # Find reactions in Rhea involving sterols (CHEBI:15889)\n  SERVICE <https://sparql.rhea-db.org/sparql/> {\n    ?reaction rhea: Rhea_has_reactant chebi:15889 .\n    ?reaction rhea: Rhea_has_enzyme ?enzyme .\n  }\n\n  # Get UniProt ID of the enzyme\n  SERVICE <https://sparql.uniprot.org/sparql> {\n    ?enzyme uniprot:xref ?humanEnzyme .\n    ?humanEnzyme rdf:type uniprot:Protein .\n    FILTER CONTAINS(str(?humanEnzyme), \"uniprotkb\") . # Ensure it's a UniProtKB identifier\n  }\n\n  # Find mouse homologs in OMABrowser\n  SERVICE <http://sparql.omabrowser.org/sparql> {\n    ?homologyGroup oma:hasHomolog ?humanEnzyme ;\n                   oma:hasHomolog ?mouseHomolog .\n    FILTER regex(str(?humanEnzyme), \"HUMAN\", \"i\") . # Filter for human proteins\n    FILTER regex(str(?mouseHomolog), \"MOUSE\", \"i\") . # Filter for mouse proteins\n  }\n}",
    "predicted_endpoint": "https://sparql.rhea-db.org/sparql/",
    "predicted_endpoint_equal_to_target_endpoint": false,
    "predicted_endpoint_in_federates_with": true,
    "predicted_endpoint_or_federated_endpoint": true,
    "run_id_langsmith": "0daeeaec-1d68-4738-8048-376f1014c284",
    "evaluation_timestamp": "2025-05-12T13:36:13.577248",
    "question_understanding_prompt_tokens": 275,
    "question_understanding_completion_tokens": 41,
    "question_understanding_total_tokens": 316,
    "sparql_query_construction_prompt_tokens": 2745,
    "sparql_query_construction_completion_tokens": 0,
    "sparql_query_construction_total_tokens": 2745,
    "is_valid_sparql": false,
    "sparql_syntax_error": "Lexical error at line 12, column 38.  Encountered: '32' (32), after prefix \"Rhea_has_reactant\"",
    "result_eval_f1_score": 0.0,
    "result_eval_precision": 0.0,
    "result_eval_recall": 0.0,
    "error_occured_at_endpoint": false,
    "predicted_query_result_is_empty": true,
    "ground_truth_query_result_is_empty": false,
    "error_occured_at_endpoint_message": "syntactically not correct"
  },
  {
    "resource": "https://sparql.uniprot.org/.well-known/sparql-examples/52",
    "natural_language_question": "Retrieve drugs that target human enzymes involved in sterol metabolism (federated query with Rhea and ChEMBL via IDSM/Elixir czech republic).",
    "ground_truth_query": "PREFIX CHEBI: <http://purl.obolibrary.org/obo/CHEBI_>\nPREFIX cco: <http://rdf.ebi.ac.uk/terms/chembl#>\nPREFIX chebihash: <http://purl.obolibrary.org/obo/chebi#>\nPREFIX owl: <http://www.w3.org/2002/07/owl#>\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX rh: <http://rdf.rhea-db.org/>\nPREFIX skos: <http://www.w3.org/2004/02/skos/core#>\nPREFIX taxon: <http://purl.uniprot.org/taxonomy/>\nPREFIX up: <http://purl.uniprot.org/core/>\n\nSELECT\n        DISTINCT\n            ?protein\n            ?proteinFullName\n            ?activityType\n            ?standardActivityValue\n            ?standardActivityUnit\n            ?chemblMolecule\n            ?chemlbMoleculePrefLabel\nWHERE\n  {\n  # ChEBI: retrieve members of the ChEBI class ChEBI:15889 (sterol)\n  # Rhea: retrieve the reactions involving these ChEBI as participants\n  SERVICE <https://sparql.rhea-db.org/sparql> {\n    ?reaction rdfs:subClassOf  rh:Reaction ;\n\t      rh:status        rh:Approved ;\n\t      rh:side          ?reactionSide .\n    ?reactionSide\n\t      rh:contains      ?participant .\n    ?participant rh:compound  ?compound\n    {\n      ?compound  rh:chebi  ?chebi .\n      ?chebi (rdfs:subClassOf)+ CHEBI:15889\n    } UNION {\n      ?compound  rh:chebi           ?chebi .\n      ?chebi2   rdfs:subClassOf     ?chebiRestriction .\n      ?chebiRestriction\n\t\ta           owl:Restriction ;\n\t\towl:onProperty      chebihash:has_major_microspecies_at_pH_7_3 ;\n\t\towl:someValuesFrom  ?chebi .\n      ?chebi2 (rdfs:subClassOf)+ CHEBI:15889\n    }\n  }\n  # UniProt: retrieve the human (taxid:9606) enzymes catalyzing these Rhea reactions\n  ?ca       up:catalyzedReaction  ?reaction .\n  ?a        up:catalyticActivity  ?ca .\n  ?protein  up:annotation         ?a ;\n\t    up:organism           taxon:9606 ;\n\t    up:recommendedName    ?proteinRecName .\n  ?proteinRecName\n\t    up:fullName           ?proteinFullName .\n  # Find drugs in wikidata that interact with the UniProt Proteins\n  # ChEMBL: retrieve the corresponding targets and with drugs in clinical phase 4\n  # Via https://idsm.elixir-czech.cz/sparql/\n  SERVICE <https://idsm.elixir-czech.cz/sparql/endpoint/idsm> {\n    ?activity a cco:Activity ;\n      cco:hasMolecule ?chemblMolecule ;\n      cco:hasAssay ?assay ;\n      cco:standardType ?activityType ;\n      cco:standardValue ?standardActivityValue ;\n      cco:standardUnits ?standardActivityUnit .\n    ?chemblMolecule cco:highestDevelopmentPhase ?highestDevelopmentPhase ;\n      rdfs:label ?chemblMoleculeLabel ;\n      skos:prefLabel ?chemlbMoleculePrefLabel .\n    FILTER (?highestDevelopmentPhase > 3)\n    ?assay cco:hasTarget ?target .\n    ?target cco:hasTargetComponent/cco:targetCmptXref ?protein .\n    ?protein a cco:UniprotRef .\n  }\n}",
    "target_endpoint": "https://sparql.uniprot.org/sparql/",
    "federates_with": [
      "https://sparql.rhea-db.org/sparql",
      "https://idsm.elixir-czech.cz/sparql/endpoint/idsm"
    ],
    "endpoint_set": "Uniprot",
    "file_path": "UniProt/52_drugs_targeting_sterol_metabolism.ttl",
    "predicted_query": "# https://sparql.rhea-db.org/sparql\nPREFIX rhea: <http://rdf.rhea-db.org/>\nPREFIX chebi: <http://purl.obolibrary.org/obo/CHEBI_>\nPREFIX uniprot: <http://purl.uniprot.org/core/>\nPREFIX idsm: <https://idsm.elixir-czech.cz/sparql/endpoint/>\n\nSELECT DISTINCT ?drug ?enzymeName ?reaction\nWHERE {\n  # Find reactions in Rhea related to sterols\n  SERVICE <https://sparql.rhea-db.org/sparql> {\n    ?reaction rhea:equation ?equation .\n    ?reaction rhea:status rhea:approved .\n    ?reaction rhea:directionalReaction ?directionalReaction .\n    {?directionalReaction rhea:left ?sterolEntity.}\n    UNION\n    {?directionalReaction rhea:right ?sterolEntity.}\n    ?sterolEntity rhea:accession ?sterolAccession .\n    FILTER (CONTAINS(LCASE(?equation), \"sterol\")) . # Filter for sterol metabolism related reactions\n    ?directionalReaction rhea:catalyzedBy ?enzyme .\n    ?enzyme rhea:accession ?enzymeRheaId .\n    ?enzyme rhea:name ?enzymeName .\n  }\n\n  # Find corresponding UniProt ID for the enzyme and check if it's a human enzyme\n  SERVICE <https://sparql.uniprot.org/sparql> {\n    ?enzyme uniprot:xref ?enzymeRheaId .\n    FILTER(STRSTARTS(str(?enzymeRheaId), \"RHEA:\")) .\n    ?enzyme a uniprot:Protein .\n    ?enzyme uniprot:organism <http://purl.uniprot.org/taxonomy/9606> . # Filter for human enzymes\n    BIND(SUBSTR(STR(?enzyme), 34) AS ?uniprotId) # Extract UniProt ID\n  }\n\n  # Find drugs targeting the human enzyme using IDSM/ChEMBL\n  SERVICE <https://idsm.elixir-czech.cz/sparql/endpoint/> {\n    ?drug idsm:target ?uniprotId . # Find drugs targeting the UniProt ID\n    ?drug a idsm:Molecule .\n  }\n}",
    "predicted_endpoint": "https://sparql.rhea-db.org/sparql",
    "predicted_endpoint_equal_to_target_endpoint": false,
    "predicted_endpoint_in_federates_with": true,
    "predicted_endpoint_or_federated_endpoint": true,
    "run_id_langsmith": "d8a9c802-6aac-4233-a4b3-cad39d614fda",
    "evaluation_timestamp": "2025-05-12T13:36:25.798688",
    "question_understanding_prompt_tokens": 267,
    "question_understanding_completion_tokens": 28,
    "question_understanding_total_tokens": 295,
    "sparql_query_construction_prompt_tokens": 2052,
    "sparql_query_construction_completion_tokens": 712,
    "sparql_query_construction_total_tokens": 2764,
    "is_valid_sparql": true,
    "sparql_syntax_error": "syntactically correct",
    "result_eval_f1_score": 0.0,
    "result_eval_precision": 0.0,
    "result_eval_recall": 0.0,
    "error_occured_at_endpoint": false,
    "predicted_query_result_is_empty": true,
    "ground_truth_query_result_is_empty": false,
    "error_occured_at_endpoint_message": "no error, but empty result"
  },
  {
    "resource": "https://sparql.uniprot.org/.well-known/sparql-examples/54",
    "natural_language_question": "Proteins with binding sites for ligands similar to heme",
    "ground_truth_query": "PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX sachem: <http://bioinfo.uochb.cas.cz/rdf/v1.0/sachem#>\nPREFIX up: <http://purl.uniprot.org/core/>\nPREFIX xsd: <http://www.w3.org/2001/XMLSchema#>\n\nSELECT \n  ?protein\n  ?mnemonic\n  ?proteinName\n  ?ligandSimilarityScore\n  ?ligand\nWHERE {\n  SERVICE <https://idsm.elixir-czech.cz/sparql/endpoint/chebi> {\n    ?ssc sachem:compound ?ligand; \n      sachem:score ?ligandSimilarityScore ;\n      sachem:similaritySearch ?sss .\n        # Smiles of Heme\n    ?sss    sachem:query \"CC1=C(CCC([O-])=O)C2=[N+]3C1=Cc1c(C)c(C=C)c4C=C5C(C)=C(C=C)C6=[N+]5[Fe-]3(n14)n1c(=C6)c(C)c(CCC([O-])=O)c1=C2\";\n      sachem:cutoff \"8e-1\"^^xsd:double ;\n      sachem:aromaticityMode sachem:aromaticityDetect ;\n      sachem:similarityRadius 1 ;\n      sachem:tautomerMode sachem:ignoreTautomers .\n  }\n  ?protein up:mnemonic ?mnemonic ;\n    up:recommendedName/up:fullName ?proteinName ;\n    up:annotation ?annotation .\n  ?annotation a up:Binding_Site_Annotation ;\n      up:ligand/rdfs:subClassOf ?ligand .\n}\nORDER BY DESC(?ligandSimilarityScore)",
    "target_endpoint": "https://sparql.uniprot.org/sparql/",
    "federates_with": [
      "https://idsm.elixir-czech.cz/sparql/endpoint/chebi"
    ],
    "endpoint_set": "Uniprot",
    "file_path": "UniProt/54_binding_sites_for_ligands_similar_to_heme_sachem.ttl",
    "predicted_query": "# https://sparql.uniprot.org/sparql\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX up: <http://purl.uniprot.org/core/>\nPREFIX uniprot: <http://purl.uniprot.org/uniprot/>\nPREFIX chebi: <http://purl.obolibrary.org/obo/CHEBI_>\n\nSELECT DISTINCT ?protein ?proteinName ?bindingSiteDescription\nWHERE {\n  # Query UniProt for proteins with binding site annotations\n  SERVICE <https://sparql.uniprot.org/sparql> {\n    ?protein a up:Protein .\n    ?protein rdfs:label ?proteinName .\n    ?protein up:annotation ?annotation .\n    ?annotation a up:BindingSiteAnnotation .\n    ?annotation rdfs:comment ?bindingSiteDescription .\n    ?annotation up:feature ?bindingSite .\n\n    # Filter for proteins that have binding sites for ligands similar to heme\n    FILTER (CONTAINS(LCASE(?bindingSiteDescription), \"heme\") || CONTAINS(LCASE(?bindingSiteDescription), \"haem\"))\n  }\n}",
    "predicted_endpoint": "https://sparql.uniprot.org/sparql",
    "predicted_endpoint_equal_to_target_endpoint": true,
    "predicted_endpoint_in_federates_with": false,
    "predicted_endpoint_or_federated_endpoint": true,
    "run_id_langsmith": "9518f63b-ea1d-4715-a358-0cddff9066b3",
    "evaluation_timestamp": "2025-05-12T13:36:39.964563",
    "question_understanding_prompt_tokens": 248,
    "question_understanding_completion_tokens": 33,
    "question_understanding_total_tokens": 281,
    "sparql_query_construction_prompt_tokens": 2622,
    "sparql_query_construction_completion_tokens": 508,
    "sparql_query_construction_total_tokens": 3130,
    "is_valid_sparql": true,
    "sparql_syntax_error": "syntactically correct",
    "result_eval_f1_score": 0.0,
    "result_eval_precision": 0.0,
    "result_eval_recall": 0.0,
    "error_occured_at_endpoint": false,
    "predicted_query_result_is_empty": true,
    "ground_truth_query_result_is_empty": false,
    "error_occured_at_endpoint_message": "no error, but empty result"
  },
  {
    "resource": "https://sparql.uniprot.org/.well-known/sparql-examples/43",
    "natural_language_question": "Connect patents cited in UniProtKB with those in the patent database at EPO via publication number, whose grant date is more than twenty years in the past.",
    "ground_truth_query": "PREFIX patent: <http://data.epo.org/linked-data/def/patent/>\nPREFIX skos: <http://www.w3.org/2004/02/skos/core#>\nPREFIX up: <http://purl.uniprot.org/core/>\n\nSELECT ?grantDate ?patent ?application ?applicationNo\nWHERE\n{\n    ?citation a up:Patent_Citation ;\n  skos:exactMatch ?patent .\n  BIND(SUBSTR(STR(?patent), 35) AS ?applicationNo)\n  BIND(SUBSTR(STR(?patent), 33, 2) AS ?countryCode)\n  SERVICE <https://data.epo.org/linked-data/query>{\n    ?publication patent:publicationNumber ?applicationNo ;\n      patent:application ?application .\n    ?application patent:grantDate ?grantDate .\n  }\n  BIND((year(now()) - 20) AS ?thisYearMinusTwenty)\n  BIND(year(?grantDate) AS ?grantYear)\n  FILTER(?grantYear < ?thisYearMinusTwenty)\n} ORDER BY ?grantYear",
    "target_endpoint": "https://sparql.uniprot.org/sparql/",
    "federates_with": [
      "https://data.epo.org/linked-data/query"
    ],
    "endpoint_set": "Uniprot",
    "file_path": "UniProt/43_patents_used_in_uniprot_granted_twenty_years_in_the_past.ttl",
    "predicted_query": "# https://sparql.uniprot.org/sparql\nPREFIX up: <http://purl.uniprot.org/core/>\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\n\nSELECT ?uniprotEntry ?patentIdentifier ?epoPatent ?epoGrantDate\nWHERE {\n  # Query UniProtKB for entries with patent citations\n  SERVICE <https://sparql.uniprot.org/sparql> {\n    ?uniprotEntry a up:Protein ; # Assuming up:Protein represents UniProtKB entries\n                  up:citation ?citation . # Assuming up:citation links to citations\n\n    ?citation up:publication ?publication . # Assuming up:publication links to publication details\n    ?publication a up:Patent ; # Assuming up:Patent represents patent publications\n                 rdfs:label ?patentIdentifier . # Assuming rdfs:label gives the patent identifier\n  }\n\n  # Query the EPO endpoint to find matching patents and their grant dates\n  SERVICE <https://example.epo.org/sparql> {\n    ?epoPatent <http://example.epo.org/vocab/publicationNumber> ?patentIdentifier ; # Assuming publicationNumber links to the identifier\n               <http://example.epo.org/vocab/grantDate> ?epoGrantDate . # Assuming grantDate provides the grant date\n    \n    # Filter for patents granted more than 20 years ago (Placeholder - adjust based on EPO endpoint's date format)\n    FILTER (YEAR(NOW()) - YEAR(?epoGrantDate) > 20)\n  }\n}",
    "predicted_endpoint": "https://sparql.uniprot.org/sparql",
    "predicted_endpoint_equal_to_target_endpoint": true,
    "predicted_endpoint_in_federates_with": false,
    "predicted_endpoint_or_federated_endpoint": true,
    "run_id_langsmith": "f7b5474d-6ca6-4cee-89a2-e4bb2e67fd07",
    "evaluation_timestamp": "2025-05-12T13:37:21.610486",
    "question_understanding_prompt_tokens": 268,
    "question_understanding_completion_tokens": 47,
    "question_understanding_total_tokens": 315,
    "sparql_query_construction_prompt_tokens": 1912,
    "sparql_query_construction_completion_tokens": 599,
    "sparql_query_construction_total_tokens": 2511,
    "is_valid_sparql": true,
    "sparql_syntax_error": "syntactically correct",
    "result_eval_f1_score": 0.0,
    "result_eval_precision": 0.0,
    "result_eval_recall": 0.0,
    "error_occured_at_endpoint": true,
    "predicted_query_result_is_empty": true,
    "ground_truth_query_result_is_empty": true,
    "error_occured_at_endpoint_message": "QueryBadFormed: A bad request has been sent to the endpoint: probably the SPARQL query is badly formed."
  },
  {
    "resource": "https://sparql.uniprot.org/.well-known/sparql-examples/45",
    "natural_language_question": "Retrieve drugs that target human enzymes involved in sterol metabolism (federated query with WikiData and Rhea).",
    "ground_truth_query": "PREFIX CHEBI: <http://purl.obolibrary.org/obo/CHEBI_>\nPREFIX chebihash: <http://purl.obolibrary.org/obo/chebi#>\nPREFIX owl: <http://www.w3.org/2002/07/owl#>\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX rh: <http://rdf.rhea-db.org/>\nPREFIX taxon: <http://purl.uniprot.org/taxonomy/>\nPREFIX uniprotkb: <http://purl.uniprot.org/uniprot/>\nPREFIX up: <http://purl.uniprot.org/core/>\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\n\nSELECT DISTINCT ?protein ?proteinFullName ?wikiChemical ?wikiChemicalLabel ?medicalConditionTreatedLabel\nWHERE {\n  # ChEBI: retrieve members of the ChEBI class ChEBI:15889 (sterol)\n  # Rhea: retrieve the reactions involving these ChEBI as participants\n  SERVICE <https://sparql.rhea-db.org/sparql> {\n    ?reaction rdfs:subClassOf rh:Reaction ;\n      rh:status rh:Approved ;\n      rh:side ?reactionSide .\n    ?reactionSide\n      rh:contains ?participant .\n    ?participant rh:compound ?compound\n    {\n      ?compound rh:chebi ?chebi .\n      ?chebi (rdfs:subClassOf)+ CHEBI:15889\n    } UNION {\n      ?compound rh:chebi ?chebi .\n      ?chebi2 rdfs:subClassOf ?chebiRestriction .\n      ?chebiRestriction\n\t\ta owl:Restriction ;\n\t\towl:onProperty chebihash:has_major_microspecies_at_pH_7_3 ;\n\t\towl:someValuesFrom ?chebi .\n      ?chebi2 (rdfs:subClassOf)+ CHEBI:15889\n    }\n  }\n  # UniProt: retrieve the human (taxid:9606) enzymes catalyzing these Rhea reactions\n  ?ca up:catalyzedReaction  ?reaction .\n  ?a up:catalyticActivity  ?ca .\n  ?proteinIRI  up:annotation ?a ;\n    up:organism taxon:9606 ;\n    up:recommendedName ?proteinRecName .\n  ?proteinRecName up:fullName ?proteinFullName .\n  # Find drugs in wikidata that interact with the UniProt Proteins\n  BIND (SUBSTR(STR(?proteinIRI), STRLEN(STR(uniprotkb:))+1) AS ?protein)\n  SERVICE <https://query.wikidata.org/sparql> {\n    ?wp wdt:P352  ?protein .\n    ?wikiChemical wdt:P129 ?wp . # Physically interacts with\n    ?wikiChemical rdfs:label ?wikiChemicalLabel .\n    ?wikiChemical wdt:P2175 ?wmc . # Medical conndition treated\n    ?wmc rdfs:label ?medicalConditionTreatedLabel .\n    FILTER(lang(?medicalConditionTreatedLabel) = 'en')\n    FILTER(lang(?wikiChemicalLabel) = 'en')\n  }\n}",
    "target_endpoint": "https://sparql.uniprot.org/sparql/",
    "federates_with": [
      "https://query.wikidata.org/sparql",
      "https://sparql.rhea-db.org/sparql"
    ],
    "endpoint_set": "Uniprot",
    "file_path": "UniProt/45_drugs_targeting_human_sterol_metabolism_enzymes.ttl",
    "predicted_query": "# https://sparql.uniprot.org/sparql\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX up: <http://purl.uniprot.org/core/>\nPREFIX taxon: <http://purl.uniprot.org/taxonomy/>\nPREFIX chebi: <http://purl.obolibrary.org/obo/CHEBI_>\n\nSELECT DISTINCT ?drug ?enzymeLabel ?reactionLabel\nWHERE {\n  # Find human enzymes in UniProt\n  SERVICE <https://sparql.uniprot.org/sparql> {\n    ?enzyme a up:Protein ;\n            up:organism taxon:9606 ; # Homo sapiens\n            rdfs:label ?enzymeLabel .\n  }\n\n  # Find Rhea reactions related to sterol metabolism\n  SERVICE <https://sparql.rhea-db.org/sparql> {\n    ?reaction rdfs:label ?reactionLabel ;\n              rdfs:comment ?comment .\n    FILTER (CONTAINS(LCASE(?reactionLabel), \"sterol\") || CONTAINS(LCASE(?comment), \"sterol\")) .\n    ?reaction rdfs:seeAlso ?chebi .\n    FILTER (STRSTARTS(STR(?chebi), STR(chebi:))) # Ensure it's a ChEBI identifier\n  }\n\n  # Optional: Link UniProt enzymes to Rhea reactions (if possible, based on available predicates)\n  # This part might require more specific predicates depending on the actual data model\n  # This is a placeholder, and the actual predicate might need adjustment\n  #OPTIONAL {\n  #  ?enzyme somePredicate ?reaction . # Replace somePredicate with the actual predicate\n  #}\n\n  # Optional: Find drugs targeting the enzymes in Wikidata\n  #SERVICE <https://query.wikidata.org/sparql> {\n  #  ?drug wdt:P2175 ?enzyme .  # Drug targets enzyme (UniProt ID)\n  #  ?drug rdfs:label ?drugLabel .\n  #  FILTER (LANG(?drugLabel) = \"en\")\n  #}\n  #BIND(IF(BOUND(?drugLabel), ?drugLabel, \"No drug found\") AS ?drug)\n  BIND(\"No drug information available\" AS ?drug)\n}",
    "predicted_endpoint": "https://sparql.uniprot.org/sparql",
    "predicted_endpoint_equal_to_target_endpoint": true,
    "predicted_endpoint_in_federates_with": false,
    "predicted_endpoint_or_federated_endpoint": true,
    "run_id_langsmith": "e7a342e7-5e67-4292-86b4-351a6f611614",
    "evaluation_timestamp": "2025-05-12T13:37:39.622963",
    "question_understanding_prompt_tokens": 257,
    "question_understanding_completion_tokens": 32,
    "question_understanding_total_tokens": 289,
    "sparql_query_construction_prompt_tokens": 2526,
    "sparql_query_construction_completion_tokens": 0,
    "sparql_query_construction_total_tokens": 2526,
    "is_valid_sparql": true,
    "sparql_syntax_error": "syntactically correct",
    "result_eval_f1_score": 0.0,
    "result_eval_precision": 0.0,
    "result_eval_recall": 0.0,
    "error_occured_at_endpoint": false,
    "predicted_query_result_is_empty": true,
    "ground_truth_query_result_is_empty": false,
    "error_occured_at_endpoint_message": "no error, but empty result"
  },
  {
    "resource": "https://sparql.uniprot.org/.well-known/sparql-examples/42",
    "natural_language_question": "Connect patents cited in UniProtKB with those in the patent database at EPO via publication number.",
    "ground_truth_query": "PREFIX patent: <http://data.epo.org/linked-data/def/patent/>\nPREFIX skos: <http://www.w3.org/2004/02/skos/core#>\nPREFIX up: <http://purl.uniprot.org/core/>\n\nSELECT ?citation ?patent ?application ?applicationNo\nWHERE\n{\n  ?citation a up:Patent_Citation ;\n    skos:exactMatch ?patent .\n  FILTER(CONTAINS(STR(?patent), 'EP'))\n  BIND(SUBSTR(STR(?patent), 35) AS ?applicationNo)\n  SERVICE <https://data.epo.org/linked-data/query>{\n    ?application patent:publicationNumber ?applicationNo\n  }\n}",
    "target_endpoint": "https://sparql.uniprot.org/sparql/",
    "federates_with": [
      "https://data.epo.org/linked-data/query"
    ],
    "endpoint_set": "Uniprot",
    "file_path": "UniProt/42_connect_patents_to_epo.ttl",
    "predicted_query": "# https://sparql.uniprot.org/sparql\nPREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX up: <http://purl.uniprot.org/core/>\n\n# Query UniProtKB for entries with patent cross-references\nSELECT DISTINCT ?uniprot_entry ?patent_identifier\nWHERE {\n  ?uniprot_entry a up:Protein .  # Select UniProt entries that are proteins\n  ?uniprot_entry up:database ?database . # Get the database cross-reference\n  ?database rdfs:label \"Patent\" . # Filter for Patent cross-references\n  ?database up:id ?patent_identifier . # Retrieve the patent identifier\n\n  # Optional: Get the protein name\n  OPTIONAL { ?uniprot_entry rdfs:label ?protein_name . }\n}",
    "predicted_endpoint": "https://sparql.uniprot.org/sparql",
    "predicted_endpoint_equal_to_target_endpoint": true,
    "predicted_endpoint_in_federates_with": false,
    "predicted_endpoint_or_federated_endpoint": true,
    "run_id_langsmith": "307939fa-28da-4016-bf11-51e27a800ec6",
    "evaluation_timestamp": "2025-05-12T13:38:11.795678",
    "question_understanding_prompt_tokens": 256,
    "question_understanding_completion_tokens": 35,
    "question_understanding_total_tokens": 291,
    "sparql_query_construction_prompt_tokens": 1676,
    "sparql_query_construction_completion_tokens": 0,
    "sparql_query_construction_total_tokens": 1676,
    "is_valid_sparql": true,
    "sparql_syntax_error": "syntactically correct",
    "result_eval_f1_score": 0.0,
    "result_eval_precision": 0.0,
    "result_eval_recall": 0.0,
    "error_occured_at_endpoint": false,
    "predicted_query_result_is_empty": true,
    "ground_truth_query_result_is_empty": false,
    "error_occured_at_endpoint_message": "no error, but empty result"
  },
  {
    "resource": "https://sparql.uniprot.org/.well-known/sparql-examples/67_draft_human_metabolome",
    "natural_language_question": "Generate a draft human metabolome",
    "ground_truth_query": "PREFIX chebislash: <http://purl.obolibrary.org/obo/chebi/>\nPREFIX rh: <http://rdf.rhea-db.org/>\nPREFIX taxon: <http://purl.uniprot.org/taxonomy/>\nPREFIX up: <http://purl.uniprot.org/core/>\n\nSELECT\n?uniprot ?mnemonic ?rhea ?chebi ?smiles ?inchiKey\nWHERE\n{\n  ?uniprot up:annotation/up:catalyticActivity/up:catalyzedReaction ?rhea ;\n        up:organism taxon:9606 ;\n        up:mnemonic ?mnemonic .\n  SERVICE <https://sparql.rhea-db.org/sparql> {\n\t?rhea rh:side/rh:contains/rh:compound ?compound .\n    ?compound (rh:chebi|(rh:reactivePart/rh:chebi)|(rh:underlyingChebi/rh:chebi)) ?chebi .\n   }\n   ?chebi chebislash:smiles ?smiles ;\n          chebislash:inchikey ?inchiKey .\n}",
    "target_endpoint": "https://sparql.uniprot.org/sparql/",
    "federates_with": [
      "https://sparql.rhea-db.org/sparql"
    ],
    "endpoint_set": "Uniprot",
    "file_path": "UniProt/67_draft_human_metabolome.ttl",
    "predicted_query": "# https://sparql.uniprot.org/sparql\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX up: <http://purl.uniprot.org/core/>\nPREFIX taxon: <http://purl.uniprot.org/taxonomy/>\n\nSELECT DISTINCT ?metabolite ?metaboliteName\nWHERE {\n  # Find human proteins in UniProt\n  SERVICE <https://sparql.uniprot.org/sparql> {\n    SELECT DISTINCT ?protein ?gene ?organism\n    WHERE {\n      ?protein a up:Protein .\n      ?protein up:organism taxon:9606 . # Homo sapiens\n      OPTIONAL { ?protein up:encodedBy ?gene . }\n      BIND(\"Homo sapiens\" AS ?organism)\n    }\n  }\n\n  # Find reactions in Rhea associated with these proteins\n  SERVICE <https://sparql.rhea-db.org/sparql> {\n    SELECT DISTINCT ?reaction ?rhea_metabolite ?rhea_metabolite_name\n    WHERE {\n      ?reaction rdfs:label ?rhea_metabolite_name .\n      ?reaction ?p ?protein . # Link Rhea reactions to UniProt proteins\n      ?reaction rdfs:label ?rhea_metabolite .\n      FILTER (CONTAINS(str(?rhea_metabolite), \"CHEBI\"))\n    }\n  }\n\n  #Optional: Find lipids in SwissLipids associated with human proteins (This part might need adjustments based on SwissLipids schema)\n  OPTIONAL {\n    SERVICE <https://sparql.swisslipids.org/sparql/> {\n      SELECT DISTINCT ?lipid ?lipidName\n      WHERE {\n        #This is a placeholder, the exact predicate to link to human proteins might not exist\n        #?lipid sl:enzyme ?protein .  #Assumed predicate, replace with the correct one if it exists\n        ?lipid rdfs:label ?lipidName .\n      }\n    }\n  }\n\n  #Bind results\n  BIND (IF(BOUND(?rhea_metabolite), ?rhea_metabolite, ?lipid) AS ?metabolite)\n  BIND (IF(BOUND(?rhea_metabolite_name), ?rhea_metabolite_name, ?lipidName) AS ?metaboliteName)\n}",
    "predicted_endpoint": "https://sparql.uniprot.org/sparql",
    "predicted_endpoint_equal_to_target_endpoint": true,
    "predicted_endpoint_in_federates_with": false,
    "predicted_endpoint_or_federated_endpoint": true,
    "run_id_langsmith": "8ffd88ec-2d4f-4f1e-981b-b77461d8e86d",
    "evaluation_timestamp": "2025-05-12T13:38:37.250851",
    "question_understanding_prompt_tokens": 247,
    "question_understanding_completion_tokens": 20,
    "question_understanding_total_tokens": 267,
    "sparql_query_construction_prompt_tokens": 1449,
    "sparql_query_construction_completion_tokens": 784,
    "sparql_query_construction_total_tokens": 2233,
    "is_valid_sparql": true,
    "sparql_syntax_error": "syntactically correct",
    "result_eval_f1_score": 0.0,
    "result_eval_precision": 0.0,
    "result_eval_recall": 0.0,
    "error_occured_at_endpoint": true,
    "predicted_query_result_is_empty": true,
    "ground_truth_query_result_is_empty": true,
    "error_occured_at_endpoint_message": "QueryBadFormed: A bad request has been sent to the endpoint: probably the SPARQL query is badly formed."
  },
  {
    "resource": "https://sparql.uniprot.org/.well-known/sparql-examples/36",
    "natural_language_question": "Find the orthologous proteins for UniProtKB entry P05067 using the <a href=\"http://www.orthod.org\">OrthoDB database</a>",
    "ground_truth_query": "PREFIX orthodb: <http://purl.orthodb.org/>\nPREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX skos: <http://www.w3.org/2004/02/skos/core#>\nPREFIX uniprotkb: <http://purl.uniprot.org/uniprot/>\nPREFIX up: <http://purl.uniprot.org/core/>\n\nSELECT\n  ?protein\n  ?orthoGroup\n  ?scientificName\n  ?functionComment\n  ?prefferedGeneName\n  ((STRLEN(?value) - ?medianLength) as ?deviationFromMedianLength)\nWHERE\n{\n  uniprotkb:P05067 a up:Protein ;\n        up:organism/up:scientificName ?scientificName ;\n        rdfs:seeAlso ?orthoGroup ;\n        up:encodedBy/skos:prefLabel ?prefferedGeneName ;\n          up:sequence/rdf:value ?value .\n  OPTIONAL {\n    ?protein up:annotation ?functionAnnotation .\n    ?functionAnnotation a up:Function_Annotation ;\n      rdfs:comment ?functionComment .\n  }\n  SERVICE <https://sparql.orthodb.org/sparql>{\n    ?orthoGroup orthodb:ogMedianProteinLength ?medianLength .\n    ?orthoGroup orthodb:hasMember ?xref .\n    ?xref orthodb:xref/orthodb:xrefResource uniprotkb:P05067 .\n  }\n}\nLIMIT 985915",
    "target_endpoint": "https://sparql.uniprot.org/sparql/",
    "federates_with": [
      "https://sparql.orthodb.org/sparql"
    ],
    "endpoint_set": "Uniprot",
    "file_path": "UniProt/36_orthologous_proteins_via_orthodb.ttl",
    "predicted_query": "# https://sparql.uniprot.org/sparql\nPREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX up: <http://purl.uniprot.org/core/>\n\nSELECT DISTINCT ?protein ?ortholog ?orthoDBLink\nWHERE {\n  # Find the UniProt entry for P05067\n  VALUES ?uniprotEntry { <http://purl.uniprot.org/uniprot/P05067> }\n\n  ?uniprotEntry up:sequence ?sequence . # Ensure it's a protein entry\n\n  # Find orthologs linked to this protein.  This assumes a direct ortholog property exists in UniProt.\n  ?uniprotEntry up:annotation ?annotation .\n  ?annotation rdf:type up:Ortholog_Annotation . # Assuming Ortholog_Annotation is the type for orthologs\n  ?annotation rdfs:seeAlso ?ortholog . # Assuming rdfs:seeAlso links to the ortholog protein\n\n  #OPTIONAL: Try to find a link to OrthoDB, if available.  This is speculative.\n  OPTIONAL {\n    ?ortholog rdfs:seeAlso ?orthoDBLink .\n    FILTER (CONTAINS(str(?orthoDBLink), \"orthodb.org\")) # Filter for OrthoDB links\n  }\n\n  # Get the protein identifier\n  ?protein a up:Protein .\n  FILTER (?protein = ?ortholog)\n}",
    "predicted_endpoint": "https://sparql.uniprot.org/sparql",
    "predicted_endpoint_equal_to_target_endpoint": true,
    "predicted_endpoint_in_federates_with": false,
    "predicted_endpoint_or_federated_endpoint": true,
    "run_id_langsmith": "af3ec467-3f10-46eb-8e06-e649a2cd9727",
    "evaluation_timestamp": "2025-05-12T13:40:01.185512",
    "question_understanding_prompt_tokens": 275,
    "question_understanding_completion_tokens": 43,
    "question_understanding_total_tokens": 318,
    "sparql_query_construction_prompt_tokens": 2576,
    "sparql_query_construction_completion_tokens": 450,
    "sparql_query_construction_total_tokens": 3026,
    "is_valid_sparql": true,
    "sparql_syntax_error": "syntactically correct",
    "result_eval_f1_score": 0.0,
    "result_eval_precision": 0.0,
    "result_eval_recall": 0.0,
    "error_occured_at_endpoint": true,
    "predicted_query_result_is_empty": true,
    "ground_truth_query_result_is_empty": true,
    "error_occured_at_endpoint_message": "The read operation timed out"
  },
  {
    "resource": "https://sparql.uniprot.org/.well-known/sparql-examples/60",
    "natural_language_question": "Find human proteins that catalyze reactions where substrates or product have a <a href=\"https://www.ebi.ac.uk/chebi/searchId.do?chebiId=CHEBI:35516\">Cholestane skeleton</a>",
    "ground_truth_query": "PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX rh: <http://rdf.rhea-db.org/>\nPREFIX sachem: <http://bioinfo.uochb.cas.cz/rdf/v1.0/sachem#>\nPREFIX taxon: <http://purl.uniprot.org/taxonomy/>\nPREFIX up: <http://purl.uniprot.org/core/>\n\nSELECT\n  DISTINCT\n    ?protein\n    ?disease\n    ?rhea\n    ?chebi\n    ?omim\nWHERE {\n    # Find complete ChEBIs with a Cholestane skeleton, via the Czech Elixir node IDSM Sachem chemical substructure search.\n    SERVICE <https://idsm.elixir-czech.cz/sparql/endpoint/chebi> {\n      ?chebi sachem:substructureSearch [\n        sachem:query\n\"[C@]12(CCC3CCCC[C@]3(C)[C@@]1([H])CC[C@]1(C)[C@@]([H])([C@@](C)([H])CCCC(C)C)CC[C@@]21[H])[H]\"\n].\n   }\n   # Use the fact that UniProt catalytic activities are annotated using Rhea \n   # Mapping the found ChEBIs to Rhea reactions\n   SERVICE <https://sparql.rhea-db.org/sparql>{\n     ?rhea rh:side/rh:contains/rh:compound/rdfs:subClassOf ?chebi .\n   }\n   # Match the found Rhea reactions with human UniProtKB proteins\n   ?protein up:annotation/up:catalyticActivity/up:catalyzedReaction ?rhea .\n   ?protein up:organism taxon:9606 .\n   # Find only those human entries that have an annotated related disease, and optionaly map these to OMIM\n   ?protein up:annotation/up:disease ?disease .\n   OPTIONAL {\n     ?disease rdfs:seeAlso ?omim .\n     ?omim up:database <http://purl.uniprot.org/database/MIM>\n   }\n}",
    "target_endpoint": "https://sparql.uniprot.org/sparql/",
    "federates_with": [
      "https://idsm.elixir-czech.cz/sparql/endpoint/chebi",
      "https://sparql.rhea-db.org/sparql"
    ],
    "endpoint_set": "Uniprot",
    "file_path": "UniProt/60_enzymes_working_on_substrate_with_Cholestene_backbone.ttl",
    "predicted_query": "# https://sparql.uniprot.org/sparql\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX up: <http://purl.uniprot.org/core/>\nPREFIX uniprot: <http://purl.uniprot.org/uniprot/>\nPREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>\nPREFIX rhea: <http://rdf.rhea-db.org/>\nPREFIX chebi: <http://purl.obolibrary.org/obo/CHEBI_>\n\nSELECT DISTINCT ?protein ?proteinName ?reaction ?reactionEquation\nWHERE {\n  # Find human proteins in UniProt\n  SERVICE <https://sparql.uniprot.org/sparql> {\n    ?protein a up:Protein ;\n             up:organism uniprot:9606 ; # Homo sapiens\n             rdfs:label ?proteinName .\n  }\n\n  # Link to Rhea DB to find reactions catalyzed by the protein\n  SERVICE <https://sparql.rhea-db.org/sparql> {\n    ?reaction rhea:equation ?reactionEquation ;\n              rhea:directionalReaction ?directionalReaction .\n    ?directionalReaction rhea:enzyme ?proteinResource .\n    \n    # Filter reactions where the substrates or products have a Cholestane skeleton\n    {\n      ?directionalReaction rhea:substrate ?substrate .\n      ?substrate rdfs:label ?substrateLabel .\n      FILTER (contains(lcase(?substrateLabel), \"cholestane\")) # Simple string filter as backup\n      FILTER (STRSTARTS(str(?substrate), \"http://purl.obolibrary.org/obo/CHEBI_\")) # Ensure it's a CHEBI ID\n    }\n    UNION\n    {\n      ?directionalReaction rhea:product ?product .\n      ?product rdfs:label ?productLabel .\n      FILTER (contains(lcase(?productLabel), \"cholestane\")) # Simple string filter as backup\n      FILTER (STRSTARTS(str(?product), \"http://purl.obolibrary.org/obo/CHEBI_\")) # Ensure it's a CHEBI ID\n    }\n    \n    FILTER (STRSTARTS(str(?proteinResource), str(?protein))) # Link UniProt protein to Rhea enzyme\n  }\n}",
    "predicted_endpoint": "https://sparql.uniprot.org/sparql",
    "predicted_endpoint_equal_to_target_endpoint": true,
    "predicted_endpoint_in_federates_with": false,
    "predicted_endpoint_or_federated_endpoint": true,
    "run_id_langsmith": "9294989a-4300-4113-b5d5-f93eafbc6f6e",
    "evaluation_timestamp": "2025-05-12T13:50:48.827328",
    "question_understanding_prompt_tokens": 295,
    "question_understanding_completion_tokens": 38,
    "question_understanding_total_tokens": 333,
    "sparql_query_construction_prompt_tokens": 3494,
    "sparql_query_construction_completion_tokens": 703,
    "sparql_query_construction_total_tokens": 4197,
    "is_valid_sparql": true,
    "sparql_syntax_error": "syntactically correct",
    "result_eval_f1_score": 0.0,
    "result_eval_precision": 0.0,
    "result_eval_recall": 0.0,
    "error_occured_at_endpoint": false,
    "predicted_query_result_is_empty": true,
    "ground_truth_query_result_is_empty": false,
    "error_occured_at_endpoint_message": "no error, but empty result"
  },
  {
    "resource": "https://sparql.uniprot.org/.well-known/sparql-examples/70_enzymes_interacting_with_molecules_similar_to_dopamine",
    "natural_language_question": "Look for enzymes catalyzing reactions with molecules similar to dopamine.",
    "ground_truth_query": "PREFIX CHEBI: <http://purl.obolibrary.org/obo/CHEBI_>\nPREFIX rh: <http://rdf.rhea-db.org/>\nPREFIX sachem: <http://bioinfo.uochb.cas.cz/rdf/v1.0/sachem#>\nPREFIX up: <http://purl.uniprot.org/core/>\n\nSELECT\n  ?protein\n  ?rhea\n  ?chebi\nWHERE {\n  # Use the smiles of dopamine CHEBI:18243\n  SERVICE <https://idsm.elixir-czech.cz/sparql/endpoint/chebi>{\n    ?chebi sachem:similarCompoundSearch [\n      sachem:query \"NCCc1ccc(O)c(O)c1\" ] .\n  }\n  GRAPH<https://sparql.rhea-db.org/rhea>{\n    ?rhea rh:side/rh:contains/rh:compound ?compound .\n    ?compound (rh:chebi|(rh:reactivePart/rh:chebi)|(rh:underlyingChebi/rh:chebi)) ?chebi .\n  }\n  ?protein up:reviewed true ;\n    up:annotation ?caa .\n  ?caa up:catalyticActivity/up:catalyzedReaction ?rhea .\n}",
    "target_endpoint": "https://sparql.uniprot.org/sparql/",
    "federates_with": [
      "https://idsm.elixir-czech.cz/sparql/endpoint/chebi"
    ],
    "endpoint_set": "Uniprot",
    "file_path": "UniProt/70_enzymes_interacting_with_molecules_similar_to_dopamine.ttl",
    "predicted_query": "# https://sparql.rhea-db.org/sparql\nPREFIX rhea: <http://rdf.rhea-db.org/>\nPREFIX chebi: <http://purl.obolibrary.org/obo/CHEBI_>\nPREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>\nPREFIX uniprot: <http://purl.uniprot.org/core/>\nPREFIX skos: <http://www.w3.org/2004/02/skos/core#>\n\nSELECT DISTINCT ?enzyme ?enzymeName ?reaction ?reactionEquation ?dopamineOrSimilarMolecule\nWHERE {\n  # Find reactions in Rhea involving dopamine\n  {\n    ?reaction rhea:equation ?reactionEquation .\n    ?reaction rhea:hasParticipant ?dopamine .\n    ?dopamine skos:exactMatch chebi:28857 .  #CHEBI ID for dopamine\n    BIND (chebi:28857 AS ?dopamineOrSimilarMolecule)\n  }\n  UNION\n  {\n    #Find reactions involving molecules similar to dopamine using ChEBI's related entities\n    ?reaction rhea:equation ?reactionEquation .\n    ?reaction rhea:hasParticipant ?dopamineOrSimilarMolecule .\n    ?dopamineOrSimilarMolecule chebi:is_a* chebi:28857 . # Find compounds that are a type of dopamine\n  }\n\n  # Find the enzyme catalyzing the reaction\n  ?reaction rhea:catalyzedBy ?enzyme .\n\n  # Get the enzyme name from Rhea\n  ?enzyme rdfs:label ?enzymeName .\n\n  #OPTIONAL {\n  #  SERVICE <https://sparql.uniprot.org/sparql> {\n  #    #Federate with UniProt to get more information about the enzyme\n  #    ?uniprotEnzyme skos:exactMatch ?enzyme .\n  #    ?uniprotEnzyme uniprot:recommendedName ?recommendedName .\n  #    ?recommendedName rdfs:label ?enzymeNameUniprot .\n  #  }\n  #}\n}\nLIMIT 100",
    "predicted_endpoint": "https://sparql.rhea-db.org/sparql",
    "predicted_endpoint_equal_to_target_endpoint": false,
    "predicted_endpoint_in_federates_with": false,
    "predicted_endpoint_or_federated_endpoint": false,
    "run_id_langsmith": "6caa6f7c-6309-4cd2-a7e7-b5bdb449ebdf",
    "evaluation_timestamp": "2025-05-12T13:51:11.738833",
    "question_understanding_prompt_tokens": 247,
    "question_understanding_completion_tokens": 26,
    "question_understanding_total_tokens": 273,
    "sparql_query_construction_prompt_tokens": 2433,
    "sparql_query_construction_completion_tokens": 712,
    "sparql_query_construction_total_tokens": 3145,
    "is_valid_sparql": false,
    "sparql_syntax_error": "Line 29, column 11: Unresolved prefixed name: rdfs:label",
    "result_eval_f1_score": 0.0,
    "result_eval_precision": 0.0,
    "result_eval_recall": 0.0,
    "error_occured_at_endpoint": false,
    "predicted_query_result_is_empty": true,
    "ground_truth_query_result_is_empty": false,
    "error_occured_at_endpoint_message": "syntactically not correct"
  },
  {
    "resource": "https://sparql.uniprot.org/.well-known/sparql-examples/38",
    "natural_language_question": "For the human entry P05067 (Amyloid-beta precursor protein) find the gene start ends in WikiData",
    "ground_truth_query": "PREFIX p: <http://www.wikidata.org/prop/>\nPREFIX pq: <http://www.wikidata.org/prop/qualifier/>\nPREFIX ps: <http://www.wikidata.org/prop/statement/>\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX uniprotkb: <http://purl.uniprot.org/uniprot/>\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\n\n\nSELECT \n\t?protein \n\t?begin\n\t?end\n\t?chromosome\n\t?assembly\nWHERE {\n    {\n        BIND(uniprotkb:P05067 AS ?proteinIRI)\n        BIND (SUBSTR(STR(?proteinIRI), STRLEN(STR(uniprotkb:))+1) AS ?protein)\n    }\n    SERVICE <https://query.wikidata.org/sparql> {\n        ?wp wdt:P352 ?protein ;\n            wdt:P702 ?wg . \n        ?wg p:P644   ?wgss .\n        ?wgss ps:P644        ?begin ;\n          pq:P1057/wdt:P1813 ?chromosome ;\n          pq:P659/rdfs:label ?assembly .\n        ?wg p:P645 ?wgse .\n        ?wgse ps:P645        ?end ;\n          pq:P1057/wdt:P1813 ?chromosome ;\n          pq:P659/rdfs:label ?assembly .\n        FILTER(lang(?assembly) = \"en\")\n  } \n}",
    "target_endpoint": "https://sparql.uniprot.org/sparql/",
    "federates_with": [
      "https://query.wikidata.org/sparql"
    ],
    "endpoint_set": "Uniprot",
    "file_path": "UniProt/38_find_gene_region_in_wikidata_for_known_entry.ttl",
    "predicted_query": "# https://sparql.uniprot.org/sparql\nPREFIX up: <http://purl.uniprot.org/core/>\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX wd: <http://www.wikidata.org/entity/>\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\n\nSELECT ?geneName ?geneStart ?geneEnd\nWHERE {\n  # Find the UniProt entry for Amyloid-beta precursor protein (P05067)\n  VALUES (?protein) { (up:P05067) }\n\n  # Get the gene associated with the protein\n  ?protein up:encodedBy ?gene .\n  ?gene rdfs:label ?geneName .\n\n  #Federate with WikiData to get gene start and end positions\n  SERVICE <https://query.wikidata.org/sparql> {\n    # Find the WikiData entry for the gene using the gene name\n    ?geneWD wdt:P353 ?geneName .  # P353 is the UniProt gene name property in WikiData\n    \n    # Get the gene start and end positions (replace P??? with the actual properties if different)\n    OPTIONAL { ?geneWD wdt:P552 ?geneStart . } #Example property for gene start\n    OPTIONAL { ?geneWD wdt:P553 ?geneEnd . }   #Example property for gene end\n  }\n}",
    "predicted_endpoint": "https://sparql.uniprot.org/sparql",
    "predicted_endpoint_equal_to_target_endpoint": true,
    "predicted_endpoint_in_federates_with": false,
    "predicted_endpoint_or_federated_endpoint": true,
    "run_id_langsmith": "dfb9ce82-1c78-4518-a09a-e931510fcf90",
    "evaluation_timestamp": "2025-05-12T13:51:29.692783",
    "question_understanding_prompt_tokens": 260,
    "question_understanding_completion_tokens": 53,
    "question_understanding_total_tokens": 313,
    "sparql_query_construction_prompt_tokens": 2813,
    "sparql_query_construction_completion_tokens": 543,
    "sparql_query_construction_total_tokens": 3356,
    "is_valid_sparql": true,
    "sparql_syntax_error": "syntactically correct",
    "result_eval_f1_score": 0.0,
    "result_eval_precision": 0.0,
    "result_eval_recall": 0.0,
    "error_occured_at_endpoint": false,
    "predicted_query_result_is_empty": true,
    "ground_truth_query_result_is_empty": false,
    "error_occured_at_endpoint_message": "no error, but empty result"
  },
  {
    "resource": "https://sparql.uniprot.org/.well-known/sparql-examples/117_biosodafrontend_glioblastoma_orthologs_rat",
    "natural_language_question": "Which are the proteins associated with glioblastoma and the orthologs expressed in the rat brain?",
    "ground_truth_query": "PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX obo: <http://purl.obolibrary.org/obo/>\nPREFIX orth: <http://purl.org/net/orth#>\nPREFIX sio: <http://semanticscience.org/resource/>\nPREFIX taxon: <http://purl.uniprot.org/taxonomy/>\nPREFIX up: <http://purl.uniprot.org/core/>\nPREFIX lscr: <http://purl.org/lscr#>\nPREFIX genex: <http://purl.org/genex#>\nSELECT DISTINCT ?protein ?orthologous_protein ?gene ?annotation_text WHERE {\n  {\n  \tSELECT ?protein ?annotation_text WHERE {\n      ?protein a up:Protein ;\n          up:organism taxon:9606 ;\n          up:annotation ?annotation .\n      ?annotation rdfs:comment ?annotation_text .\n      ?annotation a up:Disease_Annotation .\n      FILTER CONTAINS (?annotation_text, \"glioblastoma\")\n    }\n  }\n  SERVICE <https://sparql.omabrowser.org/sparql/> {\n    SELECT ?orthologous_protein ?protein ?gene WHERE {\n    ?protein_OMA a orth:Protein .\n    ?orthologous_protein a orth:Protein .\n    ?cluster a orth:OrthologsCluster .\n    ?cluster orth:hasHomologousMember ?node1 .\n    ?cluster\n    orth:hasHomologousMember ?node2 .\n    ?node2 orth:hasHomologousMember* ?protein_OMA .\n    ?node1 orth:hasHomologousMember* ?orthologous_protein .\n    ?orthologous_protein orth:organism/obo:RO_0002162 taxon:10116 . # rattus norvegicus\n    ?orthologous_protein sio:SIO_010079 ?gene .\n    ?protein_OMA lscr:xrefUniprot ?protein .\n    FILTER(?node1 != ?node2)\n\t\t}\n\t}\n  SERVICE <https://www.bgee.org/sparql/> {\n    ?gene genex:isExpressedIn ?a .\n    ?a rdfs:label \"brain\" .\n    ?gene orth:organism ?s . \n    ?s obo:RO_0002162 taxon:10116.\n\t}\n}",
    "target_endpoint": "https://sparql.uniprot.org/sparql",
    "federates_with": [
      "https://sparql.omabrowser.org/sparql/",
      "https://www.bgee.org/sparql/"
    ],
    "endpoint_set": "Uniprot",
    "file_path": "UniProt/117_biosodafrontend_glioblastoma_orthologs_rat.ttl",
    "predicted_query": "# https://sparql.uniprot.org/sparql\nPREFIX up: <http://purl.uniprot.org/core/>\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX taxon: <http://purl.uniprot.org/taxonomy/>\n\nSELECT DISTINCT ?protein ?proteinName ?ortholog ?orthologName\nWHERE {\n  # Find proteins associated with glioblastoma\n  {\n    SELECT DISTINCT ?protein ?proteinName WHERE {\n      ?protein a up:Protein .\n      ?protein up:annotation ?annotation .\n      ?annotation up:disease <http://purl.uniprot.org/diseases/2566> . # Glioma\n      ?protein rdfs:label ?proteinName .\n    }\n  }\n\n  # Find orthologs of those proteins that are expressed in rat brain\n  SERVICE <https://sparql.uniprot.org/sparql> {\n    ?ortholog a up:Protein .\n    ?ortholog up:sequence ?sequence .\n    ?sequence up:organism taxon:10116 . # Rattus norvegicus (Rat)\n    ?ortholog up:gene ?gene .\n    ?gene up:orfName ?protein . # Link to the original protein\n    ?ortholog rdfs:label ?orthologName .\n  }\n}",
    "predicted_endpoint": "https://sparql.uniprot.org/sparql",
    "predicted_endpoint_equal_to_target_endpoint": true,
    "predicted_endpoint_in_federates_with": false,
    "predicted_endpoint_or_federated_endpoint": true,
    "run_id_langsmith": "208b00ca-7636-4b18-a5b8-697ecd9bd832",
    "evaluation_timestamp": "2025-05-12T13:51:44.475673",
    "question_understanding_prompt_tokens": 258,
    "question_understanding_completion_tokens": 37,
    "question_understanding_total_tokens": 295,
    "sparql_query_construction_prompt_tokens": 2544,
    "sparql_query_construction_completion_tokens": 485,
    "sparql_query_construction_total_tokens": 3029,
    "is_valid_sparql": true,
    "sparql_syntax_error": "syntactically correct",
    "result_eval_f1_score": 0.0,
    "result_eval_precision": 0.0,
    "result_eval_recall": 0.0,
    "error_occured_at_endpoint": false,
    "predicted_query_result_is_empty": true,
    "ground_truth_query_result_is_empty": false,
    "error_occured_at_endpoint_message": "no error, but empty result"
  },
  {
    "resource": "https://sparql.uniprot.org/.well-known/sparql-examples/116_biosodafrontend_rabit_mouse_orthologs",
    "natural_language_question": "Rabbit's proteins encoded by genes that are orthologous to Mouse's HBB-Y gene and their cross reference links to Uniprot",
    "ground_truth_query": "PREFIX lscr: <http://purl.org/lscr#>\nPREFIX orth: <http://purl.org/net/orth#>\nPREFIX up: <http://purl.uniprot.org/core/>\nPREFIX obo: <http://purl.obolibrary.org/obo/>\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nSELECT DISTINCT ?PROTEIN_1 ?PROTEIN_2 ?UNIPROT_XREF_1 ?UNIPROT_XREF_2 WHERE {\n\t?taxon_1 up:commonName 'Mouse' .\n\t?taxon_2 up:commonName 'Rabbit' .\n\tSERVICE <https://sparql.omabrowser.org/sparql/> {\n\t\t?cluster a orth:OrthologsCluster .\n\t\t?cluster orth:hasHomologousMember ?node1 .\n\t\t?cluster orth:hasHomologousMember ?node2 .\n\t\t?node2 orth:hasHomologousMember* ?PROTEIN_2 .\n\t\t?node1 orth:hasHomologousMember* ?PROTEIN_1 .\n\t\t?PROTEIN_1 a orth:Protein .\n\t\t?PROTEIN_1 orth:organism/obo:RO_0002162 ?taxon_1 ;\n\t\t\trdfs:label 'HBB-Y' ;\n\t\t\tlscr:xrefUniprot ?UNIPROT_XREF_1 .\n\t\t?PROTEIN_2 a orth:Protein .\n\t\t?PROTEIN_2 orth:organism/obo:RO_0002162 ?taxon_2 .\n\t\t?PROTEIN_2 lscr:xrefUniprot ?UNIPROT_XREF_2 .\n\t\tFILTER ( ?node1 != ?node2 )\n\t}\n}",
    "target_endpoint": "https://sparql.uniprot.org/sparql",
    "federates_with": [
      "https://sparql.omabrowser.org/sparql/"
    ],
    "endpoint_set": "Uniprot",
    "file_path": "UniProt/116_biosodafrontend_rabit_mouse_orthologs.ttl",
    "predicted_query": "# https://sparql.uniprot.org/sparql\nPREFIX up: <http://purl.uniprot.org/core/>\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX taxon: <http://purl.uniprot.org/taxonomy/>\n\nSELECT DISTINCT ?rabbitProtein ?uniprotCrossReference\nWHERE {\n  # Find mouse proteins associated with the gene HBB-Y.  Using a FILTER to match the name.\n  SERVICE <https://sparql.uniprot.org/sparql> {\n    SELECT DISTINCT ?mouseProtein WHERE {\n      ?mouseProtein a up:Protein .\n      ?mouseProtein up:organism taxon:10090 .  # Mouse taxonomy ID\n      ?mouseProtein rdfs:label ?label .\n      FILTER (CONTAINS(lcase(?label), \"HBB-Y\")) # Filter to find the HBB-Y gene\n    }\n  }\n\n  # Find orthologous proteins in rabbit\n  SERVICE <https://sparql.uniprot.org/sparql> {\n    ?rabbitProtein a up:Protein .\n    ?rabbitProtein up:organism taxon:9986 . # Rabbit taxonomy ID\n    ?rabbitProtein up:sequence ?sequence .\n    ?mouseProtein up:sequence ?mouseSequence .\n    FILTER (?sequence = ?mouseSequence) # Assuming orthologs have similar sequences.  This is a simplification.\n    OPTIONAL { ?rabbitProtein up:database ?uniprotCrossReference . } # Get cross-references.\n  }\n}",
    "predicted_endpoint": "https://sparql.uniprot.org/sparql",
    "predicted_endpoint_equal_to_target_endpoint": true,
    "predicted_endpoint_in_federates_with": false,
    "predicted_endpoint_or_federated_endpoint": true,
    "run_id_langsmith": "e3c42136-9d5a-42b4-845f-2353fa5968f7",
    "evaluation_timestamp": "2025-05-12T13:52:09.901872",
    "question_understanding_prompt_tokens": 269,
    "question_understanding_completion_tokens": 49,
    "question_understanding_total_tokens": 318,
    "sparql_query_construction_prompt_tokens": 3425,
    "sparql_query_construction_completion_tokens": 521,
    "sparql_query_construction_total_tokens": 3946,
    "is_valid_sparql": true,
    "sparql_syntax_error": "syntactically correct",
    "result_eval_f1_score": 0.0,
    "result_eval_precision": 0.0,
    "result_eval_recall": 0.0,
    "error_occured_at_endpoint": true,
    "predicted_query_result_is_empty": true,
    "ground_truth_query_result_is_empty": true,
    "error_occured_at_endpoint_message": "The read operation timed out"
  },
  {
    "resource": "https://sparql.uniprot.org/.well-known/sparql-examples/29",
    "natural_language_question": "Use <a href=\"http://allie.dbcls.jp/\">ALLIE</a> a service for Abbreviation / Long Form in Japanese and English to search in UniProt using Japanese.",
    "ground_truth_query": "PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX up: <http://purl.uniprot.org/core/>\n\nSELECT ?protein ?englishLabelStr\nWHERE {\n    SERVICE <https://data.allie.dbcls.jp/sparql>{\n        ?x rdfs:label \"アミロイド前駆体タンパク質\"@ja ;\n            rdfs:label ?englishLabel .\n        FILTER(lang(?englishLabel) = \"en\")\n    }\n    BIND (STR(?englishLabel) AS ?englishLabelStr)\n    ?protein a up:Protein .\n    {\n        ?protein (up:recommendedName|up:alternativeName) ?structuredName .\n    }\n    UNION\n    {\n        VALUES(?partType){(up:domain) (up:component)}\n            ?protein ?partType ?part .\n        ?part (up:recommendedName|up:alternativeName) ?structuredName .\n    }\n    ?structuredName ?anyKindOfName  ?englishLabelStr .\n    ?anyKindOfName rdfs:subPropertyOf up:structuredNameType .\n}",
    "target_endpoint": "https://sparql.uniprot.org/sparql/",
    "federates_with": [
      "https://data.allie.dbcls.jp/sparql"
    ],
    "endpoint_set": "Uniprot",
    "file_path": "UniProt/29_search_uniprot_in_japanese_with_allie.ttl",
    "predicted_query": "# https://sparql.uniprot.org/sparql\n# Search UniProt for proteins using translated Japanese terms (assuming the user provides the translated terms).\n# This query assumes that the translated terms can be used to search protein names or descriptions.\n\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX up: <http://purl.uniprot.org/core/>\n\nSELECT ?protein ?proteinName ?definition\nWHERE {\n  # Search for UniProt entries that have a name or definition matching the translated terms.\n  # Replace \"TRANSLATED_JAPANESE_TERM\" with the actual translated term from ALLIE.\n  ?protein a up:Protein .\n  ?protein rdfs:label ?proteinName .\n  FILTER (CONTAINS(LCASE(?proteinName), \"TRANSLATED_JAPANESE_TERM\")) . # Case-insensitive search\n\n  OPTIONAL { ?protein up:definition ?definition . } # Get the definition if available.\n}",
    "predicted_endpoint": "https://sparql.uniprot.org/sparql",
    "predicted_endpoint_equal_to_target_endpoint": true,
    "predicted_endpoint_in_federates_with": false,
    "predicted_endpoint_or_federated_endpoint": true,
    "run_id_langsmith": "c847c77a-f8b7-495f-91a3-202cf0c4268e",
    "evaluation_timestamp": "2025-05-12T14:02:20.128045",
    "question_understanding_prompt_tokens": 278,
    "question_understanding_completion_tokens": 24,
    "question_understanding_total_tokens": 302,
    "sparql_query_construction_prompt_tokens": 1754,
    "sparql_query_construction_completion_tokens": 357,
    "sparql_query_construction_total_tokens": 2111,
    "is_valid_sparql": true,
    "sparql_syntax_error": "syntactically correct",
    "result_eval_f1_score": 0.0,
    "result_eval_precision": 0.0,
    "result_eval_recall": 0.0,
    "error_occured_at_endpoint": true,
    "predicted_query_result_is_empty": true,
    "ground_truth_query_result_is_empty": true,
    "error_occured_at_endpoint_message": "The read operation timed out"
  },
  {
    "resource": "https://sparql.rhea-db.org/.well-known/sparql-examples/94_Select_all_approved_reactions_with_CHEBI_or_one_of_its_descendant_optional_UniProtKB_reviewed_EC",
    "natural_language_question": "Select all approved reactions with CHEBI:17815 (a 1,2-diacyl-sn-glycerol) or one of its descendant. Display links to UniProtKB/Swiss-Prot entries via EC numbers if the link rhea-ec exists.",
    "ground_truth_query": "PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX rh:<http://rdf.rhea-db.org/>\nPREFIX CHEBI:<http://purl.obolibrary.org/obo/CHEBI_>\nPREFIX up:<http://purl.uniprot.org/core/>\n\nSELECT\n  distinct\n    ?reaction\n    ?enzyme\n    (count(distinct ?protein) as ?proteinCount)\nWHERE {\n  ?reaction rdfs:subClassOf rh:Reaction .\n  ?reaction rh:status rh:Approved .\n  ?reaction rh:side ?reactionSide .\n\n  OPTIONAL {?reaction rh:ec ?enzyme .\n    SERVICE <https://sparql.uniprot.org/sparql> {\n      ?protein up:reviewed true .\n      ?protein up:enzyme ?enzyme.\n    }\n  } .\n  ?reactionSide rh:contains ?participant .\n  ?participant rh:compound ?compound .\n  ?compound rh:chebi ?chebi .\n  ?chebi rdfs:subClassOf* CHEBI:17815 .\n}\nGROUP BY ?reaction ?enzyme\nORDER BY ?reaction\nLIMIT 985915",
    "target_endpoint": "https://sparql.rhea-db.org/sparql",
    "federates_with": [
      "https://sparql.uniprot.org/sparql"
    ],
    "endpoint_set": "Rhea",
    "file_path": "Rhea/94_Select_all_approved_reactions_with_CHEBI_or_one_of_its_descendant_optional_UniProtKB_reviewed_EC.ttl",
    "predicted_query": "# https://sparql.rhea-db.org/sparql\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX rhea: <http://rdf.rhea-db.org/>\nPREFIX chebi: <http://purl.obolibrary.org/obo/CHEBI_>\nPREFIX obo: <http://purl.obolibrary.org/obo/>\n\nSELECT DISTINCT ?reaction ?reactionName ?uniprotEntry\nWHERE {\n  # Find CHEBI:17815 and its descendants\n  {\n    BIND(chebi:17815 AS ?chebiEntity)\n  }\n  UNION\n  {\n    ?chebiEntity rdfs:subClassOf chebi:17815 .\n  }\n\n  # Find reactions that have ?chebiEntity as a participant\n  ?reaction rhea:hasParticipant ?chebiEntity .\n  ?reaction rdfs:label ?reactionName .\n\n  # Filter for approved reactions\n  ?reaction rhea:status \"approved\" .\n\n  # Optional: Link to UniProtKB/Swiss-Prot entries via EC numbers\n  OPTIONAL {\n    ?reaction rhea:ec ?ecNumber .\n    \n    # Query UniProt SPARQL endpoint\n    SERVICE <https://sparql.uniprot.org/sparql> {\n      PREFIX up: <http://purl.uniprot.org/core/>\n      PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\n      \n      ?uniprotEntry up:annotation ?annotation .\n      ?annotation a up:Protein_Annotation .\n      ?annotation rdfs:seeAlso ?ecResource .\n      FILTER CONTAINS(STR(?ecResource), ?ecNumber) .\n    }\n  }\n}",
    "predicted_endpoint": "https://sparql.rhea-db.org/sparql",
    "predicted_endpoint_equal_to_target_endpoint": true,
    "predicted_endpoint_in_federates_with": false,
    "predicted_endpoint_or_federated_endpoint": true,
    "run_id_langsmith": "02873193-e5bb-4905-ba52-ab92b30a89a6",
    "evaluation_timestamp": "2025-05-12T14:12:39.252415",
    "question_understanding_prompt_tokens": 295,
    "question_understanding_completion_tokens": 97,
    "question_understanding_total_tokens": 392,
    "sparql_query_construction_prompt_tokens": 2975,
    "sparql_query_construction_completion_tokens": 704,
    "sparql_query_construction_total_tokens": 3679,
    "is_valid_sparql": false,
    "sparql_syntax_error": "Encountered \" \"prefix\" \"PREFIX \"\" at line 31, column 7.\nWas expecting one of:\n     ...\n     ...\n     ...\n     ...\n     ...\n     ...\n    \"select\" ...\n    \"values\" ...\n    \"graph\" ...\n    \"optional\" ...\n    \"minus\" ...\n    \"bind\" ...\n    \"service\" ...\n    \"filter\" ...\n    \"true\" ...\n    \"false\" ...\n     ...\n     ...\n     ...\n     ...\n     ...\n     ...\n     ...\n     ...\n     ...\n     ...\n     ...\n     ...\n     ...\n    \"(\" ...\n     ...\n    \"{\" ...\n    \"}\" ...\n    \"[\" ...\n     ...\n    \"<<(\" ...\n    \"<<\" ...",
    "result_eval_f1_score": 0.0,
    "result_eval_precision": 0.0,
    "result_eval_recall": 0.0,
    "error_occured_at_endpoint": false,
    "predicted_query_result_is_empty": true,
    "ground_truth_query_result_is_empty": false,
    "error_occured_at_endpoint_message": "syntactically not correct"
  },
  {
    "resource": "https://sparql.rhea-db.org/.well-known/sparql-examples/11",
    "natural_language_question": "Distribution of reactions according to the first class of the enzyme classification (federated query)",
    "ground_truth_query": "PREFIX ec: <http://purl.uniprot.org/enzyme/>\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX rh: <http://rdf.rhea-db.org/>\nPREFIX skos: <http://www.w3.org/2004/02/skos/core#>\n\n# Query 11\n# Retrieve the count of reactions mapped to each level (main class) of the enzyme classification\n#\n# This query mimics the Filter section of the Rhea website (Browse all reactions)\n# https://www.rhea-db.org/rhea?query=\nSELECT ?ecClass (STR(?ecName) AS ?ecClassName) (COUNT(?rhea) AS ?rheaCount)\nWHERE {\n  SERVICE <https://sparql.uniprot.org/sparql> {\n    VALUES (?ecClass) { (ec:1.-.-.-)(ec:2.-.-.-)(ec:3.-.-.-)(ec:4.-.-.-)(ec:5.-.-.-) (ec:6.-.-.-) (ec:7.-.-.-)}\n    ?ecNumber rdfs:subClassOf ?ecClass .\n    ?ecClass skos:prefLabel ?ecName .\n  }\n  ?rhea rdfs:subClassOf rh:Reaction .\n  ?rhea rh:ec ?ecNumber .\n} GROUP BY ?ecClass ?ecName",
    "target_endpoint": "https://sparql.rhea-db.org/sparql",
    "federates_with": [
      "https://sparql.uniprot.org/sparql"
    ],
    "endpoint_set": "Rhea",
    "file_path": "Rhea/11.ttl",
    "predicted_query": "# https://sparql.rhea-db.org/sparql\nPREFIX rhea: <http://rdf.rhea-db.org/>\nPREFIX uniprot: <http://purl.uniprot.org/core/>\n\nSELECT ?enzymeClass (COUNT(DISTINCT ?reaction) AS ?reactionCount)\nWHERE {\n  # Get reactions and their associated UniProt IDs from Rhea\n  SERVICE <https://sparql.rhea-db.org/sparql> {\n    ?reaction a rhea:Reaction .\n    ?reaction rhea:enzyme ?enzyme .\n    ?enzyme rdfs:seeAlso ?uniprotID .\n    FILTER (REGEX(str(?uniprotID), \"uniprot.org/uniprotkb\")) # Filter to ensure it's a UniProt ID\n  }\n\n  # Get the EC number from UniProt using the UniProt ID\n  SERVICE <https://sparql.uniprot.org/sparql> {\n    ?uniprotResource a uniprot:Protein ;\n       rdfs:seeAlso ?uniprotID ; # Link to the same UniProt ID from Rhea\n       uniprot:ecNumber ?ecNumber .\n  }\n\n  # Extract the first digit of the EC number (enzyme class)\n  BIND(SUBSTR(STR(?ecNumber), 1, 1) AS ?enzymeClass)\n}\nGROUP BY ?enzymeClass\nORDER BY ?enzymeClass",
    "predicted_endpoint": "https://sparql.rhea-db.org/sparql",
    "predicted_endpoint_equal_to_target_endpoint": true,
    "predicted_endpoint_in_federates_with": false,
    "predicted_endpoint_or_federated_endpoint": true,
    "run_id_langsmith": "354d113f-8159-4131-9b15-b4bc25b4be31",
    "evaluation_timestamp": "2025-05-12T14:12:48.428332",
    "question_understanding_prompt_tokens": 254,
    "question_understanding_completion_tokens": 26,
    "question_understanding_total_tokens": 280,
    "sparql_query_construction_prompt_tokens": 1531,
    "sparql_query_construction_completion_tokens": 559,
    "sparql_query_construction_total_tokens": 2090,
    "is_valid_sparql": false,
    "sparql_syntax_error": "Line 11, column 13: Unresolved prefixed name: rdfs:seeAlso",
    "result_eval_f1_score": 0.0,
    "result_eval_precision": 0.0,
    "result_eval_recall": 0.0,
    "error_occured_at_endpoint": false,
    "predicted_query_result_is_empty": true,
    "ground_truth_query_result_is_empty": false,
    "error_occured_at_endpoint_message": "syntactically not correct"
  },
  {
    "resource": "https://sparql.rhea-db.org/.well-known/sparql-examples/109_Distribution_of_reactions_according_to_the_first_level_of_enzyme_classification",
    "natural_language_question": "Distribution of reactions according to the first level of enzyme classification",
    "ground_truth_query": "\nPREFIX rh:<http://rdf.rhea-db.org/>\nPREFIX ec:<http://purl.uniprot.org/enzyme/>\nPREFIX rdfs:<http://www.w3.org/2000/01/rdf-schema#>\nPREFIX skos:<http://www.w3.org/2004/02/skos/core#>\n\nSELECT\n  ?ecClass\n  (str(?ecName) as ?ecClassName)\n  (count(?reaction) as ?reactionCount)\nWHERE\n{\n  SERVICE <http://sparql.uniprot.org/sparql> {\n    VALUES (?ecClass) { (ec:1.-.-.-)(ec:2.-.-.-)(ec:3.-.-.-)(ec:4.-.-.-)(ec:5.-.-.-) (ec:6.-.-.-) (ec:7.-.-.-) }\n    ?ecNumber rdfs:subClassOf ?ecClass .\n    ?ecClass skos:prefLabel ?ecName .\n  }\n  ?reaction rdfs:subClassOf rh:Reaction .\n  ?reaction rh:ec ?ecNumber .\n}\nGROUP BY ?ecClass ?ecName\n",
    "target_endpoint": "https://sparql.rhea-db.org/sparql",
    "federates_with": [
      "http://sparql.uniprot.org/sparql"
    ],
    "endpoint_set": "Rhea",
    "file_path": "Rhea/109_Distribution_of_reactions_according_to_the_first_level_of_enzyme_classification.ttl",
    "predicted_query": "# https://sparql.rhea-db.org/sparql\nPREFIX rhea: <http://rdf.rhea-db.org/>\nPREFIX chebi: <http://purl.obolibrary.org/obo/CHEBI_>\nPREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\n\nSELECT ?firstLevelEC (COUNT(DISTINCT ?reaction) AS ?reactionCount)\nWHERE {\n  # Get all Rhea reactions\n  SERVICE <https://sparql.rhea-db.org/sparql> {\n    ?reaction rdf:type rhea:Reaction .\n    # Try to find a link to UniProt via a Rhea property (e.g., related enzyme)\n    OPTIONAL { ?reaction rhea:enzyme ?enzyme . }  # Adjust property if needed.  This is an assumption.\n  }\n\n  # If we found an enzyme, query UniProt for the EC number\n  OPTIONAL {\n    SERVICE <https://sparql.uniprot.org/sparql> {\n      ?enzyme uniprot:ec ?ecNumber .  # Assuming uniprot:ec is the correct property. Adjust if needed.\n    }\n  }\n\n  # Extract the first level of the EC number\n  BIND(IF(BOUND(?ecNumber), SUBSTR(STR(?ecNumber), 1, 1), \"Unclassified\") AS ?firstLevelEC)  # Handle cases where EC number is missing\n}\nGROUP BY ?firstLevelEC\nORDER BY DESC(?reactionCount)",
    "predicted_endpoint": "https://sparql.rhea-db.org/sparql",
    "predicted_endpoint_equal_to_target_endpoint": true,
    "predicted_endpoint_in_federates_with": false,
    "predicted_endpoint_or_federated_endpoint": true,
    "run_id_langsmith": "8efd829b-b412-40a1-a940-83799741321d",
    "evaluation_timestamp": "2025-05-12T14:12:59.330592",
    "question_understanding_prompt_tokens": 248,
    "question_understanding_completion_tokens": 24,
    "question_understanding_total_tokens": 272,
    "sparql_query_construction_prompt_tokens": 1540,
    "sparql_query_construction_completion_tokens": 629,
    "sparql_query_construction_total_tokens": 2169,
    "is_valid_sparql": false,
    "sparql_syntax_error": "Line 19, column 15: Unresolved prefixed name: uniprot:ec",
    "result_eval_f1_score": 0.0,
    "result_eval_precision": 0.0,
    "result_eval_recall": 0.0,
    "error_occured_at_endpoint": false,
    "predicted_query_result_is_empty": true,
    "ground_truth_query_result_is_empty": false,
    "error_occured_at_endpoint_message": "syntactically not correct"
  },
  {
    "resource": "https://sparql.rhea-db.org/.well-known/sparql-examples/12",
    "natural_language_question": "Select all Rhea reactions linked to protein sequences (enzymes and transporters) in UniProtKB",
    "ground_truth_query": "PREFIX rh: <http://rdf.rhea-db.org/>\nPREFIX up: <http://purl.uniprot.org/core/>\n\n# Query 12\n# Select all Rhea reactions used to annotate enzyme sequences in UniProtKB\n# return the number of UniProtKB entries\n# Federated query using a service to UniProt SPARQL endpoint\n#\n# This query corresponds to the Rhea website query:\n# https://www.rhea-db.org/rhea?query=uniprot:*\n#\nSELECT ?uniprotCount ?rhea ?accession ?equation \nWHERE {\n  SERVICE <https://sparql.uniprot.org/sparql> { \n  \tSELECT ?rhea (count(?uniprot) as ?uniprotCount) {\n      ?uniprot up:annotation/up:catalyticActivity/up:catalyzedReaction ?rhea . \n  \t}\n  \tGROUP BY ?rhea\n  }\n  ?rhea rh:accession ?accession .\n  ?rhea rh:equation ?equation .\n}",
    "target_endpoint": "https://sparql.rhea-db.org/sparql",
    "federates_with": [
      "https://sparql.uniprot.org/sparql"
    ],
    "endpoint_set": "Rhea",
    "file_path": "Rhea/12.ttl",
    "predicted_query": "# https://sparql.rhea-db.org/sparql\nPREFIX rhea: <http://rdf.rhea-db.org/>\nPREFIX uniprot: <http://purl.uniprot.org/core/>\nPREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>\n\nSELECT DISTINCT ?rheaReaction\nWHERE {\n  # Select Rhea reactions\n  ?rheaReaction rdf:type rhea:Reaction .\n\n  # Find UniProtKB IDs associated with the Rhea reaction.\n  ?rheaReaction rhea:enzyme ?enzyme .\n  ?enzyme rdfs:seeAlso ?uniprotProtein . # Assuming rdfs:seeAlso links to external resources\n\n  # Filter for UniProtKB entries that are protein sequences.\n  SERVICE <https://sparql.uniprot.org/sparql> {\n    ?uniprotProtein a uniprot:Protein .\n    # Optional: Further filter for enzymes or transporters if specific predicates exist in UniProt.\n    # Example (replace with actual predicates if available):\n    #   OPTIONAL { ?uniprotProtein uniprot:classifiedWith <http://purl.uniprot.org/keywords/KW-0940> . }  # Transporters\n    #   OPTIONAL { ?uniprotProtein uniprot:catalyticActivity ?activity . } # Enzymes\n  }\n}",
    "predicted_endpoint": "https://sparql.rhea-db.org/sparql",
    "predicted_endpoint_equal_to_target_endpoint": true,
    "predicted_endpoint_in_federates_with": false,
    "predicted_endpoint_or_federated_endpoint": true,
    "run_id_langsmith": "a852b043-3e82-491f-9285-358079ed5d06",
    "evaluation_timestamp": "2025-05-12T14:13:08.642129",
    "question_understanding_prompt_tokens": 257,
    "question_understanding_completion_tokens": 30,
    "question_understanding_total_tokens": 287,
    "sparql_query_construction_prompt_tokens": 2009,
    "sparql_query_construction_completion_tokens": 500,
    "sparql_query_construction_total_tokens": 2509,
    "is_valid_sparql": false,
    "sparql_syntax_error": "Line 13, column 11: Unresolved prefixed name: rdfs:seeAlso",
    "result_eval_f1_score": 0.0,
    "result_eval_precision": 0.0,
    "result_eval_recall": 0.0,
    "error_occured_at_endpoint": false,
    "predicted_query_result_is_empty": true,
    "ground_truth_query_result_is_empty": false,
    "error_occured_at_endpoint_message": "syntactically not correct"
  },
  {
    "resource": "https://sparql.rhea-db.org/.well-known/sparql-examples/112_Total_number_of_reaction_ec_protein_links",
    "natural_language_question": "Total number of <reaction> <ec> <protein> links",
    "ground_truth_query": "PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX rh:<http://rdf.rhea-db.org/>\nPREFIX ec:<http://purl.uniprot.org/enzyme/>\nPREFIX up:<http://purl.uniprot.org/core/>\n\nSELECT\n  (count(?reaction) as ?reactionEcProteinLinkCount)\nWHERE {\n  ?reaction rdfs:subClassOf rh:Reaction .\n  ?reaction rh:ec ?enzyme\n  SERVICE <http://sparql.uniprot.org/sparql> {\n    ?protein up:reviewed true .\n    ?protein up:enzyme ?enzyme.\n  }\n}",
    "target_endpoint": "https://sparql.rhea-db.org/sparql",
    "federates_with": [
      "http://sparql.uniprot.org/sparql"
    ],
    "endpoint_set": "Rhea",
    "file_path": "Rhea/112_Total_number_of_reaction_ec_protein_links.ttl",
    "predicted_query": "# https://sparql.rhea-db.org/sparql\nPREFIX rhea: <http://rdf.rhea-db.org/>\nPREFIX uniprot: <http://purl.uniprot.org/core/>\nPREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>\n\nSELECT (COUNT(DISTINCT ?reaction) AS ?count)\nWHERE {\n  # Find reactions in Rhea\n  SERVICE <https://sparql.rhea-db.org/sparql> {\n    ?reaction rdf:type rhea:Reaction .\n  }\n  \n  # Link reactions to proteins and EC numbers via UniProt.\n  SERVICE <https://sparql.uniprot.org/sparql> {\n    ?protein uniprot:enzyme ?ec . # Assuming uniprot:enzyme links to EC number\n    ?protein rdfs:seeAlso ?rheaId . # Assuming rdfs:seeAlso links to Rhea ID\n    FILTER CONTAINS(str(?rheaId), str(?reactionId)) # Filter to match the reaction ID\n  }\n  BIND (STRAFTER(str(?reaction), \"http://rdf.rhea-db.org/\") AS ?reactionId)\n}",
    "predicted_endpoint": "https://sparql.rhea-db.org/sparql",
    "predicted_endpoint_equal_to_target_endpoint": true,
    "predicted_endpoint_in_federates_with": false,
    "predicted_endpoint_or_federated_endpoint": true,
    "run_id_langsmith": "38ab803d-5fee-4df0-8c25-91a3b6abf850",
    "evaluation_timestamp": "2025-05-12T14:13:19.397372",
    "question_understanding_prompt_tokens": 254,
    "question_understanding_completion_tokens": 21,
    "question_understanding_total_tokens": 275,
    "sparql_query_construction_prompt_tokens": 2168,
    "sparql_query_construction_completion_tokens": 442,
    "sparql_query_construction_total_tokens": 2610,
    "is_valid_sparql": false,
    "sparql_syntax_error": "Line 16, column 14: Unresolved prefixed name: rdfs:seeAlso",
    "result_eval_f1_score": 0.0,
    "result_eval_precision": 0.0,
    "result_eval_recall": 0.0,
    "error_occured_at_endpoint": false,
    "predicted_query_result_is_empty": true,
    "ground_truth_query_result_is_empty": false,
    "error_occured_at_endpoint_message": "syntactically not correct"
  },
  {
    "resource": "https://sparql.rhea-db.org/.well-known/sparql-examples/19_draft_human_metabolome",
    "natural_language_question": "Generate a draft human metabolome",
    "ground_truth_query": "PREFIX chebislash: <http://purl.obolibrary.org/obo/chebi/>\nPREFIX rh: <http://rdf.rhea-db.org/>\nPREFIX taxon: <http://purl.uniprot.org/taxonomy/>\nPREFIX up: <http://purl.uniprot.org/core/>\n\nSELECT\n  ?uniprot ?mnemonic ?rhea ?chebi ?smiles ?inchiKey\nWHERE\n{\n  ?rhea rh:side/rh:contains/rh:compound ?compound .\n  ?compound (rh:chebi|(rh:reactivePart/rh:chebi)|(rh:underlyingChebi/rh:chebi)) ?chebi .\n  ?chebi chebislash:smiles ?smiles ;\n          chebislash:inchikey ?inchiKey .\n  SERVICE <https://sparql.uniprot.org/sparql> {\n     ?uniprot up:annotation/up:catalyticActivity/up:catalyzedReaction ?rhea ;\n                                             up:organism taxon:9606 ;\n                                             up:mnemonic ?mnemonic .\n\n   }\n}",
    "target_endpoint": "https://sparql.rhea-db.org/sparql/",
    "federates_with": [
      "https://sparql.uniprot.org/sparql"
    ],
    "endpoint_set": "Rhea",
    "file_path": "Rhea/19_draft_human_metabolome.ttl",
    "predicted_query": "# https://sparql.uniprot.org/sparql\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX up: <http://purl.uniprot.org/core/>\nPREFIX taxon: <http://purl.uniprot.org/taxonomy/>\n\nSELECT DISTINCT ?metabolite ?reaction ?lipid\nWHERE {\n  # Find proteins associated with Homo sapiens in UniProt\n  SERVICE <https://sparql.uniprot.org/sparql> {\n    SELECT DISTINCT ?protein ?organism\n    WHERE {\n      ?organism a up:Taxon .\n      ?organism rdfs:label \"Homo sapiens\" .\n      ?protein up:organism ?organism .\n    }\n  }\n\n  # Find reactions associated with these proteins in Rhea\n  SERVICE <https://sparql.rhea-db.org/sparql> {\n    SELECT DISTINCT ?reaction\n    WHERE {\n      ?reaction rdfs:comment ?protein . # Assuming Rhea uses rdfs:comment to link to protein IDs.  This might need adjustment.\n      FILTER (CONTAINS(?protein, STR(?protein))) #Need to check how the protein is represented in Rhea\n    }\n  }\n\n  # Find lipids associated with these proteins in SwissLipids\n  SERVICE <https://sparql.swisslipids.org/sparql/> {\n    SELECT DISTINCT ?lipid\n    WHERE {\n      ?lipid <http://www.w3.org/2000/01/rdf-schema#label> ?protein . # Assuming SwissLipids uses rdfs:label to link to protein IDs. This might need adjustment.\n      FILTER (CONTAINS(?protein, STR(?protein))) #Need to check how the protein is represented in SwissLipids\n    }\n  }\n\n  # Placeholder for metabolite.  Needs to be populated based on Rhea.\n  BIND(\"Placeholder Metabolite\" AS ?metabolite)\n}",
    "predicted_endpoint": "https://sparql.uniprot.org/sparql",
    "predicted_endpoint_equal_to_target_endpoint": false,
    "predicted_endpoint_in_federates_with": true,
    "predicted_endpoint_or_federated_endpoint": true,
    "run_id_langsmith": "81c7c048-0867-44fb-9ab0-939466d2f34c",
    "evaluation_timestamp": "2025-05-12T14:13:29.674207",
    "question_understanding_prompt_tokens": 246,
    "question_understanding_completion_tokens": 20,
    "question_understanding_total_tokens": 266,
    "sparql_query_construction_prompt_tokens": 1449,
    "sparql_query_construction_completion_tokens": 680,
    "sparql_query_construction_total_tokens": 2129,
    "is_valid_sparql": true,
    "sparql_syntax_error": "syntactically correct",
    "result_eval_f1_score": 0.0,
    "result_eval_precision": 0.0,
    "result_eval_recall": 0.0,
    "error_occured_at_endpoint": false,
    "predicted_query_result_is_empty": true,
    "ground_truth_query_result_is_empty": false,
    "error_occured_at_endpoint_message": "no error, but empty result"
  },
  {
    "resource": "https://sparql.rhea-db.org/.well-known/sparql-examples/20_search_chemical_names_in_japanese",
    "natural_language_question": "Search for Chemical names starting in Japanese, translated to english using allie",
    "ground_truth_query": "PREFIX oboInOwl: <http://www.geneontology.org/formats/oboInOwl#>\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\n\nSELECT\n*\nWHERE {\nSERVICE <https://data.allie.dbcls.jp/sparql>{\n        ?x rdfs:label \"1,2,4-トリクロロベンゼン\"@ja ;\n            rdfs:label ?englishLabel .\n        FILTER(lang(?englishLabel) = \"en\")\n    }\n  BIND(STR(?englishLabel) AS ?englishLabelStr)\n  ?chebi rdfs:label|oboInOwl:hasSynonym ?englishLabelStr .\n}",
    "target_endpoint": "https://sparql.rhea-db.org/sparql/",
    "federates_with": [
      "https://data.allie.dbcls.jp/sparql"
    ],
    "endpoint_set": "Rhea",
    "file_path": "Rhea/20_search_chemical_names_in_japanese.ttl",
    "predicted_query": "# https://sparql.rhea-db.org/sparql\nPREFIX rhea: <http://rdf.rhea-db.org/>\nPREFIX chebi: <http://purl.obolibrary.org/obo/CHEBI_>\nPREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\n\nSELECT DISTINCT ?chebiName ?chebiID\nWHERE {\n  # Find ChEBI entities\n  ?reaction rhea: Rhea_has_reactant ?chebi .\n  ?chebi rdf:type chebi:24431 . # Chemical entity\n\n  # Get the ChEBI ID\n  BIND(STRAFTER(STR(?chebi), \"http://purl.obolibrary.org/obo/CHEBI_\") AS ?chebiID)\n\n  #Get the name of the chemical and filter for names starting with \"Japanese\"\n  SERVICE <https://sparql.rhea-db.org/sparql>{\n      ?chebi rdfs:label ?chebiName .\n      FILTER (STRSTARTS(LCASE(?chebiName), \"japanese\"))\n  }\n}",
    "predicted_endpoint": "https://sparql.rhea-db.org/sparql",
    "predicted_endpoint_equal_to_target_endpoint": true,
    "predicted_endpoint_in_federates_with": false,
    "predicted_endpoint_or_federated_endpoint": true,
    "run_id_langsmith": "aa9e42e3-40f8-4acd-adf5-747bbd21b0c2",
    "evaluation_timestamp": "2025-05-12T14:13:46.018101",
    "question_understanding_prompt_tokens": 252,
    "question_understanding_completion_tokens": 23,
    "question_understanding_total_tokens": 275,
    "sparql_query_construction_prompt_tokens": 1478,
    "sparql_query_construction_completion_tokens": 515,
    "sparql_query_construction_total_tokens": 1993,
    "is_valid_sparql": false,
    "sparql_syntax_error": "Lexical error at line 10, column 36.  Encountered: '32' (32), after prefix \"Rhea_has_reactant\"",
    "result_eval_f1_score": 0.0,
    "result_eval_precision": 0.0,
    "result_eval_recall": 0.0,
    "error_occured_at_endpoint": false,
    "predicted_query_result_is_empty": true,
    "ground_truth_query_result_is_empty": false,
    "error_occured_at_endpoint_message": "syntactically not correct"
  },
  {
    "resource": "https://sparql.rhea-db.org/.well-known/sparql-examples/117_Retrieve_parent_reactions_and_their_catalyzing_enzymes_for_a_metabolite_that_is_not_directly_involved_in_a_reaction",
    "natural_language_question": "Retrieve parent reactions (and their catalyzing enzymes) for a metabolite that is not directly involved in a reaction (ex: CHEBI:83137).",
    "ground_truth_query": "PREFIX CHEBI: <http://purl.obolibrary.org/obo/CHEBI_>\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX rh:<http://rdf.rhea-db.org/>\nPREFIX ec:<http://purl.uniprot.org/enzyme/>\nPREFIX up:<http://purl.uniprot.org/core/>\nPREFIX taxon:<http://purl.uniprot.org/taxonomy/>\nPREFIX keywords:<http://purl.uniprot.org/keywords/>\n\nSELECT\n  ?chebi\n  ?ecNumber\n  (count(?protein) as ?proteinCount)\n  ?reaction\n  ?equation\nWHERE {\n  ?reaction rdfs:subClassOf rh:Reaction .\n  ?reaction rh:status rh:Approved .\n  ?reaction rh:equation ?equation .\n  ?reaction rh:ec ?ecNumber .\n  ?reaction rh:side ?reactionSide .\n  ?reactionSide rh:contains ?participant .\n  ?participant rh:compound ?compound .\n  ?compound rh:chebi ?chebi .\n  CHEBI:83137 rdfs:subClassOf+ ?chebi.\n\n  SERVICE <https://sparql.uniprot.org/sparql> {\n  ?protein a up:Protein .\n  ?protein up:reviewed true .\n    {?protein up:enzyme ?ecNumber}\n  UNION\n    {?protein up:domain/up:enzyme ?ecNumber}\n  UNION\n    {?protein up:component/up:enzyme ?ecNumber} .\n  }\n} \nGROUP BY ?chebi ?ecNumber ?reaction ?equation",
    "target_endpoint": "https://sparql.rhea-db.org/sparql",
    "federates_with": [
      "https://sparql.uniprot.org/sparql"
    ],
    "endpoint_set": "Rhea",
    "file_path": "Rhea/117_Retrieve_parent_reactions_and_their_catalyzing_enzymes_for_a_metabolite_that_is_not_directly_involved_in_a_reaction.ttl",
    "predicted_query": "# https://sparql.rhea-db.org/sparql\nPREFIX rhea: <http://rdf.rhea-db.org/>\nPREFIX chebi: <http://purl.obolibrary.org/obo/CHEBI_>\nPREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\n\nSELECT DISTINCT ?reaction ?reactionLabel ?enzyme ?enzymeLabel\nWHERE {\n  # Find reactions involving the specified metabolite (CHEBI:83137)\n  SERVICE <https://sparql.rhea-db.org/sparql> {\n    VALUES ?chebi { chebi:83137 } # The metabolite of interest\n\n    ?reaction rhea: Rhea_has_participant ?chebi .\n    ?reaction rdfs:label ?reactionLabel .\n\n    # Find the enzyme catalyzing the reaction\n    ?reaction rhea: Rhea_is_catalyzed_by ?enzyme .\n    ?enzyme rdfs:label ?enzymeLabel .\n  }\n}",
    "predicted_endpoint": "https://sparql.rhea-db.org/sparql",
    "predicted_endpoint_equal_to_target_endpoint": true,
    "predicted_endpoint_in_federates_with": false,
    "predicted_endpoint_or_federated_endpoint": true,
    "run_id_langsmith": "96dfc001-ab48-4ac2-a2a7-19a7f1980e3d",
    "evaluation_timestamp": "2025-05-12T14:13:54.671324",
    "question_understanding_prompt_tokens": 272,
    "question_understanding_completion_tokens": 45,
    "question_understanding_total_tokens": 317,
    "sparql_query_construction_prompt_tokens": 2156,
    "sparql_query_construction_completion_tokens": 0,
    "sparql_query_construction_total_tokens": 2156,
    "is_valid_sparql": false,
    "sparql_syntax_error": "Lexical error at line 13, column 41.  Encountered: '32' (32), after prefix \"Rhea_has_participant\"",
    "result_eval_f1_score": 0.0,
    "result_eval_precision": 0.0,
    "result_eval_recall": 0.0,
    "error_occured_at_endpoint": false,
    "predicted_query_result_is_empty": true,
    "ground_truth_query_result_is_empty": false,
    "error_occured_at_endpoint_message": "syntactically not correct"
  },
  {
    "resource": "https://sparql.rhea-db.org/.well-known/sparql-examples/18",
    "natural_language_question": "Use <a href=\"https://idsm.elixir-czech.cz/sparql\">IDSM Sachem</a> to find ChEBIs with a a <a href=\"https://www.ebi.ac.uk/chebi/searchId.do?chebiId=CHEBI:35516\">Cholestane</a> skeleton (in SMILES). Then match returned ChEBIs to Rhea undirected reactions.",
    "ground_truth_query": "PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX rh: <http://rdf.rhea-db.org/>\nPREFIX sachem: <http://bioinfo.uochb.cas.cz/rdf/v1.0/sachem#>\n\n\nSELECT \n  ?rhea \n  ?chebi\nWHERE {\n  SERVICE <https://idsm.elixir-czech.cz/sparql/endpoint/chebi> {\n    ?chebi sachem:substructureSearch [\n        sachem:query \"[C@]12(CCC3CCCC[C@]3(C)[C@@]1([H])CC[C@]1(C)[C@@]([H])([C@@](C)([H])CCCC(C)C)CC[C@@]21[H])[H]\" ].\n  }\n  ?rhea rh:side/rh:contains/rh:compound/rdfs:subClassOf ?chebi .\n}",
    "target_endpoint": "https://sparql.rhea-db.org/sparql",
    "federates_with": [
      "https://idsm.elixir-czech.cz/sparql/endpoint/chebi"
    ],
    "endpoint_set": "Rhea",
    "file_path": "Rhea/18.ttl",
    "predicted_query": "# https://sparql.rhea-db.org/sparql\nPREFIX rhea: <http://rdf.rhea-db.org/>\nPREFIX chebi: <http://purl.obolibrary.org/obo/>\n\nSELECT DISTINCT ?reaction\nWHERE {\n  # Subquery to get ChEBI IDs with Cholestane skeleton from IDSM Sachem\n  SERVICE <https://idsm.elixir-czech.cz/sparql> {\n    PREFIX ids: <http://identifiers.org/>\n    PREFIX chem: <http://www.semanticweb.org/ontologies/2013/11/66/ChemicalOntology.owl#>\n    PREFIX chebi: <http://purl.obolibrary.org/obo/>\n    SELECT DISTINCT ?chebi_id WHERE {\n      ?compound a chem:Compound ;\n                chem:has_role chebi:CHEBI_35516 ; # Cholestane skeleton\n                ids:chebi ?chebi_id .\n    }\n  } # End of IDSM Sachem subquery\n\n  # Find Rhea undirected reactions that involve the ChEBI IDs\n  {\n    ?reaction rhea: Rhea_has_reactant ?chebi_id_uri .\n  }\n  UNION\n  {\n    ?reaction rhea: Rhea_has_product ?chebi_id_uri .\n  }\n  BIND(IRI(CONCAT(\"http://purl.obolibrary.org/obo/\", ?chebi_id)) AS ?chebi_id_uri)\n  ?reaction a rhea:Rhea-undirected .\n}",
    "predicted_endpoint": "https://sparql.rhea-db.org/sparql",
    "predicted_endpoint_equal_to_target_endpoint": true,
    "predicted_endpoint_in_federates_with": false,
    "predicted_endpoint_or_federated_endpoint": true,
    "run_id_langsmith": "56dd5184-485b-40f5-93e8-90bb08f8a7c5",
    "evaluation_timestamp": "2025-05-12T14:14:05.986306",
    "question_understanding_prompt_tokens": 335,
    "question_understanding_completion_tokens": 52,
    "question_understanding_total_tokens": 387,
    "sparql_query_construction_prompt_tokens": 2567,
    "sparql_query_construction_completion_tokens": 550,
    "sparql_query_construction_total_tokens": 3117,
    "is_valid_sparql": false,
    "sparql_syntax_error": "Encountered \" \"prefix\" \"PREFIX \"\" at line 9, column 5.\nWas expecting one of:\n     ...\n     ...\n     ...\n     ...\n     ...\n     ...\n    \"select\" ...\n    \"values\" ...\n    \"graph\" ...\n    \"optional\" ...\n    \"minus\" ...\n    \"bind\" ...\n    \"service\" ...\n    \"filter\" ...\n    \"true\" ...\n    \"false\" ...\n     ...\n     ...\n     ...\n     ...\n     ...\n     ...\n     ...\n     ...\n     ...\n     ...\n     ...\n     ...\n     ...\n    \"(\" ...\n     ...\n    \"{\" ...\n    \"}\" ...\n    \"[\" ...\n     ...\n    \"<<(\" ...\n    \"<<\" ...",
    "result_eval_f1_score": 0.0,
    "result_eval_precision": 0.0,
    "result_eval_recall": 0.0,
    "error_occured_at_endpoint": false,
    "predicted_query_result_is_empty": true,
    "ground_truth_query_result_is_empty": false,
    "error_occured_at_endpoint_message": "syntactically not correct"
  },
  {
    "resource": "https://sparql.rhea-db.org/.well-known/sparql-examples/115_Retrieve_the_set_of_metabolites_involved_in_reactions_catalyzed_by_human_genes_HUMAN_reference_proteome",
    "natural_language_question": "Retrieve the set of metabolites involved in reactions catalyzed by human genes (HUMAN reference proteome)",
    "ground_truth_query": "\nPREFIX rh:<http://rdf.rhea-db.org/>\nPREFIX taxon:<http://purl.uniprot.org/taxonomy/>\nPREFIX ec:<http://purl.uniprot.org/enzyme/>\nPREFIX rdfs:<http://www.w3.org/2000/01/rdf-schema#>\nPREFIX up:<http://purl.uniprot.org/core/>\nPREFIX keywords:<http://purl.uniprot.org/keywords/>\n\nSELECT\n  ?chebi\n  ?reaction\n  ?ecNumber\n  ?protein\n  ?ensemblTranscript\n  ?ensemblGene\nWHERE {\n  SERVICE <https://sparql.uniprot.org/sparql> {\n    ?protein a up:Protein .\n    ?protein up:reviewed true .\n    ?protein up:organism taxon:9606 .\n    ?protein up:classifiedWith keywords:1185 .\n\n    ?protein rdfs:seeAlso ?ensemblTranscript .\n    ?ensemblTranscript a up:Transcript_Resource .\n    ?ensemblTranscript up:database <http://purl.uniprot.org/database/Ensembl> .\n    ?ensemblTranscript up:transcribedFrom ?ensemblGene .\n\n      {?protein up:enzyme ?ecNumber .}\n    UNION\n      {?protein up:domain/up:enzyme ?ecNumber .}\n    UNION\n      {?protein up:component/up:enzyme ?ecNumber .}\n  }\n\n  ?reaction rdfs:subClassOf rh:Reaction .\n  ?reaction rh:status rh:Approved .\n  ?reaction rh:ec ?ecNumber .\n  ?reaction rh:side ?reactionSide .\n  ?reactionSide rh:contains ?participant .\n  ?participant rh:compound ?compound .\n  ?compound rh:chebi ?chebi . # only considering small molecules participants\n}",
    "target_endpoint": "https://sparql.rhea-db.org/sparql",
    "federates_with": [
      "https://sparql.uniprot.org/sparql"
    ],
    "endpoint_set": "Rhea",
    "file_path": "Rhea/115_Retrieve_the_set_of_metabolites_involved_in_reactions_catalyzed_by_human_genes_HUMAN_reference_proteome.ttl",
    "predicted_query": "# https://sparql.uniprot.org/sparql\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX up: <http://purl.uniprot.org/core/>\nPREFIX uniprot: <http://purl.uniprot.org/uniprot/>\nPREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>\nPREFIX rhea: <http://rdf.rhea-db.org/>\nPREFIX chebi: <http://purl.obolibrary.org/obo/CHEBI_>\n\nSELECT DISTINCT ?metaboliteName\nWHERE {\n  # Find human proteins (genes) in UniProt\n  SERVICE <https://sparql.uniprot.org/sparql> {\n    ?protein a up:Protein .\n    ?protein up:organism uniprot:9606 .  # 9606 is the UniProt taxonomy ID for Homo sapiens\n    ?protein rdfs:seeAlso ?rheaReaction . # Link to Rhea reaction\n    FILTER (REGEX(STR(?rheaReaction), \"rhea-db.org\")) # Ensure it's a Rhea URI\n  }\n\n  # Query Rhea to find metabolites involved in the reaction\n  SERVICE <https://sparql.rhea-db.org/sparql> {\n    ?rheaReaction rdfs:sameAs ?rheaId . # Get the Rhea ID\n    ?rheaId rhea:hasParticipant ?participant . # Get the participants in the reaction\n    ?participant rdfs:label ?metaboliteName . # Get the name of the metabolite\n    FILTER (STRSTARTS(STR(?participant), \"http://purl.obolibrary.org/obo/CHEBI_\")) # Filter for ChEBI metabolites\n  }\n}",
    "predicted_endpoint": "https://sparql.uniprot.org/sparql",
    "predicted_endpoint_equal_to_target_endpoint": false,
    "predicted_endpoint_in_federates_with": true,
    "predicted_endpoint_or_federated_endpoint": true,
    "run_id_langsmith": "fb990659-0421-4a30-9f77-3ee4826d33d7",
    "evaluation_timestamp": "2025-05-12T14:14:14.790842",
    "question_understanding_prompt_tokens": 257,
    "question_understanding_completion_tokens": 26,
    "question_understanding_total_tokens": 283,
    "sparql_query_construction_prompt_tokens": 2399,
    "sparql_query_construction_completion_tokens": 604,
    "sparql_query_construction_total_tokens": 3003,
    "is_valid_sparql": true,
    "sparql_syntax_error": "syntactically correct",
    "result_eval_f1_score": 0.0,
    "result_eval_precision": 0.0,
    "result_eval_recall": 0.0,
    "error_occured_at_endpoint": false,
    "predicted_query_result_is_empty": true,
    "ground_truth_query_result_is_empty": false,
    "error_occured_at_endpoint_message": "no error, but empty result"
  }
]