
# Natural Language Question
# =======================
Generate a draft human metabolome

# Target Endpoint
# ===============
https://sparql.rhea-db.org/sparql/

# Ground Truth Query
# =================
PREFIX chebislash: <http://purl.obolibrary.org/obo/chebi/>
PREFIX rh: <http://rdf.rhea-db.org/>
PREFIX taxon: <http://purl.uniprot.org/taxonomy/>
PREFIX up: <http://purl.uniprot.org/core/>

SELECT
  ?uniprot ?mnemonic ?rhea ?chebi ?smiles ?inchiKey
WHERE
{
  ?rhea rh:side/rh:contains/rh:compound ?compound .
  ?compound (rh:chebi|(rh:reactivePart/rh:chebi)|(rh:underlyingChebi/rh:chebi)) ?chebi .
  ?chebi chebislash:smiles ?smiles ;
          chebislash:inchikey ?inchiKey .
  SERVICE <https://sparql.uniprot.org/sparql> {
     ?uniprot up:annotation/up:catalyticActivity/up:catalyzedReaction ?rhea ;
                                             up:organism taxon:9606 ;
                                             up:mnemonic ?mnemonic .

   }
}

# Predicted Query
# ==============
# https://sparql.rhea-db.org/sparql
PREFIX rhea: <http://rdf.rhea-db.org/>
PREFIX chebi: <http://purl.obolibrary.org/obo/CHEBI_>
PREFIX uniprot: <http://purl.uniprot.org/core/>

SELECT DISTINCT ?metabolite ?metaboliteName
WHERE {
  # Find Rhea reactions associated with human proteins (UniProt)
  SERVICE <https://sparql.uniprot.org/sparql> {
    ?protein a uniprot:Protein ;
             uniprot:organism <http://purl.uniprot.org/taxonomy/9606> . # Human
    ?protein rdfs:seeAlso ?rheaId .
    FILTER CONTAINS(str(?rheaId), "rhea.db.org") # Ensure it's a Rhea ID
  }

  # Extract the Rhea ID from the UniProt URI
  BIND(strafter(str(?rheaId), "http://rdf.rhea-db.org/rhea/") AS ?rheaNum)
  BIND(IRI(concat("http://rdf.rhea-db.org/rhea/", ?rheaNum)) AS ?rheaReaction)

  # Get the reactants and products (metabolites) from the Rhea reaction
  {
    ?rheaReaction rhea:has_reactant ?metabolite .
  } UNION {
    ?rheaReaction rhea:has_product ?metabolite .
  }

  # Get the ChEBI name of the metabolite
  ?metabolite chebi:chebiName ?metaboliteName .
}
