
# Natural Language Question
# =======================
Total number of <reaction> <ec> <protein> links

# Target Endpoint
# ===============
https://sparql.rhea-db.org/sparql

# Ground Truth Query
# =================
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
PREFIX rh:<http://rdf.rhea-db.org/>
PREFIX ec:<http://purl.uniprot.org/enzyme/>
PREFIX up:<http://purl.uniprot.org/core/>

SELECT
  (count(?reaction) as ?reactionEcProteinLinkCount)
WHERE {
  ?reaction rdfs:subClassOf rh:Reaction .
  ?reaction rh:ec ?enzyme
  SERVICE <http://sparql.uniprot.org/sparql> {
    ?protein up:reviewed true .
    ?protein up:enzyme ?enzyme.
  }
}

# Predicted Query
# ==============
# https://sparql.rhea-db.org/sparql
PREFIX rhea: <http://rdf.rhea-db.org/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
PREFIX uniprot: <http://purl.uniprot.org/core/>

SELECT (COUNT(DISTINCT ?reaction) AS ?totalLinks)
WHERE {
  # Find reactions in Rhea
  ?reaction rdf:type rhea:Reaction .

  # Attempt to link reactions to proteins via UniProt.  This assumes some kind of cross-reference exists.
  SERVICE <https://sparql.uniprot.org/sparql> {
    ?protein a uniprot:Protein .
    # Assuming some kind of relationship between Rhea reactions and UniProt proteins exists.
    # This is a placeholder and needs to be replaced with the actual property if known.
    # Example:  ?protein uniprot:encodedBy ?gene .  ?gene rdfs:seeAlso ?reaction .
    # We'll use a FILTER to match the "ec" entity.  This might need adjustment based on the actual data.
    FILTER (CONTAINS(str(?protein), "ec")) # This is a very broad filter and might need refinement.
  }
}
