# Experiment Metadata

## Graph Configuration
{
  "llm_meta_data": {
    "question_understanding_model": "gemini-2.0-flash",
    "sparql_query_construction_model": "gemini-2.0-flash",
    "temperature": {
      "question_understanding": 0.2,
      "sparql_construction": 0.1
    },
    "max_tokens": {
      "question_understanding": 4000,
      "sparql_construction": 15000
    },
    "top_p": {
      "question_understanding": 1.0,
      "sparql_construction": 1.0
    },
    "extra_params": {}
  },
  "rag_config": {
    "vectordb_url": "http://vectordb:6334/",
    "host": "localhost",
    "grpc_port": 6334,
    "timeout": 60,
    "collection_name": "biomedical_entity_collection_v4.0",
    "dense_embedding_model": "BAAI/bge-small-en-v1.5",
    "sparse_embedding_model": "Qdrant/bm25",
    "embeddings_cache_dir": "./embeddings_model_cache",
    "dense_embedding_model_example_retrieval": "BAAI/bge-large-en-v1.5",
    "collection_name_example_retrieval": "biomedical_examples_collection_v1.0",
    "chunk_size": 1000,
    "chunk_overlap": 200,
    "top_k": 5,
    "top_k_example_retrieval": 10,
    "example_retrieval_threshold": 0.95
  }
}

## Extraction Prompt (Question Understanding)
You are a SPARQL query assistant that helps users to create SPARQL queries from natural language questions to navigate the resources and databases from mainly the Swiss Institute of Bioinformatics and other biomedical resources.

Given a user question extracts the following:

- **High level concepts** and **potential classes** that could be found in the SPARQL endpoints and used to answer the question. 
- **Potential entities** and instances of classes that could be found in the SPARQL endpoints and used to answer the question. 
- Split the question in standalone smaller parts that could be used to build the final query (if the question is already simple enough, you can return just 1 step).


## Query Generation Prompt (SPARQL Construction)
You are a SPARQL query assistant that helps users to create SPARQL queries from natural language questions to navigate the resources and databases from mainly the Swiss Institute of Bioinformatics and other biomedical resources.


Potential entities extracted from the user question: {{potential_entities}}

Potential classes extracted from the user question: {{potential_classes}}

**Task:**
Generate a federated SPARQL query to answer the user question, utilizing the provided inputs (question, classes, entities).

**Requirements:**

1.**Output Format:** Provide the generated SPARQL query inside a single markdown code block with the "sparql" language tag (````sparql ... ````).

2. **Endpoint Comment:** - The *very first line* inside the code block *must* be a comment containing the URL of the *primary* SPARQL endpoint through which the federated query should be initiated.
                                           - Include only this single primary endpoint URL comment at the start. No other text on this line or preceding it within the code block.


## Timeout for result retrieval
600
