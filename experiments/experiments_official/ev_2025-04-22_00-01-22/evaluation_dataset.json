[
  {
    "resource": "https://sparql.swisslipids.org/.well-known/sparql-examples/16",
    "natural_language_question": "For a given lipid (SWISSLIPID:000399814, Ceramide), return a list of all enzymes in UniProtKB/Swiss-Prot annotated to catalyze reactions involving that lipid.\nThis query does not consider the hierarchy: it looks for reactions and enzymes only for the specified lipid.",
    "ground_truth_query": "PREFIX SWISSLIPID: <https://swisslipids.org/rdf/SLM_>\nPREFIX owl: <http://www.w3.org/2002/07/owl#>\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX rh: <http://rdf.rhea-db.org/>\nPREFIX up: <http://purl.uniprot.org/core/>\n\n# Example 16\nSELECT ?startId ?startName ?uniprot\nWHERE\n{\n  # SwissLipids query (list of) identifier(s)\n  VALUES ?startId { SWISSLIPID:000399814 }\n  # name\n  ?startId rdfs:label ?startName .\n  # ChEBI x-ref\n  ?startId owl:equivalentClass ?chebi .\n  # federated query to Rhea\n  SERVICE <https://sparql.rhea-db.org/sparql> {\n  \t?rhea rh:side/rh:contains/rh:compound/rh:chebi ?chebi .\n  }    \n  # federated query to UniProt\n  SERVICE <https://sparql.uniprot.org/sparql> {\n    ?uniprot up:reviewed true .\n    ?uniprot up:annotation/up:catalyticActivity/up:catalyzedReaction ?rhea .\n  }\n} \nORDER BY ?startId",
    "target_endpoint": "https://sparql.swisslipids.org/sparql/",
    "federates_with": [
      "https://sparql.uniprot.org/sparql",
      "https://sparql.rhea-db.org/sparql"
    ],
    "endpoint_set": "SwissLipids",
    "file_path": "SwissLipids/16.ttl",
    "predicted_query": "# https://sparql.uniprot.org/sparql\n# Return a list of enzymes in UniProtKB/Swiss-Prot annotated to catalyze reactions involving a specific lipid.\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX up: <http://purl.uniprot.org/core/>\n\nSELECT DISTINCT ?enzyme ?enzymeName\nWHERE {\n  # Find reactions in Rhea involving the specific lipid from SwissLipids\n  SERVICE <https://sparql.rhea-db.org/sparql> {\n    PREFIX rhea: <http://rdf.rhea-db.org/>\n    PREFIX chebi: <http://purl.obolibrary.org/obo/CHEBI_>\n\n    # Filter reactions where the subject or object is the specific lipid\n    VALUES ?lipid { <http://purl.obolibrary.org/obo/CHEBI_17761> } # ceramide\n\n    ?reaction rhea:has_participant ?lipid .\n    ?reaction rhea:status rhea:approved .\n  }\n\n  # Find enzymes in UniProt that catalyze these reactions\n  SERVICE <https://sparql.uniprot.org/sparql> {\n    ?enzyme up:catalyticActivity ?reactionUri . # Link enzyme to reaction\n    ?enzyme rdfs:label ?enzymeName .\n    FILTER (STRSTARTS(STR(?reactionUri), \"http://rdf.rhea-db.org/\")) # Ensure URI is from Rhea\n    BIND(IRI(STR(?reactionUri)) AS ?reaction)\n  }\n}",
    "predicted_endpoint": "https://sparql.uniprot.org/sparql",
    "predicted_endpoint_equal_to_target_endpoint": false,
    "predicted_endpoint_in_federates_with": true,
    "predicted_endpoint_or_federated_endpoint": true,
    "run_id_langsmith": "1ea1aeba-f686-4418-a610-584e91b108c2",
    "evaluation_timestamp": "2025-04-22T00:01:36.387554",
    "question_understanding_tokens": 297,
    "question_understanding_completion_tokens": 60,
    "question_understanding_total_tokens": 357,
    "sparql_construction_prompt_tokens": 2897,
    "sparql_construction_completion_tokens": 360,
    "sparql_construction_total_tokens": 3257,
    "is_valid_sparql": false,
    "sparql_syntax_error": "Encountered \" \"prefix\" \"PREFIX \"\" at line 10, column 5.\nWas expecting one of:\n     ...\n     ...\n     ...\n     ...\n     ...\n     ...\n    \"select\" ...\n    \"values\" ...\n    \"graph\" ...\n    \"optional\" ...\n    \"minus\" ...\n    \"bind\" ...\n    \"service\" ...\n    \"filter\" ...\n    \"true\" ...\n    \"false\" ...\n     ...\n     ...\n     ...\n     ...\n     ...\n     ...\n     ...\n     ...\n     ...\n     ...\n     ...\n     ...\n     ...\n    \"(\" ...\n     ...\n    \"{\" ...\n    \"}\" ...\n    \"[\" ...\n     ...\n    \"<<\" ...",
    "result_eval_f1_score": 0.0,
    "result_eval_precision": 0.0,
    "result_eval_recall": 0.0,
    "error_occured_at_endpoint": true,
    "predicted_query_result_is_empty": true,
    "error_occured_at_endpoint_message": "Encountered \" \"prefix\" \"PREFIX \"\" at line 10, column 5.\nWas expecting one of:\n     ...\n     ...\n     ...\n     ...\n     ...\n     ...\n    \"select\" ...\n    \"values\" ...\n    \"graph\" ...\n    \"optional\" ...\n    \"minus\" ...\n    \"bind\" ...\n    \"service\" ...\n    \"filter\" ...\n    \"true\" ...\n    \"false\" ...\n     ...\n     ...\n     ...\n     ...\n     ...\n     ...\n     ...\n     ...\n     ...\n     ...\n     ...\n     ...\n     ...\n    \"(\" ...\n     ...\n    \"{\" ...\n    \"}\" ...\n    \"[\" ...\n     ...\n    \"<<\" ..."
  },
  {
    "resource": "https://sparql.swisslipids.org/.well-known/sparql-examples/6",
    "natural_language_question": "For a given lipid (SWISSLIPID:000399814, Ceramide), return a list of all corresponding reactions (Rhea IDs and equation), as well as their enzymes as annotated in UniProtKB/Swiss-Prot) enzymes themselves (ID and protein name).\nThis query does not consider the hierarchy: it looks for reactions and enzymes only for the specified lipid.",
    "ground_truth_query": "PREFIX SWISSLIPID: <https://swisslipids.org/rdf/SLM_>\nPREFIX owl: <http://www.w3.org/2002/07/owl#>\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX rh: <http://rdf.rhea-db.org/>\nPREFIX up: <http://purl.uniprot.org/core/>\n\n# Example 6\nSELECT ?startId ?startName ?chebi ?rhea ?rheaEquation ?uniprot ?uniprotName\nWHERE\n{\n  # SwissLipids query (list of) identifier(s)\n  VALUES ?startId { SWISSLIPID:000399814 }\n  # name\n  ?startId rdfs:label ?startName .\n  # ChEBI x-ref\n  ?startId owl:equivalentClass ?chebi .\n  # federated query to Rhea\n  SERVICE <https://sparql.rhea-db.org/sparql> {\n  \t?rhea rh:equation ?rheaEquation .\n  \t?rhea rh:side/rh:contains/rh:compound/rh:chebi ?chebi .\n  }    \n  # federated query to UniProt\n  SERVICE <https://sparql.uniprot.org/sparql> {\n    ?uniprot up:reviewed true .\n    ?uniprot up:recommendedName/up:fullName ?uniprotName .\n    ?uniprot up:annotation/up:catalyticActivity/up:catalyzedReaction ?rhea .\n  }\n} \nORDER BY ?startId",
    "target_endpoint": "https://sparql.swisslipids.org/sparql/",
    "federates_with": [
      "https://sparql.uniprot.org/sparql",
      "https://sparql.rhea-db.org/sparql"
    ],
    "endpoint_set": "SwissLipids",
    "file_path": "SwissLipids/6.ttl",
    "predicted_query": "# https://sparql.swisslipids.org/sparql/\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>\nPREFIX sl: <http://www.swisslipids.org/rdf#>\nPREFIX rhea: <http://rdf.rhea-db.org/>\n\nSELECT DISTINCT ?rheaId ?equation ?enzymeId ?proteinName\nWHERE {\n  # Find reactions associated with the given lipid in SwissLipids\n  VALUES ?lipid { sl:SWISSLIPID_000399814 } # SWISSLIPID:000399814, Ceramide\n  ?reaction sl:reaction_component ?lipid .\n\n  # Get the Rhea ID of the reaction\n  SERVICE <https://sparql.rhea-db.org/sparql> {\n    ?rheaId rdfs:seeAlso ?reaction .\n    ?rheaId rdf:type rhea:Reaction .\n    ?rheaId rdfs:comment ?equation .\n    FILTER (REGEX(STR(?rheaId), \"rhea\")) # Ensure it's a Rhea ID\n  }\n\n  # Find enzymes associated with the reaction in Rhea\n  SERVICE <https://sparql.rhea-db.org/sparql> {\n    ?rheaId rhea:enzyme ?enzymeResource .\n  }\n  \n  # Find UniProt ID associated with the enzyme\n  SERVICE <https://sparql.uniprot.org/sparql> {\n    ?enzymeResource rdfs:seeAlso ?enzymeId .\n    FILTER (REGEX(STR(?enzymeId), \"uniprot\"))\n    ?enzymeId rdfs:label ?proteinName .\n  }\n}",
    "predicted_endpoint": "https://sparql.swisslipids.org/sparql/",
    "predicted_endpoint_equal_to_target_endpoint": true,
    "predicted_endpoint_in_federates_with": false,
    "predicted_endpoint_or_federated_endpoint": true,
    "run_id_langsmith": "a59bb66a-4cd8-4e5e-a489-b14f7c458e59",
    "evaluation_timestamp": "2025-04-22T00:01:44.064165",
    "question_understanding_tokens": 316,
    "question_understanding_completion_tokens": 83,
    "question_understanding_total_tokens": 399,
    "sparql_construction_prompt_tokens": 2519,
    "sparql_construction_completion_tokens": 0,
    "sparql_construction_total_tokens": 2519,
    "is_valid_sparql": true,
    "sparql_syntax_error": "syntactically correct",
    "result_eval_f1_score": 0.0,
    "result_eval_precision": 0.0,
    "result_eval_recall": 0.0,
    "error_occured_at_endpoint": false,
    "predicted_query_result_is_empty": true,
    "error_occured_at_endpoint_message": "no error, but empty result"
  },
  {
    "resource": "https://sparql.swisslipids.org/.well-known/sparql-examples/5",
    "natural_language_question": "For a given lipid (SWISSLIPID:000399814, Ceramide), return a list of all corresponding reactions (Rhea IDs and equation).\nThis query does consider the hierarchy: it looks for reactions involving the specified lipid and/or its more specific forms.",
    "ground_truth_query": "PREFIX SWISSLIPID: <https://swisslipids.org/rdf/SLM_>\nPREFIX owl: <http://www.w3.org/2002/07/owl#>\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX rh: <http://rdf.rhea-db.org/>\n\n# Example 5\nSELECT ?startId ?startName ?id ?name ?chebi ?rhea ?rheaEquation \nWHERE\n{\n  # SwissLipids query (list of) identifier(s)\n  VALUES ?startId { SWISSLIPID:000399814 }\n  # name\n  ?startId rdfs:label ?startName .\n  # Retrieve children lipids \n  ?id rdfs:subClassOf* ?startId .\n  ?id rdfs:label ?name .\n  # ChEBI x-ref\n  ?id owl:equivalentClass ?chebi .\n  # federated query to Rhea\n  SERVICE <https://sparql.rhea-db.org/sparql> {\n  \t?rhea rh:equation ?rheaEquation .\n  \t?rhea rh:side/rh:contains/rh:compound/rh:chebi ?chebi .\n  }    \n} \nORDER BY  ?startId ?id",
    "target_endpoint": "https://sparql.swisslipids.org/sparql/",
    "federates_with": [
      "https://sparql.rhea-db.org/sparql"
    ],
    "endpoint_set": "SwissLipids",
    "file_path": "SwissLipids/5.ttl",
    "predicted_query": "# https://sparql.swisslipids.org/sparql/\n# Return a list of all corresponding reactions (Rhea IDs and equation) for a given lipid.\n# This query does consider the hierarchy: it looks for reactions involving the specified lipid and/or its more specific forms.\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>\nPREFIX sl: <http://www.swisslipids.org/rdf#>\n\nSELECT DISTINCT ?rheaId ?equation\nWHERE {\n  # Find lipids and their more specific forms based on the given lipid ID\n  {\n    # Query SwissLipids for the specific lipid and its subclasses (more specific forms)\n    SERVICE <https://sparql.swisslipids.org/sparql/> {\n      VALUES ?lipid { <http://www.swisslipids.org/rdf/SWISSLIPID:000399814> }  # SWISSLIPID:000399814 - Given lipid from the user question\n      ?subClass rdfs:subClassOf* ?lipid .\n    }\n  }\n  \n  # Query Rhea for reactions involving the lipid or its subclasses\n  SERVICE <https://sparql.rhea-db.org/sparql/> {\n    ?reaction rhea:hasParticipant ?subClass .  # Find reactions where the lipid or its subclass is a participant\n    ?reaction rdfs:label ?rheaId .       # Get the Rhea ID\n    ?reaction rhea:equation ?equation .   # Get the reaction equation\n  }\n}",
    "predicted_endpoint": "https://sparql.swisslipids.org/sparql/",
    "predicted_endpoint_equal_to_target_endpoint": true,
    "predicted_endpoint_in_federates_with": false,
    "predicted_endpoint_or_federated_endpoint": true,
    "run_id_langsmith": "8825fce2-4f8e-478d-942f-c889b4cbc1c5",
    "evaluation_timestamp": "2025-04-22T00:01:55.791387",
    "question_understanding_tokens": 291,
    "question_understanding_completion_tokens": 52,
    "question_understanding_total_tokens": 343,
    "sparql_construction_prompt_tokens": 2143,
    "sparql_construction_completion_tokens": 0,
    "sparql_construction_total_tokens": 2143,
    "is_valid_sparql": false,
    "sparql_syntax_error": "Line 21, column 15: Unresolved prefixed name: rhea:hasParticipant",
    "result_eval_f1_score": 0.0,
    "result_eval_precision": 0.0,
    "result_eval_recall": 0.0,
    "error_occured_at_endpoint": true,
    "predicted_query_result_is_empty": true,
    "error_occured_at_endpoint_message": "Line 21, column 15: Unresolved prefixed name: rhea:hasParticipant"
  },
  {
    "resource": "https://sparql.swisslipids.org/.well-known/sparql-examples/34",
    "natural_language_question": "Lipids affected by human enzymes",
    "ground_truth_query": "PREFIX owl: <http://www.w3.org/2002/07/owl#>\nPREFIX rh: <http://rdf.rhea-db.org/>\nPREFIX taxon: <http://purl.uniprot.org/taxonomy/>\nPREFIX up: <http://purl.uniprot.org/core/>\n\nSELECT ?swisslipid  {\n  ?swisslipid owl:equivalentClass ?chebi .\n  SERVICE <https://sparql.rhea-db.org/sparql> {\n    ?rhea rh:side/rh:contains/rh:compound ?compound .\n\t?compound (rh:chebi|(rh:reactivePart/rh:chebi)|(rh:underlyingChebi/rh:chebi)) ?metabolite . \n  }\n  SERVICE <https://sparql.uniprot.org/sparql> {\n    ?catalyticActivityAnnotation up:catalyticActivity/up:catalyzedReaction ?rhea .\n    ?protein up:annotation ?catalyticActivityAnnotation ;\n             up:organism taxon:9606 .\n  }\n}\nLIMIT 1",
    "target_endpoint": "https://sparql.swisslipids.org/sparql/",
    "federates_with": [
      "https://sparql.uniprot.org/sparql",
      "https://sparql.rhea-db.org/sparql"
    ],
    "endpoint_set": "SwissLipids",
    "file_path": "SwissLipids/34.ttl",
    "predicted_query": "# https://sparql.swisslipids.org/sparql/\n# Find lipids affected by human enzymes by federating SwissLipids and UniProt\n\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX sl: <http://swisslipids.org/rdf#>\nPREFIX up: <http://purl.uniprot.org/core/>\n\nSELECT DISTINCT ?lipidName ?enzymeName\nWHERE {\n  # Query SwissLipids for lipids and their associated enzymes\n  SERVICE <https://sparql.swisslipids.org/sparql/> {\n    ?lipid a sl:Lipid .\n    ?lipid rdfs:label ?lipidName .\n    ?reaction sl:reactant ?lipid .  # Assuming lipids are reactants in reactions\n    ?reaction sl:enzyme ?enzyme .\n  }\n  \n  # Query UniProt for human enzymes\n  SERVICE <https://sparql.uniprot.org/sparql> {\n    ?enzyme up:organism <http://purl.uniprot.org/taxonomy/9606> .  # Filter for human enzymes\n    ?enzyme rdfs:label ?enzymeName .\n  }\n}",
    "predicted_endpoint": "https://sparql.swisslipids.org/sparql/",
    "predicted_endpoint_equal_to_target_endpoint": true,
    "predicted_endpoint_in_federates_with": false,
    "predicted_endpoint_or_federated_endpoint": true,
    "run_id_langsmith": "a406feef-61e9-4658-a627-6db9570fcef5",
    "evaluation_timestamp": "2025-04-22T00:02:01.781414",
    "question_understanding_tokens": 239,
    "question_understanding_completion_tokens": 28,
    "question_understanding_total_tokens": 267,
    "sparql_construction_prompt_tokens": 1688,
    "sparql_construction_completion_tokens": 0,
    "sparql_construction_total_tokens": 1688,
    "is_valid_sparql": true,
    "sparql_syntax_error": "syntactically correct",
    "result_eval_f1_score": 0.0,
    "result_eval_precision": 0.0,
    "result_eval_recall": 0.0,
    "error_occured_at_endpoint": false,
    "predicted_query_result_is_empty": true,
    "error_occured_at_endpoint_message": "no error, but empty result"
  },
  {
    "resource": "https://sparql.uniprot.org/.well-known/sparql-examples/118_biosodafrontend_rat_brain_human_cancer",
    "natural_language_question": "What are the Homo sapiens genes associated with cancer and their orthologs expressed in the Rattus norvegicus brain?",
    "ground_truth_query": "PREFIX up:<http://purl.uniprot.org/core/>\nPREFIX taxon:<http://purl.uniprot.org/taxonomy/>\nPREFIX rdfs:<http://www.w3.org/2000/01/rdf-schema#>\nPREFIX orth:<http://purl.org/net/orth#>\nPREFIX dcterms:<http://purl.org/dc/terms/>\nPREFIX obo:<http://purl.obolibrary.org/obo/>\nPREFIX lscr:<http://purl.org/lscr#>\nPREFIX genex:<http://purl.org/genex#>\nPREFIX sio: <http://semanticscience.org/resource/>\nSELECT ?gene ?orthologous_protein2 WHERE {\n  {\n    SELECT ?protein1 WHERE {\n      ?protein1 a up:Protein;\n        up:organism/up:scientificName 'Homo sapiens' ;\n        up:annotation ?annotation .\n      ?annotation rdfs:comment ?annotation_text.\n      ?annotation a up:Disease_Annotation .\n      FILTER CONTAINS (?annotation_text, \"cancer\")\n    }\n  }\n  SERVICE <https://sparql.omabrowser.org/sparql/> {\n    SELECT ?orthologous_protein2 ?protein1 ?gene WHERE {\n      ?protein_OMA a orth:Protein .\n      ?orthologous_protein2 a orth:Protein .\n      ?cluster a orth:OrthologsCluster .\n      ?cluster orth:hasHomologousMember ?node1 .\n      ?cluster orth:hasHomologousMember ?node2 .\n      ?node2 orth:hasHomologousMember* ?protein_OMA .\n      ?node1 orth:hasHomologousMember* ?orthologous_protein2 \n      .?orthologous_protein2 orth:organism/obo:RO_0002162/up:scientificName 'Rattus norvegicus' .\n      ?orthologous_protein2 sio:SIO_010079 ?gene .\n      ?protein_OMA lscr:xrefUniprot ?protein1 .\n      FILTER(?node1 != ?node2)\n    }\n  }\n  SERVICE <https://www.bgee.org/sparql/> {\n    ?gene genex:isExpressedIn ?anatEntity .\n    ?anatEntity rdfs:label 'brain' .\n    ?gene orth:organism ?org . \n    ?org obo:RO_0002162 taxon:10116 .\n  }\n}",
    "target_endpoint": "https://sparql.uniprot.org/sparql",
    "federates_with": [
      "https://sparql.omabrowser.org/sparql/",
      "https://www.bgee.org/sparql/"
    ],
    "endpoint_set": "Uniprot",
    "file_path": "UniProt/118_biosodafrontend_rat_brain_human_cancer.ttl",
    "predicted_query": "# https://sparql.uniprot.org/sparql\n# Federated query to find Homo sapiens genes associated with cancer and their Rattus norvegicus orthologs expressed in the brain.\nPREFIX up: <http://purl.uniprot.org/core/>\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX taxon: <http://purl.uniprot.org/taxonomy/>\nPREFIX uniprot: <http://purl.uniprot.org/uniprot/>\n\nSELECT DISTINCT ?humanGene ?ratGene ?cancerType\nWHERE {\n  # Find human genes associated with cancer\n  SERVICE <https://sparql.uniprot.org/sparql> {\n    ?disease a up:Disease .\n    ?disease rdfs:label ?cancerType .\n    FILTER (CONTAINS(LCASE(?cancerType), \"cancer\")) .  # Filter for cancer-related diseases\n    ?gene up:classifiedWith ?disease .\n    ?gene rdfs:label ?humanGene .\n    ?gene up:organism taxon:9606 . # Homo sapiens\n  }\n  \n  # Find orthologs in Rattus norvegicus\n  SERVICE <https://sparql.uniprot.org/sparql> {\n    ?ratGene up:orthologOf ?gene .\n    ?ratGene up:organism taxon:10116 . # Rattus norvegicus\n    #Optional {?ratGene up:expression ?brainExpression .\n    #    FILTER (CONTAINS(LCASE(?brainExpression), \"brain\")) . # Ensure expression is in the brain\n    #}\n    ?ratGene rdfs:label ?ratGeneLabel .\n  }\n  \n  #Potentially add a third service to query a brain atlas for expression in Rattus norvegicus.\n  #However, given the lack of a specific brain atlas endpoint, this part is omitted for now.\n}",
    "predicted_endpoint": "https://sparql.uniprot.org/sparql",
    "predicted_endpoint_equal_to_target_endpoint": true,
    "predicted_endpoint_in_federates_with": false,
    "predicted_endpoint_or_federated_endpoint": true,
    "run_id_langsmith": "65eb5e79-6269-45c2-9e15-986f25bd2b0c",
    "evaluation_timestamp": "2025-04-22T00:02:16.328468",
    "question_understanding_tokens": 256,
    "question_understanding_completion_tokens": 55,
    "question_understanding_total_tokens": 311,
    "sparql_construction_prompt_tokens": 2375,
    "sparql_construction_completion_tokens": 0,
    "sparql_construction_total_tokens": 2375,
    "is_valid_sparql": true,
    "sparql_syntax_error": "syntactically correct",
    "result_eval_f1_score": 0.0,
    "result_eval_precision": 0.0,
    "result_eval_recall": 0.0,
    "error_occured_at_endpoint": false,
    "predicted_query_result_is_empty": true,
    "error_occured_at_endpoint_message": "no error, but empty result"
  },
  {
    "resource": "https://sparql.uniprot.org/.well-known/sparql-examples/51",
    "natural_language_question": "Find all proteins linked to arachidonate (CHEBI:32395)",
    "ground_truth_query": "PREFIX CHEBI: <http://purl.obolibrary.org/obo/CHEBI_>\nPREFIX rh: <http://rdf.rhea-db.org/>\nPREFIX skos: <http://www.w3.org/2004/02/skos/core#>\nPREFIX up: <http://purl.uniprot.org/core/>\n\n\nSELECT \n    DISTINCT\n        ?uniprot\n        ?uniprotID\n        ?recname\n        ?gene\n        ?chebi\n        ?uniprotName\nWHERE {\n  SERVICE <https://sparql.rhea-db.org/sparql> {\n     VALUES (?chebi) { (CHEBI:32395) }\n     ?rhea rh:side/rh:contains/rh:compound ?compound .\n     ?compound rh:chebi ?chebi .\n     ?chebi up:name ?uniprotName .\n  }\n  ?uniprot up:annotation/up:catalyticActivity/up:catalyzedReaction ?rhea .\n  ?uniprot up:mnemonic ?uniprotID .\n  ?uniprot up:recommendedName/up:fullName ?recname .\n  OPTIONAL {?uniprot up:encodedBy/skos:prefLabel ?gene .}\n}",
    "target_endpoint": "https://sparql.uniprot.org/sparql/",
    "federates_with": [
      "https://sparql.rhea-db.org/sparql"
    ],
    "endpoint_set": "Uniprot",
    "file_path": "UniProt/51_all_proteins_linked_to_arachidonate.ttl",
    "predicted_query": "# https://sparql.uniprot.org/sparql\n# Find all proteins linked to arachidonate (CHEBI:32395)\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>\nPREFIX up: <http://purl.uniprot.org/core/>\nPREFIX chebi: <http://purl.obolibrary.org/obo/CHEBI_>\n\nSELECT DISTINCT ?protein ?proteinName\nWHERE {\n  # Query Rhea for reactions involving arachidonate (CHEBI:32395)\n  SERVICE <https://sparql.rhea-db.org/sparql> {\n    ?reaction rhea: Rhea_has_participant chebi:32395 . #arachidonate\n    ?reaction rdfs:label ?reactionLabel .\n  }\n  \n  # Query UniProt for proteins involved in these reactions\n  SERVICE <https://sparql.uniprot.org/sparql> {\n    ?protein up:annotation ?reactionLabel . # Link to Rhea reaction label\n    ?protein rdfs:label ?proteinName .\n  }\n}",
    "predicted_endpoint": "https://sparql.uniprot.org/sparql",
    "predicted_endpoint_equal_to_target_endpoint": true,
    "predicted_endpoint_in_federates_with": false,
    "predicted_endpoint_or_federated_endpoint": true,
    "run_id_langsmith": "217fe8bb-82e3-4a00-95b0-c5d420094769",
    "evaluation_timestamp": "2025-04-22T00:02:38.131702",
    "question_understanding_tokens": 249,
    "question_understanding_completion_tokens": 43,
    "question_understanding_total_tokens": 292,
    "sparql_construction_prompt_tokens": 1786,
    "sparql_construction_completion_tokens": 292,
    "sparql_construction_total_tokens": 2078,
    "is_valid_sparql": false,
    "sparql_syntax_error": "Line 12, column 15: Unresolved prefixed name: rhea:",
    "result_eval_f1_score": 0.0,
    "result_eval_precision": 0.0,
    "result_eval_recall": 0.0,
    "error_occured_at_endpoint": true,
    "predicted_query_result_is_empty": true,
    "error_occured_at_endpoint_message": "Line 12, column 15: Unresolved prefixed name: rhea:"
  },
  {
    "resource": "https://sparql.uniprot.org/.well-known/sparql-examples/40",
    "natural_language_question": "Retrieve human enzymes that metabolize sphingolipids and are annotated in ChEMBL",
    "ground_truth_query": "PREFIX CHEBI: <http://purl.obolibrary.org/obo/CHEBI_>\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX rh: <http://rdf.rhea-db.org/>\nPREFIX taxon: <http://purl.uniprot.org/taxonomy/>\nPREFIX up: <http://purl.uniprot.org/core/>\n\nSELECT DISTINCT ?protein ?chemblEntry\nWHERE {\n  SERVICE <https://sparql.rhea-db.org/sparql> {\n    ?rhea rdfs:subClassOf rh:Reaction ;\n      rh:side/rh:contains/rh:compound/rh:chebi/rdfs:subClassOf+ CHEBI:26739 .\n  }\n  ?ca up:catalyzedReaction ?rhea .\n  ?protein up:annotation/up:catalyticActivity ?ca ;\n    up:organism taxon:9606 ;\n    rdfs:seeAlso ?chemblEntry .\n  ?chemblEntry up:database <http://purl.uniprot.org/database/ChEMBL> .\n}\nLIMIT 10",
    "target_endpoint": "https://sparql.uniprot.org/sparql/",
    "federates_with": [
      "https://sparql.rhea-db.org/sparql"
    ],
    "endpoint_set": "Uniprot",
    "file_path": "UniProt/40_human_enzymes_that_metabolize_sphingolipids.ttl",
    "predicted_query": "# https://sparql.uniprot.org/sparql\n# Retrieves human enzymes that metabolize sphingolipids by federating UniProt and SwissLipids.\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>\nPREFIX up: <http://purl.uniprot.org/core/>\nPREFIX taxon: <http://purl.uniprot.org/taxonomy/>\n\nSELECT DISTINCT ?enzymeName ?geneName\nWHERE {\n  # Find human enzymes in UniProt\n  SERVICE <https://sparql.uniprot.org/sparql> {\n    ?enzyme a up:Protein .\n    ?enzyme up:organism taxon:9606 .  #Taxon 9606 corresponds to Homo sapiens (human)\n    ?enzyme rdfs:label ?enzymeName .\n    ?enzyme up:encodedBy ?gene .\n    ?gene rdfs:label ?geneName .\n    \n    # Filter for enzymes that have 'enzyme' in their description\n    FILTER (CONTAINS(LCASE(?enzymeName), \"enzyme\"))\n  }\n  \n  # Find enzymes in SwissLipids that are involved in sphingolipid metabolism\n  SERVICE <https://sparql.swisslipids.org/sparql/> {\n    ?reaction a <http://www.swisslipids.org/rdf/SwissLipids#MetabolicReaction> .\n    ?reaction <http://www.swisslipids.org/rdf/SwissLipids#enzyme> ?enzymeName .\n    ?reaction <http://www.swisslipids.org/rdf/SwissLipids#substrate> ?sphingolipid .\n    FILTER (CONTAINS(LCASE(?sphingolipid), \"sphingolipid\")) # Filter for reactions involving sphingolipids\n  }\n}",
    "predicted_endpoint": "https://sparql.uniprot.org/sparql",
    "predicted_endpoint_equal_to_target_endpoint": true,
    "predicted_endpoint_in_federates_with": false,
    "predicted_endpoint_or_federated_endpoint": true,
    "run_id_langsmith": "6eeba07d-5635-4497-b6d5-57c5584f6734",
    "evaluation_timestamp": "2025-04-22T00:02:47.204301",
    "question_understanding_tokens": 249,
    "question_understanding_completion_tokens": 38,
    "question_understanding_total_tokens": 287,
    "sparql_construction_prompt_tokens": 2039,
    "sparql_construction_completion_tokens": 0,
    "sparql_construction_total_tokens": 2039,
    "is_valid_sparql": true,
    "sparql_syntax_error": "syntactically correct",
    "result_eval_f1_score": 0.0,
    "result_eval_precision": 0.0,
    "result_eval_recall": 0.0,
    "error_occured_at_endpoint": false,
    "predicted_query_result_is_empty": true,
    "error_occured_at_endpoint_message": "no error, but empty result"
  },
  {
    "resource": "https://sparql.uniprot.org/.well-known/sparql-examples/49",
    "natural_language_question": "Retrieve the UniProtKB proteins, their catalyzed Rhea reactions, their encoding genes (Ensembl) and the anatomic entities where the genes are expressed (UBERON anatomic entites from Bgee expression data resource).",
    "ground_truth_query": "PREFIX CHEBI: <http://purl.obolibrary.org/obo/CHEBI_>\nPREFIX genex: <http://purl.org/genex#>\nPREFIX lscr: <http://purl.org/lscr#>\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX rh: <http://rdf.rhea-db.org/>\nPREFIX taxon: <http://purl.uniprot.org/taxonomy/>\nPREFIX up: <http://purl.uniprot.org/core/>\n\nSELECT DISTINCT ?protein ?ensemblGene ?reaction ?anatomicEntityLabel ?anatomicEntity\nWHERE {\n  # federated query to Rhea enadpoint\n  {\n    SELECT DISTINCT ?reaction WHERE {\n      SERVICE <https://sparql.rhea-db.org/sparql> {\n        ?reaction rdfs:subClassOf rh:Reaction ;\n          rh:equation ?reactionEquation ;\n          rh:side ?reactionSide .\n        ?reactionSide rh:contains ?participant .\n        ?participant rh:compound ?compound .\n        # compound constraint (CHEBI:16113 == cholesterol)\n        ?compound rh:chebi CHEBI:16113 .\n      }\n    }\n  }\n  # taxonomy constraint (taxon:9606 == Homo sapiens)\n  ?protein up:organism taxon:9606 ;\n    up:annotation ?a ;\n    rdfs:seeAlso / up:transcribedFrom ?ensemblGene .\n  ?a a up:Catalytic_Activity_Annotation ;\n    up:catalyticActivity ?ca .\n  ?ca up:catalyzedReaction ?reaction .\n  # federated query to Bgee (expression data)\n  BIND(IRI(REPLACE(STR(?ensemblGene), \"\\\\.[0-9]+$\", \"\")) AS ?ensemblGeneNoVersion)\n  SERVICE <https://www.bgee.org/sparql/> {\n    ?gene lscr:xrefEnsemblGene ?ensemblGeneNoVersion ;\n      genex:isExpressedIn ?anatomicEntity .\n    ?anatomicEntity rdfs:label ?anatomicEntityLabel .\n  }\n}",
    "target_endpoint": "https://sparql.uniprot.org/sparql/",
    "federates_with": [
      "https://sparql.rhea-db.org/sparql",
      "https://www.bgee.org/sparql/"
    ],
    "endpoint_set": "Uniprot",
    "file_path": "UniProt/49_tissues_where_genes_metabolizing_cholestrol_are_expressed.ttl",
    "predicted_query": "# https://sparql.uniprot.org/sparql\nPREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX up: <http://purl.uniprot.org/core/>\n\nSELECT DISTINCT ?protein ?reaction ?gene ?anatomicalEntity\nWHERE {\n  # Query UniProt for proteins and their associated Rhea reactions\n  SERVICE <https://sparql.uniprot.org/sparql> {\n    ?protein a up:Protein .\n    ?protein up:annotation ?annotation .\n    ?annotation rdf:type <http://purl.uniprot.org/core/Reaction> .\n    ?annotation rdfs:seeAlso ?reaction .\n    FILTER (REGEX(STR(?reaction), \"rhea-db.org\")) # Filter to ensure the reaction is from Rhea\n  }\n\n  # Query Rhea for the reaction identifiers (not strictly necessary, but included for clarity/example)\n  # SERVICE <https://sparql.rhea-db.org/sparql> {\n  #   ?rheaReaction rdfs:about ?reaction .\n  # }\n  \n  # Assuming there's a link from UniProt proteins to Ensembl genes (hypothetical example)\n  SERVICE <https://sparql.uniprot.org/sparql> {\n     OPTIONAL {\n        ?protein up:encodedBy ?gene . # Replace up:encodedBy with the actual predicate if it exists\n     }\n  }\n\n  # Hypothetically, query Bgee or another endpoint for anatomical entities where the gene is expressed\n  # This is a placeholder as Bgee does not have a public SPARQL endpoint and the link between Ensembl and UBERON is not directly available in UniProt.\n  # Replace the following with the appropriate endpoint and predicates if available\n  # SERVICE <BGEE_SPARQL_ENDPOINT> {\n  #   ?gene bgee:expressedIn ?anatomicalEntity .\n  #   ?anatomicalEntity rdf:type <http://purl.obolibrary.org/obo/UBERON_0001062> . # Example UBERON class for anatomical entity\n  # }\n  BIND(\"No BGEE SPARQL endpoint available\" AS ?anatomicalEntity) # Placeholder\n}",
    "predicted_endpoint": "https://sparql.uniprot.org/sparql",
    "predicted_endpoint_equal_to_target_endpoint": true,
    "predicted_endpoint_in_federates_with": false,
    "predicted_endpoint_or_federated_endpoint": true,
    "run_id_langsmith": "cac22c82-2111-4a8b-9a29-ebb4df2e76cb",
    "evaluation_timestamp": "2025-04-22T00:03:48.602237",
    "question_understanding_tokens": 271,
    "question_understanding_completion_tokens": 72,
    "question_understanding_total_tokens": 343,
    "sparql_construction_prompt_tokens": 2169,
    "sparql_construction_completion_tokens": 0,
    "sparql_construction_total_tokens": 2169,
    "is_valid_sparql": true,
    "sparql_syntax_error": "syntactically correct",
    "result_eval_f1_score": 0.0,
    "result_eval_precision": 0.0,
    "result_eval_recall": 0.0,
    "error_occured_at_endpoint": false,
    "predicted_query_result_is_empty": true,
    "error_occured_at_endpoint_message": "no error, but empty result"
  },
  {
    "resource": "https://sparql.uniprot.org/.well-known/sparql-examples/53",
    "natural_language_question": "Find mouse homologs in OMABrowser of human enzymes that catalyze reactions involving sterols (CHEBI:15889). Federating with Rhea and OMABrowser.",
    "ground_truth_query": "PREFIX CHEBI: <http://purl.obolibrary.org/obo/CHEBI_>\nPREFIX lscr: <http://purl.org/lscr#>\nPREFIX orth: <http://purl.org/net/orth#>\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX rh: <http://rdf.rhea-db.org/>\nPREFIX taxon: <http://purl.uniprot.org/taxonomy/>\nPREFIX up: <http://purl.uniprot.org/core/>\n\nSELECT\n  DISTINCT\n    ?chebi\n    ?reaction\n    ?humanProtein\n    ?mouseProtein\n    ?cluster \nWHERE {\n  SERVICE <https://sparql.rhea-db.org/sparql> {\n    ?reaction rdfs:subClassOf rh:Reaction .\n    ?reaction rh:side/rh:contains/rh:compound ?compound .\n    ?compound rh:chebi ?chebi .\n    ?chebi rdfs:subClassOf* CHEBI:15889\n  }\n\n  ?humanProtein up:organism taxon:9606 .\n  ?humanProtein up:annotation ?a .\n  ?a a up:Catalytic_Activity_Annotation .\n  ?a up:catalyticActivity ?ca .\n  ?ca up:catalyzedReaction ?reaction .\n\n  SERVICE  <https://sparql.omabrowser.org/sparql> {\n    ?cluster a orth:ParalogsCluster .\n    ?cluster orth:hasHomologousMember ?node1 , ?node2 .\n    ?node1 orth:hasHomologousMember* ?orthoProtein1 .\n    ?node2 orth:hasHomologousMember* ?orthoProtein2 .\n    ?orthoProtein1 lscr:xrefUniprot ?mouseProtein .\n    ?orthoProtein2 lscr:xrefUniprot ?humanProtein .\n    # inTaxon mouse\n    ?orthoProtein1 orth:organism/<http://purl.obolibrary.org/obo/RO_0002162> taxon:10090 . \n  }\n}",
    "target_endpoint": "https://sparql.uniprot.org/sparql/",
    "federates_with": [
      "https://sparql.rhea-db.org/sparql",
      "https://sparql.omabrowser.org/sparql"
    ],
    "endpoint_set": "Uniprot",
    "file_path": "UniProt/53_mouse_homologs_of_sterol_enzymes_via_omabrowser.ttl",
    "predicted_query": "# https://sparql.rhea-db.org/sparql\n# Find human enzymes that catalyze reactions involving sterols (CHEBI:15889), then find mouse homologs in OMABrowser.\nPREFIX rhea: <http://rdf.rhea-db.org/>\nPREFIX chebi: <http://purl.obolibrary.org/obo/CHEBI_>\nPREFIX obo: <http://purl.obolibrary.org/obo/>\n\nSELECT DISTINCT ?humanEnzyme ?mouseHomolog\nWHERE {\n  # Find reactions involving sterols (CHEBI:15889)\n  SERVICE <https://sparql.rhea-db.org/sparql> {\n    ?reaction rhea: Rhea_has_reactant chebi:15889 .\n    ?reaction rhea: Rhea_has_enzyme ?enzyme .\n    ?enzyme rhea: Rhea_enzyme_name ?humanEnzyme . # Assuming enzyme name is sufficient identifier.  Can further refine by UniProt ID if available in Rhea.\n  }\n  \n  #OPTIONAL {  #This part need the OMA service to find the Homologs between human and mouse\n  #  SERVICE <OMA_BROWSER_SPARQL_ENDPOINT > { # Replace with the actual OMA Browser SPARQL endpoint\n  #    # Assuming a homology relationship exists between humanEnzyme and mouseHomolog in OMA. Need to adapt the property based on OMA schema.\n  #    ?humanEnzyme oma:hasHomolog ?mouseHomolog . # Hypothetical property 'hasHomolog'.  Replace with actual property.\n  #    ?mouseHomolog rdf:type oma:MouseProtein . # Hypothetical type.  Replace with actual type.\n  #  }\n  #}\n}",
    "predicted_endpoint": "https://sparql.rhea-db.org/sparql",
    "predicted_endpoint_equal_to_target_endpoint": false,
    "predicted_endpoint_in_federates_with": true,
    "predicted_endpoint_or_federated_endpoint": true,
    "run_id_langsmith": "d0de6c82-e3e5-45f8-9d2f-738086e79df2",
    "evaluation_timestamp": "2025-04-22T00:03:59.235790",
    "question_understanding_tokens": 266,
    "question_understanding_completion_tokens": 52,
    "question_understanding_total_tokens": 318,
    "sparql_construction_prompt_tokens": 2085,
    "sparql_construction_completion_tokens": 0,
    "sparql_construction_total_tokens": 2085,
    "is_valid_sparql": false,
    "sparql_syntax_error": "Lexical error at line 11, column 38.  Encountered: '32' (32), after prefix \"Rhea_has_reactant\"",
    "result_eval_f1_score": 0.0,
    "result_eval_precision": 0.0,
    "result_eval_recall": 0.0,
    "error_occured_at_endpoint": true,
    "predicted_query_result_is_empty": true,
    "error_occured_at_endpoint_message": "Lexical error at line 11, column 38.  Encountered: '32' (32), after prefix \"Rhea_has_reactant\""
  },
  {
    "resource": "https://sparql.uniprot.org/.well-known/sparql-examples/52",
    "natural_language_question": "Retrieve drugs that target human enzymes involved in sterol metabolism (federated query with Rhea and ChEMBL via IDSM/Elixir czech republic).",
    "ground_truth_query": "PREFIX CHEBI: <http://purl.obolibrary.org/obo/CHEBI_>\nPREFIX cco: <http://rdf.ebi.ac.uk/terms/chembl#>\nPREFIX chebihash: <http://purl.obolibrary.org/obo/chebi#>\nPREFIX owl: <http://www.w3.org/2002/07/owl#>\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX rh: <http://rdf.rhea-db.org/>\nPREFIX skos: <http://www.w3.org/2004/02/skos/core#>\nPREFIX taxon: <http://purl.uniprot.org/taxonomy/>\nPREFIX up: <http://purl.uniprot.org/core/>\n\nSELECT\n        DISTINCT\n            ?protein\n            ?proteinFullName\n            ?activityType\n            ?standardActivityValue\n            ?standardActivityUnit\n            ?chemblMolecule\n            ?chemlbMoleculePrefLabel\nWHERE\n  {\n  # ChEBI: retrieve members of the ChEBI class ChEBI:15889 (sterol)\n  # Rhea: retrieve the reactions involving these ChEBI as participants\n  SERVICE <https://sparql.rhea-db.org/sparql> {\n    ?reaction rdfs:subClassOf  rh:Reaction ;\n\t      rh:status        rh:Approved ;\n\t      rh:side          ?reactionSide .\n    ?reactionSide\n\t      rh:contains      ?participant .\n    ?participant rh:compound  ?compound\n    {\n      ?compound  rh:chebi  ?chebi .\n      ?chebi (rdfs:subClassOf)+ CHEBI:15889\n    } UNION {\n      ?compound  rh:chebi           ?chebi .\n      ?chebi2   rdfs:subClassOf     ?chebiRestriction .\n      ?chebiRestriction\n\t\ta           owl:Restriction ;\n\t\towl:onProperty      chebihash:has_major_microspecies_at_pH_7_3 ;\n\t\towl:someValuesFrom  ?chebi .\n      ?chebi2 (rdfs:subClassOf)+ CHEBI:15889\n    }\n  }\n  # UniProt: retrieve the human (taxid:9606) enzymes catalyzing these Rhea reactions\n  ?ca       up:catalyzedReaction  ?reaction .\n  ?a        up:catalyticActivity  ?ca .\n  ?protein  up:annotation         ?a ;\n\t    up:organism           taxon:9606 ;\n\t    up:recommendedName    ?proteinRecName .\n  ?proteinRecName\n\t    up:fullName           ?proteinFullName .\n  # Find drugs in wikidata that interact with the UniProt Proteins\n  # ChEMBL: retrieve the corresponding targets and with drugs in clinical phase 4\n  # Via https://idsm.elixir-czech.cz/sparql/\n  SERVICE <https://idsm.elixir-czech.cz/sparql/endpoint/idsm> {\n    ?activity a cco:Activity ;\n      cco:hasMolecule ?chemblMolecule ;\n      cco:hasAssay ?assay ;\n      cco:standardType ?activityType ;\n      cco:standardValue ?standardActivityValue ;\n      cco:standardUnits ?standardActivityUnit .\n    ?chemblMolecule cco:highestDevelopmentPhase ?highestDevelopmentPhase ;\n      rdfs:label ?chemblMoleculeLabel ;\n      skos:prefLabel ?chemlbMoleculePrefLabel .\n    FILTER (?highestDevelopmentPhase > 3)\n    ?assay cco:hasTarget ?target .\n    ?target cco:hasTargetComponent/cco:targetCmptXref ?protein .\n    ?protein a cco:UniprotRef .\n  }\n}",
    "target_endpoint": "https://sparql.uniprot.org/sparql/",
    "federates_with": [
      "https://sparql.rhea-db.org/sparql",
      "https://idsm.elixir-czech.cz/sparql/endpoint/idsm"
    ],
    "endpoint_set": "Uniprot",
    "file_path": "UniProt/52_drugs_targeting_sterol_metabolism.ttl",
    "predicted_query": "# https://sparql.rhea-db.org/sparql\n# Federated SPARQL query to retrieve drugs that target human enzymes involved in sterol metabolism.\nPREFIX rhea: <http://rdf.rhea-db.org/>\nPREFIX chebi: <http://purl.obolibrary.org/obo/CHEBI_>\nPREFIX uniprot: <http://purl.uniprot.org/core/>\nPREFIX taxon: <http://purl.uniprot.org/taxonomy/>\n\nSELECT DISTINCT ?drug\nWHERE {\n  # Find Rhea reactions related to sterol metabolism\n  SERVICE <https://sparql.rhea-db.org/sparql> {\n    ?reaction rhea: Rhea_equation ?equation .\n    ?reaction rhea:rheaReacDirection rhea:bidirectional . # Consider bidirectional reactions\n    VALUES ?substrate_chebi { chebi:15889 }  #CHEBI ID for sterol\n    {\n      ?reaction rhea:has_reactant ?substrate .\n      ?substrate rhea:chebi ?substrate_chebi .\n    }\n    UNION\n    {\n      ?reaction rhea:has_product ?substrate .\n      ?substrate rhea:chebi ?substrate_chebi .\n    }\n    ?reaction rhea:catalyzed_by ?enzyme_rhea_id .\n  }\n\n  # Find Uniprot IDs for human enzymes catalyzing sterol metabolism reactions\n  SERVICE <https://sparql.uniprot.org/sparql> {\n      ?enzyme_rhea_id rdfs:seeAlso ?uniprot_enzyme_uri .\n      FILTER CONTAINS(str(?uniprot_enzyme_uri), \"uniprot\")\n      BIND(IRI(replace(str(?uniprot_enzyme_uri), \"https://www.uniprot.org/uniprotkb/\", \"http://purl.uniprot.org/uniprot/\")) AS ?uniprot_enzyme)\n      ?uniprot_enzyme a uniprot:Protein .\n      ?uniprot_enzyme uniprot:organism taxon:9606 . # Filter for human enzymes\n  }\n  \n  # Find drugs that target human enzymes from ChEMBL via IDSM/Elixir Czech Republic\n    SERVICE <https://idsm.elixir-czech.cz/sparql> {\n    ?drugActivity schema:target ?target .\n    ?target a chembl:Target .\n    ?target rdfs:label ?targetName .\n    ?target dcterms:identifier ?uniprot_enzyme . #Link via Uniprot ID\n    ?drugActivity schema:type ?activityType .\n    FILTER(CONTAINS(STR(?activityType), \"Activity\")) #Filter valid chembl activities\n    ?drugActivity schema:object ?drug .\n  }\n}",
    "predicted_endpoint": "https://sparql.rhea-db.org/sparql",
    "predicted_endpoint_equal_to_target_endpoint": false,
    "predicted_endpoint_in_federates_with": true,
    "predicted_endpoint_or_federated_endpoint": true,
    "run_id_langsmith": "1b1f6095-bab1-460d-86ef-51e5a94e5b64",
    "evaluation_timestamp": "2025-04-22T00:04:09.962633",
    "question_understanding_tokens": 264,
    "question_understanding_completion_tokens": 38,
    "question_understanding_total_tokens": 302,
    "sparql_construction_prompt_tokens": 2531,
    "sparql_construction_completion_tokens": 0,
    "sparql_construction_total_tokens": 2531,
    "is_valid_sparql": false,
    "sparql_syntax_error": "Lexical error at line 12, column 34.  Encountered: '32' (32), after prefix \"Rhea_equation\"",
    "result_eval_f1_score": 0.0,
    "result_eval_precision": 0.0,
    "result_eval_recall": 0.0,
    "error_occured_at_endpoint": true,
    "predicted_query_result_is_empty": true,
    "error_occured_at_endpoint_message": "Lexical error at line 12, column 34.  Encountered: '32' (32), after prefix \"Rhea_equation\""
  },
  {
    "resource": "https://sparql.uniprot.org/.well-known/sparql-examples/54",
    "natural_language_question": "Proteins with binding sites for ligands similar to heme",
    "ground_truth_query": "PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX sachem: <http://bioinfo.uochb.cas.cz/rdf/v1.0/sachem#>\nPREFIX up: <http://purl.uniprot.org/core/>\nPREFIX xsd: <http://www.w3.org/2001/XMLSchema#>\n\nSELECT \n  ?protein\n  ?mnemonic\n  ?proteinName\n  ?ligandSimilarityScore\n  ?ligand\nWHERE {\n  SERVICE <https://idsm.elixir-czech.cz/sparql/endpoint/chebi> {\n    ?ssc sachem:compound ?ligand; \n      sachem:score ?ligandSimilarityScore ;\n      sachem:similaritySearch ?sss .\n        # Smiles of Heme\n    ?sss    sachem:query \"CC1=C(CCC([O-])=O)C2=[N+]3C1=Cc1c(C)c(C=C)c4C=C5C(C)=C(C=C)C6=[N+]5[Fe-]3(n14)n1c(=C6)c(C)c(CCC([O-])=O)c1=C2\";\n      sachem:cutoff \"8e-1\"^^xsd:double ;\n      sachem:aromaticityMode sachem:aromaticityDetect ;\n      sachem:similarityRadius 1 ;\n      sachem:tautomerMode sachem:ignoreTautomers .\n  }\n  ?protein up:mnemonic ?mnemonic ;\n    up:recommendedName/up:fullName ?proteinName ;\n    up:annotation ?annotation .\n  ?annotation a up:Binding_Site_Annotation ;\n      up:ligand/rdfs:subClassOf ?ligand .\n}\nORDER BY DESC(?ligandSimilarityScore)",
    "target_endpoint": "https://sparql.uniprot.org/sparql/",
    "federates_with": [
      "https://idsm.elixir-czech.cz/sparql/endpoint/chebi"
    ],
    "endpoint_set": "Uniprot",
    "file_path": "UniProt/54_binding_sites_for_ligands_similar_to_heme_sachem.ttl",
    "predicted_query": "# https://sparql.uniprot.org/sparql\n# Find proteins that bind ligands similar to heme.\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX up: <http://purl.uniprot.org/core/>\nPREFIX uniprot: <http://purl.uniprot.org/uniprot/>\n\nSELECT DISTINCT ?protein ?proteinName\nWHERE {\n  # Query UniProt for proteins that bind to heme or similar ligands.\n  SERVICE <https://sparql.uniprot.org/sparql> {\n    ?protein a up:Protein .\n    ?protein rdfs:label ?proteinName .\n    ?protein up:annotation ?bindingSiteAnnotation .\n    ?bindingSiteAnnotation a up:Binding_Site .\n    ?bindingSiteAnnotation rdfs:comment ?bindingSiteDescription .\n    \n    # Filter for binding sites that mention \"heme\" or ligands similar to heme.\n    FILTER (contains(lcase(?bindingSiteDescription), \"heme\"))\n  }\n}",
    "predicted_endpoint": "https://sparql.uniprot.org/sparql",
    "predicted_endpoint_equal_to_target_endpoint": true,
    "predicted_endpoint_in_federates_with": false,
    "predicted_endpoint_or_federated_endpoint": true,
    "run_id_langsmith": "4ae7aee8-9dec-445b-b70f-59364d198043",
    "evaluation_timestamp": "2025-04-22T00:04:17.211666",
    "question_understanding_tokens": 243,
    "question_understanding_completion_tokens": 36,
    "question_understanding_total_tokens": 279,
    "sparql_construction_prompt_tokens": 2322,
    "sparql_construction_completion_tokens": 0,
    "sparql_construction_total_tokens": 2322,
    "is_valid_sparql": true,
    "sparql_syntax_error": "syntactically correct",
    "result_eval_f1_score": 0.0,
    "result_eval_precision": 0.0,
    "result_eval_recall": 0.0,
    "error_occured_at_endpoint": false,
    "predicted_query_result_is_empty": true,
    "error_occured_at_endpoint_message": "no error, but empty result"
  },
  {
    "resource": "https://sparql.uniprot.org/.well-known/sparql-examples/43",
    "natural_language_question": "Connect patents cited in UniProtKB with those in the patent database at EPO via publication number, whose grant date is more than twenty years in the past.",
    "ground_truth_query": "PREFIX patent: <http://data.epo.org/linked-data/def/patent/>\nPREFIX skos: <http://www.w3.org/2004/02/skos/core#>\nPREFIX up: <http://purl.uniprot.org/core/>\n\nSELECT ?grantDate ?patent ?application ?applicationNo\nWHERE\n{\n    ?citation a up:Patent_Citation ;\n  skos:exactMatch ?patent .\n  BIND(SUBSTR(STR(?patent), 35) AS ?applicationNo)\n  BIND(SUBSTR(STR(?patent), 33, 2) AS ?countryCode)\n  SERVICE <https://data.epo.org/linked-data/query>{\n    ?publication patent:publicationNumber ?applicationNo ;\n      patent:application ?application .\n    ?application patent:grantDate ?grantDate .\n  }\n  BIND((year(now()) - 20) AS ?thisYearMinusTwenty)\n  BIND(year(?grantDate) AS ?grantYear)\n  FILTER(?grantYear < ?thisYearMinusTwenty)\n} ORDER BY ?grantYear",
    "target_endpoint": "https://sparql.uniprot.org/sparql/",
    "federates_with": [
      "https://data.epo.org/linked-data/query"
    ],
    "endpoint_set": "Uniprot",
    "file_path": "UniProt/43_patents_used_in_uniprot_granted_twenty_years_in_the_past.ttl",
    "predicted_query": "# https://sparql.uniprot.org/sparql\n# Federated query to connect patents cited in UniProtKB with EPO patents via publication number and filter by grant date.\n\nPREFIX up: <http://purl.uniprot.org/core/>\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX dcterms: <http://purl.org/dc/terms/>\nPREFIX bibo: <http://purl.org/ontology/bibo/>\n\nSELECT DISTINCT ?uniprot_patent ?epo_patent\nWHERE {\n  # Query UniProtKB for entries with patent citations\n  SERVICE <https://sparql.uniprot.org/sparql> {\n    ?protein a up:Protein .\n    ?protein dcterms:references ?uniprot_patent . # patents cited in uniprot are references\n    ?uniprot_patent a bibo:Patent .\n  }\n  \n  # Attempt to link to EPO patents based on publication number.\n  # Assuming a SPARQL endpoint for EPO is available and can be queried by publication number.\n  # Since a direct EPO endpoint isn't provided, this part needs to be adapted to a specific EPO SPARQL endpoint if available.\n  # This example assumes a hypothetical EPO endpoint where patents can be looked up by publication number\n  \n  #BIND(STRBEFORE(STRAFTER(STR(?uniprot_patent), \"https://data.epo.org/publication-server/rest/v1.1/publication/epodoc/\"), \"/epodoc\") AS ?publicationNumber) # Extract the publication number from the uniprot patent URI\n  #SERVICE < hypothetical EPO endpoint > {\n  #  ?epo_patent <property linking to publication number> ?publicationNumber .\n  #  ?epo_patent <property for grant date> ?grantDate .\n  #  FILTER (YEAR(NOW()) - YEAR(?grantDate) > 20) # Filter to include only grants more than 20 years ago\n  #}\n\n  # Placeholder for demonstration.  Adapt the commented-out code above with a real EPO endpoint and appropriate properties when available.\n  BIND(\"No EPO endpoint provided; connection via publication number unavailable.\" AS ?epo_patent) # Returns \"No EPO endpoint provided; connection via publication number unavailable.\"\n}",
    "predicted_endpoint": "https://sparql.uniprot.org/sparql",
    "predicted_endpoint_equal_to_target_endpoint": true,
    "predicted_endpoint_in_federates_with": false,
    "predicted_endpoint_or_federated_endpoint": true,
    "run_id_langsmith": "737f0fd1-ed9d-4e6a-aef2-5ad97461e3ac",
    "evaluation_timestamp": "2025-04-22T00:04:42.222245",
    "question_understanding_tokens": 262,
    "question_understanding_completion_tokens": 52,
    "question_understanding_total_tokens": 314,
    "sparql_construction_prompt_tokens": 2047,
    "sparql_construction_completion_tokens": 0,
    "sparql_construction_total_tokens": 2047,
    "is_valid_sparql": true,
    "sparql_syntax_error": "syntactically correct",
    "result_eval_f1_score": 0.0,
    "result_eval_precision": 0.0,
    "result_eval_recall": 0.0,
    "error_occured_at_endpoint": false,
    "predicted_query_result_is_empty": true,
    "error_occured_at_endpoint_message": "no error, but empty result"
  },
  {
    "resource": "https://sparql.uniprot.org/.well-known/sparql-examples/45",
    "natural_language_question": "Retrieve drugs that target human enzymes involved in sterol metabolism (federated query with WikiData and Rhea).",
    "ground_truth_query": "PREFIX CHEBI: <http://purl.obolibrary.org/obo/CHEBI_>\nPREFIX chebihash: <http://purl.obolibrary.org/obo/chebi#>\nPREFIX owl: <http://www.w3.org/2002/07/owl#>\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX rh: <http://rdf.rhea-db.org/>\nPREFIX taxon: <http://purl.uniprot.org/taxonomy/>\nPREFIX uniprotkb: <http://purl.uniprot.org/uniprot/>\nPREFIX up: <http://purl.uniprot.org/core/>\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\n\nSELECT DISTINCT ?protein ?proteinFullName ?wikiChemical ?wikiChemicalLabel ?medicalConditionTreatedLabel\nWHERE {\n  # ChEBI: retrieve members of the ChEBI class ChEBI:15889 (sterol)\n  # Rhea: retrieve the reactions involving these ChEBI as participants\n  SERVICE <https://sparql.rhea-db.org/sparql> {\n    ?reaction rdfs:subClassOf rh:Reaction ;\n      rh:status rh:Approved ;\n      rh:side ?reactionSide .\n    ?reactionSide\n      rh:contains ?participant .\n    ?participant rh:compound ?compound\n    {\n      ?compound rh:chebi ?chebi .\n      ?chebi (rdfs:subClassOf)+ CHEBI:15889\n    } UNION {\n      ?compound rh:chebi ?chebi .\n      ?chebi2 rdfs:subClassOf ?chebiRestriction .\n      ?chebiRestriction\n\t\ta owl:Restriction ;\n\t\towl:onProperty chebihash:has_major_microspecies_at_pH_7_3 ;\n\t\towl:someValuesFrom ?chebi .\n      ?chebi2 (rdfs:subClassOf)+ CHEBI:15889\n    }\n  }\n  # UniProt: retrieve the human (taxid:9606) enzymes catalyzing these Rhea reactions\n  ?ca up:catalyzedReaction  ?reaction .\n  ?a up:catalyticActivity  ?ca .\n  ?proteinIRI  up:annotation ?a ;\n    up:organism taxon:9606 ;\n    up:recommendedName ?proteinRecName .\n  ?proteinRecName up:fullName ?proteinFullName .\n  # Find drugs in wikidata that interact with the UniProt Proteins\n  BIND (SUBSTR(STR(?proteinIRI), STRLEN(STR(uniprotkb:))+1) AS ?protein)\n  SERVICE <https://query.wikidata.org/sparql> {\n    ?wp wdt:P352  ?protein .\n    ?wikiChemical wdt:P129 ?wp . # Physically interacts with\n    ?wikiChemical rdfs:label ?wikiChemicalLabel .\n    ?wikiChemical wdt:P2175 ?wmc . # Medical conndition treated\n    ?wmc rdfs:label ?medicalConditionTreatedLabel .\n    FILTER(lang(?medicalConditionTreatedLabel) = 'en')\n    FILTER(lang(?wikiChemicalLabel) = 'en')\n  }\n}",
    "target_endpoint": "https://sparql.uniprot.org/sparql/",
    "federates_with": [
      "https://query.wikidata.org/sparql",
      "https://sparql.rhea-db.org/sparql"
    ],
    "endpoint_set": "Uniprot",
    "file_path": "UniProt/45_drugs_targeting_human_sterol_metabolism_enzymes.ttl",
    "predicted_query": "# https://sparql.rhea-db.org/sparql\n# Federated query to retrieve drugs targeting human enzymes involved in sterol metabolism.\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX chebi: <http://purl.obolibrary.org/obo/CHEBI#>\nPREFIX wd: <http://www.wikidata.org/entity/>\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\nPREFIX rh: <http://rdf.rhea-db.org/>\n\nSELECT DISTINCT ?drugName ?enzymeName WHERE {\n  # Find human enzymes involved in sterol metabolism in Rhea\n  SERVICE <https://sparql.rhea-db.org/sparql> {\n    ?reaction rh:direction rh:bidirectional ; # Consider bidirectional reactions\n              rh:substrates ?substrate ;\n              rh:products ?product .\n    \n    # Filter for reactions involving sterols (or related terms)\n    FILTER (CONTAINS(LCASE(STR(?substrate)), \"sterol\") || CONTAINS(LCASE(STR(?product)), \"sterol\"))\n    \n    # Find the enzyme that catalyzes the reaction\n    ?reaction rh:enzyme ?enzyme .\n    \n    # Get the enzyme's ChEBI ID\n    ?enzyme chebi:chebiId ?enzymeCHEBI .\n    \n    # Get the enzyme name\n    ?enzyme rdfs:label ?enzymeName .\n    \n    #Optional filter to ensure human enzyme (not available in rhea. Federated with uniprot will be much more accurate)\n    #FILTER CONTAINS(LCASE(?enzymeName), \"human\")\n  }\n  \n  #Find Uniprot ID from enzyme name\n  SERVICE <https://sparql.uniprot.org/sparql> {\n    ?enzymeUniProt rdfs:label ?enzymeName .\n    ?enzymeUniProt <http://purl.uniprot.org/core/taxonomy> <http://purl.uniprot.org/taxonomy/9606>. #Homo sapiens\n  }\n  \n  #Find drugs that target corresponding enzymes in WikiData\n  SERVICE <https://query.wikidata.org/sparql> {\n    ?drug wdt:P2175 ?enzymeUniProt .  #P2175 corresponds to \"pharmacological action\"\n    ?drug rdfs:label ?drugName .\n    FILTER (LANG(?drugName) = \"en\")\n  }\n}",
    "predicted_endpoint": "https://sparql.rhea-db.org/sparql",
    "predicted_endpoint_equal_to_target_endpoint": false,
    "predicted_endpoint_in_federates_with": true,
    "predicted_endpoint_or_federated_endpoint": true,
    "run_id_langsmith": "7b386dfb-fd8b-4713-803e-2c3e9c55bda6",
    "evaluation_timestamp": "2025-04-22T00:04:53.758743",
    "question_understanding_tokens": 253,
    "question_understanding_completion_tokens": 33,
    "question_understanding_total_tokens": 286,
    "sparql_construction_prompt_tokens": 2099,
    "sparql_construction_completion_tokens": 0,
    "sparql_construction_total_tokens": 2099,
    "is_valid_sparql": true,
    "sparql_syntax_error": "syntactically correct",
    "result_eval_f1_score": 0.0,
    "result_eval_precision": 0.0,
    "result_eval_recall": 0.0,
    "error_occured_at_endpoint": false,
    "predicted_query_result_is_empty": true,
    "error_occured_at_endpoint_message": "no error, but empty result"
  },
  {
    "resource": "https://sparql.uniprot.org/.well-known/sparql-examples/42",
    "natural_language_question": "Connect patents cited in UniProtKB with those in the patent database at EPO via publication number.",
    "ground_truth_query": "PREFIX patent: <http://data.epo.org/linked-data/def/patent/>\nPREFIX skos: <http://www.w3.org/2004/02/skos/core#>\nPREFIX up: <http://purl.uniprot.org/core/>\n\nSELECT ?citation ?patent ?application ?applicationNo\nWHERE\n{\n  ?citation a up:Patent_Citation ;\n    skos:exactMatch ?patent .\n  FILTER(CONTAINS(STR(?patent), 'EP'))\n  BIND(SUBSTR(STR(?patent), 35) AS ?applicationNo)\n  SERVICE <https://data.epo.org/linked-data/query>{\n    ?application patent:publicationNumber ?applicationNo\n  }\n}",
    "target_endpoint": "https://sparql.uniprot.org/sparql/",
    "federates_with": [
      "https://data.epo.org/linked-data/query"
    ],
    "endpoint_set": "Uniprot",
    "file_path": "UniProt/42_connect_patents_to_epo.ttl",
    "predicted_query": "# https://sparql.uniprot.org/sparql\n# Hypothetical federated query connecting UniProtKB to EPO Patents (if an EPO endpoint were available)\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\n\nSELECT ?uniprotEntry ?patentTitle ?patentNumber\nWHERE {\n  # Query UniProt for entries that mention patent numbers (hypothetical property)\n  SERVICE <https://sparql.uniprot.org/sparql> {\n    ?uniprotEntry rdfs:comment ?comment . # Assuming rdfs:comment might contain patent info\n    FILTER (CONTAINS(lcase(?comment), \"patent\")) # Filter for comments containing \"patent\"\n    BIND( SUBSTR( ?comment, REGEX( ?comment, \"patent[\\\\s]*([A-Z0-9]+)\", 1)) AS ?patentNumber ) #extract patent number. Regex might need tuning.\n  }\n\n  # Hypothetical: Query the EPO Patents endpoint using the extracted patent number\n  SERVICE <http://example.org/epopatents/sparql> {  # Replace with actual EPO endpoint if available\n    ?patent a <http://example.org/epopatents/Patent> . # Hypothetical Patent class\n    ?patent <http://example.org/epopatents/patentNumber> ?patentNumber . # Hypothetical property for patent number\n    ?patent <http://example.org/epopatents/title> ?patentTitle . # Hypothetical property for patent title\n  }\n}",
    "predicted_endpoint": "https://sparql.uniprot.org/sparql",
    "predicted_endpoint_equal_to_target_endpoint": true,
    "predicted_endpoint_in_federates_with": false,
    "predicted_endpoint_or_federated_endpoint": true,
    "run_id_langsmith": "3db9657f-b001-4891-8ecf-385f7c43ec37",
    "evaluation_timestamp": "2025-04-22T00:05:09.482253",
    "question_understanding_tokens": 249,
    "question_understanding_completion_tokens": 35,
    "question_understanding_total_tokens": 284,
    "sparql_construction_prompt_tokens": 1351,
    "sparql_construction_completion_tokens": 0,
    "sparql_construction_total_tokens": 1351,
    "is_valid_sparql": false,
    "sparql_syntax_error": "REGEX: Pattern flags are not a string: 1",
    "result_eval_f1_score": 0.0,
    "result_eval_precision": 0.0,
    "result_eval_recall": 0.0,
    "error_occured_at_endpoint": true,
    "predicted_query_result_is_empty": true,
    "error_occured_at_endpoint_message": "REGEX: Pattern flags are not a string: 1"
  },
  {
    "resource": "https://sparql.uniprot.org/.well-known/sparql-examples/67_draft_human_metabolome",
    "natural_language_question": "Generate a draft human metabolome",
    "ground_truth_query": "PREFIX chebislash: <http://purl.obolibrary.org/obo/chebi/>\nPREFIX rh: <http://rdf.rhea-db.org/>\nPREFIX taxon: <http://purl.uniprot.org/taxonomy/>\nPREFIX up: <http://purl.uniprot.org/core/>\n\nSELECT\n?uniprot ?mnemonic ?rhea ?chebi ?smiles ?inchiKey\nWHERE\n{\n  ?uniprot up:annotation/up:catalyticActivity/up:catalyzedReaction ?rhea ;\n        up:organism taxon:9606 ;\n        up:mnemonic ?mnemonic .\n  SERVICE <https://sparql.rhea-db.org/sparql> {\n\t?rhea rh:side/rh:contains/rh:compound ?compound .\n    ?compound (rh:chebi|(rh:reactivePart/rh:chebi)|(rh:underlyingChebi/rh:chebi)) ?chebi .\n   }\n   ?chebi chebislash:smiles ?smiles ;\n          chebislash:inchikey ?inchiKey .\n}",
    "target_endpoint": "https://sparql.uniprot.org/sparql/",
    "federates_with": [
      "https://sparql.rhea-db.org/sparql"
    ],
    "endpoint_set": "Uniprot",
    "file_path": "UniProt/67_draft_human_metabolome.ttl",
    "predicted_query": "# https://sparql.uniprot.org/sparql\n# The user is asking to generate a draft human metabolome. This is a broad request, so I will focus on retrieving a list of metabolites associated with human proteins.\n# I will start by querying UniProt for human proteins and then attempt to link these proteins to metabolites via Rhea reactions.\n# Finally, query SwissLipids to include lipid information.\n\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX up: <http://purl.uniprot.org/core/>\nPREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>\n\nSELECT DISTINCT ?metabolite ?metaboliteName\nWHERE {\n  # Find human proteins in UniProt\n  SERVICE <https://sparql.uniprot.org/sparql> {\n    SELECT DISTINCT ?protein ?gene   WHERE {\n      ?protein a up:Protein .\n      ?protein up:organism <http://purl.uniprot.org/taxonomy/9606> .  # Human taxonomy\n      ?protein up:encodedBy ?gene .\n    }\n  }\n\n  # Attempt to link human proteins to Rhea reactions\n  SERVICE <https://sparql.rhea-db.org/sparql> {\n    ?reaction rdfs:label ?reactionLabel .\n    ?reaction rdfs:comment ?reactionComment .\n    # Assuming some form of link between UniProt protein and Rhea reaction exists.  This is a placeholder and needs refinement.\n    # The following line should be replaced with the correct predicate that links a protein to a reaction in Rhea.\n    # Example:  ?reaction <some_predicate> ?protein .\n\n    # For demonstration, I am using a FILTER to check if the reaction comment or label mentions a gene name.\n    FILTER (CONTAINS(LCASE(?reactionLabel), LCASE(?gene)) || CONTAINS(LCASE(?reactionComment), LCASE(?gene))) .\n\n    # Get metabolites involved in the reaction.  Needs refinement based on Rhea ontology.\n    ?reaction ?reactionRole ?metabolite . # ?reactionRole needs to be replaced with correct predicate.\n    ?metabolite rdfs:label ?metaboliteName .\n  }\n\n  #Attempt to include lipids from SwissLipids\n  SERVICE <https://sparql.swisslipids.org/sparql/> {\n     ?lipid rdf:type <http://www.swisslipids.org/rdf/SwissLipids#Lipid> .\n     ?lipid rdfs:label ?lipidName .\n     FILTER (CONTAINS(LCASE(?metaboliteName),LCASE(?lipidName)))\n  }\n}",
    "predicted_endpoint": "https://sparql.uniprot.org/sparql",
    "predicted_endpoint_equal_to_target_endpoint": true,
    "predicted_endpoint_in_federates_with": false,
    "predicted_endpoint_or_federated_endpoint": true,
    "run_id_langsmith": "2a2222d8-5abb-4579-9973-e5e6f5047cc8",
    "evaluation_timestamp": "2025-04-22T00:05:17.498208",
    "question_understanding_tokens": 241,
    "question_understanding_completion_tokens": 12,
    "question_understanding_total_tokens": 253,
    "sparql_construction_prompt_tokens": 651,
    "sparql_construction_completion_tokens": 0,
    "sparql_construction_total_tokens": 651,
    "is_valid_sparql": true,
    "sparql_syntax_error": "syntactically correct",
    "result_eval_f1_score": 0.0,
    "result_eval_precision": 0.0,
    "result_eval_recall": 0.0,
    "error_occured_at_endpoint": false,
    "predicted_query_result_is_empty": true,
    "error_occured_at_endpoint_message": "no error, but empty result"
  },
  {
    "resource": "https://sparql.uniprot.org/.well-known/sparql-examples/36",
    "natural_language_question": "Find the orthologous proteins for UniProtKB entry P05067 using the <a href=\"http://www.orthod.org\">OrthoDB database</a>",
    "ground_truth_query": "PREFIX orthodb: <http://purl.orthodb.org/>\nPREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX skos: <http://www.w3.org/2004/02/skos/core#>\nPREFIX uniprotkb: <http://purl.uniprot.org/uniprot/>\nPREFIX up: <http://purl.uniprot.org/core/>\n\nSELECT\n  ?protein\n  ?orthoGroup\n  ?scientificName\n  ?functionComment\n  ?prefferedGeneName\n  ((STRLEN(?value) - ?medianLength) as ?deviationFromMedianLength)\nWHERE\n{\n  uniprotkb:P05067 a up:Protein ;\n        up:organism/up:scientificName ?scientificName ;\n        rdfs:seeAlso ?orthoGroup ;\n        up:encodedBy/skos:prefLabel ?prefferedGeneName ;\n          up:sequence/rdf:value ?value .\n  OPTIONAL {\n    ?protein up:annotation ?functionAnnotation .\n    ?functionAnnotation a up:Function_Annotation ;\n      rdfs:comment ?functionComment .\n  }\n  SERVICE <https://sparql.orthodb.org/sparql>{\n    ?orthoGroup orthodb:ogMedianProteinLength ?medianLength .\n    ?orthoGroup orthodb:hasMember ?xref .\n    ?xref orthodb:xref/orthodb:xrefResource uniprotkb:P05067 .\n  }\n}\nLIMIT 985915",
    "target_endpoint": "https://sparql.uniprot.org/sparql/",
    "federates_with": [
      "https://sparql.orthodb.org/sparql"
    ],
    "endpoint_set": "Uniprot",
    "file_path": "UniProt/36_orthologous_proteins_via_orthodb.ttl",
    "predicted_query": "# https://sparql.uniprot.org/sparql\n# Find the orthologous proteins for UniProtKB entry P05067 using the OrthoDB database\nPREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX up: <http://purl.uniprot.org/core/>\n\nSELECT DISTINCT ?protein ?gene\nWHERE {\n  # Find the UniProt entry for P05067\n  VALUES ?uniprot_id { \"P05067\" }\n  SERVICE <https://sparql.uniprot.org/sparql> {\n    ?protein a up:Protein ;\n             up:secondaryAccession ?uniprot_id ;\n             up:gene ?gene .\n  }\n  # No direct link to OrthoDB in UniProt. The following query assumes a hypothetical link.\n  # In reality, this requires an external mapping service or manual lookup.\n  # SERVICE <OrthoDB_SPARQL_Endpoint> {  # Replace with the actual OrthoDB endpoint.\n  #   ?ortholog orthodb:member ?protein . # Replace 'orthodb:member' with the actual property.\n  #   ?ortholog orthodb:gene ?geneName .  # Replace 'orthodb:gene' with the actual property.\n  # }\n  # Since OrthoDB endpoint is not provided and there's no direct link, a placeholder is used.\n  # This requires external data integration.\n  BIND(\"OrthoDB ortholog not directly available via SPARQL\" AS ?gene) # Placeholder\n}",
    "predicted_endpoint": "https://sparql.uniprot.org/sparql",
    "predicted_endpoint_equal_to_target_endpoint": true,
    "predicted_endpoint_in_federates_with": false,
    "predicted_endpoint_or_federated_endpoint": true,
    "run_id_langsmith": "0f420edf-f0fb-4e2a-bb04-abd6f5d349e9",
    "evaluation_timestamp": "2025-04-22T00:05:29.961368",
    "question_understanding_tokens": 267,
    "question_understanding_completion_tokens": 34,
    "question_understanding_total_tokens": 301,
    "sparql_construction_prompt_tokens": 1029,
    "sparql_construction_completion_tokens": 0,
    "sparql_construction_total_tokens": 1029,
    "is_valid_sparql": false,
    "sparql_syntax_error": "BIND: Variable used when already in-scope: ?gene in BIND(\"OrthoDB ortholog not directly available via SPARQL\" AS ?gene)",
    "result_eval_f1_score": 0.0,
    "result_eval_precision": 0.0,
    "result_eval_recall": 0.0,
    "error_occured_at_endpoint": true,
    "predicted_query_result_is_empty": true,
    "error_occured_at_endpoint_message": "BIND: Variable used when already in-scope: ?gene in BIND(\"OrthoDB ortholog not directly available via SPARQL\" AS ?gene)"
  },
  {
    "resource": "https://sparql.uniprot.org/.well-known/sparql-examples/60",
    "natural_language_question": "Find human proteins that catalyze reactions where substrates or product have a <a href=\"https://www.ebi.ac.uk/chebi/searchId.do?chebiId=CHEBI:35516\">Cholestane skeleton</a>",
    "ground_truth_query": "PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX rh: <http://rdf.rhea-db.org/>\nPREFIX sachem: <http://bioinfo.uochb.cas.cz/rdf/v1.0/sachem#>\nPREFIX taxon: <http://purl.uniprot.org/taxonomy/>\nPREFIX up: <http://purl.uniprot.org/core/>\n\nSELECT\n  DISTINCT\n    ?protein\n    ?disease\n    ?rhea\n    ?chebi\n    ?omim\nWHERE {\n    # Find complete ChEBIs with a Cholestane skeleton, via the Czech Elixir node IDSM Sachem chemical substructure search.\n    SERVICE <https://idsm.elixir-czech.cz/sparql/endpoint/chebi> {\n      ?chebi sachem:substructureSearch [\n        sachem:query\n\"[C@]12(CCC3CCCC[C@]3(C)[C@@]1([H])CC[C@]1(C)[C@@]([H])([C@@](C)([H])CCCC(C)C)CC[C@@]21[H])[H]\"\n].\n   }\n   # Use the fact that UniProt catalytic activities are annotated using Rhea \n   # Mapping the found ChEBIs to Rhea reactions\n   SERVICE <https://sparql.rhea-db.org/sparql>{\n     ?rhea rh:side/rh:contains/rh:compound/rdfs:subClassOf ?chebi .\n   }\n   # Match the found Rhea reactions with human UniProtKB proteins\n   ?protein up:annotation/up:catalyticActivity/up:catalyzedReaction ?rhea .\n   ?protein up:organism taxon:9606 .\n   # Find only those human entries that have an annotated related disease, and optionaly map these to OMIM\n   ?protein up:annotation/up:disease ?disease .\n   OPTIONAL {\n     ?disease rdfs:seeAlso ?omim .\n     ?omim up:database <http://purl.uniprot.org/database/MIM>\n   }\n}",
    "target_endpoint": "https://sparql.uniprot.org/sparql/",
    "federates_with": [
      "https://idsm.elixir-czech.cz/sparql/endpoint/chebi",
      "https://sparql.rhea-db.org/sparql"
    ],
    "endpoint_set": "Uniprot",
    "file_path": "UniProt/60_enzymes_working_on_substrate_with_Cholestene_backbone.ttl",
    "predicted_query": "# https://sparql.uniprot.org/sparql\n# Find human proteins that catalyze reactions where substrates or product have a Cholestane skeleton\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX up: <http://purl.uniprot.org/core/>\nPREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>\nPREFIX chebi: <http://purl.obolibrary.org/obo/CHEBI_>\n\nSELECT DISTINCT ?protein ?protein_name\nWHERE {\n  # Find reactions in Rhea that involve the Cholestane skeleton (CHEBI:35516)\n  SERVICE <https://sparql.rhea-db.org/sparql> {\n    # ?reaction rdfs:label ?reaction_label . # Optional: to get the reaction label\n    {\n      ?reaction rhea:has_reactant chebi:35516 . # reactant\n    }\n    UNION\n    {\n      ?reaction rhea:has_product chebi:35516 . # product\n    }\n  }\n  \n  # Find proteins in UniProt that catalyze these reactions\n  SERVICE <https://sparql.uniprot.org/sparql> {\n    ?protein a up:Protein .\n    ?protein up:encodedBy ?gene .\n    ?protein rdfs:label ?protein_name .\n    ?protein up:catalyses <http://rdf.rhea-db.org/rhea/reaction/rheaID/?id=35516> . # Link to Rhea reaction by ID\n    ?protein up:organism <http://purl.uniprot.org/taxonomy/9606> .  # Filter for human proteins\n  }\n}",
    "predicted_endpoint": "https://sparql.uniprot.org/sparql",
    "predicted_endpoint_equal_to_target_endpoint": true,
    "predicted_endpoint_in_federates_with": false,
    "predicted_endpoint_or_federated_endpoint": true,
    "run_id_langsmith": "0cb2c1c8-659f-4213-968e-506340d514e1",
    "evaluation_timestamp": "2025-04-22T00:05:38.771386",
    "question_understanding_tokens": 286,
    "question_understanding_completion_tokens": 33,
    "question_understanding_total_tokens": 319,
    "sparql_construction_prompt_tokens": 2047,
    "sparql_construction_completion_tokens": 0,
    "sparql_construction_total_tokens": 2047,
    "is_valid_sparql": false,
    "sparql_syntax_error": "Line 14, column 17: Unresolved prefixed name: rhea:has_reactant",
    "result_eval_f1_score": 0.0,
    "result_eval_precision": 0.0,
    "result_eval_recall": 0.0,
    "error_occured_at_endpoint": true,
    "predicted_query_result_is_empty": true,
    "error_occured_at_endpoint_message": "Line 14, column 17: Unresolved prefixed name: rhea:has_reactant"
  },
  {
    "resource": "https://sparql.uniprot.org/.well-known/sparql-examples/70_enzymes_interacting_with_molecules_similar_to_dopamine",
    "natural_language_question": "Look for enzymes catalyzing reactions with molecules similar to dopamine.",
    "ground_truth_query": "PREFIX CHEBI: <http://purl.obolibrary.org/obo/CHEBI_>\nPREFIX rh: <http://rdf.rhea-db.org/>\nPREFIX sachem: <http://bioinfo.uochb.cas.cz/rdf/v1.0/sachem#>\nPREFIX up: <http://purl.uniprot.org/core/>\n\nSELECT\n  ?protein\n  ?rhea\n  ?chebi\nWHERE {\n  # Use the smiles of dopamine CHEBI:18243\n  SERVICE <https://idsm.elixir-czech.cz/sparql/endpoint/chebi>{\n    ?chebi sachem:similarCompoundSearch [\n      sachem:query \"NCCc1ccc(O)c(O)c1\" ] .\n  }\n  GRAPH<https://sparql.rhea-db.org/rhea>{\n    ?rhea rh:side/rh:contains/rh:compound ?compound .\n    ?compound (rh:chebi|(rh:reactivePart/rh:chebi)|(rh:underlyingChebi/rh:chebi)) ?chebi .\n  }\n  ?protein up:reviewed true ;\n    up:annotation ?caa .\n  ?caa up:catalyticActivity/up:catalyzedReaction ?rhea .\n}",
    "target_endpoint": "https://sparql.uniprot.org/sparql/",
    "federates_with": [
      "https://idsm.elixir-czech.cz/sparql/endpoint/chebi"
    ],
    "endpoint_set": "Uniprot",
    "file_path": "UniProt/70_enzymes_interacting_with_molecules_similar_to_dopamine.ttl",
    "predicted_query": "# https://sparql.rhea-db.org/sparql\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX rh: <http://rdf.rhea-db.org/>\nPREFIX chebi: <http://purl.obolibrary.org/obo/CHEBI_>\n\nSELECT DISTINCT ?enzyme ?reaction\nWHERE {\n  # Find reactions involving dopamine\n  VALUES ?dopamine { <http://purl.obolibrary.org/obo/CHEBI_134058> } # N-palmitoyl dopamine (example dopamine-like molecule)\n  ?reaction rh: Rhea.has_reactant ?dopamine .\n  \n  # Use SERVICE to query UniProt for enzymes catalyzing similar reactions\n  SERVICE <https://sparql.uniprot.org/sparql> {\n    ?enzyme rdfs:label ?enzymeName . # Assuming enzymes have labels\n    ?enzyme a <http://purl.uniprot.org/core/Taxon> . # Assuming enzymes are instances of Taxon (check UniProt schema)\n    # Add a filter to find enzymes potentially catalyzing reactions related to dopamine,\n    # using a text search on enzyme names (adapt based on UniProt's properties)\n    FILTER (CONTAINS(LCASE(?enzymeName), \"dopamine\") || CONTAINS(LCASE(?enzymeName), \"catecholamine\")) # Example filter\n  }\n}",
    "predicted_endpoint": "https://sparql.rhea-db.org/sparql",
    "predicted_endpoint_equal_to_target_endpoint": false,
    "predicted_endpoint_in_federates_with": false,
    "predicted_endpoint_or_federated_endpoint": false,
    "run_id_langsmith": "33460d68-fdb5-4037-8613-283042e75e12",
    "evaluation_timestamp": "2025-04-22T00:05:46.142864",
    "question_understanding_tokens": 245,
    "question_understanding_completion_tokens": 31,
    "question_understanding_total_tokens": 276,
    "sparql_construction_prompt_tokens": 2104,
    "sparql_construction_completion_tokens": 0,
    "sparql_construction_total_tokens": 2104,
    "is_valid_sparql": false,
    "sparql_syntax_error": "Lexical error at line 10, column 34.  Encountered: '32' (32), after prefix \"Rhea.has_reactant\"",
    "result_eval_f1_score": 0.0,
    "result_eval_precision": 0.0,
    "result_eval_recall": 0.0,
    "error_occured_at_endpoint": true,
    "predicted_query_result_is_empty": true,
    "error_occured_at_endpoint_message": "Lexical error at line 10, column 34.  Encountered: '32' (32), after prefix \"Rhea.has_reactant\""
  },
  {
    "resource": "https://sparql.uniprot.org/.well-known/sparql-examples/38",
    "natural_language_question": "For the human entry P05067 (Amyloid-beta precursor protein) find the gene start ends in WikiData",
    "ground_truth_query": "PREFIX p: <http://www.wikidata.org/prop/>\nPREFIX pq: <http://www.wikidata.org/prop/qualifier/>\nPREFIX ps: <http://www.wikidata.org/prop/statement/>\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX uniprotkb: <http://purl.uniprot.org/uniprot/>\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\n\n\nSELECT \n\t?protein \n\t?begin\n\t?end\n\t?chromosome\n\t?assembly\nWHERE {\n    {\n        BIND(uniprotkb:P05067 AS ?proteinIRI)\n        BIND (SUBSTR(STR(?proteinIRI), STRLEN(STR(uniprotkb:))+1) AS ?protein)\n    }\n    SERVICE <https://query.wikidata.org/sparql> {\n        ?wp wdt:P352 ?protein ;\n            wdt:P702 ?wg . \n        ?wg p:P644   ?wgss .\n        ?wgss ps:P644        ?begin ;\n          pq:P1057/wdt:P1813 ?chromosome ;\n          pq:P659/rdfs:label ?assembly .\n        ?wg p:P645 ?wgse .\n        ?wgse ps:P645        ?end ;\n          pq:P1057/wdt:P1813 ?chromosome ;\n          pq:P659/rdfs:label ?assembly .\n        FILTER(lang(?assembly) = \"en\")\n  } \n}",
    "target_endpoint": "https://sparql.uniprot.org/sparql/",
    "federates_with": [
      "https://query.wikidata.org/sparql"
    ],
    "endpoint_set": "Uniprot",
    "file_path": "UniProt/38_find_gene_region_in_wikidata_for_known_entry.ttl",
    "predicted_query": "# https://sparql.uniprot.org/sparql\n# Find Gene Ontology (GO) terms associated with a given UniProt entry.\nPREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX up: <http://purl.uniprot.org/core/>\nPREFIX uniprot: <http://purl.uniprot.org/uniprot/>\nPREFIX wd: <http://www.wikidata.org/entity/>\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\n\nSELECT ?geneStart ?geneEnd\nWHERE {\n  # Specify the UniProt entry for Amyloid-beta precursor protein (P05067).\n  VALUES (?uniprotEntry) { (uniprot:P05067) }\n\n  # Find the gene associated with the UniProt entry using the UniProt SPARQL endpoint.\n  ?uniprotEntry up:encodedBy ?gene .\n\n  # Find the Wikidata ID of the gene.\n  SERVICE <https://query.wikidata.org/sparql> {\n    ?gene wdt:P351 ?geneValue . #P351 is the UniProt ID property in WikiData\n    OPTIONAL { ?gene wdt:P637 ?geneStart . } #P637 is the gene start position\n    OPTIONAL { ?gene wdt:P638 ?geneEnd . } #P638 is the gene end position\n  }\n}",
    "predicted_endpoint": "https://sparql.uniprot.org/sparql",
    "predicted_endpoint_equal_to_target_endpoint": true,
    "predicted_endpoint_in_federates_with": false,
    "predicted_endpoint_or_federated_endpoint": true,
    "run_id_langsmith": "5714278f-64a9-4d30-83e6-6c48a58e2cc6",
    "evaluation_timestamp": "2025-04-22T00:05:53.409402",
    "question_understanding_tokens": 256,
    "question_understanding_completion_tokens": 51,
    "question_understanding_total_tokens": 307,
    "sparql_construction_prompt_tokens": 2363,
    "sparql_construction_completion_tokens": 0,
    "sparql_construction_total_tokens": 2363,
    "is_valid_sparql": true,
    "sparql_syntax_error": "syntactically correct",
    "result_eval_f1_score": 0.0,
    "result_eval_precision": 0.0,
    "result_eval_recall": 0.0,
    "error_occured_at_endpoint": true,
    "predicted_query_result_is_empty": true,
    "error_occured_at_endpoint_message": "QueryBadFormed: A bad request has been sent to the endpoint: probably the SPARQL query is badly formed."
  },
  {
    "resource": "https://sparql.uniprot.org/.well-known/sparql-examples/117_biosodafrontend_glioblastoma_orthologs_rat",
    "natural_language_question": "Which are the proteins associated with glioblastoma and the orthologs expressed in the rat brain?",
    "ground_truth_query": "PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX obo: <http://purl.obolibrary.org/obo/>\nPREFIX orth: <http://purl.org/net/orth#>\nPREFIX sio: <http://semanticscience.org/resource/>\nPREFIX taxon: <http://purl.uniprot.org/taxonomy/>\nPREFIX up: <http://purl.uniprot.org/core/>\nPREFIX lscr: <http://purl.org/lscr#>\nPREFIX genex: <http://purl.org/genex#>\nSELECT DISTINCT ?protein ?orthologous_protein ?gene ?annotation_text WHERE {\n  {\n  \tSELECT ?protein ?annotation_text WHERE {\n      ?protein a up:Protein ;\n          up:organism taxon:9606 ;\n          up:annotation ?annotation .\n      ?annotation rdfs:comment ?annotation_text .\n      ?annotation a up:Disease_Annotation .\n      FILTER CONTAINS (?annotation_text, \"glioblastoma\")\n    }\n  }\n  SERVICE <https://sparql.omabrowser.org/sparql/> {\n    SELECT ?orthologous_protein ?protein ?gene WHERE {\n    ?protein_OMA a orth:Protein .\n    ?orthologous_protein a orth:Protein .\n    ?cluster a orth:OrthologsCluster .\n    ?cluster orth:hasHomologousMember ?node1 .\n    ?cluster\n    orth:hasHomologousMember ?node2 .\n    ?node2 orth:hasHomologousMember* ?protein_OMA .\n    ?node1 orth:hasHomologousMember* ?orthologous_protein .\n    ?orthologous_protein orth:organism/obo:RO_0002162 taxon:10116 . # rattus norvegicus\n    ?orthologous_protein sio:SIO_010079 ?gene .\n    ?protein_OMA lscr:xrefUniprot ?protein .\n    FILTER(?node1 != ?node2)\n\t\t}\n\t}\n  SERVICE <https://www.bgee.org/sparql/> {\n    ?gene genex:isExpressedIn ?a .\n    ?a rdfs:label \"brain\" .\n    ?gene orth:organism ?s . \n    ?s obo:RO_0002162 taxon:10116.\n\t}\n}",
    "target_endpoint": "https://sparql.uniprot.org/sparql",
    "federates_with": [
      "https://sparql.omabrowser.org/sparql/",
      "https://www.bgee.org/sparql/"
    ],
    "endpoint_set": "Uniprot",
    "file_path": "UniProt/117_biosodafrontend_glioblastoma_orthologs_rat.ttl",
    "predicted_query": "# https://sparql.uniprot.org/sparql\nPREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX up: <http://purl.uniprot.org/core/>\n\nSELECT DISTINCT ?protein ?gene ?organism\nWHERE {\n  # Find proteins associated with glioblastoma\n  SERVICE <https://sparql.uniprot.org/sparql> {\n    ?disease a up:Disease .\n    ?disease rdfs:label \"Glioma\" . #Match the Glioblastoma term\n    ?protein up:annotation ?disease .\n    ?protein rdfs:label ?gene .\n  }\n\n  # Find orthologs of these proteins expressed in rat brain\n  SERVICE <https://sparql.uniprot.org/sparql> {\n    ?ratBrainTaxon a up:Taxonomy ;\n                   rdfs:label \"rat brain\" . #Match rat brain term\n    ?ortholog up:classifiedWith ?ratBrainTaxon .\n    ?ortholog rdfs:label ?gene .\n    ?ortholog up:organism ?organism .\n  }\n}",
    "predicted_endpoint": "https://sparql.uniprot.org/sparql",
    "predicted_endpoint_equal_to_target_endpoint": true,
    "predicted_endpoint_in_federates_with": false,
    "predicted_endpoint_or_federated_endpoint": true,
    "run_id_langsmith": "ee16eee0-908c-490c-9746-3516b2d2c902",
    "evaluation_timestamp": "2025-04-22T00:06:02.967180",
    "question_understanding_tokens": 247,
    "question_understanding_completion_tokens": 42,
    "question_understanding_total_tokens": 289,
    "sparql_construction_prompt_tokens": 2543,
    "sparql_construction_completion_tokens": 287,
    "sparql_construction_total_tokens": 2830,
    "is_valid_sparql": true,
    "sparql_syntax_error": "syntactically correct",
    "result_eval_f1_score": 0.0,
    "result_eval_precision": 0.0,
    "result_eval_recall": 0.0,
    "error_occured_at_endpoint": false,
    "predicted_query_result_is_empty": true,
    "error_occured_at_endpoint_message": "no error, but empty result"
  },
  {
    "resource": "https://sparql.uniprot.org/.well-known/sparql-examples/116_biosodafrontend_rabit_mouse_orthologs",
    "natural_language_question": "Rabbit's proteins encoded by genes that are orthologous to Mouse's HBB-Y gene and their cross reference links to Uniprot",
    "ground_truth_query": "PREFIX lscr: <http://purl.org/lscr#>\nPREFIX orth: <http://purl.org/net/orth#>\nPREFIX up: <http://purl.uniprot.org/core/>\nPREFIX obo: <http://purl.obolibrary.org/obo/>\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nSELECT DISTINCT ?PROTEIN_1 ?PROTEIN_2 ?UNIPROT_XREF_1 ?UNIPROT_XREF_2 WHERE {\n\t?taxon_1 up:commonName 'Mouse' .\n\t?taxon_2 up:commonName 'Rabbit' .\n\tSERVICE <https://sparql.omabrowser.org/sparql/> {\n\t\t?cluster a orth:OrthologsCluster .\n\t\t?cluster orth:hasHomologousMember ?node1 .\n\t\t?cluster orth:hasHomologousMember ?node2 .\n\t\t?node2 orth:hasHomologousMember* ?PROTEIN_2 .\n\t\t?node1 orth:hasHomologousMember* ?PROTEIN_1 .\n\t\t?PROTEIN_1 a orth:Protein .\n\t\t?PROTEIN_1 orth:organism/obo:RO_0002162 ?taxon_1 ;\n\t\t\trdfs:label 'HBB-Y' ;\n\t\t\tlscr:xrefUniprot ?UNIPROT_XREF_1 .\n\t\t?PROTEIN_2 a orth:Protein .\n\t\t?PROTEIN_2 orth:organism/obo:RO_0002162 ?taxon_2 .\n\t\t?PROTEIN_2 lscr:xrefUniprot ?UNIPROT_XREF_2 .\n\t\tFILTER ( ?node1 != ?node2 )\n\t}\n}",
    "target_endpoint": "https://sparql.uniprot.org/sparql",
    "federates_with": [
      "https://sparql.omabrowser.org/sparql/"
    ],
    "endpoint_set": "Uniprot",
    "file_path": "UniProt/116_biosodafrontend_rabit_mouse_orthologs.ttl",
    "predicted_query": "# https://sparql.uniprot.org/sparql\n# Retrieves gene orthologs between Rabbit and Mouse, specifically focusing on those related to the HBB-Y gene, and provides cross-reference links to UniProt.\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX up: <http://purl.uniprot.org/core/>\nPREFIX taxon: <http://purl.uniprot.org/taxonomy/>\n\nSELECT DISTINCT ?rabbitProtein ?geneName ?uniprotLink\nWHERE {\n  # Find the UniProt entry for Mouse HBB-Y.\n  SERVICE <https://sparql.uniprot.org/sparql> {\n    VALUES ?mouseTaxon { taxon:10090 } # Mouse NCBI Taxonomy ID\n    ?mouseGene a up:Protein ;\n             up:organism ?mouseTaxon ;\n             rdfs:label \"HBB-Y\" . # The HBB-Y gene name\n\n    # Find orthologs of the Mouse HBB-Y gene in Rabbit.\n    VALUES ?rabbitTaxon { taxon:9986 } # Rabbit NCBI Taxonomy ID\n    ?rabbitProtein a up:Protein ;\n                   up:organism ?rabbitTaxon ;\n                   up:gene ?gene .\n    ?gene rdfs:label ?geneName .\n    #Optional filter to only take into account the name of the gene\n    FILTER(CONTAINS(lcase(?geneName), \"hbb\"))\n  }\n    #Retrieve uniprot link\n   BIND(concat(\"https://www.uniprot.org/uniprotkb/\",STRAFTER(str(?rabbitProtein), \"http://purl.uniprot.org/uniprot/\")) AS ?uniprotLink).\n}",
    "predicted_endpoint": "https://sparql.uniprot.org/sparql",
    "predicted_endpoint_equal_to_target_endpoint": true,
    "predicted_endpoint_in_federates_with": false,
    "predicted_endpoint_or_federated_endpoint": true,
    "run_id_langsmith": "a45e9bf7-6867-45cb-81ea-8cbd0217c622",
    "evaluation_timestamp": "2025-04-22T00:06:15.080087",
    "question_understanding_tokens": 262,
    "question_understanding_completion_tokens": 61,
    "question_understanding_total_tokens": 323,
    "sparql_construction_prompt_tokens": 3424,
    "sparql_construction_completion_tokens": 395,
    "sparql_construction_total_tokens": 3819,
    "is_valid_sparql": true,
    "sparql_syntax_error": "syntactically correct",
    "result_eval_f1_score": 0.0,
    "result_eval_precision": 0.0,
    "result_eval_recall": 0.0,
    "error_occured_at_endpoint": false,
    "predicted_query_result_is_empty": true,
    "error_occured_at_endpoint_message": "no error, but empty result"
  },
  {
    "resource": "https://sparql.uniprot.org/.well-known/sparql-examples/29",
    "natural_language_question": "Use <a href=\"http://allie.dbcls.jp/\">ALLIE</a> a service for Abbreviation / Long Form in Japanese and English to search in UniProt using Japanese.",
    "ground_truth_query": "PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX up: <http://purl.uniprot.org/core/>\n\nSELECT ?protein ?englishLabelStr\nWHERE {\n    SERVICE <https://data.allie.dbcls.jp/sparql>{\n        ?x rdfs:label \"アミロイド前駆体タンパク質\"@ja ;\n            rdfs:label ?englishLabel .\n        FILTER(lang(?englishLabel) = \"en\")\n    }\n    BIND (STR(?englishLabel) AS ?englishLabelStr)\n    ?protein a up:Protein .\n    {\n        ?protein (up:recommendedName|up:alternativeName) ?structuredName .\n    }\n    UNION\n    {\n        VALUES(?partType){(up:domain) (up:component)}\n            ?protein ?partType ?part .\n        ?part (up:recommendedName|up:alternativeName) ?structuredName .\n    }\n    ?structuredName ?anyKindOfName  ?englishLabelStr .\n    ?anyKindOfName rdfs:subPropertyOf up:structuredNameType .\n}",
    "target_endpoint": "https://sparql.uniprot.org/sparql/",
    "federates_with": [
      "https://data.allie.dbcls.jp/sparql"
    ],
    "endpoint_set": "Uniprot",
    "file_path": "UniProt/29_search_uniprot_in_japanese_with_allie.ttl",
    "predicted_query": "",
    "predicted_endpoint": null,
    "predicted_endpoint_equal_to_target_endpoint": false,
    "predicted_endpoint_in_federates_with": false,
    "predicted_endpoint_or_federated_endpoint": false,
    "run_id_langsmith": "24525c55-4aa7-485d-9766-4c721690cc8d",
    "evaluation_timestamp": "2025-04-22T00:06:20.095017",
    "question_understanding_tokens": 269,
    "question_understanding_completion_tokens": 12,
    "question_understanding_total_tokens": 281,
    "sparql_construction_prompt_tokens": 690,
    "sparql_construction_completion_tokens": 46,
    "sparql_construction_total_tokens": 736,
    "is_valid_sparql": false,
    "sparql_syntax_error": "Encountered \"\" at line 1, column 0.\nWas expecting one of:\n    \"base\" ...\n    \"prefix\" ...\n    \"select\" ...\n    \"describe\" ...\n    \"construct\" ...\n    \"ask\" ...",
    "result_eval_f1_score": 0.0,
    "result_eval_precision": 0.0,
    "result_eval_recall": 0.0,
    "error_occured_at_endpoint": true,
    "predicted_query_result_is_empty": true,
    "error_occured_at_endpoint_message": "Encountered \"\" at line 1, column 0.\nWas expecting one of:\n    \"base\" ...\n    \"prefix\" ...\n    \"select\" ...\n    \"describe\" ...\n    \"construct\" ...\n    \"ask\" ..."
  },
  {
    "resource": "https://sparql.rhea-db.org/.well-known/sparql-examples/94_Select_all_approved_reactions_with_CHEBI_or_one_of_its_descendant_optional_UniProtKB_reviewed_EC",
    "natural_language_question": "Select all approved reactions with CHEBI:17815 (a 1,2-diacyl-sn-glycerol) or one of its descendant. Display links to UniProtKB/Swiss-Prot entries via EC numbers if the link rhea-ec exists.",
    "ground_truth_query": "PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX rh:<http://rdf.rhea-db.org/>\nPREFIX CHEBI:<http://purl.obolibrary.org/obo/CHEBI_>\nPREFIX up:<http://purl.uniprot.org/core/>\n\nSELECT\n  distinct\n    ?reaction\n    ?enzyme\n    (count(distinct ?protein) as ?proteinCount)\nWHERE {\n  ?reaction rdfs:subClassOf rh:Reaction .\n  ?reaction rh:status rh:Approved .\n  ?reaction rh:side ?reactionSide .\n\n  OPTIONAL {?reaction rh:ec ?enzyme .\n    SERVICE <https://sparql.uniprot.org/sparql> {\n      ?protein up:reviewed true .\n      ?protein up:enzyme ?enzyme.\n    }\n  } .\n  ?reactionSide rh:contains ?participant .\n  ?participant rh:compound ?compound .\n  ?compound rh:chebi ?chebi .\n  ?chebi rdfs:subClassOf* CHEBI:17815 .\n}\nGROUP BY ?reaction ?enzyme\nORDER BY ?reaction\nLIMIT 985915",
    "target_endpoint": "https://sparql.rhea-db.org/sparql",
    "federates_with": [
      "https://sparql.uniprot.org/sparql"
    ],
    "endpoint_set": "Rhea",
    "file_path": "Rhea/94_Select_all_approved_reactions_with_CHEBI_or_one_of_its_descendant_optional_UniProtKB_reviewed_EC.ttl",
    "predicted_query": "# https://sparql.rhea-db.org/sparql\n# Federated SPARQL query to find approved reactions involving CHEBI:17815 or its descendants and link to UniProtKB entries via EC numbers.\nPREFIX rhea: <http://rdf.rhea-db.org/>\nPREFIX chebi: <http://purl.obolibrary.org/obo/>\nPREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>\n\nSELECT DISTINCT ?reaction ?reactionID ?ecNumber ?uniprotEntry\nWHERE {\n  {\n    # Find reactions involving CHEBI:17815 or its descendants\n    VALUES ?chebiEntity { chebi:CHEBI_17815 } #CHEBI:17815 is a 1,2-diacyl-sn-glycerol\n\n    ?chebiEntity chebi:is_a* ?descendant . # Include descendants\n    ?reaction rhea: Rhea_has_reactant ?descendant .\n    ?reaction rhea: Rhea_status \"approved\" .\n    BIND(STRAFTER(STR(?reaction), \"http://rdf.rhea-db.org/\") AS ?reactionID) #Extract reaction ID\n  }\n  OPTIONAL {\n    ?reaction rhea: Rhea_has_EC ?ecNumber .  # Find EC numbers associated with the reaction\n  }\n  OPTIONAL {\n    #Federate with UniProt to retrieve UniProt entries based on EC number\n    SERVICE <https://sparql.uniprot.org/sparql> {\n      ?uniprotEntry <http://purl.uniprot.org/core/enzymeClassification> ?ecNumber .\n    }\n  }\n}",
    "predicted_endpoint": "https://sparql.rhea-db.org/sparql",
    "predicted_endpoint_equal_to_target_endpoint": true,
    "predicted_endpoint_in_federates_with": false,
    "predicted_endpoint_or_federated_endpoint": true,
    "run_id_langsmith": "8ad677ac-fbf7-4ee8-a78a-9dd521a7eff4",
    "evaluation_timestamp": "2025-04-22T00:06:27.637236",
    "question_understanding_tokens": 289,
    "question_understanding_completion_tokens": 66,
    "question_understanding_total_tokens": 355,
    "sparql_construction_prompt_tokens": 1427,
    "sparql_construction_completion_tokens": 0,
    "sparql_construction_total_tokens": 1427,
    "is_valid_sparql": false,
    "sparql_syntax_error": "Lexical error at line 14, column 38.  Encountered: '32' (32), after prefix \"Rhea_has_reactant\"",
    "result_eval_f1_score": 0.0,
    "result_eval_precision": 0.0,
    "result_eval_recall": 0.0,
    "error_occured_at_endpoint": true,
    "predicted_query_result_is_empty": true,
    "error_occured_at_endpoint_message": "Lexical error at line 14, column 38.  Encountered: '32' (32), after prefix \"Rhea_has_reactant\""
  },
  {
    "resource": "https://sparql.rhea-db.org/.well-known/sparql-examples/11",
    "natural_language_question": "Distribution of reactions according to the first class of the enzyme classification (federated query)",
    "ground_truth_query": "PREFIX ec: <http://purl.uniprot.org/enzyme/>\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX rh: <http://rdf.rhea-db.org/>\nPREFIX skos: <http://www.w3.org/2004/02/skos/core#>\n\n# Query 11\n# Retrieve the count of reactions mapped to each level (main class) of the enzyme classification\n#\n# This query mimics the Filter section of the Rhea website (Browse all reactions)\n# https://www.rhea-db.org/rhea?query=\nSELECT ?ecClass (STR(?ecName) AS ?ecClassName) (COUNT(?rhea) AS ?rheaCount)\nWHERE {\n  SERVICE <https://sparql.uniprot.org/sparql> {\n    VALUES (?ecClass) { (ec:1.-.-.-)(ec:2.-.-.-)(ec:3.-.-.-)(ec:4.-.-.-)(ec:5.-.-.-) (ec:6.-.-.-) (ec:7.-.-.-)}\n    ?ecNumber rdfs:subClassOf ?ecClass .\n    ?ecClass skos:prefLabel ?ecName .\n  }\n  ?rhea rdfs:subClassOf rh:Reaction .\n  ?rhea rh:ec ?ecNumber .\n} GROUP BY ?ecClass ?ecName",
    "target_endpoint": "https://sparql.rhea-db.org/sparql",
    "federates_with": [
      "https://sparql.uniprot.org/sparql"
    ],
    "endpoint_set": "Rhea",
    "file_path": "Rhea/11.ttl",
    "predicted_query": "# https://sparql.rhea-db.org/sparql\nPREFIX rhea: <http://rdf.rhea-db.org/>\nPREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\n\nSELECT ?enzymeClass (COUNT(DISTINCT ?reaction) AS ?reactionCount)\nWHERE {\n  # Query Rhea for reactions and their associated EC numbers\n  SERVICE <https://sparql.rhea-db.org/sparql> {\n    ?reaction rdf:type rhea:Reaction .\n    ?reaction rhea:ec ?ecNumber .\n    BIND(STRBEFORE(?ecNumber, \".\") AS ?enzymeClass) # Extract the first class of EC number\n  }\n}\nGROUP BY ?enzymeClass\nORDER BY DESC(?reactionCount)",
    "predicted_endpoint": "https://sparql.rhea-db.org/sparql",
    "predicted_endpoint_equal_to_target_endpoint": true,
    "predicted_endpoint_in_federates_with": false,
    "predicted_endpoint_or_federated_endpoint": true,
    "run_id_langsmith": "97f99834-f20a-46e4-9b92-8087711ba70d",
    "evaluation_timestamp": "2025-04-22T00:06:33.184396",
    "question_understanding_tokens": 243,
    "question_understanding_completion_tokens": 23,
    "question_understanding_total_tokens": 266,
    "sparql_construction_prompt_tokens": 667,
    "sparql_construction_completion_tokens": 217,
    "sparql_construction_total_tokens": 884,
    "is_valid_sparql": true,
    "sparql_syntax_error": "syntactically correct",
    "result_eval_f1_score": 0.0,
    "result_eval_precision": 0.0,
    "result_eval_recall": 0.0,
    "error_occured_at_endpoint": false,
    "predicted_query_result_is_empty": true,
    "error_occured_at_endpoint_message": "no error, but empty result"
  },
  {
    "resource": "https://sparql.rhea-db.org/.well-known/sparql-examples/109_Distribution_of_reactions_according_to_the_first_level_of_enzyme_classification",
    "natural_language_question": "Distribution of reactions according to the first level of enzyme classification",
    "ground_truth_query": "\nPREFIX rh:<http://rdf.rhea-db.org/>\nPREFIX ec:<http://purl.uniprot.org/enzyme/>\nPREFIX rdfs:<http://www.w3.org/2000/01/rdf-schema#>\nPREFIX skos:<http://www.w3.org/2004/02/skos/core#>\n\nSELECT\n  ?ecClass\n  (str(?ecName) as ?ecClassName)\n  (count(?reaction) as ?reactionCount)\nWHERE\n{\n  SERVICE <http://sparql.uniprot.org/sparql> {\n    VALUES (?ecClass) { (ec:1.-.-.-)(ec:2.-.-.-)(ec:3.-.-.-)(ec:4.-.-.-)(ec:5.-.-.-) (ec:6.-.-.-) (ec:7.-.-.-) }\n    ?ecNumber rdfs:subClassOf ?ecClass .\n    ?ecClass skos:prefLabel ?ecName .\n  }\n  ?reaction rdfs:subClassOf rh:Reaction .\n  ?reaction rh:ec ?ecNumber .\n}\nGROUP BY ?ecClass ?ecName\n",
    "target_endpoint": "https://sparql.rhea-db.org/sparql",
    "federates_with": [
      "http://sparql.uniprot.org/sparql"
    ],
    "endpoint_set": "Rhea",
    "file_path": "Rhea/109_Distribution_of_reactions_according_to_the_first_level_of_enzyme_classification.ttl",
    "predicted_query": "# https://sparql.rhea-db.org/sparql\n# Distribution of reactions according to the first level of enzyme classification\n\nPREFIX rhea: <http://rdf.rhea-db.org/>\nPREFIX ec: <http://purl.uniprot.org/enzyme/>\nPREFIX skos: <http://www.w3.org/2004/02/skos/core#>\n\nSELECT ?topLevelEC (COUNT(DISTINCT ?reaction) AS ?reactionCount)\nWHERE {\n  # Find reactions associated with an enzyme\n  ?reaction rhea:enzymaticReaction ?enzyme .\n  \n  # Get the EC number of the enzyme\n  ?enzyme rdfs:label ?enzymeLabel . # Assuming enzymes have labels that might contain EC numbers\n\n  # Extract the first level EC code (the first digit)\n  BIND(STRBEFORE(?enzymeLabel, \".\") AS ?topLevelEC)\n\n  # Filter for valid EC numbers (starting with a digit and having at least one digit before the first dot)\n  FILTER(REGEX(?topLevelEC, \"^[1-7]$\")) # EC numbers start with digits 1-7\n}\nGROUP BY ?topLevelEC\nORDER BY ?topLevelEC",
    "predicted_endpoint": "https://sparql.rhea-db.org/sparql",
    "predicted_endpoint_equal_to_target_endpoint": true,
    "predicted_endpoint_in_federates_with": false,
    "predicted_endpoint_or_federated_endpoint": true,
    "run_id_langsmith": "8398b87d-f450-4bfb-be65-b00d37511b8c",
    "evaluation_timestamp": "2025-04-22T00:06:41.953049",
    "question_understanding_tokens": 245,
    "question_understanding_completion_tokens": 32,
    "question_understanding_total_tokens": 277,
    "sparql_construction_prompt_tokens": 1971,
    "sparql_construction_completion_tokens": 273,
    "sparql_construction_total_tokens": 2244,
    "is_valid_sparql": false,
    "sparql_syntax_error": "Line 14, column 11: Unresolved prefixed name: rdfs:label",
    "result_eval_f1_score": 0.0,
    "result_eval_precision": 0.0,
    "result_eval_recall": 0.0,
    "error_occured_at_endpoint": true,
    "predicted_query_result_is_empty": true,
    "error_occured_at_endpoint_message": "Line 14, column 11: Unresolved prefixed name: rdfs:label"
  },
  {
    "resource": "https://sparql.rhea-db.org/.well-known/sparql-examples/12",
    "natural_language_question": "Select all Rhea reactions linked to protein sequences (enzymes and transporters) in UniProtKB",
    "ground_truth_query": "PREFIX rh: <http://rdf.rhea-db.org/>\nPREFIX up: <http://purl.uniprot.org/core/>\n\n# Query 12\n# Select all Rhea reactions used to annotate enzyme sequences in UniProtKB\n# return the number of UniProtKB entries\n# Federated query using a service to UniProt SPARQL endpoint\n#\n# This query corresponds to the Rhea website query:\n# https://www.rhea-db.org/rhea?query=uniprot:*\n#\nSELECT ?uniprotCount ?rhea ?accession ?equation \nWHERE {\n  SERVICE <https://sparql.uniprot.org/sparql> { \n  \tSELECT ?rhea (count(?uniprot) as ?uniprotCount) {\n      ?uniprot up:annotation/up:catalyticActivity/up:catalyzedReaction ?rhea . \n  \t}\n  \tGROUP BY ?rhea\n  }\n  ?rhea rh:accession ?accession .\n  ?rhea rh:equation ?equation .\n}",
    "target_endpoint": "https://sparql.rhea-db.org/sparql",
    "federates_with": [
      "https://sparql.uniprot.org/sparql"
    ],
    "endpoint_set": "Rhea",
    "file_path": "Rhea/12.ttl",
    "predicted_query": "# https://sparql.rhea-db.org/sparql\nPREFIX rhea: <http://rdf.rhea-db.org/>\nPREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>\nPREFIX uniprot: <http://purl.uniprot.org/core/>\n\nSELECT DISTINCT ?rheaReaction\nWHERE {\n  # Query Rhea to find reactions\n  SERVICE <https://sparql.rhea-db.org/sparql> {\n    ?rheaReaction rdf:type rhea:Reaction .\n    ?rheaReaction rhea:equation ?equation .\n  }\n\n  # Query UniProt for protein sequences (enzymes and transporters)\n  SERVICE <https://sparql.uniprot.org/sparql> {\n    {\n      ?protein uniprot:annotation ?enzymeAnnotation .\n      ?enzymeAnnotation rdf:type uniprot:Enzyme .\n    }\n    UNION\n    {\n      ?protein uniprot:classifiedWith <http://purl.uniprot.org/keywords/588> . #Transporters\n    }\n    ?protein rdfs:seeAlso ?rheaReaction . #Link UniProt proteins to Rhea\n  }\n}",
    "predicted_endpoint": "https://sparql.rhea-db.org/sparql",
    "predicted_endpoint_equal_to_target_endpoint": true,
    "predicted_endpoint_in_federates_with": false,
    "predicted_endpoint_or_federated_endpoint": true,
    "run_id_langsmith": "a9b6bfb1-4598-470e-9632-544a8441589d",
    "evaluation_timestamp": "2025-04-22T00:06:49.940161",
    "question_understanding_tokens": 253,
    "question_understanding_completion_tokens": 48,
    "question_understanding_total_tokens": 301,
    "sparql_construction_prompt_tokens": 2470,
    "sparql_construction_completion_tokens": 0,
    "sparql_construction_total_tokens": 2470,
    "is_valid_sparql": false,
    "sparql_syntax_error": "Line 24, column 14: Unresolved prefixed name: rdfs:seeAlso",
    "result_eval_f1_score": 0.0,
    "result_eval_precision": 0.0,
    "result_eval_recall": 0.0,
    "error_occured_at_endpoint": true,
    "predicted_query_result_is_empty": true,
    "error_occured_at_endpoint_message": "Line 24, column 14: Unresolved prefixed name: rdfs:seeAlso"
  },
  {
    "resource": "https://sparql.rhea-db.org/.well-known/sparql-examples/112_Total_number_of_reaction_ec_protein_links",
    "natural_language_question": "Total number of <reaction> <ec> <protein> links",
    "ground_truth_query": "PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX rh:<http://rdf.rhea-db.org/>\nPREFIX ec:<http://purl.uniprot.org/enzyme/>\nPREFIX up:<http://purl.uniprot.org/core/>\n\nSELECT\n  (count(?reaction) as ?reactionEcProteinLinkCount)\nWHERE {\n  ?reaction rdfs:subClassOf rh:Reaction .\n  ?reaction rh:ec ?enzyme\n  SERVICE <http://sparql.uniprot.org/sparql> {\n    ?protein up:reviewed true .\n    ?protein up:enzyme ?enzyme.\n  }\n}",
    "target_endpoint": "https://sparql.rhea-db.org/sparql",
    "federates_with": [
      "http://sparql.uniprot.org/sparql"
    ],
    "endpoint_set": "Rhea",
    "file_path": "Rhea/112_Total_number_of_reaction_ec_protein_links.ttl",
    "predicted_query": "# https://sparql.rhea-db.org/sparql\nPREFIX rhea: <http://rdf.rhea-db.org/>\nPREFIX chebi: <http://purl.obolibrary.org/obo/CHEBI:>\nPREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>\n\nSELECT (COUNT(DISTINCT ?reaction) AS ?count)\nWHERE {\n  # Query Rhea for reactions and their associated EC numbers\n  SERVICE <https://sparql.rhea-db.org/sparql> {\n    ?reaction a rhea:Reaction .\n    OPTIONAL { ?reaction rhea:ec ?ec . } # Reactions might not always have an EC number\n  }\n  \n  # Query UniProt for proteins and their associated EC numbers\n  SERVICE <https://sparql.uniprot.org/sparql> {\n    ?protein a <http://purl.uniprot.org/core/Protein> .\n    OPTIONAL { ?protein <http://purl.uniprot.org/core/enzyme> ?ec . } # Proteins might not always have an EC number\n  }\n  \n  # Filter for reactions and proteins that share the same EC number, if available\n  FILTER (BOUND(?ec)) # Only consider cases where an EC number is present in both databases\n}",
    "predicted_endpoint": "https://sparql.rhea-db.org/sparql",
    "predicted_endpoint_equal_to_target_endpoint": true,
    "predicted_endpoint_in_federates_with": false,
    "predicted_endpoint_or_federated_endpoint": true,
    "run_id_langsmith": "ee76d8d2-a6d5-46ee-96f0-afea1fe3009f",
    "evaluation_timestamp": "2025-04-22T00:06:57.208999",
    "question_understanding_tokens": 245,
    "question_understanding_completion_tokens": 24,
    "question_understanding_total_tokens": 269,
    "sparql_construction_prompt_tokens": 1930,
    "sparql_construction_completion_tokens": 0,
    "sparql_construction_total_tokens": 1930,
    "is_valid_sparql": true,
    "sparql_syntax_error": "syntactically correct",
    "result_eval_f1_score": 0.0,
    "result_eval_precision": 0.0,
    "result_eval_recall": 0.0,
    "error_occured_at_endpoint": false,
    "predicted_query_result_is_empty": false,
    "error_occured_at_endpoint_message": "no error"
  },
  {
    "resource": "https://sparql.rhea-db.org/.well-known/sparql-examples/19_draft_human_metabolome",
    "natural_language_question": "Generate a draft human metabolome",
    "ground_truth_query": "PREFIX chebislash: <http://purl.obolibrary.org/obo/chebi/>\nPREFIX rh: <http://rdf.rhea-db.org/>\nPREFIX taxon: <http://purl.uniprot.org/taxonomy/>\nPREFIX up: <http://purl.uniprot.org/core/>\n\nSELECT\n  ?uniprot ?mnemonic ?rhea ?chebi ?smiles ?inchiKey\nWHERE\n{\n  ?rhea rh:side/rh:contains/rh:compound ?compound .\n  ?compound (rh:chebi|(rh:reactivePart/rh:chebi)|(rh:underlyingChebi/rh:chebi)) ?chebi .\n  ?chebi chebislash:smiles ?smiles ;\n          chebislash:inchikey ?inchiKey .\n  SERVICE <https://sparql.uniprot.org/sparql> {\n     ?uniprot up:annotation/up:catalyticActivity/up:catalyzedReaction ?rhea ;\n                                             up:organism taxon:9606 ;\n                                             up:mnemonic ?mnemonic .\n\n   }\n}",
    "target_endpoint": "https://sparql.rhea-db.org/sparql/",
    "federates_with": [
      "https://sparql.uniprot.org/sparql"
    ],
    "endpoint_set": "Rhea",
    "file_path": "Rhea/19_draft_human_metabolome.ttl",
    "predicted_query": "# https://sparql.uniprot.org/sparql\n# This query outlines the initial steps to draft a human metabolome by fetching relevant data from UniProt, Rhea, and SwissLipids.\n# It retrieves proteins, reactions, and lipids associated with human metabolism.\n\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX up: <http://purl.uniprot.org/core/>\nPREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>\n\nSELECT DISTINCT ?protein ?proteinName ?reaction ?reactionName ?lipid ?lipidName\nWHERE {\n  # Query UniProt for human proteins involved in metabolic processes\n  SERVICE <https://sparql.uniprot.org/sparql> {\n    ?protein a up:Protein .\n    ?protein up:organism <http://purl.uniprot.org/taxonomy/9606> . # Human\n    ?protein rdfs:label ?proteinName .\n    ?protein up:classifiedWith <http://purl.uniprot.org/keywords/KW-0488> .  # Metabolic process\n    OPTIONAL { ?protein up:encodedBy ?gene . }\n  }\n\n  # Query Rhea for reactions associated with these proteins\n  SERVICE <https://sparql.rhea-db.org/sparql> {\n    ?reaction rdfs:label ?reactionName .\n    ?reaction <http://purl.obolibrary.org/obo/RO_0002354> ?protein . # catalyzed by\n  }\n  \n  # Query SwissLipids for lipids that might be part of the human metabolome\n  SERVICE <https://sparql.swisslipids.org/sparql/> {\n    ?lipid rdf:type <http://www.swisslipids.org/rdf/lipidonto/Lipid> .\n    ?lipid rdfs:label ?lipidName .\n  }\n}",
    "predicted_endpoint": "https://sparql.uniprot.org/sparql",
    "predicted_endpoint_equal_to_target_endpoint": false,
    "predicted_endpoint_in_federates_with": true,
    "predicted_endpoint_or_federated_endpoint": true,
    "run_id_langsmith": "7fa100a1-fc7d-4fe0-8a81-96d30d495645",
    "evaluation_timestamp": "2025-04-22T00:07:09.026706",
    "question_understanding_tokens": 239,
    "question_understanding_completion_tokens": 12,
    "question_understanding_total_tokens": 251,
    "sparql_construction_prompt_tokens": 657,
    "sparql_construction_completion_tokens": 447,
    "sparql_construction_total_tokens": 1104,
    "is_valid_sparql": true,
    "sparql_syntax_error": "syntactically correct",
    "result_eval_f1_score": 0.0,
    "result_eval_precision": 0.0,
    "result_eval_recall": 0.0,
    "error_occured_at_endpoint": false,
    "predicted_query_result_is_empty": true,
    "error_occured_at_endpoint_message": "no error, but empty result"
  },
  {
    "resource": "https://sparql.rhea-db.org/.well-known/sparql-examples/20_search_chemical_names_in_japanese",
    "natural_language_question": "Search for Chemical names starting in Japanese, translated to english using allie",
    "ground_truth_query": "PREFIX oboInOwl: <http://www.geneontology.org/formats/oboInOwl#>\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\n\nSELECT\n*\nWHERE {\nSERVICE <https://data.allie.dbcls.jp/sparql>{\n        ?x rdfs:label \"1,2,4-トリクロロベンゼン\"@ja ;\n            rdfs:label ?englishLabel .\n        FILTER(lang(?englishLabel) = \"en\")\n    }\n  BIND(STR(?englishLabel) AS ?englishLabelStr)\n  ?chebi rdfs:label|oboInOwl:hasSynonym ?englishLabelStr .\n}",
    "target_endpoint": "https://sparql.rhea-db.org/sparql/",
    "federates_with": [
      "https://data.allie.dbcls.jp/sparql"
    ],
    "endpoint_set": "Rhea",
    "file_path": "Rhea/20_search_chemical_names_in_japanese.ttl",
    "predicted_query": "# https://sparql.uniprot.org/sparql\n# Federated query to search for chemical names related to \"Japanese\" and translated to \"English\" using \"allie\"\n\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>\nPREFIX chebi: <http://purl.obolibrary.org/obo/CHEBI_>\n\nSELECT DISTINCT ?chemicalName ?taxonName\nWHERE {\n  # Find chemical entities\n  SERVICE <https://sparql.rhea-db.org/sparql> {\n    ?chemical rdf:type chebi:24431 ; # Chemical entity\n              rdfs:label ?chemicalName .\n    FILTER (REGEX(?chemicalName, \"^Japanese\", \"i\")) # Filter for chemical names starting with \"Japanese\"\n  }\n  \n  # Find taxon names that might be related to the chemical entities\n  SERVICE <https://sparql.uniprot.org/sparql> {\n    ?taxon rdfs:label ?taxonName .\n    FILTER (REGEX(?taxonName, \"allie|english\", \"i\")) # Filter for taxon names containing \"allie\" or \"english\"\n  }\n}",
    "predicted_endpoint": "https://sparql.uniprot.org/sparql",
    "predicted_endpoint_equal_to_target_endpoint": false,
    "predicted_endpoint_in_federates_with": false,
    "predicted_endpoint_or_federated_endpoint": false,
    "run_id_langsmith": "9f59bcfd-2408-4231-9f1e-dc141101a07a",
    "evaluation_timestamp": "2025-04-22T00:07:20.556134",
    "question_understanding_tokens": 243,
    "question_understanding_completion_tokens": 35,
    "question_understanding_total_tokens": 278,
    "sparql_construction_prompt_tokens": 2007,
    "sparql_construction_completion_tokens": 0,
    "sparql_construction_total_tokens": 2007,
    "is_valid_sparql": true,
    "sparql_syntax_error": "syntactically correct",
    "result_eval_f1_score": 0.0,
    "result_eval_precision": 0.0,
    "result_eval_recall": 0.0,
    "error_occured_at_endpoint": true,
    "predicted_query_result_is_empty": true,
    "error_occured_at_endpoint_message": "QueryBadFormed: A bad request has been sent to the endpoint: probably the SPARQL query is badly formed."
  },
  {
    "resource": "https://sparql.rhea-db.org/.well-known/sparql-examples/117_Retrieve_parent_reactions_and_their_catalyzing_enzymes_for_a_metabolite_that_is_not_directly_involved_in_a_reaction",
    "natural_language_question": "Retrieve parent reactions (and their catalyzing enzymes) for a metabolite that is not directly involved in a reaction (ex: CHEBI:83137).",
    "ground_truth_query": "PREFIX CHEBI: <http://purl.obolibrary.org/obo/CHEBI_>\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX rh:<http://rdf.rhea-db.org/>\nPREFIX ec:<http://purl.uniprot.org/enzyme/>\nPREFIX up:<http://purl.uniprot.org/core/>\nPREFIX taxon:<http://purl.uniprot.org/taxonomy/>\nPREFIX keywords:<http://purl.uniprot.org/keywords/>\n\nSELECT\n  ?chebi\n  ?ecNumber\n  (count(?protein) as ?proteinCount)\n  ?reaction\n  ?equation\nWHERE {\n  ?reaction rdfs:subClassOf rh:Reaction .\n  ?reaction rh:status rh:Approved .\n  ?reaction rh:equation ?equation .\n  ?reaction rh:ec ?ecNumber .\n  ?reaction rh:side ?reactionSide .\n  ?reactionSide rh:contains ?participant .\n  ?participant rh:compound ?compound .\n  ?compound rh:chebi ?chebi .\n  CHEBI:83137 rdfs:subClassOf+ ?chebi.\n\n  SERVICE <https://sparql.uniprot.org/sparql> {\n  ?protein a up:Protein .\n  ?protein up:reviewed true .\n    {?protein up:enzyme ?ecNumber}\n  UNION\n    {?protein up:domain/up:enzyme ?ecNumber}\n  UNION\n    {?protein up:component/up:enzyme ?ecNumber} .\n  }\n} \nGROUP BY ?chebi ?ecNumber ?reaction ?equation",
    "target_endpoint": "https://sparql.rhea-db.org/sparql",
    "federates_with": [
      "https://sparql.uniprot.org/sparql"
    ],
    "endpoint_set": "Rhea",
    "file_path": "Rhea/117_Retrieve_parent_reactions_and_their_catalyzing_enzymes_for_a_metabolite_that_is_not_directly_involved_in_a_reaction.ttl",
    "predicted_query": "# https://sparql.rhea-db.org/sparql\n# Federated query to find parent reactions and catalyzing enzymes for a metabolite not directly involved in a reaction.\nPREFIX rhea: <http://rdf.rhea-db.org/>\nPREFIX chebi: <http://purl.obolibrary.org/obo/CHEBI_>\n\nSELECT DISTINCT ?reaction ?reactionId ?enzyme ?enzymeName\nWHERE {\n  # Find reactions where CHEBI:83137 is a participant\n  SERVICE <https://sparql.rhea-db.org/sparql> {\n    VALUES ?chebi { chebi:83137 } # Define the CHEBI ID of interest\n\n    ?reaction rhea: Rhea_has_participant ?chebiParticipant .\n    ?chebiParticipant rhea:rheaParticipant ?chebi .\n\n    # Get the Rhea ID of the reaction\n    BIND(STRAFTER(STR(?reaction), \"http://rdf.rhea-db.org/\") AS ?reactionId)\n  }\n\n  # Find enzymes catalyzing the reaction\n  SERVICE <https://sparql.uniprot.org/sparql> {\n    ?enzyme rdfs:seeAlso ?reaction . # Link enzyme to reaction via rdfs:seeAlso\n    FILTER CONTAINS(STR(?reaction), ?reactionId) # Ensure the reaction ID matches\n    ?enzyme rdfs:label ?enzymeName . # Get the enzyme name\n  }\n}",
    "predicted_endpoint": "https://sparql.rhea-db.org/sparql",
    "predicted_endpoint_equal_to_target_endpoint": true,
    "predicted_endpoint_in_federates_with": false,
    "predicted_endpoint_or_federated_endpoint": true,
    "run_id_langsmith": "ee761bc8-3edf-42c9-bebe-91fc5a7ece40",
    "evaluation_timestamp": "2025-04-22T00:11:24.922808",
    "question_understanding_tokens": 265,
    "question_understanding_completion_tokens": 41,
    "question_understanding_total_tokens": 306,
    "sparql_construction_prompt_tokens": 2157,
    "sparql_construction_completion_tokens": 0,
    "sparql_construction_total_tokens": 2157,
    "is_valid_sparql": false,
    "sparql_syntax_error": "Lexical error at line 12, column 41.  Encountered: '32' (32), after prefix \"Rhea_has_participant\"",
    "result_eval_f1_score": 0.0,
    "result_eval_precision": 0.0,
    "result_eval_recall": 0.0,
    "error_occured_at_endpoint": true,
    "predicted_query_result_is_empty": true,
    "error_occured_at_endpoint_message": "Lexical error at line 12, column 41.  Encountered: '32' (32), after prefix \"Rhea_has_participant\""
  },
  {
    "resource": "https://sparql.rhea-db.org/.well-known/sparql-examples/18",
    "natural_language_question": "Use <a href=\"https://idsm.elixir-czech.cz/sparql\">IDSM Sachem</a> to find ChEBIs with a a <a href=\"https://www.ebi.ac.uk/chebi/searchId.do?chebiId=CHEBI:35516\">Cholestane</a> skeleton (in SMILES). Then match returned ChEBIs to Rhea undirected reactions.",
    "ground_truth_query": "PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX rh: <http://rdf.rhea-db.org/>\nPREFIX sachem: <http://bioinfo.uochb.cas.cz/rdf/v1.0/sachem#>\n\n\nSELECT \n  ?rhea \n  ?chebi\nWHERE {\n  SERVICE <https://idsm.elixir-czech.cz/sparql/endpoint/chebi> {\n    ?chebi sachem:substructureSearch [\n        sachem:query \"[C@]12(CCC3CCCC[C@]3(C)[C@@]1([H])CC[C@]1(C)[C@@]([H])([C@@](C)([H])CCCC(C)C)CC[C@@]21[H])[H]\" ].\n  }\n  ?rhea rh:side/rh:contains/rh:compound/rdfs:subClassOf ?chebi .\n}",
    "target_endpoint": "https://sparql.rhea-db.org/sparql",
    "federates_with": [
      "https://idsm.elixir-czech.cz/sparql/endpoint/chebi"
    ],
    "endpoint_set": "Rhea",
    "file_path": "Rhea/18.ttl",
    "predicted_query": "# https://sparql.rhea-db.org/sparql\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX chebi: <http://purl.obolibrary.org/obo/CHEBI_>\n\nSELECT DISTINCT ?chebi_name ?rhea_reaction\nWHERE {\n  # Find ChEBIs with a Cholestane skeleton using the IDSM Sachem service.\n  SERVICE <https://idsm.elixir-czech.cz/sparql> {\n    SELECT DISTINCT ?chebi_uri WHERE {\n      ?chebi_uri a <http://identifiers.org/chebi/CHEBI:35516> . # Assuming CHEBI:35516 represents Cholestane skeleton\n    }\n  }\n  \n  # Get the local name of the found ChEBI URIs (e.g., the identifier after the CHEBI namespace)\n  BIND(strafter(str(?chebi_uri), str(chebi:)) AS ?chebi_id)\n  \n  # Construct the ChEBI URI for querying Rhea.\n  BIND(iri(concat(str(chebi:), ?chebi_id)) AS ?chebi_entity)\n  \n  # Find Rhea undirected reactions that involve these ChEBI entities.\n  SERVICE <https://sparql.rhea-db.org/sparql> {\n    ?rhea_reaction rdfs:label ?rhea_label ;\n                   <http://purl.obolibrary.org/obo/RO_0002447> ?chebi_entity .  #RO_0002447: \"is reactant of\"\n    ?chebi_entity rdfs:label ?chebi_name .\n  }\n}",
    "predicted_endpoint": "https://sparql.rhea-db.org/sparql",
    "predicted_endpoint_equal_to_target_endpoint": true,
    "predicted_endpoint_in_federates_with": false,
    "predicted_endpoint_or_federated_endpoint": true,
    "run_id_langsmith": "0ffe6100-6f25-4320-8794-28d7e3863a40",
    "evaluation_timestamp": "2025-04-22T00:11:33.820882",
    "question_understanding_tokens": 324,
    "question_understanding_completion_tokens": 49,
    "question_understanding_total_tokens": 373,
    "sparql_construction_prompt_tokens": 1880,
    "sparql_construction_completion_tokens": 0,
    "sparql_construction_total_tokens": 1880,
    "is_valid_sparql": true,
    "sparql_syntax_error": "syntactically correct",
    "result_eval_f1_score": 0.0,
    "result_eval_precision": 0.0,
    "result_eval_recall": 0.0,
    "error_occured_at_endpoint": true,
    "predicted_query_result_is_empty": true,
    "error_occured_at_endpoint_message": "QueryBadFormed: A bad request has been sent to the endpoint: probably the SPARQL query is badly formed."
  },
  {
    "resource": "https://sparql.rhea-db.org/.well-known/sparql-examples/115_Retrieve_the_set_of_metabolites_involved_in_reactions_catalyzed_by_human_genes_HUMAN_reference_proteome",
    "natural_language_question": "Retrieve the set of metabolites involved in reactions catalyzed by human genes (HUMAN reference proteome)",
    "ground_truth_query": "\nPREFIX rh:<http://rdf.rhea-db.org/>\nPREFIX taxon:<http://purl.uniprot.org/taxonomy/>\nPREFIX ec:<http://purl.uniprot.org/enzyme/>\nPREFIX rdfs:<http://www.w3.org/2000/01/rdf-schema#>\nPREFIX up:<http://purl.uniprot.org/core/>\nPREFIX keywords:<http://purl.uniprot.org/keywords/>\n\nSELECT\n  ?chebi\n  ?reaction\n  ?ecNumber\n  ?protein\n  ?ensemblTranscript\n  ?ensemblGene\nWHERE {\n  SERVICE <https://sparql.uniprot.org/sparql> {\n    ?protein a up:Protein .\n    ?protein up:reviewed true .\n    ?protein up:organism taxon:9606 .\n    ?protein up:classifiedWith keywords:1185 .\n\n    ?protein rdfs:seeAlso ?ensemblTranscript .\n    ?ensemblTranscript a up:Transcript_Resource .\n    ?ensemblTranscript up:database <http://purl.uniprot.org/database/Ensembl> .\n    ?ensemblTranscript up:transcribedFrom ?ensemblGene .\n\n      {?protein up:enzyme ?ecNumber .}\n    UNION\n      {?protein up:domain/up:enzyme ?ecNumber .}\n    UNION\n      {?protein up:component/up:enzyme ?ecNumber .}\n  }\n\n  ?reaction rdfs:subClassOf rh:Reaction .\n  ?reaction rh:status rh:Approved .\n  ?reaction rh:ec ?ecNumber .\n  ?reaction rh:side ?reactionSide .\n  ?reactionSide rh:contains ?participant .\n  ?participant rh:compound ?compound .\n  ?compound rh:chebi ?chebi . # only considering small molecules participants\n}",
    "target_endpoint": "https://sparql.rhea-db.org/sparql",
    "federates_with": [
      "https://sparql.uniprot.org/sparql"
    ],
    "endpoint_set": "Rhea",
    "file_path": "Rhea/115_Retrieve_the_set_of_metabolites_involved_in_reactions_catalyzed_by_human_genes_HUMAN_reference_proteome.ttl",
    "predicted_query": "# https://sparql.rhea-db.org/sparql\n# Prefixes for necessary ontologies\nPREFIX rhea: <http://rdf.rhea-db.org/>\nPREFIX chebi: <http://purl.obolibrary.org/obo/CHEBI_>\nPREFIX uniprot: <http://purl.uniprot.org/core/>\nPREFIX up: <http://purl.uniprot.org/core/>\nPREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>\nPREFIX skos: <http://www.w3.org/2004/02/skos/core#>\n\n# Query to retrieve metabolites involved in reactions catalyzed by human genes\nSELECT DISTINCT ?metaboliteName ?reaction ?gene\nWHERE {\n  # Find reactions in Rhea that involve metabolites\n  SERVICE <https://sparql.rhea-db.org/sparql> {\n    ?reaction a rhea:Reaction .\n    ?reaction rhea:has_participant ?participant .\n    ?participant rhea:chebi ?metabolite .\n    ?metabolite skos:prefLabel ?metaboliteName .\n  }\n  \n  # Find human genes in UniProt that catalyze these reactions\n  SERVICE <https://sparql.uniprot.org/sparql> {\n    ?gene a uniprot:Protein .\n    ?gene up:organism <http://purl.uniprot.org/taxonomy/9606> .  # Filter for human proteins using taxonomy ID.\n    ?gene rhea:reaction ?reaction . # Link genes to reactions via rhea:reaction property.\n  }\n}",
    "predicted_endpoint": "https://sparql.rhea-db.org/sparql",
    "predicted_endpoint_equal_to_target_endpoint": true,
    "predicted_endpoint_in_federates_with": false,
    "predicted_endpoint_or_federated_endpoint": true,
    "run_id_langsmith": "be406ade-a8a3-44bd-89c1-041bf49baa4a",
    "evaluation_timestamp": "2025-04-22T00:11:43.197854",
    "question_understanding_tokens": 248,
    "question_understanding_completion_tokens": 36,
    "question_understanding_total_tokens": 284,
    "sparql_construction_prompt_tokens": 2115,
    "sparql_construction_completion_tokens": 0,
    "sparql_construction_total_tokens": 2115,
    "is_valid_sparql": true,
    "sparql_syntax_error": "syntactically correct",
    "result_eval_f1_score": 0.0,
    "result_eval_precision": 0.0,
    "result_eval_recall": 0.0,
    "error_occured_at_endpoint": false,
    "predicted_query_result_is_empty": true,
    "error_occured_at_endpoint_message": "no error, but empty result"
  }
]