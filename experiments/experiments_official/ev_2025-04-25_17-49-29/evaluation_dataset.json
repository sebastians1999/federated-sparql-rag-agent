[
  {
    "resource": "https://sparql.swisslipids.org/.well-known/sparql-examples/16",
    "natural_language_question": "For a given lipid (SWISSLIPID:000399814, Ceramide), return a list of all enzymes in UniProtKB/Swiss-Prot annotated to catalyze reactions involving that lipid.\nThis query does not consider the hierarchy: it looks for reactions and enzymes only for the specified lipid.",
    "ground_truth_query": "PREFIX SWISSLIPID: <https://swisslipids.org/rdf/SLM_>\nPREFIX owl: <http://www.w3.org/2002/07/owl#>\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX rh: <http://rdf.rhea-db.org/>\nPREFIX up: <http://purl.uniprot.org/core/>\n\n# Example 16\nSELECT ?startId ?startName ?uniprot\nWHERE\n{\n  # SwissLipids query (list of) identifier(s)\n  VALUES ?startId { SWISSLIPID:000399814 }\n  # name\n  ?startId rdfs:label ?startName .\n  # ChEBI x-ref\n  ?startId owl:equivalentClass ?chebi .\n  # federated query to Rhea\n  SERVICE <https://sparql.rhea-db.org/sparql> {\n  \t?rhea rh:side/rh:contains/rh:compound/rh:chebi ?chebi .\n  }    \n  # federated query to UniProt\n  SERVICE <https://sparql.uniprot.org/sparql> {\n    ?uniprot up:reviewed true .\n    ?uniprot up:annotation/up:catalyticActivity/up:catalyzedReaction ?rhea .\n  }\n} \nORDER BY ?startId",
    "target_endpoint": "https://sparql.swisslipids.org/sparql/",
    "federates_with": [
      "https://sparql.uniprot.org/sparql",
      "https://sparql.rhea-db.org/sparql"
    ],
    "endpoint_set": "SwissLipids",
    "file_path": "SwissLipids/16.ttl",
    "predicted_query": "# https://sparql.swisslipids.org/sparql/\n# Federated SPARQL query to find enzymes catalyzing reactions involving a specific lipid (SWISSLIPID:000399814, Ceramide)\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX sl: <http://www.swisslipids.org/rdf#>\n\nSELECT DISTINCT ?enzymeName ?enzymeUri\nWHERE {\n  # Find reactions involving the specified lipid in SwissLipids\n  SERVICE <https://sparql.swisslipids.org/sparql/> {\n    VALUES ?lipid { sl:SWISSLIPID_000399814 } # SWISSLIPID:000399814\n    ?reaction sl:reaction_participant ?lipid .\n  }\n\n  # Find enzymes associated with those reactions in Rhea\n  SERVICE <https://sparql.rhea-db.org/sparql> {\n    ?rheaReaction rdfs:label ?reaction . # Match reaction labels\n    ?rheaReaction rdfs:seeAlso ?enzymeUri . # Link to enzyme URI\n  }\n\n  # Get enzyme names from UniProt\n  SERVICE <https://sparql.uniprot.org/sparql> {\n    ?enzymeUri rdfs:label ?enzymeName .\n    FILTER (REGEX(STR(?enzymeUri), \"uniprot\", \"i\")) # Ensure the URI is from UniProt\n  }\n}",
    "predicted_endpoint": "https://sparql.swisslipids.org/sparql/",
    "predicted_endpoint_equal_to_target_endpoint": true,
    "predicted_endpoint_in_federates_with": false,
    "predicted_endpoint_or_federated_endpoint": true,
    "run_id_langsmith": "2db0d462-80e3-483c-9190-e8ba13a8b7fc",
    "evaluation_timestamp": "2025-04-25T17:49:53.247411",
    "question_understanding_tokens": 298,
    "question_understanding_completion_tokens": 72,
    "question_understanding_total_tokens": 370,
    "sparql_construction_prompt_tokens": 3309,
    "sparql_construction_completion_tokens": 336,
    "sparql_construction_total_tokens": 3645,
    "is_valid_sparql": true,
    "sparql_syntax_error": "syntactically correct",
    "ground_truth_query_result_is_empty": false,
    "result_eval_f1_score": 0.0,
    "result_eval_precision": 0.0,
    "result_eval_recall": 0.0,
    "error_occured_at_endpoint": true,
    "predicted_query_result_is_empty": true,
    "error_occured_at_endpoint_message": "QueryBadFormed: A bad request has been sent to the endpoint: probably the SPARQL query is badly formed."
  },
  {
    "resource": "https://sparql.swisslipids.org/.well-known/sparql-examples/6",
    "natural_language_question": "For a given lipid (SWISSLIPID:000399814, Ceramide), return a list of all corresponding reactions (Rhea IDs and equation), as well as their enzymes as annotated in UniProtKB/Swiss-Prot) enzymes themselves (ID and protein name).\nThis query does not consider the hierarchy: it looks for reactions and enzymes only for the specified lipid.",
    "ground_truth_query": "PREFIX SWISSLIPID: <https://swisslipids.org/rdf/SLM_>\nPREFIX owl: <http://www.w3.org/2002/07/owl#>\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX rh: <http://rdf.rhea-db.org/>\nPREFIX up: <http://purl.uniprot.org/core/>\n\n# Example 6\nSELECT ?startId ?startName ?chebi ?rhea ?rheaEquation ?uniprot ?uniprotName\nWHERE\n{\n  # SwissLipids query (list of) identifier(s)\n  VALUES ?startId { SWISSLIPID:000399814 }\n  # name\n  ?startId rdfs:label ?startName .\n  # ChEBI x-ref\n  ?startId owl:equivalentClass ?chebi .\n  # federated query to Rhea\n  SERVICE <https://sparql.rhea-db.org/sparql> {\n  \t?rhea rh:equation ?rheaEquation .\n  \t?rhea rh:side/rh:contains/rh:compound/rh:chebi ?chebi .\n  }    \n  # federated query to UniProt\n  SERVICE <https://sparql.uniprot.org/sparql> {\n    ?uniprot up:reviewed true .\n    ?uniprot up:recommendedName/up:fullName ?uniprotName .\n    ?uniprot up:annotation/up:catalyticActivity/up:catalyzedReaction ?rhea .\n  }\n} \nORDER BY ?startId",
    "target_endpoint": "https://sparql.swisslipids.org/sparql/",
    "federates_with": [
      "https://sparql.uniprot.org/sparql",
      "https://sparql.rhea-db.org/sparql"
    ],
    "endpoint_set": "SwissLipids",
    "file_path": "SwissLipids/6.ttl",
    "predicted_query": "# https://sparql.swisslipids.org/sparql/\n# Federated SPARQL query to find reactions and enzymes associated with a specific lipid (SWISSLIPID:000399814, Ceramide)\n\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>\nPREFIX sl: <http://www.swisslipids.org/rdf#>\nPREFIX rhea: <http://rdf.rhea-db.org/>\nPREFIX chebi: <http://purl.obolibrary.org/obo/CHEBI_>\n\nSELECT DISTINCT ?lipid ?rheaId ?equation ?enzymeId ?proteinName\nWHERE {\n  # Define the target lipid\n  VALUES ?lipid { sl:SWISSLIPID_000399814 } # SWISSLIPID:000399814 (Ceramide)\n\n  # Find reactions associated with the lipid in SwissLipids\n  ?reaction sl:refersToLipid ?lipid .\n  ?reaction rdf:type rhea:Reaction .\n  ?reaction rdfs:label ?rheaId .\n\n  # Get the reaction equation from Rhea\n  SERVICE <https://sparql.rhea-db.org/sparql> {\n    BIND (IRI(strbefore(str(?reaction), \"_\")) AS ?rheaURI) # Extract Rhea URI\n    ?rheaURI rdfs:comment ?equation .\n  }\n\n  # Find enzymes associated with the reactions in Rhea and link to UniProt\n  SERVICE <https://sparql.rhea-db.org/sparql> {\n    ?rheaURI rhea:enzyme ?enzymeURI .\n    ?enzymeURI rdfs:label ?enzymeId . # Get the enzyme ID\n  }\n\n  # Get enzyme protein name from UniProt\n  SERVICE <https://sparql.uniprot.org/sparql> {\n    ?enzymeURI rdfs:seeAlso ?uniprotURI .\n    ?uniprotURI rdfs:label ?proteinName . # Get the protein name\n  }\n}",
    "predicted_endpoint": "https://sparql.swisslipids.org/sparql/",
    "predicted_endpoint_equal_to_target_endpoint": true,
    "predicted_endpoint_in_federates_with": false,
    "predicted_endpoint_or_federated_endpoint": true,
    "run_id_langsmith": "cf105b83-203b-4a8a-9ad0-f532936bff93",
    "evaluation_timestamp": "2025-04-25T17:50:06.142426",
    "question_understanding_tokens": 315,
    "question_understanding_completion_tokens": 86,
    "question_understanding_total_tokens": 401,
    "sparql_construction_prompt_tokens": 3324,
    "sparql_construction_completion_tokens": 495,
    "sparql_construction_total_tokens": 3819,
    "is_valid_sparql": true,
    "sparql_syntax_error": "syntactically correct",
    "ground_truth_query_result_is_empty": false,
    "result_eval_f1_score": 0.0,
    "result_eval_precision": 0.0,
    "result_eval_recall": 0.0,
    "error_occured_at_endpoint": false,
    "predicted_query_result_is_empty": true,
    "error_occured_at_endpoint_message": "no error, but empty result"
  },
  {
    "resource": "https://sparql.swisslipids.org/.well-known/sparql-examples/5",
    "natural_language_question": "For a given lipid (SWISSLIPID:000399814, Ceramide), return a list of all corresponding reactions (Rhea IDs and equation).\nThis query does consider the hierarchy: it looks for reactions involving the specified lipid and/or its more specific forms.",
    "ground_truth_query": "PREFIX SWISSLIPID: <https://swisslipids.org/rdf/SLM_>\nPREFIX owl: <http://www.w3.org/2002/07/owl#>\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX rh: <http://rdf.rhea-db.org/>\n\n# Example 5\nSELECT ?startId ?startName ?id ?name ?chebi ?rhea ?rheaEquation \nWHERE\n{\n  # SwissLipids query (list of) identifier(s)\n  VALUES ?startId { SWISSLIPID:000399814 }\n  # name\n  ?startId rdfs:label ?startName .\n  # Retrieve children lipids \n  ?id rdfs:subClassOf* ?startId .\n  ?id rdfs:label ?name .\n  # ChEBI x-ref\n  ?id owl:equivalentClass ?chebi .\n  # federated query to Rhea\n  SERVICE <https://sparql.rhea-db.org/sparql> {\n  \t?rhea rh:equation ?rheaEquation .\n  \t?rhea rh:side/rh:contains/rh:compound/rh:chebi ?chebi .\n  }    \n} \nORDER BY  ?startId ?id",
    "target_endpoint": "https://sparql.swisslipids.org/sparql/",
    "federates_with": [
      "https://sparql.rhea-db.org/sparql"
    ],
    "endpoint_set": "SwissLipids",
    "file_path": "SwissLipids/5.ttl",
    "predicted_query": "# https://sparql.swisslipids.org/sparql/\n# Federated query to retrieve Rhea IDs and equations for reactions involving a specific lipid (SWISSLIPID:000399814, Ceramide) and its more specific forms.\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>\nPREFIX sl: <http://www.swisslipids.org/rdf#>\n\nSELECT DISTINCT ?rheaID ?equation\nWHERE {\n  # Find more specific lipids (subClassOf) of the given lipid in SwissLipids\n  {\n    SELECT DISTINCT ?lipid\n    WHERE {\n      VALUES ?givenLipid { <http://www.swisslipids.org/rdf/SWISSLIPID:000399814> } # SWISSLIPID:000399814 is the identifier for Ceramide\n      ?lipid rdfs:subClassOf* ?givenLipid .\n    }\n  }\n\n  # Find reactions in RheaDB that involve the lipid or its more specific forms\n  SERVICE <https://sparql.rhea-db.org/sparql> {\n    PREFIX rhea: <http://rdf.rhea-db.org/>\n    PREFIX chebi: <http://purl.obolibrary.org/obo/CHEBI_>\n\n    ?rheaID rhea:equation ?equation .\n    ?rheaID rhea:hasParticipant ?participant .\n    ?participant rdfs:seeAlso ?chebiEntity . # Link to ChEBI\n\n    # Filter for reactions involving the lipid or its more specific forms\n    FILTER EXISTS {\n      # Map SwissLipids IDs to ChEBI IDs using a SPARQL VALUES clause.\n      # This assumes a mapping exists between SwissLipids and ChEBI for the lipids.\n      # If no direct mapping exists, a more complex approach involving external data sources or reasoning might be needed.\n      VALUES ?lipidChEBI {\n        <http://purl.obolibrary.org/obo/CHEBI_17761> # Example ChEBI ID for Ceramide.  This needs to be verified and expanded.\n      }\n      FILTER (?chebiEntity IN (?lipidChEBI))\n    }\n  }\n}",
    "predicted_endpoint": "https://sparql.swisslipids.org/sparql/",
    "predicted_endpoint_equal_to_target_endpoint": true,
    "predicted_endpoint_in_federates_with": false,
    "predicted_endpoint_or_federated_endpoint": true,
    "run_id_langsmith": "90125d08-14dc-4f89-b562-a576be429bcc",
    "evaluation_timestamp": "2025-04-25T17:50:16.683515",
    "question_understanding_tokens": 293,
    "question_understanding_completion_tokens": 65,
    "question_understanding_total_tokens": 358,
    "sparql_construction_prompt_tokens": 2025,
    "sparql_construction_completion_tokens": 540,
    "sparql_construction_total_tokens": 2565,
    "is_valid_sparql": false,
    "sparql_syntax_error": "Encountered \" \"prefix\" \"PREFIX \"\" at line 20, column 5.\nWas expecting one of:\n     ...\n     ...\n     ...\n     ...\n     ...\n     ...\n    \"select\" ...\n    \"values\" ...\n    \"graph\" ...\n    \"optional\" ...\n    \"minus\" ...\n    \"bind\" ...\n    \"service\" ...\n    \"filter\" ...\n    \"true\" ...\n    \"false\" ...\n     ...\n     ...\n     ...\n     ...\n     ...\n     ...\n     ...\n     ...\n     ...\n     ...\n     ...\n     ...\n     ...\n    \"(\" ...\n     ...\n    \"{\" ...\n    \"}\" ...\n    \"[\" ...\n     ...\n    \"<<\" ...",
    "ground_truth_query_result_is_empty": null,
    "result_eval_f1_score": 0.0,
    "result_eval_precision": 0.0,
    "result_eval_recall": 0.0,
    "error_occured_at_endpoint": false,
    "predicted_query_result_is_empty": true,
    "error_occured_at_endpoint_message": "syntactically not correct"
  },
  {
    "resource": "https://sparql.swisslipids.org/.well-known/sparql-examples/34",
    "natural_language_question": "Lipids affected by human enzymes",
    "ground_truth_query": "PREFIX owl: <http://www.w3.org/2002/07/owl#>\nPREFIX rh: <http://rdf.rhea-db.org/>\nPREFIX taxon: <http://purl.uniprot.org/taxonomy/>\nPREFIX up: <http://purl.uniprot.org/core/>\n\nSELECT ?swisslipid  {\n  ?swisslipid owl:equivalentClass ?chebi .\n  SERVICE <https://sparql.rhea-db.org/sparql> {\n    ?rhea rh:side/rh:contains/rh:compound ?compound .\n\t?compound (rh:chebi|(rh:reactivePart/rh:chebi)|(rh:underlyingChebi/rh:chebi)) ?metabolite . \n  }\n  SERVICE <https://sparql.uniprot.org/sparql> {\n    ?catalyticActivityAnnotation up:catalyticActivity/up:catalyzedReaction ?rhea .\n    ?protein up:annotation ?catalyticActivityAnnotation ;\n             up:organism taxon:9606 .\n  }\n}\nLIMIT 1",
    "target_endpoint": "https://sparql.swisslipids.org/sparql/",
    "federates_with": [
      "https://sparql.uniprot.org/sparql",
      "https://sparql.rhea-db.org/sparql"
    ],
    "endpoint_set": "SwissLipids",
    "file_path": "SwissLipids/34.ttl",
    "predicted_query": "# https://sparql.swisslipids.org/sparql/\n# Federated query to find lipids affected by human enzymes, using SwissLipids and UniProt.\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX sl: <http://swisslipids.org/rdf#>\nPREFIX up: <http://purl.uniprot.org/core/>\n\nSELECT DISTINCT ?lipidName ?enzymeName\nWHERE {\n  # Query SwissLipids for lipids and their associated enzymes\n  SERVICE <https://sparql.swisslipids.org/sparql/> {\n    ?lipid a sl:Lipid .\n    ?lipid rdfs:label ?lipidName .\n    ?enzyme sl:catalyzes ?lipid .\n    ?enzyme rdfs:label ?enzymeName .\n  }\n  \n  # Filter for human enzymes by linking to UniProt and filtering by taxonomy\n  SERVICE <https://sparql.uniprot.org/sparql/> {\n    ?enzyme up:sequence ?sequence . # Assuming enzymes have sequence information in UniProt\n    ?enzyme up:organism ?organism .\n    ?organism rdfs:label \"Homo sapiens\" . # Filter for human enzymes\n  }\n}",
    "predicted_endpoint": "https://sparql.swisslipids.org/sparql/",
    "predicted_endpoint_equal_to_target_endpoint": true,
    "predicted_endpoint_in_federates_with": false,
    "predicted_endpoint_or_federated_endpoint": true,
    "run_id_langsmith": "72f6b486-27c3-4048-84ea-01814f550d88",
    "evaluation_timestamp": "2025-04-25T17:50:23.858342",
    "question_understanding_tokens": 239,
    "question_understanding_completion_tokens": 20,
    "question_understanding_total_tokens": 259,
    "sparql_construction_prompt_tokens": 1685,
    "sparql_construction_completion_tokens": 0,
    "sparql_construction_total_tokens": 1685,
    "is_valid_sparql": true,
    "sparql_syntax_error": "syntactically correct",
    "ground_truth_query_result_is_empty": false,
    "result_eval_f1_score": 0.0,
    "result_eval_precision": 0.0,
    "result_eval_recall": 0.0,
    "error_occured_at_endpoint": false,
    "predicted_query_result_is_empty": true,
    "error_occured_at_endpoint_message": "no error, but empty result"
  },
  {
    "resource": "https://sparql.uniprot.org/.well-known/sparql-examples/118_biosodafrontend_rat_brain_human_cancer",
    "natural_language_question": "What are the Homo sapiens genes associated with cancer and their orthologs expressed in the Rattus norvegicus brain?",
    "ground_truth_query": "PREFIX up:<http://purl.uniprot.org/core/>\nPREFIX taxon:<http://purl.uniprot.org/taxonomy/>\nPREFIX rdfs:<http://www.w3.org/2000/01/rdf-schema#>\nPREFIX orth:<http://purl.org/net/orth#>\nPREFIX dcterms:<http://purl.org/dc/terms/>\nPREFIX obo:<http://purl.obolibrary.org/obo/>\nPREFIX lscr:<http://purl.org/lscr#>\nPREFIX genex:<http://purl.org/genex#>\nPREFIX sio: <http://semanticscience.org/resource/>\nSELECT ?gene ?orthologous_protein2 WHERE {\n  {\n    SELECT ?protein1 WHERE {\n      ?protein1 a up:Protein;\n        up:organism/up:scientificName 'Homo sapiens' ;\n        up:annotation ?annotation .\n      ?annotation rdfs:comment ?annotation_text.\n      ?annotation a up:Disease_Annotation .\n      FILTER CONTAINS (?annotation_text, \"cancer\")\n    }\n  }\n  SERVICE <https://sparql.omabrowser.org/sparql/> {\n    SELECT ?orthologous_protein2 ?protein1 ?gene WHERE {\n      ?protein_OMA a orth:Protein .\n      ?orthologous_protein2 a orth:Protein .\n      ?cluster a orth:OrthologsCluster .\n      ?cluster orth:hasHomologousMember ?node1 .\n      ?cluster orth:hasHomologousMember ?node2 .\n      ?node2 orth:hasHomologousMember* ?protein_OMA .\n      ?node1 orth:hasHomologousMember* ?orthologous_protein2 \n      .?orthologous_protein2 orth:organism/obo:RO_0002162/up:scientificName 'Rattus norvegicus' .\n      ?orthologous_protein2 sio:SIO_010079 ?gene .\n      ?protein_OMA lscr:xrefUniprot ?protein1 .\n      FILTER(?node1 != ?node2)\n    }\n  }\n  SERVICE <https://www.bgee.org/sparql/> {\n    ?gene genex:isExpressedIn ?anatEntity .\n    ?anatEntity rdfs:label 'brain' .\n    ?gene orth:organism ?org . \n    ?org obo:RO_0002162 taxon:10116 .\n  }\n}",
    "target_endpoint": "https://sparql.uniprot.org/sparql",
    "federates_with": [
      "https://sparql.omabrowser.org/sparql/",
      "https://www.bgee.org/sparql/"
    ],
    "endpoint_set": "Uniprot",
    "file_path": "UniProt/118_biosodafrontend_rat_brain_human_cancer.ttl",
    "predicted_query": "# https://sparql.uniprot.org/sparql\n# Prefix declarations for commonly used namespaces\nPREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX up: <http://purl.uniprot.org/core/>\nPREFIX taxon: <http://purl.uniprot.org/taxonomy/>\nPREFIX uniprot: <http://purl.uniprot.org/uniprot/>\nPREFIX faldo: <http://biohackathon.org/resource/faldo#>\n\n# Select the gene names and their corresponding orthologs\nSELECT DISTINCT ?geneName ?ratOrthologName\nWHERE {\n  # Subquery to find human genes associated with cancer\n  {\n    SELECT DISTINCT ?gene\n    WHERE {\n      # Find UniProt entries for Homo sapiens\n      ?gene a up:Protein ;\n            up:organism taxon:9606 . # Homo sapiens\n\n      # Find diseases associated with the gene (linking to cancer)\n      ?gene up:annotation ?diseaseAnnotation .\n      ?diseaseAnnotation a up:Disease_Annotation .\n      ?diseaseAnnotation rdfs:comment ?diseaseName .\n      FILTER (CONTAINS(LCASE(?diseaseName), \"cancer\")) # Filter for cancer-related diseases\n    }\n  }\n\n  # Find the gene name\n  ?gene rdfs:label ?geneName .\n\n  # Find orthologs in Rattus norvegicus\n  SERVICE <https://sparql.uniprot.org/sparql> {\n    ?ratOrtholog up:sequence ?sequence .\n    ?ratOrtholog up:organism taxon:10116 . # Rattus norvegicus\n    ?ratOrtholog rdfs:label ?ratOrthologName .\n    ?ratOrtholog up:annotation ?brainAnnotation .\n    ?brainAnnotation a up:Tissue_Annotation .\n    ?brainAnnotation rdfs:comment ?brainTissue .\n    FILTER (CONTAINS(LCASE(?brainTissue), \"brain\")) # Filter for brain tissue\n\n    # Link human gene to rat ortholog using ortholog property (if available)\n    ?orthologAssertion rdf:subject ?gene ;\n                       rdf:predicate up:sameAs ; # Assuming sameAs can link to orthologs\n                       rdf:object ?ratOrtholog .\n  }\n}",
    "predicted_endpoint": "https://sparql.uniprot.org/sparql",
    "predicted_endpoint_equal_to_target_endpoint": true,
    "predicted_endpoint_in_federates_with": false,
    "predicted_endpoint_or_federated_endpoint": true,
    "run_id_langsmith": "12615615-6ee2-4d8c-b4d6-d48e1f3073d3",
    "evaluation_timestamp": "2025-04-25T17:50:42.368815",
    "question_understanding_tokens": 257,
    "question_understanding_completion_tokens": 47,
    "question_understanding_total_tokens": 304,
    "sparql_construction_prompt_tokens": 3108,
    "sparql_construction_completion_tokens": 545,
    "sparql_construction_total_tokens": 3653,
    "is_valid_sparql": true,
    "sparql_syntax_error": "syntactically correct",
    "ground_truth_query_result_is_empty": false,
    "result_eval_f1_score": 0.0,
    "result_eval_precision": 0.0,
    "result_eval_recall": 0.0,
    "error_occured_at_endpoint": true,
    "predicted_query_result_is_empty": true,
    "error_occured_at_endpoint_message": "QueryBadFormed: A bad request has been sent to the endpoint: probably the SPARQL query is badly formed."
  },
  {
    "resource": "https://sparql.uniprot.org/.well-known/sparql-examples/51",
    "natural_language_question": "Find all proteins linked to arachidonate (CHEBI:32395)",
    "ground_truth_query": "PREFIX CHEBI: <http://purl.obolibrary.org/obo/CHEBI_>\nPREFIX rh: <http://rdf.rhea-db.org/>\nPREFIX skos: <http://www.w3.org/2004/02/skos/core#>\nPREFIX up: <http://purl.uniprot.org/core/>\n\n\nSELECT \n    DISTINCT\n        ?uniprot\n        ?uniprotID\n        ?recname\n        ?gene\n        ?chebi\n        ?uniprotName\nWHERE {\n  SERVICE <https://sparql.rhea-db.org/sparql> {\n     VALUES (?chebi) { (CHEBI:32395) }\n     ?rhea rh:side/rh:contains/rh:compound ?compound .\n     ?compound rh:chebi ?chebi .\n     ?chebi up:name ?uniprotName .\n  }\n  ?uniprot up:annotation/up:catalyticActivity/up:catalyzedReaction ?rhea .\n  ?uniprot up:mnemonic ?uniprotID .\n  ?uniprot up:recommendedName/up:fullName ?recname .\n  OPTIONAL {?uniprot up:encodedBy/skos:prefLabel ?gene .}\n}",
    "target_endpoint": "https://sparql.uniprot.org/sparql/",
    "federates_with": [
      "https://sparql.rhea-db.org/sparql"
    ],
    "endpoint_set": "Uniprot",
    "file_path": "UniProt/51_all_proteins_linked_to_arachidonate.ttl",
    "predicted_query": "# https://sparql.uniprot.org/sparql\n# Federated query to find proteins linked to arachidonate (CHEBI:32395)\n\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX up: <http://purl.uniprot.org/core/>\nPREFIX chebi: <http://purl.obolibrary.org/obo/>\n\nSELECT DISTINCT ?protein ?proteinName\nWHERE {\n  # Query Rhea database to find reactions involving arachidonate\n  SERVICE <https://sparql.rhea-db.org/sparql> {\n    ?reaction rdfs:label ?reactionLabel .\n    ?reaction rhea:equation ?equation .\n    ?reaction rhea:status rhea:approved .\n    VALUES ?chebi { chebi:CHEBI_32395 } # Binding to the entity provided by the user\n    ?reaction rhea:has_participant ?chebi .\n  }\n  \n  # Query UniProt to find proteins involved in these reactions\n  SERVICE <https://sparql.uniprot.org/sparql> {\n    ?protein a up:Protein .\n    ?protein rdfs:label ?proteinName .\n    # Assuming a link between Rhea reactions and UniProt proteins via some identifier\n    # This is a placeholder and needs to be replaced with the actual property\n    # linking proteins to reactions or chemical entities.\n    ?protein up:encodedBy ?gene . # Example property, adjust as needed\n    ?gene rdfs:seeAlso ?reaction . # Assuming a link to the Rhea reaction\n  }\n}",
    "predicted_endpoint": "https://sparql.uniprot.org/sparql",
    "predicted_endpoint_equal_to_target_endpoint": true,
    "predicted_endpoint_in_federates_with": false,
    "predicted_endpoint_or_federated_endpoint": true,
    "run_id_langsmith": "f2a26726-ec34-4d30-980a-5ba7a4c6d3d9",
    "evaluation_timestamp": "2025-04-25T17:50:52.736680",
    "question_understanding_tokens": 249,
    "question_understanding_completion_tokens": 31,
    "question_understanding_total_tokens": 280,
    "sparql_construction_prompt_tokens": 2208,
    "sparql_construction_completion_tokens": 367,
    "sparql_construction_total_tokens": 2575,
    "is_valid_sparql": false,
    "sparql_syntax_error": "Line 13, column 15: Unresolved prefixed name: rhea:equation",
    "ground_truth_query_result_is_empty": null,
    "result_eval_f1_score": 0.0,
    "result_eval_precision": 0.0,
    "result_eval_recall": 0.0,
    "error_occured_at_endpoint": false,
    "predicted_query_result_is_empty": true,
    "error_occured_at_endpoint_message": "syntactically not correct"
  },
  {
    "resource": "https://sparql.uniprot.org/.well-known/sparql-examples/40",
    "natural_language_question": "Retrieve human enzymes that metabolize sphingolipids and are annotated in ChEMBL",
    "ground_truth_query": "PREFIX CHEBI: <http://purl.obolibrary.org/obo/CHEBI_>\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX rh: <http://rdf.rhea-db.org/>\nPREFIX taxon: <http://purl.uniprot.org/taxonomy/>\nPREFIX up: <http://purl.uniprot.org/core/>\n\nSELECT DISTINCT ?protein ?chemblEntry\nWHERE {\n  SERVICE <https://sparql.rhea-db.org/sparql> {\n    ?rhea rdfs:subClassOf rh:Reaction ;\n      rh:side/rh:contains/rh:compound/rh:chebi/rdfs:subClassOf+ CHEBI:26739 .\n  }\n  ?ca up:catalyzedReaction ?rhea .\n  ?protein up:annotation/up:catalyticActivity ?ca ;\n    up:organism taxon:9606 ;\n    rdfs:seeAlso ?chemblEntry .\n  ?chemblEntry up:database <http://purl.uniprot.org/database/ChEMBL> .\n}\nLIMIT 10",
    "target_endpoint": "https://sparql.uniprot.org/sparql/",
    "federates_with": [
      "https://sparql.rhea-db.org/sparql"
    ],
    "endpoint_set": "Uniprot",
    "file_path": "UniProt/40_human_enzymes_that_metabolize_sphingolipids.ttl",
    "predicted_query": "# https://sparql.uniprot.org/sparql\n# Federated SPARQL query to retrieve human enzymes that metabolize sphingolipids and are annotated in ChEMBL.\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX up: <http://purl.uniprot.org/core/>\nPREFIX taxon: <http://purl.uniprot.org/taxonomy/>\n\nSELECT DISTINCT ?enzymeName ?enzymeUri\nWHERE {\n  # Find human enzymes in UniProt\n  SERVICE <https://sparql.uniprot.org/sparql> {\n    ?enzymeUri a up:Protein .\n    ?enzymeUri up:organism taxon:9606 .  # Human\n    ?enzymeUri rdfs:label ?enzymeName .\n    # Filter for enzymes (EC numbers)\n    FILTER regex(?enzymeName, \"enzyme\", \"i\")\n  }\n  \n  # Find enzymes that metabolize sphingolipids in SwissLipids\n  SERVICE <https://sparql.swisslipids.org/sparql/> {\n    ?reaction a <http://www.swisslipids.org/rdf/SwissLipids#Reaction>.\n    ?reaction <http://www.swisslipids.org/rdf/SwissLipids#enzyme> ?enzymeUri .\n    ?reaction <http://www.swisslipids.org/rdf/SwissLipids#substrate> ?sphingolipid .\n    ?sphingolipid a <http://www.swisslipids.org/rdf/SwissLipids#Lipid> .\n    FILTER regex(str(?sphingolipid), \"sphingo\", \"i\") # Filter for sphingolipids\n  }\n  \n  # Attempt to find ChEMBL annotation (this part might not directly work as ChEMBL is not a direct service)\n  # This part is speculative and assumes a possible indirect link.  It might require a different approach\n  # depending on how ChEMBL data is linked to UniProt or SwissLipids.\n  #SERVICE <https://www.ebi.ac.uk/chembl/sparql> { #This is not a valid endpoint\n  #  ?chemblTarget a chembl:Target .\n  #  ?chemblTarget chembl:hasTargetComponent ?enzymeUri . # Assuming a direct link, which is unlikely\n  #}\n}",
    "predicted_endpoint": "https://sparql.uniprot.org/sparql",
    "predicted_endpoint_equal_to_target_endpoint": true,
    "predicted_endpoint_in_federates_with": false,
    "predicted_endpoint_or_federated_endpoint": true,
    "run_id_langsmith": "24844cb3-5e4b-4837-a0f5-f0214d9f8336",
    "evaluation_timestamp": "2025-04-25T17:51:04.142232",
    "question_understanding_tokens": 249,
    "question_understanding_completion_tokens": 33,
    "question_understanding_total_tokens": 282,
    "sparql_construction_prompt_tokens": 2315,
    "sparql_construction_completion_tokens": 519,
    "sparql_construction_total_tokens": 2834,
    "is_valid_sparql": true,
    "sparql_syntax_error": "syntactically correct",
    "ground_truth_query_result_is_empty": false,
    "result_eval_f1_score": 0.0,
    "result_eval_precision": 0.0,
    "result_eval_recall": 0.0,
    "error_occured_at_endpoint": true,
    "predicted_query_result_is_empty": true,
    "error_occured_at_endpoint_message": "QueryBadFormed: A bad request has been sent to the endpoint: probably the SPARQL query is badly formed."
  },
  {
    "resource": "https://sparql.uniprot.org/.well-known/sparql-examples/49",
    "natural_language_question": "Retrieve the UniProtKB proteins, their catalyzed Rhea reactions, their encoding genes (Ensembl) and the anatomic entities where the genes are expressed (UBERON anatomic entites from Bgee expression data resource).",
    "ground_truth_query": "PREFIX CHEBI: <http://purl.obolibrary.org/obo/CHEBI_>\nPREFIX genex: <http://purl.org/genex#>\nPREFIX lscr: <http://purl.org/lscr#>\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX rh: <http://rdf.rhea-db.org/>\nPREFIX taxon: <http://purl.uniprot.org/taxonomy/>\nPREFIX up: <http://purl.uniprot.org/core/>\n\nSELECT DISTINCT ?protein ?ensemblGene ?reaction ?anatomicEntityLabel ?anatomicEntity\nWHERE {\n  # federated query to Rhea enadpoint\n  {\n    SELECT DISTINCT ?reaction WHERE {\n      SERVICE <https://sparql.rhea-db.org/sparql> {\n        ?reaction rdfs:subClassOf rh:Reaction ;\n          rh:equation ?reactionEquation ;\n          rh:side ?reactionSide .\n        ?reactionSide rh:contains ?participant .\n        ?participant rh:compound ?compound .\n        # compound constraint (CHEBI:16113 == cholesterol)\n        ?compound rh:chebi CHEBI:16113 .\n      }\n    }\n  }\n  # taxonomy constraint (taxon:9606 == Homo sapiens)\n  ?protein up:organism taxon:9606 ;\n    up:annotation ?a ;\n    rdfs:seeAlso / up:transcribedFrom ?ensemblGene .\n  ?a a up:Catalytic_Activity_Annotation ;\n    up:catalyticActivity ?ca .\n  ?ca up:catalyzedReaction ?reaction .\n  # federated query to Bgee (expression data)\n  BIND(IRI(REPLACE(STR(?ensemblGene), \"\\\\.[0-9]+$\", \"\")) AS ?ensemblGeneNoVersion)\n  SERVICE <https://www.bgee.org/sparql/> {\n    ?gene lscr:xrefEnsemblGene ?ensemblGeneNoVersion ;\n      genex:isExpressedIn ?anatomicEntity .\n    ?anatomicEntity rdfs:label ?anatomicEntityLabel .\n  }\n}",
    "target_endpoint": "https://sparql.uniprot.org/sparql/",
    "federates_with": [
      "https://sparql.rhea-db.org/sparql",
      "https://www.bgee.org/sparql/"
    ],
    "endpoint_set": "Uniprot",
    "file_path": "UniProt/49_tissues_where_genes_metabolizing_cholestrol_are_expressed.ttl",
    "predicted_query": "# https://sparql.uniprot.org/sparql\n# Prefixes for commonly used namespaces\nPREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX up: <http://purl.uniprot.org/core/>\n\n# Select the protein URI, Rhea reaction URI, Ensembl gene URI, and UBERON anatomic entity URI\nSELECT DISTINCT ?protein ?rheaReaction ?gene ?anatomicalEntity WHERE {\n  # Query UniProt for proteins and their corresponding Rhea reactions\n  SERVICE <https://sparql.uniprot.org/sparql> {\n    ?protein a up:Protein .\n    ?protein up:catalyticActivity ?rheaReaction . # catalytic activity is linked to Rhea\n  }\n\n  # Query Ensembl for genes encoding the proteins\n  SERVICE <https://sparql.ensembl.org/sparql> {\n    ?gene a <http://identifiers.org/ensembl/> . # Assuming Ensembl uses this type\n    ?gene <http://purl.uniprot.org/core/encodedBy> ?protein . # Link to UniProt protein\n  }\n\n  # Query Bgee for anatomical entities where the genes are expressed\n  SERVICE <https://bgee.org/sparql/> {\n    ?expression a <http://purl.obolibrary.org/obo/UBERON_0000061> . # Assuming Bgee uses this type for expression data\n    ?expression <http://purl.obolibrary.org/obo/gene> ?gene . # Link to Ensembl gene\n    ?expression <http://purl.obolibrary.org/obo/anatomicalEntity> ?anatomicalEntity . # Link to UBERON anatomical entity\n  }\n}",
    "predicted_endpoint": "https://sparql.uniprot.org/sparql",
    "predicted_endpoint_equal_to_target_endpoint": true,
    "predicted_endpoint_in_federates_with": false,
    "predicted_endpoint_or_federated_endpoint": true,
    "run_id_langsmith": "f986bcb8-4861-400f-9b93-cdd931182dab",
    "evaluation_timestamp": "2025-04-25T17:53:35.246360",
    "question_understanding_tokens": 276,
    "question_understanding_completion_tokens": 71,
    "question_understanding_total_tokens": 347,
    "sparql_construction_prompt_tokens": 4644,
    "sparql_construction_completion_tokens": 429,
    "sparql_construction_total_tokens": 5073,
    "is_valid_sparql": true,
    "sparql_syntax_error": "syntactically correct",
    "ground_truth_query_result_is_empty": false,
    "result_eval_f1_score": 0.0,
    "result_eval_precision": 0.0,
    "result_eval_recall": 0.0,
    "error_occured_at_endpoint": false,
    "predicted_query_result_is_empty": true,
    "error_occured_at_endpoint_message": "no error, but empty result"
  },
  {
    "resource": "https://sparql.uniprot.org/.well-known/sparql-examples/53",
    "natural_language_question": "Find mouse homologs in OMABrowser of human enzymes that catalyze reactions involving sterols (CHEBI:15889). Federating with Rhea and OMABrowser.",
    "ground_truth_query": "PREFIX CHEBI: <http://purl.obolibrary.org/obo/CHEBI_>\nPREFIX lscr: <http://purl.org/lscr#>\nPREFIX orth: <http://purl.org/net/orth#>\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX rh: <http://rdf.rhea-db.org/>\nPREFIX taxon: <http://purl.uniprot.org/taxonomy/>\nPREFIX up: <http://purl.uniprot.org/core/>\n\nSELECT\n  DISTINCT\n    ?chebi\n    ?reaction\n    ?humanProtein\n    ?mouseProtein\n    ?cluster \nWHERE {\n  SERVICE <https://sparql.rhea-db.org/sparql> {\n    ?reaction rdfs:subClassOf rh:Reaction .\n    ?reaction rh:side/rh:contains/rh:compound ?compound .\n    ?compound rh:chebi ?chebi .\n    ?chebi rdfs:subClassOf* CHEBI:15889\n  }\n\n  ?humanProtein up:organism taxon:9606 .\n  ?humanProtein up:annotation ?a .\n  ?a a up:Catalytic_Activity_Annotation .\n  ?a up:catalyticActivity ?ca .\n  ?ca up:catalyzedReaction ?reaction .\n\n  SERVICE  <https://sparql.omabrowser.org/sparql> {\n    ?cluster a orth:ParalogsCluster .\n    ?cluster orth:hasHomologousMember ?node1 , ?node2 .\n    ?node1 orth:hasHomologousMember* ?orthoProtein1 .\n    ?node2 orth:hasHomologousMember* ?orthoProtein2 .\n    ?orthoProtein1 lscr:xrefUniprot ?mouseProtein .\n    ?orthoProtein2 lscr:xrefUniprot ?humanProtein .\n    # inTaxon mouse\n    ?orthoProtein1 orth:organism/<http://purl.obolibrary.org/obo/RO_0002162> taxon:10090 . \n  }\n}",
    "target_endpoint": "https://sparql.uniprot.org/sparql/",
    "federates_with": [
      "https://sparql.rhea-db.org/sparql",
      "https://sparql.omabrowser.org/sparql"
    ],
    "endpoint_set": "Uniprot",
    "file_path": "UniProt/53_mouse_homologs_of_sterol_enzymes_via_omabrowser.ttl",
    "predicted_query": "# https://sparql.rhea-db.org/sparql\n# Prefixes for commonly used namespaces\nPREFIX rhea: <http://rdf.rhea-db.org/>\nPREFIX chebi: <http://purl.obolibrary.org/obo/CHEBI_>\nPREFIX obo: <http://purl.obolibrary.org/obo/>\n\n# Select the Rhea IDs of reactions involving sterols (CHEBI:15889)\nSELECT DISTINCT ?rheaId ?enzymeUniprot ?humanUniprot\nWHERE {\n  # Find reactions in Rhea that have sterols (CHEBI:15889) as a participant\n  SERVICE <https://sparql.rhea-db.org/sparql> {\n    ?rheaId rhea: Rhea_has_participant chebi:15889 .\n    ?rheaId rhea: Rhea_has_direction ?direction .\n    ?direction rhea: Rhea_direction_enzymaticReaction ?enzyme .\n    ?enzyme rhea: Rhea_enzyme_uniprot ?enzymeUniprot .\n  }\n  \n  # Find human homologs of the enzymes from UniProt\n  SERVICE <https://sparql.uniprot.org/sparql> {\n    ?humanUniprot <http://purl.uniprot.org/core/gene> ?gene .\n    ?humanUniprot <http://purl.uniprot.org/core/organism> <http://purl.uniprot.org/taxonomy/9606> . # Filter for human\n    ?enzymeUniprot <http://purl.uniprot.org/core/gene> ?gene .\n    ?enzymeUniprot <http://purl.uniprot.org/core/organism> ?organism .\n    FILTER (?organism != <http://purl.uniprot.org/taxonomy/9606>) #Exclude human\n  }\n  \n  # Optional: Integrate with OMA Browser if a SPARQL endpoint is available.\n  # Assuming OMA Browser provides a SPARQL endpoint, the following SERVICE block would be added.\n  # SERVICE <OMA_BROWSER_SPARQL_ENDPOINT> {\n  #   ?oma_homolog <oma:member> ?enzymeUniprot .\n  #   ?oma_homolog <oma:member> ?mouse_homolog .\n  #   ?mouse_homolog <uniprot:organism> <uniprot:taxonomy/10090> . # Mouse taxonomy ID\n  # }\n  \n  #BIND (?mouse_homolog AS ?homolog)\n  \n  # Filter for mouse homologs (UniProt ID)\n  #FILTER (CONTAINS(STR(?homolog), \"uniprot\"))\n}",
    "predicted_endpoint": "https://sparql.rhea-db.org/sparql",
    "predicted_endpoint_equal_to_target_endpoint": false,
    "predicted_endpoint_in_federates_with": true,
    "predicted_endpoint_or_federated_endpoint": true,
    "run_id_langsmith": "0f59662b-d54a-402b-8bfb-89a4672941b7",
    "evaluation_timestamp": "2025-04-25T17:55:32.496237",
    "question_understanding_tokens": 267,
    "question_understanding_completion_tokens": 41,
    "question_understanding_total_tokens": 308,
    "sparql_construction_prompt_tokens": 3209,
    "sparql_construction_completion_tokens": 601,
    "sparql_construction_total_tokens": 3810,
    "is_valid_sparql": false,
    "sparql_syntax_error": "Lexical error at line 12, column 39.  Encountered: '32' (32), after prefix \"Rhea_has_participant\"",
    "ground_truth_query_result_is_empty": null,
    "result_eval_f1_score": 0.0,
    "result_eval_precision": 0.0,
    "result_eval_recall": 0.0,
    "error_occured_at_endpoint": false,
    "predicted_query_result_is_empty": true,
    "error_occured_at_endpoint_message": "syntactically not correct"
  },
  {
    "resource": "https://sparql.uniprot.org/.well-known/sparql-examples/52",
    "natural_language_question": "Retrieve drugs that target human enzymes involved in sterol metabolism (federated query with Rhea and ChEMBL via IDSM/Elixir czech republic).",
    "ground_truth_query": "PREFIX CHEBI: <http://purl.obolibrary.org/obo/CHEBI_>\nPREFIX cco: <http://rdf.ebi.ac.uk/terms/chembl#>\nPREFIX chebihash: <http://purl.obolibrary.org/obo/chebi#>\nPREFIX owl: <http://www.w3.org/2002/07/owl#>\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX rh: <http://rdf.rhea-db.org/>\nPREFIX skos: <http://www.w3.org/2004/02/skos/core#>\nPREFIX taxon: <http://purl.uniprot.org/taxonomy/>\nPREFIX up: <http://purl.uniprot.org/core/>\n\nSELECT\n        DISTINCT\n            ?protein\n            ?proteinFullName\n            ?activityType\n            ?standardActivityValue\n            ?standardActivityUnit\n            ?chemblMolecule\n            ?chemlbMoleculePrefLabel\nWHERE\n  {\n  # ChEBI: retrieve members of the ChEBI class ChEBI:15889 (sterol)\n  # Rhea: retrieve the reactions involving these ChEBI as participants\n  SERVICE <https://sparql.rhea-db.org/sparql> {\n    ?reaction rdfs:subClassOf  rh:Reaction ;\n\t      rh:status        rh:Approved ;\n\t      rh:side          ?reactionSide .\n    ?reactionSide\n\t      rh:contains      ?participant .\n    ?participant rh:compound  ?compound\n    {\n      ?compound  rh:chebi  ?chebi .\n      ?chebi (rdfs:subClassOf)+ CHEBI:15889\n    } UNION {\n      ?compound  rh:chebi           ?chebi .\n      ?chebi2   rdfs:subClassOf     ?chebiRestriction .\n      ?chebiRestriction\n\t\ta           owl:Restriction ;\n\t\towl:onProperty      chebihash:has_major_microspecies_at_pH_7_3 ;\n\t\towl:someValuesFrom  ?chebi .\n      ?chebi2 (rdfs:subClassOf)+ CHEBI:15889\n    }\n  }\n  # UniProt: retrieve the human (taxid:9606) enzymes catalyzing these Rhea reactions\n  ?ca       up:catalyzedReaction  ?reaction .\n  ?a        up:catalyticActivity  ?ca .\n  ?protein  up:annotation         ?a ;\n\t    up:organism           taxon:9606 ;\n\t    up:recommendedName    ?proteinRecName .\n  ?proteinRecName\n\t    up:fullName           ?proteinFullName .\n  # Find drugs in wikidata that interact with the UniProt Proteins\n  # ChEMBL: retrieve the corresponding targets and with drugs in clinical phase 4\n  # Via https://idsm.elixir-czech.cz/sparql/\n  SERVICE <https://idsm.elixir-czech.cz/sparql/endpoint/idsm> {\n    ?activity a cco:Activity ;\n      cco:hasMolecule ?chemblMolecule ;\n      cco:hasAssay ?assay ;\n      cco:standardType ?activityType ;\n      cco:standardValue ?standardActivityValue ;\n      cco:standardUnits ?standardActivityUnit .\n    ?chemblMolecule cco:highestDevelopmentPhase ?highestDevelopmentPhase ;\n      rdfs:label ?chemblMoleculeLabel ;\n      skos:prefLabel ?chemlbMoleculePrefLabel .\n    FILTER (?highestDevelopmentPhase > 3)\n    ?assay cco:hasTarget ?target .\n    ?target cco:hasTargetComponent/cco:targetCmptXref ?protein .\n    ?protein a cco:UniprotRef .\n  }\n}",
    "target_endpoint": "https://sparql.uniprot.org/sparql/",
    "federates_with": [
      "https://sparql.rhea-db.org/sparql",
      "https://idsm.elixir-czech.cz/sparql/endpoint/idsm"
    ],
    "endpoint_set": "Uniprot",
    "file_path": "UniProt/52_drugs_targeting_sterol_metabolism.ttl",
    "predicted_query": "# https://sparql.rhea-db.org/sparql\n# Federated query to retrieve drugs that target human enzymes involved in sterol metabolism.\nPREFIX rhea: <http://rdf.rhea-db.org/>\nPREFIX chebi: <http://purl.obolibrary.org/obo/CHEBI_>\nPREFIX obo: <http://purl.obolibrary.org/obo/>\n\nSELECT DISTINCT ?drugbankID ?drugName\nWHERE {\n  # Find Rhea reactions related to sterol metabolism\n  SERVICE <https://sparql.rhea-db.org/sparql> {\n    ?reaction rhea:equation ?equation .\n    ?reaction rhea:status rhea:approved .\n    FILTER (CONTAINS(LCASE(?equation), \"sterol\")) . # Filter for reactions containing \"sterol\" in the equation\n    ?reaction rhea:enzymes ?enzyme .\n  }\n\n  # Find UniProt IDs for human enzymes\n  SERVICE <https://sparql.uniprot.org/sparql> {\n    ?enzyme uniprot:reviewed \"true\" .\n    ?enzyme rdfs:label ?enzymeName .\n    ?enzyme dcterms:references ?pubmedID .\n    ?enzyme up:organism <http://purl.uniprot.org/taxonomy/9606> . # Filter for human enzymes\n  }\n\n  # Find DrugBank IDs for drugs targeting these enzymes via IDSM\n  SERVICE <https://idsm.elixir-czech.cz/sparql> {\n    ?drugbankID dcterms:title ?drugName ;\n                 pharm:targets ?enzyme .\n    FILTER (STRSTARTS(STR(?drugbankID), \"http://www.drugbank.ca/drugs/\"))\n  }\n}",
    "predicted_endpoint": "https://sparql.rhea-db.org/sparql",
    "predicted_endpoint_equal_to_target_endpoint": false,
    "predicted_endpoint_in_federates_with": true,
    "predicted_endpoint_or_federated_endpoint": true,
    "run_id_langsmith": "6548c22d-412d-4f88-b0e3-fda6e3e0778a",
    "evaluation_timestamp": "2025-04-25T17:55:40.894972",
    "question_understanding_tokens": 264,
    "question_understanding_completion_tokens": 28,
    "question_understanding_total_tokens": 292,
    "sparql_construction_prompt_tokens": 2413,
    "sparql_construction_completion_tokens": 395,
    "sparql_construction_total_tokens": 2808,
    "is_valid_sparql": false,
    "sparql_syntax_error": "Line 19, column 13: Unresolved prefixed name: uniprot:reviewed",
    "ground_truth_query_result_is_empty": null,
    "result_eval_f1_score": 0.0,
    "result_eval_precision": 0.0,
    "result_eval_recall": 0.0,
    "error_occured_at_endpoint": false,
    "predicted_query_result_is_empty": true,
    "error_occured_at_endpoint_message": "syntactically not correct"
  },
  {
    "resource": "https://sparql.uniprot.org/.well-known/sparql-examples/54",
    "natural_language_question": "Proteins with binding sites for ligands similar to heme",
    "ground_truth_query": "PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX sachem: <http://bioinfo.uochb.cas.cz/rdf/v1.0/sachem#>\nPREFIX up: <http://purl.uniprot.org/core/>\nPREFIX xsd: <http://www.w3.org/2001/XMLSchema#>\n\nSELECT \n  ?protein\n  ?mnemonic\n  ?proteinName\n  ?ligandSimilarityScore\n  ?ligand\nWHERE {\n  SERVICE <https://idsm.elixir-czech.cz/sparql/endpoint/chebi> {\n    ?ssc sachem:compound ?ligand; \n      sachem:score ?ligandSimilarityScore ;\n      sachem:similaritySearch ?sss .\n        # Smiles of Heme\n    ?sss    sachem:query \"CC1=C(CCC([O-])=O)C2=[N+]3C1=Cc1c(C)c(C=C)c4C=C5C(C)=C(C=C)C6=[N+]5[Fe-]3(n14)n1c(=C6)c(C)c(CCC([O-])=O)c1=C2\";\n      sachem:cutoff \"8e-1\"^^xsd:double ;\n      sachem:aromaticityMode sachem:aromaticityDetect ;\n      sachem:similarityRadius 1 ;\n      sachem:tautomerMode sachem:ignoreTautomers .\n  }\n  ?protein up:mnemonic ?mnemonic ;\n    up:recommendedName/up:fullName ?proteinName ;\n    up:annotation ?annotation .\n  ?annotation a up:Binding_Site_Annotation ;\n      up:ligand/rdfs:subClassOf ?ligand .\n}\nORDER BY DESC(?ligandSimilarityScore)",
    "target_endpoint": "https://sparql.uniprot.org/sparql/",
    "federates_with": [
      "https://idsm.elixir-czech.cz/sparql/endpoint/chebi"
    ],
    "endpoint_set": "Uniprot",
    "file_path": "UniProt/54_binding_sites_for_ligands_similar_to_heme_sachem.ttl",
    "predicted_query": "# https://sparql.uniprot.org/sparql\n# Federated query to find proteins with binding sites for ligands similar to heme.\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX uniprot: <http://purl.uniprot.org/core/>\nPREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>\n\nSELECT DISTINCT ?protein ?proteinName\nWHERE {\n  # Query UniProt for proteins that have binding sites.\n  SERVICE <https://sparql.uniprot.org/sparql> {\n    ?protein a uniprot:Protein .\n    ?protein uniprot:annotation ?annotation .\n    ?annotation rdf:type uniprot:binding_site .\n    ?annotation rdfs:label ?bindingSiteLabel .\n    ?protein rdfs:label ?proteinName .\n    \n    # Filter for binding sites that are similar to \"heme\".  This is a broad filter and might need refinement.\n    FILTER (CONTAINS(LCASE(?bindingSiteLabel), \"heme\"))\n  }\n}",
    "predicted_endpoint": "https://sparql.uniprot.org/sparql",
    "predicted_endpoint_equal_to_target_endpoint": true,
    "predicted_endpoint_in_federates_with": false,
    "predicted_endpoint_or_federated_endpoint": true,
    "run_id_langsmith": "3ef4ae60-4912-44af-a1e5-491dd0c95b48",
    "evaluation_timestamp": "2025-04-25T17:55:51.344125",
    "question_understanding_tokens": 240,
    "question_understanding_completion_tokens": 26,
    "question_understanding_total_tokens": 266,
    "sparql_construction_prompt_tokens": 2319,
    "sparql_construction_completion_tokens": 0,
    "sparql_construction_total_tokens": 2319,
    "is_valid_sparql": true,
    "sparql_syntax_error": "syntactically correct",
    "ground_truth_query_result_is_empty": false,
    "result_eval_f1_score": 0.0,
    "result_eval_precision": 0.0,
    "result_eval_recall": 0.0,
    "error_occured_at_endpoint": false,
    "predicted_query_result_is_empty": true,
    "error_occured_at_endpoint_message": "no error, but empty result"
  },
  {
    "resource": "https://sparql.uniprot.org/.well-known/sparql-examples/43",
    "natural_language_question": "Connect patents cited in UniProtKB with those in the patent database at EPO via publication number, whose grant date is more than twenty years in the past.",
    "ground_truth_query": "PREFIX patent: <http://data.epo.org/linked-data/def/patent/>\nPREFIX skos: <http://www.w3.org/2004/02/skos/core#>\nPREFIX up: <http://purl.uniprot.org/core/>\n\nSELECT ?grantDate ?patent ?application ?applicationNo\nWHERE\n{\n    ?citation a up:Patent_Citation ;\n  skos:exactMatch ?patent .\n  BIND(SUBSTR(STR(?patent), 35) AS ?applicationNo)\n  BIND(SUBSTR(STR(?patent), 33, 2) AS ?countryCode)\n  SERVICE <https://data.epo.org/linked-data/query>{\n    ?publication patent:publicationNumber ?applicationNo ;\n      patent:application ?application .\n    ?application patent:grantDate ?grantDate .\n  }\n  BIND((year(now()) - 20) AS ?thisYearMinusTwenty)\n  BIND(year(?grantDate) AS ?grantYear)\n  FILTER(?grantYear < ?thisYearMinusTwenty)\n} ORDER BY ?grantYear",
    "target_endpoint": "https://sparql.uniprot.org/sparql/",
    "federates_with": [
      "https://data.epo.org/linked-data/query"
    ],
    "endpoint_set": "Uniprot",
    "file_path": "UniProt/43_patents_used_in_uniprot_granted_twenty_years_in_the_past.ttl",
    "predicted_query": "# https://sparql.uniprot.org/sparql\n# Federated SPARQL query to connect patents cited in UniProtKB with those in the patent database at EPO via publication number, whose grant date is more than twenty years in the past.\nPREFIX up: <http://purl.uniprot.org/core/>\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\n\nSELECT DISTINCT ?uniprotEntry ?patentPublicationNumber ?epoPatent WHERE {\n  # Query UniProtKB for entries with patent citations\n  SERVICE <https://sparql.uniprot.org/sparql> {\n    ?uniprotEntry a up:Protein ; # Assuming UniProt entries are of type Protein\n                  up:citation ?citation . # Get the citation\n\n    ?citation rdfs:comment ?patentPublicationNumber . # Assuming patent publication number is in the comment\n    FILTER (REGEX(?patentPublicationNumber, \"^[A-Z0-9]+$\")) # Filter to ensure it looks like a patent number\n  }\n\n  # Query EPO for patents with grant dates more than twenty years in the past\n  SERVICE <https://worldwide.espacenet.com/sparql> {\n    ?epoPatent <http://www.w3.org/2000/01/rdf-schema#label> ?patentPublicationNumber ; # Match patent publication number\n               <http://data.epo.org/linked-data/def/fullPublicationIdentifier> ?fullPublicationIdentifier .\n    ?fullPublicationIdentifier <http://data.epo.org/linked-data/def/grantDate> ?grantDate .\n    FILTER (?grantDate < (NOW() - \"P20Y\"^^xsd:duration)) # Filter for grant dates more than 20 years ago\n  }\n}",
    "predicted_endpoint": "https://sparql.uniprot.org/sparql",
    "predicted_endpoint_equal_to_target_endpoint": true,
    "predicted_endpoint_in_federates_with": false,
    "predicted_endpoint_or_federated_endpoint": true,
    "run_id_langsmith": "3b651209-dd74-47b6-b879-72002b64bf15",
    "evaluation_timestamp": "2025-04-25T17:56:13.992438",
    "question_understanding_tokens": 257,
    "question_understanding_completion_tokens": 47,
    "question_understanding_total_tokens": 304,
    "sparql_construction_prompt_tokens": 1908,
    "sparql_construction_completion_tokens": 404,
    "sparql_construction_total_tokens": 2312,
    "is_valid_sparql": false,
    "sparql_syntax_error": "Line 21, column 43: Unresolved prefixed name: xsd:duration",
    "ground_truth_query_result_is_empty": null,
    "result_eval_f1_score": 0.0,
    "result_eval_precision": 0.0,
    "result_eval_recall": 0.0,
    "error_occured_at_endpoint": false,
    "predicted_query_result_is_empty": true,
    "error_occured_at_endpoint_message": "syntactically not correct"
  },
  {
    "resource": "https://sparql.uniprot.org/.well-known/sparql-examples/45",
    "natural_language_question": "Retrieve drugs that target human enzymes involved in sterol metabolism (federated query with WikiData and Rhea).",
    "ground_truth_query": "PREFIX CHEBI: <http://purl.obolibrary.org/obo/CHEBI_>\nPREFIX chebihash: <http://purl.obolibrary.org/obo/chebi#>\nPREFIX owl: <http://www.w3.org/2002/07/owl#>\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX rh: <http://rdf.rhea-db.org/>\nPREFIX taxon: <http://purl.uniprot.org/taxonomy/>\nPREFIX uniprotkb: <http://purl.uniprot.org/uniprot/>\nPREFIX up: <http://purl.uniprot.org/core/>\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\n\nSELECT DISTINCT ?protein ?proteinFullName ?wikiChemical ?wikiChemicalLabel ?medicalConditionTreatedLabel\nWHERE {\n  # ChEBI: retrieve members of the ChEBI class ChEBI:15889 (sterol)\n  # Rhea: retrieve the reactions involving these ChEBI as participants\n  SERVICE <https://sparql.rhea-db.org/sparql> {\n    ?reaction rdfs:subClassOf rh:Reaction ;\n      rh:status rh:Approved ;\n      rh:side ?reactionSide .\n    ?reactionSide\n      rh:contains ?participant .\n    ?participant rh:compound ?compound\n    {\n      ?compound rh:chebi ?chebi .\n      ?chebi (rdfs:subClassOf)+ CHEBI:15889\n    } UNION {\n      ?compound rh:chebi ?chebi .\n      ?chebi2 rdfs:subClassOf ?chebiRestriction .\n      ?chebiRestriction\n\t\ta owl:Restriction ;\n\t\towl:onProperty chebihash:has_major_microspecies_at_pH_7_3 ;\n\t\towl:someValuesFrom ?chebi .\n      ?chebi2 (rdfs:subClassOf)+ CHEBI:15889\n    }\n  }\n  # UniProt: retrieve the human (taxid:9606) enzymes catalyzing these Rhea reactions\n  ?ca up:catalyzedReaction  ?reaction .\n  ?a up:catalyticActivity  ?ca .\n  ?proteinIRI  up:annotation ?a ;\n    up:organism taxon:9606 ;\n    up:recommendedName ?proteinRecName .\n  ?proteinRecName up:fullName ?proteinFullName .\n  # Find drugs in wikidata that interact with the UniProt Proteins\n  BIND (SUBSTR(STR(?proteinIRI), STRLEN(STR(uniprotkb:))+1) AS ?protein)\n  SERVICE <https://query.wikidata.org/sparql> {\n    ?wp wdt:P352  ?protein .\n    ?wikiChemical wdt:P129 ?wp . # Physically interacts with\n    ?wikiChemical rdfs:label ?wikiChemicalLabel .\n    ?wikiChemical wdt:P2175 ?wmc . # Medical conndition treated\n    ?wmc rdfs:label ?medicalConditionTreatedLabel .\n    FILTER(lang(?medicalConditionTreatedLabel) = 'en')\n    FILTER(lang(?wikiChemicalLabel) = 'en')\n  }\n}",
    "target_endpoint": "https://sparql.uniprot.org/sparql/",
    "federates_with": [
      "https://query.wikidata.org/sparql",
      "https://sparql.rhea-db.org/sparql"
    ],
    "endpoint_set": "Uniprot",
    "file_path": "UniProt/45_drugs_targeting_human_sterol_metabolism_enzymes.ttl",
    "predicted_query": "# https://sparql.uniprot.org/sparql\n# Federated SPARQL query to retrieve drugs that target human enzymes involved in sterol metabolism.\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>\nPREFIX up: <http://purl.uniprot.org/core/>\nPREFIX taxon: <http://purl.uniprot.org/taxonomy/>\nPREFIX chebi: <http://purl.obolibrary.org/obo/CHEBI#>\n\nSELECT DISTINCT ?drug ?enzymeName\nWHERE {\n  # Find human enzymes involved in sterol metabolism from UniProt\n  SERVICE <https://sparql.uniprot.org/sparql> {\n    ?enzyme a up:Protein .\n    ?enzyme up:organism taxon:9606 .  # Homo sapiens (human)\n    ?enzyme rdfs:label ?enzymeName .\n    ?enzyme up:classifiedWith ?enzymeClass .\n    ?enzymeClass rdfs:label ?sterolMetabolismKeyword .\n    FILTER (CONTAINS(LCASE(?sterolMetabolismKeyword), \"sterol metabolism\"))\n  }\n  \n  # Find drugs that target these enzymes (linking to drugbank via Rhea and ChEBI)\n  SERVICE <https://sparql.rhea-db.org/sparql/> {\n    ?reaction rdfs:comment ?enzymeName . # Link reactions to enzyme names\n    ?reaction rdfs:label ?reactionLabel .\n  }\n  \n  SERVICE <https://query.wikidata.org/sparql> {\n    ?drug wdt:P2175 ?enzymeName . #Target\n    ?drug wdt:P31 wd:Q12140 .  # Q12140 is instance of drug\n    ?drug rdfs:label ?drugLabel .\n    FILTER (LANG(?drugLabel) = \"en\")\n  }\n  BIND (?drugLabel AS ?drug)\n}",
    "predicted_endpoint": "https://sparql.uniprot.org/sparql",
    "predicted_endpoint_equal_to_target_endpoint": true,
    "predicted_endpoint_in_federates_with": false,
    "predicted_endpoint_or_federated_endpoint": true,
    "run_id_langsmith": "c95e1d46-17d2-4649-83c6-213628e1ca6b",
    "evaluation_timestamp": "2025-04-25T17:56:24.311263",
    "question_understanding_tokens": 253,
    "question_understanding_completion_tokens": 28,
    "question_understanding_total_tokens": 281,
    "sparql_construction_prompt_tokens": 2404,
    "sparql_construction_completion_tokens": 470,
    "sparql_construction_total_tokens": 2874,
    "is_valid_sparql": false,
    "sparql_syntax_error": "Line 28, column 11: Unresolved prefixed name: wdt:P2175",
    "ground_truth_query_result_is_empty": null,
    "result_eval_f1_score": 0.0,
    "result_eval_precision": 0.0,
    "result_eval_recall": 0.0,
    "error_occured_at_endpoint": false,
    "predicted_query_result_is_empty": true,
    "error_occured_at_endpoint_message": "syntactically not correct"
  },
  {
    "resource": "https://sparql.uniprot.org/.well-known/sparql-examples/42",
    "natural_language_question": "Connect patents cited in UniProtKB with those in the patent database at EPO via publication number.",
    "ground_truth_query": "PREFIX patent: <http://data.epo.org/linked-data/def/patent/>\nPREFIX skos: <http://www.w3.org/2004/02/skos/core#>\nPREFIX up: <http://purl.uniprot.org/core/>\n\nSELECT ?citation ?patent ?application ?applicationNo\nWHERE\n{\n  ?citation a up:Patent_Citation ;\n    skos:exactMatch ?patent .\n  FILTER(CONTAINS(STR(?patent), 'EP'))\n  BIND(SUBSTR(STR(?patent), 35) AS ?applicationNo)\n  SERVICE <https://data.epo.org/linked-data/query>{\n    ?application patent:publicationNumber ?applicationNo\n  }\n}",
    "target_endpoint": "https://sparql.uniprot.org/sparql/",
    "federates_with": [
      "https://data.epo.org/linked-data/query"
    ],
    "endpoint_set": "Uniprot",
    "file_path": "UniProt/42_connect_patents_to_epo.ttl",
    "predicted_query": "# https://sparql.uniprot.org/sparql\n# Federated SPARQL query to connect patents cited in UniProtKB with those in the patent database at EPO via publication number.\nPREFIX up: <http://purl.uniprot.org/core/>\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\n\nSELECT DISTINCT ?uniprotEntry ?patentPublicationNumber ?epoPatent\nWHERE {\n  # Query UniProtKB for entries with patent cross-references.\n  SERVICE <https://sparql.uniprot.org/sparql> {\n    ?uniprotEntry a up:Protein ; # Assuming we are interested in protein entries.\n                  up:citation ?citation .\n    ?citation up:publicationNumber ?patentPublicationNumber .\n    FILTER (REGEX(STR(?patentPublicationNumber), \"^[A-Z]{2}\\\\d+.*\", \"i\")) # Filter to ensure it looks like a patent publication number\n  }\n  \n  # Attempt to find corresponding patent information in the EPO database (hypothetical).\n  # This part assumes there's an EPO SPARQL endpoint and schema where patents can be looked up by publication number.\n  # Since there is no EPO endpoint provided, this part is commented out.  If an EPO endpoint were available,\n  # the following SERVICE block would be uncommented and adapted to the EPO schema.\n  \n  # SERVICE <EPO_SPARQL_ENDPOINT> {  # Replace with the actual EPO SPARQL endpoint URL\n  #   ?epoPatent <EPO_PREDICATE_FOR_PUBLICATION_NUMBER> ?patentPublicationNumber . # Replace with the correct predicate\n  #   # Add other relevant triples to retrieve desired information from the EPO database.\n  # }\n  \n  # The query currently only retrieves the UniProtKB entry and the patent publication number.\n  # To link to EPO data, an actual EPO SPARQL endpoint and schema are needed.\n}",
    "predicted_endpoint": "https://sparql.uniprot.org/sparql",
    "predicted_endpoint_equal_to_target_endpoint": true,
    "predicted_endpoint_in_federates_with": false,
    "predicted_endpoint_or_federated_endpoint": true,
    "run_id_langsmith": "379a9da5-e9f7-40e7-9c31-7f50fe6357a7",
    "evaluation_timestamp": "2025-04-25T17:56:33.423087",
    "question_understanding_tokens": 247,
    "question_understanding_completion_tokens": 35,
    "question_understanding_total_tokens": 282,
    "sparql_construction_prompt_tokens": 1896,
    "sparql_construction_completion_tokens": 434,
    "sparql_construction_total_tokens": 2330,
    "is_valid_sparql": true,
    "sparql_syntax_error": "syntactically correct",
    "ground_truth_query_result_is_empty": false,
    "result_eval_f1_score": 0.0,
    "result_eval_precision": 0.0,
    "result_eval_recall": 0.0,
    "error_occured_at_endpoint": false,
    "predicted_query_result_is_empty": true,
    "error_occured_at_endpoint_message": "no error, but empty result"
  },
  {
    "resource": "https://sparql.uniprot.org/.well-known/sparql-examples/67_draft_human_metabolome",
    "natural_language_question": "Generate a draft human metabolome",
    "ground_truth_query": "PREFIX chebislash: <http://purl.obolibrary.org/obo/chebi/>\nPREFIX rh: <http://rdf.rhea-db.org/>\nPREFIX taxon: <http://purl.uniprot.org/taxonomy/>\nPREFIX up: <http://purl.uniprot.org/core/>\n\nSELECT\n?uniprot ?mnemonic ?rhea ?chebi ?smiles ?inchiKey\nWHERE\n{\n  ?uniprot up:annotation/up:catalyticActivity/up:catalyzedReaction ?rhea ;\n        up:organism taxon:9606 ;\n        up:mnemonic ?mnemonic .\n  SERVICE <https://sparql.rhea-db.org/sparql> {\n\t?rhea rh:side/rh:contains/rh:compound ?compound .\n    ?compound (rh:chebi|(rh:reactivePart/rh:chebi)|(rh:underlyingChebi/rh:chebi)) ?chebi .\n   }\n   ?chebi chebislash:smiles ?smiles ;\n          chebislash:inchikey ?inchiKey .\n}",
    "target_endpoint": "https://sparql.uniprot.org/sparql/",
    "federates_with": [
      "https://sparql.rhea-db.org/sparql"
    ],
    "endpoint_set": "Uniprot",
    "file_path": "UniProt/67_draft_human_metabolome.ttl",
    "predicted_query": "# https://sparql.uniprot.org/sparql\n# This query aims to retrieve information related to the human metabolome.\n# It currently searches UniProt for entries associated with Homo sapiens (Human) and the term \"metabolome\".\n# Further refinement and federation with other relevant databases (e.g., Rhea, SwissLipids) might be needed to provide a more comprehensive draft.\n\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX up: <http://purl.uniprot.org/core/>\nPREFIX taxon: <http://purl.uniprot.org/taxonomy/>\n\nSELECT DISTINCT ?entity ?description\nWHERE {\n  # Find entities (e.g., proteins, pathways) related to Homo sapiens\n  VALUES ?taxon { taxon:9606 }  # Homo sapiens taxon ID\n\n  ?entity up:organism ?taxon .\n  ?entity rdfs:label ?description .\n\n  # Filter for entities that might be associated with the metabolome\n  FILTER (CONTAINS(LCASE(?description), \"metabolome\"))\n}",
    "predicted_endpoint": "https://sparql.uniprot.org/sparql",
    "predicted_endpoint_equal_to_target_endpoint": true,
    "predicted_endpoint_in_federates_with": false,
    "predicted_endpoint_or_federated_endpoint": true,
    "run_id_langsmith": "e4c2165d-46e3-4294-9235-84443343875e",
    "evaluation_timestamp": "2025-04-25T17:56:41.056191",
    "question_understanding_tokens": 240,
    "question_understanding_completion_tokens": 20,
    "question_understanding_total_tokens": 260,
    "sparql_construction_prompt_tokens": 1445,
    "sparql_construction_completion_tokens": 251,
    "sparql_construction_total_tokens": 1696,
    "is_valid_sparql": true,
    "sparql_syntax_error": "syntactically correct",
    "ground_truth_query_result_is_empty": false,
    "result_eval_f1_score": 0.0,
    "result_eval_precision": 0.0,
    "result_eval_recall": 0.0,
    "error_occured_at_endpoint": false,
    "predicted_query_result_is_empty": true,
    "error_occured_at_endpoint_message": "no error, but empty result"
  },
  {
    "resource": "https://sparql.uniprot.org/.well-known/sparql-examples/36",
    "natural_language_question": "Find the orthologous proteins for UniProtKB entry P05067 using the <a href=\"http://www.orthod.org\">OrthoDB database</a>",
    "ground_truth_query": "PREFIX orthodb: <http://purl.orthodb.org/>\nPREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX skos: <http://www.w3.org/2004/02/skos/core#>\nPREFIX uniprotkb: <http://purl.uniprot.org/uniprot/>\nPREFIX up: <http://purl.uniprot.org/core/>\n\nSELECT\n  ?protein\n  ?orthoGroup\n  ?scientificName\n  ?functionComment\n  ?prefferedGeneName\n  ((STRLEN(?value) - ?medianLength) as ?deviationFromMedianLength)\nWHERE\n{\n  uniprotkb:P05067 a up:Protein ;\n        up:organism/up:scientificName ?scientificName ;\n        rdfs:seeAlso ?orthoGroup ;\n        up:encodedBy/skos:prefLabel ?prefferedGeneName ;\n          up:sequence/rdf:value ?value .\n  OPTIONAL {\n    ?protein up:annotation ?functionAnnotation .\n    ?functionAnnotation a up:Function_Annotation ;\n      rdfs:comment ?functionComment .\n  }\n  SERVICE <https://sparql.orthodb.org/sparql>{\n    ?orthoGroup orthodb:ogMedianProteinLength ?medianLength .\n    ?orthoGroup orthodb:hasMember ?xref .\n    ?xref orthodb:xref/orthodb:xrefResource uniprotkb:P05067 .\n  }\n}\nLIMIT 985915",
    "target_endpoint": "https://sparql.uniprot.org/sparql/",
    "federates_with": [
      "https://sparql.orthodb.org/sparql"
    ],
    "endpoint_set": "Uniprot",
    "file_path": "UniProt/36_orthologous_proteins_via_orthodb.ttl",
    "predicted_query": "# https://sparql.uniprot.org/sparql\n# Find orthologous proteins for UniProtKB entry P05067 using OrthoDB.\n# Since there is no direct OrthoDB endpoint, we will query UniProt and attempt to link to OrthoDB identifiers.\nPREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX up: <http://purl.uniprot.org/core/>\n\nSELECT DISTINCT ?protein ?orthodbID\nWHERE {\n  # Find the UniProt entry for P05067\n  VALUES (?proteinID) { (\"P05067\") }\n  ?protein a up:Protein ;\n           up:accession ?proteinID .\n\n  # Attempt to find cross-references to OrthoDB.  This assumes UniProt has xrefs to OrthoDB.\n  OPTIONAL {\n    ?protein up:database ?orthodb .\n    ?orthodb rdfs:label ?orthodbID .\n    FILTER (CONTAINS(STR(?orthodbID), \"OrthoDB\"))  # Filter to ensure it's an OrthoDB ID.  This is a heuristic.\n  }\n}",
    "predicted_endpoint": "https://sparql.uniprot.org/sparql",
    "predicted_endpoint_equal_to_target_endpoint": true,
    "predicted_endpoint_in_federates_with": false,
    "predicted_endpoint_or_federated_endpoint": true,
    "run_id_langsmith": "66e211f1-c9bc-4781-a726-1fd6473421c3",
    "evaluation_timestamp": "2025-04-25T17:56:55.716906",
    "question_understanding_tokens": 269,
    "question_understanding_completion_tokens": 43,
    "question_understanding_total_tokens": 312,
    "sparql_construction_prompt_tokens": 2572,
    "sparql_construction_completion_tokens": 302,
    "sparql_construction_total_tokens": 2874,
    "is_valid_sparql": true,
    "sparql_syntax_error": "syntactically correct",
    "ground_truth_query_result_is_empty": false,
    "result_eval_f1_score": 0.0,
    "result_eval_precision": 0.0,
    "result_eval_recall": 0.0,
    "error_occured_at_endpoint": false,
    "predicted_query_result_is_empty": true,
    "error_occured_at_endpoint_message": "no error, but empty result"
  },
  {
    "resource": "https://sparql.uniprot.org/.well-known/sparql-examples/60",
    "natural_language_question": "Find human proteins that catalyze reactions where substrates or product have a <a href=\"https://www.ebi.ac.uk/chebi/searchId.do?chebiId=CHEBI:35516\">Cholestane skeleton</a>",
    "ground_truth_query": "PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX rh: <http://rdf.rhea-db.org/>\nPREFIX sachem: <http://bioinfo.uochb.cas.cz/rdf/v1.0/sachem#>\nPREFIX taxon: <http://purl.uniprot.org/taxonomy/>\nPREFIX up: <http://purl.uniprot.org/core/>\n\nSELECT\n  DISTINCT\n    ?protein\n    ?disease\n    ?rhea\n    ?chebi\n    ?omim\nWHERE {\n    # Find complete ChEBIs with a Cholestane skeleton, via the Czech Elixir node IDSM Sachem chemical substructure search.\n    SERVICE <https://idsm.elixir-czech.cz/sparql/endpoint/chebi> {\n      ?chebi sachem:substructureSearch [\n        sachem:query\n\"[C@]12(CCC3CCCC[C@]3(C)[C@@]1([H])CC[C@]1(C)[C@@]([H])([C@@](C)([H])CCCC(C)C)CC[C@@]21[H])[H]\"\n].\n   }\n   # Use the fact that UniProt catalytic activities are annotated using Rhea \n   # Mapping the found ChEBIs to Rhea reactions\n   SERVICE <https://sparql.rhea-db.org/sparql>{\n     ?rhea rh:side/rh:contains/rh:compound/rdfs:subClassOf ?chebi .\n   }\n   # Match the found Rhea reactions with human UniProtKB proteins\n   ?protein up:annotation/up:catalyticActivity/up:catalyzedReaction ?rhea .\n   ?protein up:organism taxon:9606 .\n   # Find only those human entries that have an annotated related disease, and optionaly map these to OMIM\n   ?protein up:annotation/up:disease ?disease .\n   OPTIONAL {\n     ?disease rdfs:seeAlso ?omim .\n     ?omim up:database <http://purl.uniprot.org/database/MIM>\n   }\n}",
    "target_endpoint": "https://sparql.uniprot.org/sparql/",
    "federates_with": [
      "https://idsm.elixir-czech.cz/sparql/endpoint/chebi",
      "https://sparql.rhea-db.org/sparql"
    ],
    "endpoint_set": "Uniprot",
    "file_path": "UniProt/60_enzymes_working_on_substrate_with_Cholestene_backbone.ttl",
    "predicted_query": "# https://sparql.uniprot.org/sparql\n# Prefix declarations for commonly used namespaces\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX up: <http://purl.uniprot.org/core/>\nPREFIX taxon: <http://purl.uniprot.org/taxonomy/>\nPREFIX chebi: <http://purl.obolibrary.org/obo/CHEBI_>\nPREFIX rhea: <http://rdf.rhea-db.org/>\n\n# Select the UniProt protein identifiers and their names\nSELECT DISTINCT ?protein ?proteinName\nWHERE {\n  # Find proteins that are associated with Homo sapiens (human)\n  ?protein up:organism taxon:9606 .\n  ?protein rdfs:label ?proteinName .\n\n  # Filter for proteins that participate in reactions involving the Cholestane skeleton\n  FILTER EXISTS {\n    {\n      # Query Rhea for reactions that have Cholestane skeleton as a substrate\n      SERVICE <https://sparql.rhea-db.org/sparql> {\n        ?reaction rhea:substrates chebi:35516 .\n        ?protein rhea: participates_in ?reaction .\n      }\n    }\n    UNION\n    {\n      # Query Rhea for reactions that have Cholestane skeleton as a product\n      SERVICE <https://sparql.rhea-db.org/sparql> {\n        ?reaction rhea:products chebi:35516 .\n        ?protein rhea: participates_in ?reaction .\n      }\n    }\n  }\n}",
    "predicted_endpoint": "https://sparql.uniprot.org/sparql",
    "predicted_endpoint_equal_to_target_endpoint": true,
    "predicted_endpoint_in_federates_with": false,
    "predicted_endpoint_or_federated_endpoint": true,
    "run_id_langsmith": "a3e90331-5e34-4d7f-aefb-cbf3e75ccffe",
    "evaluation_timestamp": "2025-04-25T17:57:26.054495",
    "question_understanding_tokens": 285,
    "question_understanding_completion_tokens": 38,
    "question_understanding_total_tokens": 323,
    "sparql_construction_prompt_tokens": 3490,
    "sparql_construction_completion_tokens": 366,
    "sparql_construction_total_tokens": 3856,
    "is_valid_sparql": false,
    "sparql_syntax_error": "Lexical error at line 22, column 39.  Encountered: '32' (32), after prefix \"participates_in\"",
    "ground_truth_query_result_is_empty": null,
    "result_eval_f1_score": 0.0,
    "result_eval_precision": 0.0,
    "result_eval_recall": 0.0,
    "error_occured_at_endpoint": false,
    "predicted_query_result_is_empty": true,
    "error_occured_at_endpoint_message": "syntactically not correct"
  },
  {
    "resource": "https://sparql.uniprot.org/.well-known/sparql-examples/70_enzymes_interacting_with_molecules_similar_to_dopamine",
    "natural_language_question": "Look for enzymes catalyzing reactions with molecules similar to dopamine.",
    "ground_truth_query": "PREFIX CHEBI: <http://purl.obolibrary.org/obo/CHEBI_>\nPREFIX rh: <http://rdf.rhea-db.org/>\nPREFIX sachem: <http://bioinfo.uochb.cas.cz/rdf/v1.0/sachem#>\nPREFIX up: <http://purl.uniprot.org/core/>\n\nSELECT\n  ?protein\n  ?rhea\n  ?chebi\nWHERE {\n  # Use the smiles of dopamine CHEBI:18243\n  SERVICE <https://idsm.elixir-czech.cz/sparql/endpoint/chebi>{\n    ?chebi sachem:similarCompoundSearch [\n      sachem:query \"NCCc1ccc(O)c(O)c1\" ] .\n  }\n  GRAPH<https://sparql.rhea-db.org/rhea>{\n    ?rhea rh:side/rh:contains/rh:compound ?compound .\n    ?compound (rh:chebi|(rh:reactivePart/rh:chebi)|(rh:underlyingChebi/rh:chebi)) ?chebi .\n  }\n  ?protein up:reviewed true ;\n    up:annotation ?caa .\n  ?caa up:catalyticActivity/up:catalyzedReaction ?rhea .\n}",
    "target_endpoint": "https://sparql.uniprot.org/sparql/",
    "federates_with": [
      "https://idsm.elixir-czech.cz/sparql/endpoint/chebi"
    ],
    "endpoint_set": "Uniprot",
    "file_path": "UniProt/70_enzymes_interacting_with_molecules_similar_to_dopamine.ttl",
    "predicted_query": "# https://sparql.rhea-db.org/sparql\n# Find enzymes catalyzing reactions involving molecules similar to dopamine.\nPREFIX rhea: <http://rdf.rhea-db.org/>\nPREFIX chebi: <http://purl.obolibrary.org/obo/CHEBI_>\nPREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>\nPREFIX uniprot: <http://purl.uniprot.org/core/>\n\nSELECT DISTINCT ?enzyme ?reaction\nWHERE {\n  # Find reactions in RheaDB that involve dopamine as a participant.\n  {\n    SELECT DISTINCT ?reaction WHERE {\n      ?reaction rhea: Rhea_has_participant chebi:CHEBI_134058 .  # N-palmitoyl dopamine\n    }\n  }\n  UNION\n  {\n    SELECT DISTINCT ?reaction WHERE {\n      ?reaction rhea: Rhea_has_participant chebi:CHEBI_189002 .  # dopaminechrome (keto form)\n    }\n  }\n  UNION\n  {\n    SELECT DISTINCT ?reaction WHERE {\n      ?reaction rhea: Rhea_has_participant <http://rdf.rhea-db.org/73863> .  # dopamine(out) = dopamine(in)\n    }\n  }\n  UNION\n  {\n    SELECT DISTINCT ?reaction WHERE {\n      ?reaction rhea: Rhea_has_participant <http://rdf.rhea-db.org/12272> .  # L-dopa + H(+) = dopamine + CO2\n    }\n  }\n  UNION\n  {\n    SELECT DISTINCT ?reaction WHERE {\n      ?reaction rhea: Rhea_has_participant <http://rdf.rhea-db.org/73739> .  # dopamine(in) + 2 H(+)(out) = dopamine(out) + 2 H(+)(in)\n    }\n  }\n  # Find the enzyme that catalyzes the reaction from RheaDB.\n  ?reaction rhea:rheaId ?rheaId .\n  ?enzyme uniprot:catalyticActivity ?rheaId . # Assuming UniProt uses Rhea IDs for catalytic activity\n}",
    "predicted_endpoint": "https://sparql.rhea-db.org/sparql",
    "predicted_endpoint_equal_to_target_endpoint": false,
    "predicted_endpoint_in_federates_with": false,
    "predicted_endpoint_or_federated_endpoint": false,
    "run_id_langsmith": "b732e8fe-a2fc-4858-952f-594b4d8fda52",
    "evaluation_timestamp": "2025-04-25T17:57:38.964148",
    "question_understanding_tokens": 242,
    "question_understanding_completion_tokens": 26,
    "question_understanding_total_tokens": 268,
    "sparql_construction_prompt_tokens": 2429,
    "sparql_construction_completion_tokens": 509,
    "sparql_construction_total_tokens": 2938,
    "is_valid_sparql": false,
    "sparql_syntax_error": "Lexical error at line 13, column 43.  Encountered: '32' (32), after prefix \"Rhea_has_participant\"",
    "ground_truth_query_result_is_empty": null,
    "result_eval_f1_score": 0.0,
    "result_eval_precision": 0.0,
    "result_eval_recall": 0.0,
    "error_occured_at_endpoint": false,
    "predicted_query_result_is_empty": true,
    "error_occured_at_endpoint_message": "syntactically not correct"
  },
  {
    "resource": "https://sparql.uniprot.org/.well-known/sparql-examples/38",
    "natural_language_question": "For the human entry P05067 (Amyloid-beta precursor protein) find the gene start ends in WikiData",
    "ground_truth_query": "PREFIX p: <http://www.wikidata.org/prop/>\nPREFIX pq: <http://www.wikidata.org/prop/qualifier/>\nPREFIX ps: <http://www.wikidata.org/prop/statement/>\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX uniprotkb: <http://purl.uniprot.org/uniprot/>\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\n\n\nSELECT \n\t?protein \n\t?begin\n\t?end\n\t?chromosome\n\t?assembly\nWHERE {\n    {\n        BIND(uniprotkb:P05067 AS ?proteinIRI)\n        BIND (SUBSTR(STR(?proteinIRI), STRLEN(STR(uniprotkb:))+1) AS ?protein)\n    }\n    SERVICE <https://query.wikidata.org/sparql> {\n        ?wp wdt:P352 ?protein ;\n            wdt:P702 ?wg . \n        ?wg p:P644   ?wgss .\n        ?wgss ps:P644        ?begin ;\n          pq:P1057/wdt:P1813 ?chromosome ;\n          pq:P659/rdfs:label ?assembly .\n        ?wg p:P645 ?wgse .\n        ?wgse ps:P645        ?end ;\n          pq:P1057/wdt:P1813 ?chromosome ;\n          pq:P659/rdfs:label ?assembly .\n        FILTER(lang(?assembly) = \"en\")\n  } \n}",
    "target_endpoint": "https://sparql.uniprot.org/sparql/",
    "federates_with": [
      "https://query.wikidata.org/sparql"
    ],
    "endpoint_set": "Uniprot",
    "file_path": "UniProt/38_find_gene_region_in_wikidata_for_known_entry.ttl",
    "predicted_query": "# https://sparql.uniprot.org/sparql\n# Federated query to retrieve gene start and end positions for human Amyloid-beta precursor protein (P05067) from UniProt and Wikidata.\nPREFIX up: <http://purl.uniprot.org/core/>\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX uniprot: <http://purl.uniprot.org/uniprot/>\n\nSELECT ?geneStart ?geneEnd\nWHERE {\n  # Select the UniProt entry for human Amyloid-beta precursor protein (P05067)\n  VALUES (?protein) { (uniprot:P05067) }\n  ?protein up:organism <http://purl.uniprot.org/taxonomy/9606> . # Ensure it's human\n\n  # Get the gene associated with the protein\n  ?protein up:encodedBy ?gene .\n\n  # Access Wikidata to retrieve gene start and end positions\n  SERVICE <https://query.wikidata.org/sparql> {\n    OPTIONAL {\n      # Attempt to find the gene's start position.  Uses a property that links to genomic start position.\n      ?gene wdt:P644 ?geneStart .\n    }\n    OPTIONAL {\n      # Attempt to find the gene's end position. Uses a property that links to genomic end position.\n      ?gene wdt:P645 ?geneEnd .\n    }\n  }\n}",
    "predicted_endpoint": "https://sparql.uniprot.org/sparql",
    "predicted_endpoint_equal_to_target_endpoint": true,
    "predicted_endpoint_in_federates_with": false,
    "predicted_endpoint_or_federated_endpoint": true,
    "run_id_langsmith": "f7db473b-c8a6-4e97-9bb0-388f43419e6b",
    "evaluation_timestamp": "2025-04-25T17:57:48.446343",
    "question_understanding_tokens": 257,
    "question_understanding_completion_tokens": 50,
    "question_understanding_total_tokens": 307,
    "sparql_construction_prompt_tokens": 2406,
    "sparql_construction_completion_tokens": 343,
    "sparql_construction_total_tokens": 2749,
    "is_valid_sparql": false,
    "sparql_syntax_error": "Line 20, column 13: Unresolved prefixed name: wdt:P644",
    "ground_truth_query_result_is_empty": null,
    "result_eval_f1_score": 0.0,
    "result_eval_precision": 0.0,
    "result_eval_recall": 0.0,
    "error_occured_at_endpoint": false,
    "predicted_query_result_is_empty": true,
    "error_occured_at_endpoint_message": "syntactically not correct"
  },
  {
    "resource": "https://sparql.uniprot.org/.well-known/sparql-examples/117_biosodafrontend_glioblastoma_orthologs_rat",
    "natural_language_question": "Which are the proteins associated with glioblastoma and the orthologs expressed in the rat brain?",
    "ground_truth_query": "PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX obo: <http://purl.obolibrary.org/obo/>\nPREFIX orth: <http://purl.org/net/orth#>\nPREFIX sio: <http://semanticscience.org/resource/>\nPREFIX taxon: <http://purl.uniprot.org/taxonomy/>\nPREFIX up: <http://purl.uniprot.org/core/>\nPREFIX lscr: <http://purl.org/lscr#>\nPREFIX genex: <http://purl.org/genex#>\nSELECT DISTINCT ?protein ?orthologous_protein ?gene ?annotation_text WHERE {\n  {\n  \tSELECT ?protein ?annotation_text WHERE {\n      ?protein a up:Protein ;\n          up:organism taxon:9606 ;\n          up:annotation ?annotation .\n      ?annotation rdfs:comment ?annotation_text .\n      ?annotation a up:Disease_Annotation .\n      FILTER CONTAINS (?annotation_text, \"glioblastoma\")\n    }\n  }\n  SERVICE <https://sparql.omabrowser.org/sparql/> {\n    SELECT ?orthologous_protein ?protein ?gene WHERE {\n    ?protein_OMA a orth:Protein .\n    ?orthologous_protein a orth:Protein .\n    ?cluster a orth:OrthologsCluster .\n    ?cluster orth:hasHomologousMember ?node1 .\n    ?cluster\n    orth:hasHomologousMember ?node2 .\n    ?node2 orth:hasHomologousMember* ?protein_OMA .\n    ?node1 orth:hasHomologousMember* ?orthologous_protein .\n    ?orthologous_protein orth:organism/obo:RO_0002162 taxon:10116 . # rattus norvegicus\n    ?orthologous_protein sio:SIO_010079 ?gene .\n    ?protein_OMA lscr:xrefUniprot ?protein .\n    FILTER(?node1 != ?node2)\n\t\t}\n\t}\n  SERVICE <https://www.bgee.org/sparql/> {\n    ?gene genex:isExpressedIn ?a .\n    ?a rdfs:label \"brain\" .\n    ?gene orth:organism ?s . \n    ?s obo:RO_0002162 taxon:10116.\n\t}\n}",
    "target_endpoint": "https://sparql.uniprot.org/sparql",
    "federates_with": [
      "https://sparql.omabrowser.org/sparql/",
      "https://www.bgee.org/sparql/"
    ],
    "endpoint_set": "Uniprot",
    "file_path": "UniProt/117_biosodafrontend_glioblastoma_orthologs_rat.ttl",
    "predicted_query": "# https://sparql.uniprot.org/sparql\n# Prefixes for commonly used namespaces\nPREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX up: <http://purl.uniprot.org/core/>\nPREFIX taxon: <http://purl.uniprot.org/taxonomy/>\nPREFIX disease: <http://purl.uniprot.org/diseases/>\n\n# Select the protein identifiers\nSELECT DISTINCT ?protein ?proteinName ?ratOrthologName\nWHERE {\n  # Subquery to find proteins associated with glioblastoma\n  {\n    # Use the UniProt SPARQL endpoint\n    SERVICE <https://sparql.uniprot.org/sparql> {\n      # Find proteins associated with the Glioma disease\n      ?disease disease:name \"Glioma\" . # Find the disease entity for Glioma\n      ?protein up:annotation ?disease .  # Find proteins annotated with the Glioma disease\n      ?protein rdfs:label ?proteinName . # Get the protein name\n    }\n  }\n  # Find orthologs of the proteins in rat brain\n  {\n    # Use the UniProt SPARQL endpoint again\n    SERVICE <https://sparql.uniprot.org/sparql> {\n      # Find rat orthologs of the proteins\n      ?ratOrtholog up:sequence ?protein . # Find orthologs based on sequence similarity\n      ?ratOrtholog up:organism taxon:10116 . # Filter for Rattus norvegicus (rat)\n      ?ratOrtholog rdfs:label ?ratOrthologName . # Get the rat ortholog name\n    }\n  }\n}",
    "predicted_endpoint": "https://sparql.uniprot.org/sparql",
    "predicted_endpoint_equal_to_target_endpoint": true,
    "predicted_endpoint_in_federates_with": false,
    "predicted_endpoint_or_federated_endpoint": true,
    "run_id_langsmith": "0ac63328-0493-46fe-b0f3-600dcd8748d6",
    "evaluation_timestamp": "2025-04-25T17:57:58.361508",
    "question_understanding_tokens": 249,
    "question_understanding_completion_tokens": 34,
    "question_understanding_total_tokens": 283,
    "sparql_construction_prompt_tokens": 2540,
    "sparql_construction_completion_tokens": 409,
    "sparql_construction_total_tokens": 2949,
    "is_valid_sparql": true,
    "sparql_syntax_error": "syntactically correct",
    "ground_truth_query_result_is_empty": false,
    "result_eval_f1_score": 0.0,
    "result_eval_precision": 0.0,
    "result_eval_recall": 0.0,
    "error_occured_at_endpoint": false,
    "predicted_query_result_is_empty": true,
    "error_occured_at_endpoint_message": "no error, but empty result"
  },
  {
    "resource": "https://sparql.uniprot.org/.well-known/sparql-examples/116_biosodafrontend_rabit_mouse_orthologs",
    "natural_language_question": "Rabbit's proteins encoded by genes that are orthologous to Mouse's HBB-Y gene and their cross reference links to Uniprot",
    "ground_truth_query": "PREFIX lscr: <http://purl.org/lscr#>\nPREFIX orth: <http://purl.org/net/orth#>\nPREFIX up: <http://purl.uniprot.org/core/>\nPREFIX obo: <http://purl.obolibrary.org/obo/>\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nSELECT DISTINCT ?PROTEIN_1 ?PROTEIN_2 ?UNIPROT_XREF_1 ?UNIPROT_XREF_2 WHERE {\n\t?taxon_1 up:commonName 'Mouse' .\n\t?taxon_2 up:commonName 'Rabbit' .\n\tSERVICE <https://sparql.omabrowser.org/sparql/> {\n\t\t?cluster a orth:OrthologsCluster .\n\t\t?cluster orth:hasHomologousMember ?node1 .\n\t\t?cluster orth:hasHomologousMember ?node2 .\n\t\t?node2 orth:hasHomologousMember* ?PROTEIN_2 .\n\t\t?node1 orth:hasHomologousMember* ?PROTEIN_1 .\n\t\t?PROTEIN_1 a orth:Protein .\n\t\t?PROTEIN_1 orth:organism/obo:RO_0002162 ?taxon_1 ;\n\t\t\trdfs:label 'HBB-Y' ;\n\t\t\tlscr:xrefUniprot ?UNIPROT_XREF_1 .\n\t\t?PROTEIN_2 a orth:Protein .\n\t\t?PROTEIN_2 orth:organism/obo:RO_0002162 ?taxon_2 .\n\t\t?PROTEIN_2 lscr:xrefUniprot ?UNIPROT_XREF_2 .\n\t\tFILTER ( ?node1 != ?node2 )\n\t}\n}",
    "target_endpoint": "https://sparql.uniprot.org/sparql",
    "federates_with": [
      "https://sparql.omabrowser.org/sparql/"
    ],
    "endpoint_set": "Uniprot",
    "file_path": "UniProt/116_biosodafrontend_rabit_mouse_orthologs.ttl",
    "predicted_query": "# https://sparql.uniprot.org/sparql\n# Find Rabbit proteins encoded by genes orthologous to Mouse HBB-Y and their UniProt cross-references.\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX up: <http://purl.uniprot.org/core/>\nPREFIX taxon: <http://purl.uniprot.org/taxonomy/>\n\nSELECT DISTINCT ?rabbitProtein ?geneName ?uniprotCrossReference\nWHERE {\n  # Find the UniProt entry for Mouse HBB-Y (if it exists, otherwise find any mouse gene)\n  SERVICE <https://sparql.uniprot.org/sparql> {\n    {\n      SELECT ?mouseGene WHERE {\n        ?mouseGene a up:Protein .\n        ?mouseGene up:organism taxon:10090 . # Mouse\n        ?mouseGene rdfs:label ?geneName .\n        FILTER (CONTAINS(LCASE(?geneName), \"HBB-Y\"))\n      }\n      LIMIT 1\n    }\n    UNION\n    {\n      SELECT ?mouseGene WHERE {\n        ?mouseGene a up:Protein .\n        ?mouseGene up:organism taxon:10090 . # Mouse\n      }\n      LIMIT 1\n    }\n  }\n\n  # Find orthologous genes in Rabbit\n  SERVICE <https://sparql.uniprot.org/sparql> {\n    ?rabbitProtein a up:Protein .\n    ?rabbitProtein up:organism taxon:9986 . # Rabbit\n    ?rabbitProtein up:gene ?gene .\n    ?gene rdfs:label ?geneName .\n    # Assuming orthology is indicated via a cross-reference or similar link.  This might need adjustment.\n    ?rabbitProtein up:database ?uniprotCrossReference . # Get cross-references to other databases.  Adjust as needed.\n  }\n}",
    "predicted_endpoint": "https://sparql.uniprot.org/sparql",
    "predicted_endpoint_equal_to_target_endpoint": true,
    "predicted_endpoint_in_federates_with": false,
    "predicted_endpoint_or_federated_endpoint": true,
    "run_id_langsmith": "1d7ca068-3182-4cc9-9700-807a682da303",
    "evaluation_timestamp": "2025-04-25T17:58:18.374368",
    "question_understanding_tokens": 259,
    "question_understanding_completion_tokens": 49,
    "question_understanding_total_tokens": 308,
    "sparql_construction_prompt_tokens": 3421,
    "sparql_construction_completion_tokens": 433,
    "sparql_construction_total_tokens": 3854,
    "is_valid_sparql": true,
    "sparql_syntax_error": "syntactically correct",
    "ground_truth_query_result_is_empty": false,
    "result_eval_f1_score": 0.0,
    "result_eval_precision": 0.0,
    "result_eval_recall": 0.0,
    "error_occured_at_endpoint": false,
    "predicted_query_result_is_empty": true,
    "error_occured_at_endpoint_message": "no error, but empty result"
  },
  {
    "resource": "https://sparql.uniprot.org/.well-known/sparql-examples/29",
    "natural_language_question": "Use <a href=\"http://allie.dbcls.jp/\">ALLIE</a> a service for Abbreviation / Long Form in Japanese and English to search in UniProt using Japanese.",
    "ground_truth_query": "PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX up: <http://purl.uniprot.org/core/>\n\nSELECT ?protein ?englishLabelStr\nWHERE {\n    SERVICE <https://data.allie.dbcls.jp/sparql>{\n        ?x rdfs:label \"アミロイド前駆体タンパク質\"@ja ;\n            rdfs:label ?englishLabel .\n        FILTER(lang(?englishLabel) = \"en\")\n    }\n    BIND (STR(?englishLabel) AS ?englishLabelStr)\n    ?protein a up:Protein .\n    {\n        ?protein (up:recommendedName|up:alternativeName) ?structuredName .\n    }\n    UNION\n    {\n        VALUES(?partType){(up:domain) (up:component)}\n            ?protein ?partType ?part .\n        ?part (up:recommendedName|up:alternativeName) ?structuredName .\n    }\n    ?structuredName ?anyKindOfName  ?englishLabelStr .\n    ?anyKindOfName rdfs:subPropertyOf up:structuredNameType .\n}",
    "target_endpoint": "https://sparql.uniprot.org/sparql/",
    "federates_with": [
      "https://data.allie.dbcls.jp/sparql"
    ],
    "endpoint_set": "Uniprot",
    "file_path": "UniProt/29_search_uniprot_in_japanese_with_allie.ttl",
    "predicted_query": "# https://sparql.uniprot.org/sparql\n# The user is asking to use ALLIE service to search for abbreviations/long forms in Japanese and English, then use the results to query UniProt.\n# Since I cannot directly interact with the ALLIE service, I will construct a SPARQL query that assumes the user has already obtained the relevant terms (either abbreviations or long forms) from ALLIE related to UniProt entries.\n# This query will search UniProt for entries that contain either the abbreviation or the long form in their description or other relevant fields.\n# Note: This is a simplified approach due to the inability to directly interface with the ALLIE service. A more complete solution would involve an external script to query ALLIE and then construct the SPARQL query based on the results.\n\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX up: <http://purl.uniprot.org/core/>\n\nSELECT DISTINCT ?protein ?proteinName\nWHERE {\n  # Replace \"your_abbreviation\" and \"your_long_form\" with the actual terms obtained from ALLIE.\n  # This assumes you have already queried ALLIE and have the relevant terms.\n  VALUES (?searchTerm) { (\"your_abbreviation\") (\"your_long_form\") }\n\n  SERVICE <https://sparql.uniprot.org/sparql> {\n    ?protein a up:Protein .\n    ?protein rdfs:label ?proteinName .\n    FILTER (CONTAINS(LCASE(?proteinName), LCASE(?searchTerm)))\n  }\n}",
    "predicted_endpoint": "https://sparql.uniprot.org/sparql",
    "predicted_endpoint_equal_to_target_endpoint": true,
    "predicted_endpoint_in_federates_with": false,
    "predicted_endpoint_or_federated_endpoint": true,
    "run_id_langsmith": "f2c6a778-0c76-4893-ad85-5ba3f0b22891",
    "evaluation_timestamp": "2025-04-25T17:58:27.742555",
    "question_understanding_tokens": 266,
    "question_understanding_completion_tokens": 27,
    "question_understanding_total_tokens": 293,
    "sparql_construction_prompt_tokens": 1723,
    "sparql_construction_completion_tokens": 0,
    "sparql_construction_total_tokens": 1723,
    "is_valid_sparql": true,
    "sparql_syntax_error": "syntactically correct",
    "ground_truth_query_result_is_empty": false,
    "result_eval_f1_score": 0.0,
    "result_eval_precision": 0.0,
    "result_eval_recall": 0.0,
    "error_occured_at_endpoint": true,
    "predicted_query_result_is_empty": true,
    "error_occured_at_endpoint_message": "Expecting value: line 1 column 1 (char 0)"
  },
  {
    "resource": "https://sparql.rhea-db.org/.well-known/sparql-examples/94_Select_all_approved_reactions_with_CHEBI_or_one_of_its_descendant_optional_UniProtKB_reviewed_EC",
    "natural_language_question": "Select all approved reactions with CHEBI:17815 (a 1,2-diacyl-sn-glycerol) or one of its descendant. Display links to UniProtKB/Swiss-Prot entries via EC numbers if the link rhea-ec exists.",
    "ground_truth_query": "PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX rh:<http://rdf.rhea-db.org/>\nPREFIX CHEBI:<http://purl.obolibrary.org/obo/CHEBI_>\nPREFIX up:<http://purl.uniprot.org/core/>\n\nSELECT\n  distinct\n    ?reaction\n    ?enzyme\n    (count(distinct ?protein) as ?proteinCount)\nWHERE {\n  ?reaction rdfs:subClassOf rh:Reaction .\n  ?reaction rh:status rh:Approved .\n  ?reaction rh:side ?reactionSide .\n\n  OPTIONAL {?reaction rh:ec ?enzyme .\n    SERVICE <https://sparql.uniprot.org/sparql> {\n      ?protein up:reviewed true .\n      ?protein up:enzyme ?enzyme.\n    }\n  } .\n  ?reactionSide rh:contains ?participant .\n  ?participant rh:compound ?compound .\n  ?compound rh:chebi ?chebi .\n  ?chebi rdfs:subClassOf* CHEBI:17815 .\n}\nGROUP BY ?reaction ?enzyme\nORDER BY ?reaction\nLIMIT 985915",
    "target_endpoint": "https://sparql.rhea-db.org/sparql",
    "federates_with": [
      "https://sparql.uniprot.org/sparql"
    ],
    "endpoint_set": "Rhea",
    "file_path": "Rhea/94_Select_all_approved_reactions_with_CHEBI_or_one_of_its_descendant_optional_UniProtKB_reviewed_EC.ttl",
    "predicted_query": "# https://sparql.rhea-db.org/sparql\n# Federated query to find reactions involving CHEBI:17815 or its descendants and link to UniProtKB entries via EC numbers.\nPREFIX rhea: <http://rdf.rhea-db.org/>\nPREFIX chebi: <http://purl.obolibrary.org/obo/CHEBI_>\nPREFIX ec: <http://purl.uniprot.org/enzyme/>\n\nSELECT DISTINCT ?reaction ?reactionName ?ecNumber ?uniprotEntry\nWHERE {\n  # Find reactions that have CHEBI:17815 or its descendants as participants.\n  {\n    SELECT DISTINCT ?reaction\n    WHERE {\n      {\n        # Find reactions directly involving CHEBI:17815\n        ?reaction rhea: Rhea_has_participant chebi:17815 .\n      }\n      UNION\n      {\n        # Find reactions involving descendants of CHEBI:17815\n        SERVICE <https://sparql.rhea-db.org/sparql> {\n          ?descendant chebi:is_a chebi:17815 .\n          BIND(IRI(CONCAT(\"http://purl.obolibrary.org/obo/CHEBI_\",STR(?descendant))) AS ?chebiDescendant)\n        }\n        ?reaction rhea: Rhea_has_participant ?chebiDescendant .\n      }\n      ?reaction rhea: Rhea_status \"approved\" .\n    }\n  }\n\n  # Get the name of the reaction\n  ?reaction rdfs:label ?reactionName .\n\n  # Optional: Find EC numbers associated with the reaction and link to UniProt entries.\n  OPTIONAL {\n    ?reaction rhea: Rhea_ec ?ecNumber .\n    SERVICE <https://sparql.uniprot.org/sparql> {\n      ?uniprotEntry rdfs:seeAlso ?ecNumber .\n    }\n  }\n}",
    "predicted_endpoint": "https://sparql.rhea-db.org/sparql",
    "predicted_endpoint_equal_to_target_endpoint": true,
    "predicted_endpoint_in_federates_with": false,
    "predicted_endpoint_or_federated_endpoint": true,
    "run_id_langsmith": "77d8ac76-1788-4b8b-88f3-68bb5859d6d9",
    "evaluation_timestamp": "2025-04-25T17:58:38.735322",
    "question_understanding_tokens": 290,
    "question_understanding_completion_tokens": 88,
    "question_understanding_total_tokens": 378,
    "sparql_construction_prompt_tokens": 2093,
    "sparql_construction_completion_tokens": 440,
    "sparql_construction_total_tokens": 2533,
    "is_valid_sparql": false,
    "sparql_syntax_error": "Lexical error at line 15, column 45.  Encountered: '32' (32), after prefix \"Rhea_has_participant\"",
    "ground_truth_query_result_is_empty": null,
    "result_eval_f1_score": 0.0,
    "result_eval_precision": 0.0,
    "result_eval_recall": 0.0,
    "error_occured_at_endpoint": false,
    "predicted_query_result_is_empty": true,
    "error_occured_at_endpoint_message": "syntactically not correct"
  },
  {
    "resource": "https://sparql.rhea-db.org/.well-known/sparql-examples/11",
    "natural_language_question": "Distribution of reactions according to the first class of the enzyme classification (federated query)",
    "ground_truth_query": "PREFIX ec: <http://purl.uniprot.org/enzyme/>\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX rh: <http://rdf.rhea-db.org/>\nPREFIX skos: <http://www.w3.org/2004/02/skos/core#>\n\n# Query 11\n# Retrieve the count of reactions mapped to each level (main class) of the enzyme classification\n#\n# This query mimics the Filter section of the Rhea website (Browse all reactions)\n# https://www.rhea-db.org/rhea?query=\nSELECT ?ecClass (STR(?ecName) AS ?ecClassName) (COUNT(?rhea) AS ?rheaCount)\nWHERE {\n  SERVICE <https://sparql.uniprot.org/sparql> {\n    VALUES (?ecClass) { (ec:1.-.-.-)(ec:2.-.-.-)(ec:3.-.-.-)(ec:4.-.-.-)(ec:5.-.-.-) (ec:6.-.-.-) (ec:7.-.-.-)}\n    ?ecNumber rdfs:subClassOf ?ecClass .\n    ?ecClass skos:prefLabel ?ecName .\n  }\n  ?rhea rdfs:subClassOf rh:Reaction .\n  ?rhea rh:ec ?ecNumber .\n} GROUP BY ?ecClass ?ecName",
    "target_endpoint": "https://sparql.rhea-db.org/sparql",
    "federates_with": [
      "https://sparql.uniprot.org/sparql"
    ],
    "endpoint_set": "Rhea",
    "file_path": "Rhea/11.ttl",
    "predicted_query": "# https://sparql.rhea-db.org/sparql\nPREFIX rhea: <http://rdf.rhea-db.org/>\nPREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\n\nSELECT ?enzymeClass (COUNT(DISTINCT ?reaction) AS ?reactionCount)\nWHERE {\n  # Find Rhea reactions and their corresponding UniProt IDs.\n  ?reaction rdf:type rhea:Reaction .\n  ?reaction rhea:enzyme ?enzyme .\n\n  # Access UniProt to retrieve the enzyme class for each UniProt ID.\n  SERVICE <https://sparql.uniprot.org/sparql> {\n    ?enzyme uniprot:enzymeClassification ?enzymeClass .\n    FILTER (REGEX(STR(?enzymeClass), \"^[0-9]+\\\\.\", \"i\")) # Filter for the first EC class\n  }\n}\nGROUP BY ?enzymeClass\nORDER BY DESC(?reactionCount)",
    "predicted_endpoint": "https://sparql.rhea-db.org/sparql",
    "predicted_endpoint_equal_to_target_endpoint": true,
    "predicted_endpoint_in_federates_with": false,
    "predicted_endpoint_or_federated_endpoint": true,
    "run_id_langsmith": "68839031-e3dd-4413-bdb3-3472c9a664ce",
    "evaluation_timestamp": "2025-04-25T17:58:46.444464",
    "question_understanding_tokens": 246,
    "question_understanding_completion_tokens": 24,
    "question_understanding_total_tokens": 270,
    "sparql_construction_prompt_tokens": 1374,
    "sparql_construction_completion_tokens": 0,
    "sparql_construction_total_tokens": 1374,
    "is_valid_sparql": false,
    "sparql_syntax_error": "Line 14, column 13: Unresolved prefixed name: uniprot:enzymeClassification",
    "ground_truth_query_result_is_empty": null,
    "result_eval_f1_score": 0.0,
    "result_eval_precision": 0.0,
    "result_eval_recall": 0.0,
    "error_occured_at_endpoint": false,
    "predicted_query_result_is_empty": true,
    "error_occured_at_endpoint_message": "syntactically not correct"
  },
  {
    "resource": "https://sparql.rhea-db.org/.well-known/sparql-examples/109_Distribution_of_reactions_according_to_the_first_level_of_enzyme_classification",
    "natural_language_question": "Distribution of reactions according to the first level of enzyme classification",
    "ground_truth_query": "\nPREFIX rh:<http://rdf.rhea-db.org/>\nPREFIX ec:<http://purl.uniprot.org/enzyme/>\nPREFIX rdfs:<http://www.w3.org/2000/01/rdf-schema#>\nPREFIX skos:<http://www.w3.org/2004/02/skos/core#>\n\nSELECT\n  ?ecClass\n  (str(?ecName) as ?ecClassName)\n  (count(?reaction) as ?reactionCount)\nWHERE\n{\n  SERVICE <http://sparql.uniprot.org/sparql> {\n    VALUES (?ecClass) { (ec:1.-.-.-)(ec:2.-.-.-)(ec:3.-.-.-)(ec:4.-.-.-)(ec:5.-.-.-) (ec:6.-.-.-) (ec:7.-.-.-) }\n    ?ecNumber rdfs:subClassOf ?ecClass .\n    ?ecClass skos:prefLabel ?ecName .\n  }\n  ?reaction rdfs:subClassOf rh:Reaction .\n  ?reaction rh:ec ?ecNumber .\n}\nGROUP BY ?ecClass ?ecName\n",
    "target_endpoint": "https://sparql.rhea-db.org/sparql",
    "federates_with": [
      "http://sparql.uniprot.org/sparql"
    ],
    "endpoint_set": "Rhea",
    "file_path": "Rhea/109_Distribution_of_reactions_according_to_the_first_level_of_enzyme_classification.ttl",
    "predicted_query": "# https://sparql.rhea-db.org/sparql\n# This query aims to find the distribution of reactions based on the first level of enzyme classification.\n# It assumes that there is a way to link reactions to enzyme classifications, possibly through Rhea's data model.\n# However, without specific details on how enzyme classifications are represented in Rhea, the query is based on general assumptions.\n\nPREFIX rhea: <http://rdf.rhea-db.org/>\nPREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>\nPREFIX chebi: <http://purl.obolibrary.org/obo/CHEBI_>\n\nSELECT ?enzymeClass (COUNT(DISTINCT ?reaction) AS ?reactionCount)\nWHERE {\n  #  SERVICE <SwissLipids SPARQL> {\n  #  }\n  #  SERVICE <UniProt SPARQL> {\n  #  }\n  SERVICE <https://sparql.rhea-db.org/sparql> {\n    # Assuming reactions are linked to some enzyme classification (EC) numbers.\n    # This is a placeholder; replace with the actual property linking reactions to EC numbers if available.\n    ?reaction rdf:type rhea:Reaction . # Assuming rhea:Reaction is the type for reactions.\n    ?reaction rhea:ec ?enzymeClass . # Assuming rhea:ec links to enzyme classification.  This is a guess.\n\n    # Further filtering or processing of enzymeClass to get the \"first level\" might be needed here,\n    # depending on how the EC numbers are structured.  For example, if EC numbers are strings like \"1.2.3.4\",\n    # you might need to extract the first digit.  This is not implemented here due to lack of specific schema information.\n  }\n}\nGROUP BY ?enzymeClass\nORDER BY DESC(?reactionCount)",
    "predicted_endpoint": "https://sparql.rhea-db.org/sparql",
    "predicted_endpoint_equal_to_target_endpoint": true,
    "predicted_endpoint_in_federates_with": false,
    "predicted_endpoint_or_federated_endpoint": true,
    "run_id_langsmith": "5e8abd2d-52cb-4c55-9fd9-c49f4defcea1",
    "evaluation_timestamp": "2025-04-25T17:58:55.506381",
    "question_understanding_tokens": 241,
    "question_understanding_completion_tokens": 26,
    "question_understanding_total_tokens": 267,
    "sparql_construction_prompt_tokens": 1968,
    "sparql_construction_completion_tokens": 422,
    "sparql_construction_total_tokens": 2390,
    "is_valid_sparql": true,
    "sparql_syntax_error": "syntactically correct",
    "ground_truth_query_result_is_empty": false,
    "result_eval_f1_score": 0.0,
    "result_eval_precision": 0.0,
    "result_eval_recall": 0.0,
    "error_occured_at_endpoint": false,
    "predicted_query_result_is_empty": true,
    "error_occured_at_endpoint_message": "no error, but empty result"
  },
  {
    "resource": "https://sparql.rhea-db.org/.well-known/sparql-examples/12",
    "natural_language_question": "Select all Rhea reactions linked to protein sequences (enzymes and transporters) in UniProtKB",
    "ground_truth_query": "PREFIX rh: <http://rdf.rhea-db.org/>\nPREFIX up: <http://purl.uniprot.org/core/>\n\n# Query 12\n# Select all Rhea reactions used to annotate enzyme sequences in UniProtKB\n# return the number of UniProtKB entries\n# Federated query using a service to UniProt SPARQL endpoint\n#\n# This query corresponds to the Rhea website query:\n# https://www.rhea-db.org/rhea?query=uniprot:*\n#\nSELECT ?uniprotCount ?rhea ?accession ?equation \nWHERE {\n  SERVICE <https://sparql.uniprot.org/sparql> { \n  \tSELECT ?rhea (count(?uniprot) as ?uniprotCount) {\n      ?uniprot up:annotation/up:catalyticActivity/up:catalyzedReaction ?rhea . \n  \t}\n  \tGROUP BY ?rhea\n  }\n  ?rhea rh:accession ?accession .\n  ?rhea rh:equation ?equation .\n}",
    "target_endpoint": "https://sparql.rhea-db.org/sparql",
    "federates_with": [
      "https://sparql.uniprot.org/sparql"
    ],
    "endpoint_set": "Rhea",
    "file_path": "Rhea/12.ttl",
    "predicted_query": "# https://sparql.rhea-db.org/sparql\n# Federated query to retrieve Rhea reactions linked to protein sequences in UniProtKB.\nPREFIX rhea: <http://rdf.rhea-db.org/>\nPREFIX uniprot: <http://purl.uniprot.org/core/>\n\nSELECT DISTINCT ?rheaReaction ?protein\nWHERE {\n  # Query Rhea for reactions and their associated UniProt IDs.\n  SERVICE <https://sparql.rhea-db.org/sparql> {\n    ?rheaReaction a rhea:Reaction ;\n                  rhea:equation ?equation .\n    ?equation rhea:side ?side .\n    ?side rhea:component ?component .\n    ?component rhea:dblink ?uniprotID .\n  }\n  \n  # Query UniProt for proteins based on the UniProt IDs obtained from Rhea.\n  SERVICE <https://sparql.uniprot.org/sparql> {\n    ?protein a uniprot:Protein ;\n             rdfs:seeAlso ?uniprotID . # Link to the UniProt ID from Rhea\n  }\n}",
    "predicted_endpoint": "https://sparql.rhea-db.org/sparql",
    "predicted_endpoint_equal_to_target_endpoint": true,
    "predicted_endpoint_in_federates_with": false,
    "predicted_endpoint_or_federated_endpoint": true,
    "run_id_langsmith": "dc56e678-7eba-4204-ac83-8fd7e5e0b313",
    "evaluation_timestamp": "2025-04-25T17:59:04.133697",
    "question_understanding_tokens": 250,
    "question_understanding_completion_tokens": 30,
    "question_understanding_total_tokens": 280,
    "sparql_construction_prompt_tokens": 2005,
    "sparql_construction_completion_tokens": 252,
    "sparql_construction_total_tokens": 2257,
    "is_valid_sparql": false,
    "sparql_syntax_error": "Line 20, column 14: Unresolved prefixed name: rdfs:seeAlso",
    "ground_truth_query_result_is_empty": null,
    "result_eval_f1_score": 0.0,
    "result_eval_precision": 0.0,
    "result_eval_recall": 0.0,
    "error_occured_at_endpoint": false,
    "predicted_query_result_is_empty": true,
    "error_occured_at_endpoint_message": "syntactically not correct"
  },
  {
    "resource": "https://sparql.rhea-db.org/.well-known/sparql-examples/112_Total_number_of_reaction_ec_protein_links",
    "natural_language_question": "Total number of <reaction> <ec> <protein> links",
    "ground_truth_query": "PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX rh:<http://rdf.rhea-db.org/>\nPREFIX ec:<http://purl.uniprot.org/enzyme/>\nPREFIX up:<http://purl.uniprot.org/core/>\n\nSELECT\n  (count(?reaction) as ?reactionEcProteinLinkCount)\nWHERE {\n  ?reaction rdfs:subClassOf rh:Reaction .\n  ?reaction rh:ec ?enzyme\n  SERVICE <http://sparql.uniprot.org/sparql> {\n    ?protein up:reviewed true .\n    ?protein up:enzyme ?enzyme.\n  }\n}",
    "target_endpoint": "https://sparql.rhea-db.org/sparql",
    "federates_with": [
      "http://sparql.uniprot.org/sparql"
    ],
    "endpoint_set": "Rhea",
    "file_path": "Rhea/112_Total_number_of_reaction_ec_protein_links.ttl",
    "predicted_query": "# https://sparql.rhea-db.org/sparql\nPREFIX rhea: <http://rdf.rhea-db.org/>\nPREFIX uniprot: <http://purl.uniprot.org/core/>\nPREFIX ec: <http://purl.uniprot.org/enzyme/>  # Assuming a suitable EC namespace\n\nSELECT (COUNT(DISTINCT ?reaction) AS ?totalLinks)\nWHERE {\n  # Find reactions in Rhea\n  SERVICE <https://sparql.rhea-db.org/sparql> {\n    ?reaction a rhea:Reaction .\n    ?reaction rhea:equation ?equation . # Assuming reactions have equations\n  }\n\n  # Find proteins associated with reactions (linking via EC number if possible)\n  SERVICE <https://sparql.uniprot.org/sparql> {\n    ?protein a uniprot:Protein .\n    OPTIONAL {\n      ?protein uniprot:classifiedWith ?ecNumber .  # Proteins classified with EC numbers\n    }\n    OPTIONAL {\n      ?protein rdfs:seeAlso ?ecNumber . #Alternative way to link to EC numbers\n    }\n  }\n\n  #Potentially link reactions to EC numbers (if available in Rhea or via UniProt)\n  OPTIONAL {\n     SERVICE <https://sparql.rhea-db.org/sparql> {\n       ?reaction rhea:ec ?ecNumber . # Reactions directly linked to EC numbers in Rhea\n     }\n  }\n\n  # Filter to include only reactions, proteins, and EC numbers that are linked\n  FILTER (BOUND(?ecNumber)) # Ensure there's a link to an EC number\n}",
    "predicted_endpoint": "https://sparql.rhea-db.org/sparql",
    "predicted_endpoint_equal_to_target_endpoint": true,
    "predicted_endpoint_in_federates_with": false,
    "predicted_endpoint_or_federated_endpoint": true,
    "run_id_langsmith": "1d5d5a39-088b-40ba-908d-67d9eae32a45",
    "evaluation_timestamp": "2025-04-25T17:59:16.151773",
    "question_understanding_tokens": 245,
    "question_understanding_completion_tokens": 21,
    "question_understanding_total_tokens": 266,
    "sparql_construction_prompt_tokens": 2164,
    "sparql_construction_completion_tokens": 415,
    "sparql_construction_total_tokens": 2579,
    "is_valid_sparql": false,
    "sparql_syntax_error": "Line 21, column 16: Unresolved prefixed name: rdfs:seeAlso",
    "ground_truth_query_result_is_empty": null,
    "result_eval_f1_score": 0.0,
    "result_eval_precision": 0.0,
    "result_eval_recall": 0.0,
    "error_occured_at_endpoint": false,
    "predicted_query_result_is_empty": true,
    "error_occured_at_endpoint_message": "syntactically not correct"
  },
  {
    "resource": "https://sparql.rhea-db.org/.well-known/sparql-examples/19_draft_human_metabolome",
    "natural_language_question": "Generate a draft human metabolome",
    "ground_truth_query": "PREFIX chebislash: <http://purl.obolibrary.org/obo/chebi/>\nPREFIX rh: <http://rdf.rhea-db.org/>\nPREFIX taxon: <http://purl.uniprot.org/taxonomy/>\nPREFIX up: <http://purl.uniprot.org/core/>\n\nSELECT\n  ?uniprot ?mnemonic ?rhea ?chebi ?smiles ?inchiKey\nWHERE\n{\n  ?rhea rh:side/rh:contains/rh:compound ?compound .\n  ?compound (rh:chebi|(rh:reactivePart/rh:chebi)|(rh:underlyingChebi/rh:chebi)) ?chebi .\n  ?chebi chebislash:smiles ?smiles ;\n          chebislash:inchikey ?inchiKey .\n  SERVICE <https://sparql.uniprot.org/sparql> {\n     ?uniprot up:annotation/up:catalyticActivity/up:catalyzedReaction ?rhea ;\n                                             up:organism taxon:9606 ;\n                                             up:mnemonic ?mnemonic .\n\n   }\n}",
    "target_endpoint": "https://sparql.rhea-db.org/sparql/",
    "federates_with": [
      "https://sparql.uniprot.org/sparql"
    ],
    "endpoint_set": "Rhea",
    "file_path": "Rhea/19_draft_human_metabolome.ttl",
    "predicted_query": "# https://sparql.uniprot.org/sparql\n# This query aims to retrieve information about the human metabolome by querying UniProt.\n# It searches for entities related to Homo sapiens (Human) and Metabolome.\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX up: <http://purl.uniprot.org/core/>\nPREFIX taxon: <http://purl.uniprot.org/taxonomy/>\n\nSELECT DISTINCT ?metabolome ?metabolomeName\nWHERE {\n  # Query UniProt for Homo sapiens (Human) and Metabolome\n  SERVICE <https://sparql.uniprot.org/sparql> {\n    VALUES ?taxon { taxon:9606 }  # Homo sapiens taxon ID\n\n    ?metabolome a up:Metabolome .  # Assuming there is a Metabolome class in UniProt\n    ?metabolome rdfs:label ?metabolomeName .\n    # Optional: Filter for metabolomes specifically related to the given taxon\n    #OPTIONAL { ?metabolome up:organism ?taxon . } #If there is an organism property\n  }\n}",
    "predicted_endpoint": "https://sparql.uniprot.org/sparql",
    "predicted_endpoint_equal_to_target_endpoint": false,
    "predicted_endpoint_in_federates_with": true,
    "predicted_endpoint_or_federated_endpoint": true,
    "run_id_langsmith": "3eef1d8a-2593-4d33-b978-4850f2b29473",
    "evaluation_timestamp": "2025-04-25T17:59:26.464287",
    "question_understanding_tokens": 241,
    "question_understanding_completion_tokens": 22,
    "question_understanding_total_tokens": 263,
    "sparql_construction_prompt_tokens": 1300,
    "sparql_construction_completion_tokens": 0,
    "sparql_construction_total_tokens": 1300,
    "is_valid_sparql": true,
    "sparql_syntax_error": "syntactically correct",
    "ground_truth_query_result_is_empty": false,
    "result_eval_f1_score": 0.0,
    "result_eval_precision": 0.0,
    "result_eval_recall": 0.0,
    "error_occured_at_endpoint": false,
    "predicted_query_result_is_empty": true,
    "error_occured_at_endpoint_message": "no error, but empty result"
  },
  {
    "resource": "https://sparql.rhea-db.org/.well-known/sparql-examples/20_search_chemical_names_in_japanese",
    "natural_language_question": "Search for Chemical names starting in Japanese, translated to english using allie",
    "ground_truth_query": "PREFIX oboInOwl: <http://www.geneontology.org/formats/oboInOwl#>\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\n\nSELECT\n*\nWHERE {\nSERVICE <https://data.allie.dbcls.jp/sparql>{\n        ?x rdfs:label \"1,2,4-トリクロロベンゼン\"@ja ;\n            rdfs:label ?englishLabel .\n        FILTER(lang(?englishLabel) = \"en\")\n    }\n  BIND(STR(?englishLabel) AS ?englishLabelStr)\n  ?chebi rdfs:label|oboInOwl:hasSynonym ?englishLabelStr .\n}",
    "target_endpoint": "https://sparql.rhea-db.org/sparql/",
    "federates_with": [
      "https://data.allie.dbcls.jp/sparql"
    ],
    "endpoint_set": "Rhea",
    "file_path": "Rhea/20_search_chemical_names_in_japanese.ttl",
    "predicted_query": "# https://sparql.uniprot.org/sparql\n# Federated SPARQL query to search for chemical names starting with \"Japanese\" and translate them to English using Allie.\n# Note: This query assumes that there is a service or function named \"Allie\" that can translate chemical names.\n#       Since there is no direct translation service available in the provided endpoints, this query is based on a hypothetical scenario.\n\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX chebi: <http://purl.obolibrary.org/obo/CHEBI_>\n\nSELECT ?chemicalNameEn\nWHERE {\n  # Query Rhea DB to find chemical entities with names starting with \"Japanese\"\n  SERVICE <https://sparql.rhea-db.org/sparql> {\n    ?chemical a chebi:CHEBI_24431 .  # Assuming CHEBI_24431 represents chemical entities\n    ?chemical rdfs:label ?chemicalName .\n    FILTER STRSTARTS(LCASE(?chemicalName), \"japanese\")\n  }\n  \n  # Hypothetical translation service (Allie) to translate the chemical name to English\n  # Replace this with the actual service call if available\n  BIND ( bif:llm_translation (?chemicalName, \"en\") AS ?chemicalNameEn ) # Hypothetical translation to English\n  \n  # Optional: Filter out any untranslated names (if the translation service returns null)\n  FILTER (BOUND(?chemicalNameEn))\n}",
    "predicted_endpoint": "https://sparql.uniprot.org/sparql",
    "predicted_endpoint_equal_to_target_endpoint": false,
    "predicted_endpoint_in_federates_with": false,
    "predicted_endpoint_or_federated_endpoint": false,
    "run_id_langsmith": "ac9ecae1-03ac-465f-a1a0-0784e73bc2e2",
    "evaluation_timestamp": "2025-04-25T17:59:42.179188",
    "question_understanding_tokens": 246,
    "question_understanding_completion_tokens": 27,
    "question_understanding_total_tokens": 273,
    "sparql_construction_prompt_tokens": 1474,
    "sparql_construction_completion_tokens": 342,
    "sparql_construction_total_tokens": 1816,
    "is_valid_sparql": false,
    "sparql_syntax_error": "Line 20, column 10: Unresolved prefixed name: bif:llm_translation",
    "ground_truth_query_result_is_empty": null,
    "result_eval_f1_score": 0.0,
    "result_eval_precision": 0.0,
    "result_eval_recall": 0.0,
    "error_occured_at_endpoint": false,
    "predicted_query_result_is_empty": true,
    "error_occured_at_endpoint_message": "syntactically not correct"
  },
  {
    "resource": "https://sparql.rhea-db.org/.well-known/sparql-examples/117_Retrieve_parent_reactions_and_their_catalyzing_enzymes_for_a_metabolite_that_is_not_directly_involved_in_a_reaction",
    "natural_language_question": "Retrieve parent reactions (and their catalyzing enzymes) for a metabolite that is not directly involved in a reaction (ex: CHEBI:83137).",
    "ground_truth_query": "PREFIX CHEBI: <http://purl.obolibrary.org/obo/CHEBI_>\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX rh:<http://rdf.rhea-db.org/>\nPREFIX ec:<http://purl.uniprot.org/enzyme/>\nPREFIX up:<http://purl.uniprot.org/core/>\nPREFIX taxon:<http://purl.uniprot.org/taxonomy/>\nPREFIX keywords:<http://purl.uniprot.org/keywords/>\n\nSELECT\n  ?chebi\n  ?ecNumber\n  (count(?protein) as ?proteinCount)\n  ?reaction\n  ?equation\nWHERE {\n  ?reaction rdfs:subClassOf rh:Reaction .\n  ?reaction rh:status rh:Approved .\n  ?reaction rh:equation ?equation .\n  ?reaction rh:ec ?ecNumber .\n  ?reaction rh:side ?reactionSide .\n  ?reactionSide rh:contains ?participant .\n  ?participant rh:compound ?compound .\n  ?compound rh:chebi ?chebi .\n  CHEBI:83137 rdfs:subClassOf+ ?chebi.\n\n  SERVICE <https://sparql.uniprot.org/sparql> {\n  ?protein a up:Protein .\n  ?protein up:reviewed true .\n    {?protein up:enzyme ?ecNumber}\n  UNION\n    {?protein up:domain/up:enzyme ?ecNumber}\n  UNION\n    {?protein up:component/up:enzyme ?ecNumber} .\n  }\n} \nGROUP BY ?chebi ?ecNumber ?reaction ?equation",
    "target_endpoint": "https://sparql.rhea-db.org/sparql",
    "federates_with": [
      "https://sparql.uniprot.org/sparql"
    ],
    "endpoint_set": "Rhea",
    "file_path": "Rhea/117_Retrieve_parent_reactions_and_their_catalyzing_enzymes_for_a_metabolite_that_is_not_directly_involved_in_a_reaction.ttl",
    "predicted_query": "# https://sparql.rhea-db.org/sparql\n# Federated query to find parent reactions and catalyzing enzymes for a metabolite not directly involved in a reaction.\nPREFIX rhea: <http://rdf.rhea-db.org/>\nPREFIX chebi: <http://purl.obolibrary.org/obo/CHEBI_>\n\nSELECT DISTINCT ?reaction ?enzyme\nWHERE {\n  # Find reactions that have CHEBI:83137 as a participant\n  SERVICE <https://sparql.rhea-db.org/sparql> {\n    VALUES ?chebi { chebi:83137 } # Define the metabolite of interest\n\n    ?reaction rhea: Rhea_has_participant ?chebi .\n    \n    # Optional: Retrieve the enzyme catalyzing the reaction.  This assumes a direct link between the reaction and the enzyme.\n    OPTIONAL {\n      ?reaction rhea: Rhea_has_proteindomain ?enzyme .  # Assuming rhea:Rhea_has_proteindomain links to enzymes.  Adjust if needed.\n    }\n  }\n}",
    "predicted_endpoint": "https://sparql.rhea-db.org/sparql",
    "predicted_endpoint_equal_to_target_endpoint": true,
    "predicted_endpoint_in_federates_with": false,
    "predicted_endpoint_or_federated_endpoint": true,
    "run_id_langsmith": "bd6a73d1-4223-48c4-8992-f5e1f9a808a7",
    "evaluation_timestamp": "2025-04-25T17:59:53.725044",
    "question_understanding_tokens": 266,
    "question_understanding_completion_tokens": 42,
    "question_understanding_total_tokens": 308,
    "sparql_construction_prompt_tokens": 2480,
    "sparql_construction_completion_tokens": 247,
    "sparql_construction_total_tokens": 2727,
    "is_valid_sparql": false,
    "sparql_syntax_error": "Lexical error at line 12, column 41.  Encountered: '32' (32), after prefix \"Rhea_has_participant\"",
    "ground_truth_query_result_is_empty": null,
    "result_eval_f1_score": 0.0,
    "result_eval_precision": 0.0,
    "result_eval_recall": 0.0,
    "error_occured_at_endpoint": false,
    "predicted_query_result_is_empty": true,
    "error_occured_at_endpoint_message": "syntactically not correct"
  },
  {
    "resource": "https://sparql.rhea-db.org/.well-known/sparql-examples/18",
    "natural_language_question": "Use <a href=\"https://idsm.elixir-czech.cz/sparql\">IDSM Sachem</a> to find ChEBIs with a a <a href=\"https://www.ebi.ac.uk/chebi/searchId.do?chebiId=CHEBI:35516\">Cholestane</a> skeleton (in SMILES). Then match returned ChEBIs to Rhea undirected reactions.",
    "ground_truth_query": "PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX rh: <http://rdf.rhea-db.org/>\nPREFIX sachem: <http://bioinfo.uochb.cas.cz/rdf/v1.0/sachem#>\n\n\nSELECT \n  ?rhea \n  ?chebi\nWHERE {\n  SERVICE <https://idsm.elixir-czech.cz/sparql/endpoint/chebi> {\n    ?chebi sachem:substructureSearch [\n        sachem:query \"[C@]12(CCC3CCCC[C@]3(C)[C@@]1([H])CC[C@]1(C)[C@@]([H])([C@@](C)([H])CCCC(C)C)CC[C@@]21[H])[H]\" ].\n  }\n  ?rhea rh:side/rh:contains/rh:compound/rdfs:subClassOf ?chebi .\n}",
    "target_endpoint": "https://sparql.rhea-db.org/sparql",
    "federates_with": [
      "https://idsm.elixir-czech.cz/sparql/endpoint/chebi"
    ],
    "endpoint_set": "Rhea",
    "file_path": "Rhea/18.ttl",
    "predicted_query": "# https://sparql.rhea-db.org/sparql\n# Prefixes for commonly used namespaces\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX chebi: <http://purl.obolibrary.org/obo/CHEBI_>\nPREFIX rh: <http://rdf.rhea-db.org/>\n\n# Select the Rhea undirected reaction identifiers\nSELECT DISTINCT ?reaction\n\nWHERE {\n  # Subquery to find ChEBI identifiers that have a Cholestane skeleton (CHEBI:35516)\n  # This part assumes that the IDSM Sachem endpoint provides SMILES-based substructure search capabilities.\n  # Since we don't have access to IDSM Sachem, we'll skip this part and directly use ChEBI endpoint.\n  # SERVICE <https://idsm.elixir-czech.cz/sparql> {\n  #   ?chebi a chebi:Chemical_entity .\n  #   # Assuming a property like 'sachem:smiles' exists and supports substructure search\n  #   ?chebi sachem:smiles ?smiles .\n  #   FILTER (CONTAINS(?smiles, \"Cholestane skeleton SMILES\")) # Replace with actual SMILES pattern\n  # }\n\n  # Instead of querying IDSM Sachem, we will query ChEBI directly for compounds containing \"Cholestane\" in their name.\n  # This is a simplification due to the lack of access to IDSM Sachem.\n  SERVICE <https://sparql.rhea-db.org/sparql> {\n    ?compound rdfs:subClassOf* chebi:35516 . # Find ChEBI compounds that are subclasses of Cholestane skeleton (CHEBI:35516)\n    ?reaction rh: Rhea_has_reactant ?compound . # Find Rhea reactions that have the ChEBI compound as a reactant.\n  }\n}",
    "predicted_endpoint": "https://sparql.rhea-db.org/sparql",
    "predicted_endpoint_equal_to_target_endpoint": true,
    "predicted_endpoint_in_federates_with": false,
    "predicted_endpoint_or_federated_endpoint": true,
    "run_id_langsmith": "62be5095-556b-4192-9163-109b0e30bb56",
    "evaluation_timestamp": "2025-04-25T18:00:17.608711",
    "question_understanding_tokens": 328,
    "question_understanding_completion_tokens": 52,
    "question_understanding_total_tokens": 380,
    "sparql_construction_prompt_tokens": 2563,
    "sparql_construction_completion_tokens": 443,
    "sparql_construction_total_tokens": 3006,
    "is_valid_sparql": false,
    "sparql_syntax_error": "Lexical error at line 25, column 36.  Encountered: '32' (32), after prefix \"Rhea_has_reactant\"",
    "ground_truth_query_result_is_empty": null,
    "result_eval_f1_score": 0.0,
    "result_eval_precision": 0.0,
    "result_eval_recall": 0.0,
    "error_occured_at_endpoint": false,
    "predicted_query_result_is_empty": true,
    "error_occured_at_endpoint_message": "syntactically not correct"
  },
  {
    "resource": "https://sparql.rhea-db.org/.well-known/sparql-examples/115_Retrieve_the_set_of_metabolites_involved_in_reactions_catalyzed_by_human_genes_HUMAN_reference_proteome",
    "natural_language_question": "Retrieve the set of metabolites involved in reactions catalyzed by human genes (HUMAN reference proteome)",
    "ground_truth_query": "\nPREFIX rh:<http://rdf.rhea-db.org/>\nPREFIX taxon:<http://purl.uniprot.org/taxonomy/>\nPREFIX ec:<http://purl.uniprot.org/enzyme/>\nPREFIX rdfs:<http://www.w3.org/2000/01/rdf-schema#>\nPREFIX up:<http://purl.uniprot.org/core/>\nPREFIX keywords:<http://purl.uniprot.org/keywords/>\n\nSELECT\n  ?chebi\n  ?reaction\n  ?ecNumber\n  ?protein\n  ?ensemblTranscript\n  ?ensemblGene\nWHERE {\n  SERVICE <https://sparql.uniprot.org/sparql> {\n    ?protein a up:Protein .\n    ?protein up:reviewed true .\n    ?protein up:organism taxon:9606 .\n    ?protein up:classifiedWith keywords:1185 .\n\n    ?protein rdfs:seeAlso ?ensemblTranscript .\n    ?ensemblTranscript a up:Transcript_Resource .\n    ?ensemblTranscript up:database <http://purl.uniprot.org/database/Ensembl> .\n    ?ensemblTranscript up:transcribedFrom ?ensemblGene .\n\n      {?protein up:enzyme ?ecNumber .}\n    UNION\n      {?protein up:domain/up:enzyme ?ecNumber .}\n    UNION\n      {?protein up:component/up:enzyme ?ecNumber .}\n  }\n\n  ?reaction rdfs:subClassOf rh:Reaction .\n  ?reaction rh:status rh:Approved .\n  ?reaction rh:ec ?ecNumber .\n  ?reaction rh:side ?reactionSide .\n  ?reactionSide rh:contains ?participant .\n  ?participant rh:compound ?compound .\n  ?compound rh:chebi ?chebi . # only considering small molecules participants\n}",
    "target_endpoint": "https://sparql.rhea-db.org/sparql",
    "federates_with": [
      "https://sparql.uniprot.org/sparql"
    ],
    "endpoint_set": "Rhea",
    "file_path": "Rhea/115_Retrieve_the_set_of_metabolites_involved_in_reactions_catalyzed_by_human_genes_HUMAN_reference_proteome.ttl",
    "predicted_query": "# https://sparql.rhea-db.org/sparql\n# Prefixes for commonly used namespaces\nPREFIX rhea: <http://rdf.rhea-db.org/>\nPREFIX chebi: <http://purl.obolibrary.org/obo/CHEBI_>\nPREFIX uniprot: <http://purl.uniprot.org/core/>\nPREFIX up: <http://purl.uniprot.org/core/>\n\n# Select the distinct metabolites (ChEBI identifiers)\nSELECT DISTINCT ?metabolite\nWHERE {\n  # Subquery to find UniProt entries for human genes\n  {\n    SERVICE <https://sparql.uniprot.org/sparql> {\n      SELECT DISTINCT ?gene\n      WHERE {\n        ?gene a uniprot:Protein .\n        ?gene up:organism <http://purl.uniprot.org/taxonomy/9606> .  # Filter for Homo sapiens (human)\n      }\n    }\n  }\n\n  # Find Rhea reactions associated with these human genes\n  SERVICE <https://sparql.rhea-db.org/sparql> {\n    ?reaction rhea:enzyme ?gene .  # Link reaction to gene via enzyme property\n    ?reaction rhea:hasParticipant ?participant . # A reaction has participants\n    ?participant chebi:CHEBI_ID ?metabolite . # Reaction participants are metabolites\n  }\n}",
    "predicted_endpoint": "https://sparql.rhea-db.org/sparql",
    "predicted_endpoint_equal_to_target_endpoint": true,
    "predicted_endpoint_in_federates_with": false,
    "predicted_endpoint_or_federated_endpoint": true,
    "run_id_langsmith": "73b89078-3bfc-401c-acdf-20f834dbdcd0",
    "evaluation_timestamp": "2025-04-25T18:00:29.677071",
    "question_understanding_tokens": 248,
    "question_understanding_completion_tokens": 28,
    "question_understanding_total_tokens": 276,
    "sparql_construction_prompt_tokens": 2395,
    "sparql_construction_completion_tokens": 311,
    "sparql_construction_total_tokens": 2706,
    "is_valid_sparql": true,
    "sparql_syntax_error": "syntactically correct",
    "ground_truth_query_result_is_empty": false,
    "result_eval_f1_score": 0.0,
    "result_eval_precision": 0.0,
    "result_eval_recall": 0.0,
    "error_occured_at_endpoint": true,
    "predicted_query_result_is_empty": true,
    "error_occured_at_endpoint_message": "The read operation timed out"
  }
]