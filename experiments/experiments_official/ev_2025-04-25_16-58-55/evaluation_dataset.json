[
  {
    "resource": "https://sparql.swisslipids.org/.well-known/sparql-examples/16",
    "natural_language_question": "For a given lipid (SWISSLIPID:000399814, Ceramide), return a list of all enzymes in UniProtKB/Swiss-Prot annotated to catalyze reactions involving that lipid.\nThis query does not consider the hierarchy: it looks for reactions and enzymes only for the specified lipid.",
    "ground_truth_query": "PREFIX SWISSLIPID: <https://swisslipids.org/rdf/SLM_>\nPREFIX owl: <http://www.w3.org/2002/07/owl#>\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX rh: <http://rdf.rhea-db.org/>\nPREFIX up: <http://purl.uniprot.org/core/>\n\n# Example 16\nSELECT ?startId ?startName ?uniprot\nWHERE\n{\n  # SwissLipids query (list of) identifier(s)\n  VALUES ?startId { SWISSLIPID:000399814 }\n  # name\n  ?startId rdfs:label ?startName .\n  # ChEBI x-ref\n  ?startId owl:equivalentClass ?chebi .\n  # federated query to Rhea\n  SERVICE <https://sparql.rhea-db.org/sparql> {\n  \t?rhea rh:side/rh:contains/rh:compound/rh:chebi ?chebi .\n  }    \n  # federated query to UniProt\n  SERVICE <https://sparql.uniprot.org/sparql> {\n    ?uniprot up:reviewed true .\n    ?uniprot up:annotation/up:catalyticActivity/up:catalyzedReaction ?rhea .\n  }\n} \nORDER BY ?startId",
    "target_endpoint": "https://sparql.swisslipids.org/sparql/",
    "federates_with": [
      "https://sparql.uniprot.org/sparql",
      "https://sparql.rhea-db.org/sparql"
    ],
    "endpoint_set": "SwissLipids",
    "file_path": "SwissLipids/16.ttl",
    "predicted_query": "# https://sparql.swisslipids.org/sparql/\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX sl: <http://swisslipids.org/rdf#>\n\nSELECT DISTINCT ?enzyme ?enzymeName\nWHERE {\n  # Find reactions associated with the given lipid in SwissLipids\n  SERVICE <https://sparql.swisslipids.org/sparql/> {\n    BIND(sl:SWISSLIPID_000399814 AS ?lipid) # Bind the lipid identifier\n    ?reaction sl:refersToLipid ?lipid .\n  }\n\n  # Find enzymes that catalyze those reactions in Rhea\n  SERVICE <https://sparql.rhea-db.org/sparql> {\n    ?rheaReaction rdfs:sameAs ?reaction . # Link to Rhea using rdfs:sameAs\n    ?rheaReaction rhea:equation ?equation .\n    ?enzyme rhea:catalyzed ?rheaReaction .\n  }\n\n  # Retrieve enzyme details from UniProt\n  SERVICE <https://sparql.uniprot.org/sparql> {\n    ?enzyme uniprot:enzyme ?enzymeName . # Get enzyme name\n  }\n}",
    "predicted_endpoint": "https://sparql.swisslipids.org/sparql/",
    "predicted_endpoint_equal_to_target_endpoint": true,
    "predicted_endpoint_in_federates_with": false,
    "predicted_endpoint_or_federated_endpoint": true,
    "run_id_langsmith": "525a10c6-d1dc-4181-b4e5-c6c8b630c4c9",
    "evaluation_timestamp": "2025-04-25T16:59:31.467080",
    "question_understanding_tokens": 300,
    "question_understanding_completion_tokens": 42,
    "question_understanding_total_tokens": 342,
    "sparql_construction_prompt_tokens": 2900,
    "sparql_construction_completion_tokens": 450,
    "sparql_construction_total_tokens": 3350,
    "is_valid_sparql": false,
    "sparql_syntax_error": "Line 16, column 19: Unresolved prefixed name: rhea:equation",
    "result_eval_f1_score": 0.0,
    "result_eval_precision": 0.0,
    "result_eval_recall": 0.0,
    "error_occured_at_endpoint": false,
    "predicted_query_result_is_empty": true,
    "error_occured_at_endpoint_message": "syntactically not correct"
  },
  {
    "resource": "https://sparql.swisslipids.org/.well-known/sparql-examples/6",
    "natural_language_question": "For a given lipid (SWISSLIPID:000399814, Ceramide), return a list of all corresponding reactions (Rhea IDs and equation), as well as their enzymes as annotated in UniProtKB/Swiss-Prot) enzymes themselves (ID and protein name).\nThis query does not consider the hierarchy: it looks for reactions and enzymes only for the specified lipid.",
    "ground_truth_query": "PREFIX SWISSLIPID: <https://swisslipids.org/rdf/SLM_>\nPREFIX owl: <http://www.w3.org/2002/07/owl#>\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX rh: <http://rdf.rhea-db.org/>\nPREFIX up: <http://purl.uniprot.org/core/>\n\n# Example 6\nSELECT ?startId ?startName ?chebi ?rhea ?rheaEquation ?uniprot ?uniprotName\nWHERE\n{\n  # SwissLipids query (list of) identifier(s)\n  VALUES ?startId { SWISSLIPID:000399814 }\n  # name\n  ?startId rdfs:label ?startName .\n  # ChEBI x-ref\n  ?startId owl:equivalentClass ?chebi .\n  # federated query to Rhea\n  SERVICE <https://sparql.rhea-db.org/sparql> {\n  \t?rhea rh:equation ?rheaEquation .\n  \t?rhea rh:side/rh:contains/rh:compound/rh:chebi ?chebi .\n  }    \n  # federated query to UniProt\n  SERVICE <https://sparql.uniprot.org/sparql> {\n    ?uniprot up:reviewed true .\n    ?uniprot up:recommendedName/up:fullName ?uniprotName .\n    ?uniprot up:annotation/up:catalyticActivity/up:catalyzedReaction ?rhea .\n  }\n} \nORDER BY ?startId",
    "target_endpoint": "https://sparql.swisslipids.org/sparql/",
    "federates_with": [
      "https://sparql.uniprot.org/sparql",
      "https://sparql.rhea-db.org/sparql"
    ],
    "endpoint_set": "SwissLipids",
    "file_path": "SwissLipids/6.ttl",
    "predicted_query": "# https://sparql.swisslipids.org/sparql/\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>\nPREFIX sl: <http://www.swisslipids.org/rdf/SwissLipids#>\n\nSELECT DISTINCT ?rheaID ?equation ?uniprotID ?proteinName\nWHERE {\n  # Query SwissLipids for reactions associated with the given lipid\n  VALUES ?lipid { sl:SWISSLIPID_000399814 } # SWISSLIPID:000399814 (Ceramide)\n  ?lipid sl:participates_in ?reaction .\n  ?reaction rdf:type sl:Reaction .\n  ?reaction sl:rhea_id ?rheaID .\n\n  # Query Rhea DB for the reaction equation\n  SERVICE <https://sparql.rhea-db.org/sparql> {\n    ?rheaURI rdfs:label ?equation .\n    FILTER(STR(?rheaURI) = STR(?rheaID)) # rheaID is already a URI\n  }\n\n  # Query UniProt for enzymes associated with the reaction\n  SERVICE <https://sparql.uniprot.org/sparql> {\n    ?uniprotID rdfs:seeAlso ?rheaID ; # Link UniProt entry to Rhea ID\n               rdf:type <http://purl.uniprot.org/core/Protein> ; # Ensure it's a protein\n               rdfs:label ?proteinName . # Get the protein name\n\n  }\n}",
    "predicted_endpoint": "https://sparql.swisslipids.org/sparql/",
    "predicted_endpoint_equal_to_target_endpoint": true,
    "predicted_endpoint_in_federates_with": false,
    "predicted_endpoint_or_federated_endpoint": true,
    "run_id_langsmith": "75a87eaf-2134-45c7-b624-1213a8ff0038",
    "evaluation_timestamp": "2025-04-25T17:00:08.088902",
    "question_understanding_tokens": 311,
    "question_understanding_completion_tokens": 64,
    "question_understanding_total_tokens": 375,
    "sparql_construction_prompt_tokens": 3330,
    "sparql_construction_completion_tokens": 610,
    "sparql_construction_total_tokens": 3940,
    "is_valid_sparql": true,
    "sparql_syntax_error": "syntactically correct",
    "result_eval_f1_score": 0.0,
    "result_eval_precision": 0.0,
    "result_eval_recall": 0.0,
    "error_occured_at_endpoint": false,
    "predicted_query_result_is_empty": true,
    "error_occured_at_endpoint_message": "no error, but empty result"
  },
  {
    "resource": "https://sparql.swisslipids.org/.well-known/sparql-examples/5",
    "natural_language_question": "For a given lipid (SWISSLIPID:000399814, Ceramide), return a list of all corresponding reactions (Rhea IDs and equation).\nThis query does consider the hierarchy: it looks for reactions involving the specified lipid and/or its more specific forms.",
    "ground_truth_query": "PREFIX SWISSLIPID: <https://swisslipids.org/rdf/SLM_>\nPREFIX owl: <http://www.w3.org/2002/07/owl#>\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX rh: <http://rdf.rhea-db.org/>\n\n# Example 5\nSELECT ?startId ?startName ?id ?name ?chebi ?rhea ?rheaEquation \nWHERE\n{\n  # SwissLipids query (list of) identifier(s)\n  VALUES ?startId { SWISSLIPID:000399814 }\n  # name\n  ?startId rdfs:label ?startName .\n  # Retrieve children lipids \n  ?id rdfs:subClassOf* ?startId .\n  ?id rdfs:label ?name .\n  # ChEBI x-ref\n  ?id owl:equivalentClass ?chebi .\n  # federated query to Rhea\n  SERVICE <https://sparql.rhea-db.org/sparql> {\n  \t?rhea rh:equation ?rheaEquation .\n  \t?rhea rh:side/rh:contains/rh:compound/rh:chebi ?chebi .\n  }    \n} \nORDER BY  ?startId ?id",
    "target_endpoint": "https://sparql.swisslipids.org/sparql/",
    "federates_with": [
      "https://sparql.rhea-db.org/sparql"
    ],
    "endpoint_set": "SwissLipids",
    "file_path": "SwissLipids/5.ttl",
    "predicted_query": "# https://sparql.swisslipids.org/sparql/\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>\nPREFIX sl: <http://www.swisslipids.org/rdf#>\n\nSELECT DISTINCT ?rheaId ?equation\nWHERE {\n  # Start with the given lipid and its more specific forms (subclasses)\n  VALUES (?lipid) { (sl:SWISSLIPID_000399814) }  # SWISSLIPID:000399814\n\n  # Find reactions associated with the lipid or its subclasses\n  ?reaction sl:refLipid ?lipid .\n  ?reaction sl:rheaId ?rheaId .\n\n  # Query Rhea DB for the reaction equation\n  SERVICE <https://sparql.rhea-db.org/sparql> {\n    ?rheaUri rdfs:label ?equation .\n    FILTER(STR(?rheaUri) = STR(?rheaId))\n  }\n}",
    "predicted_endpoint": "https://sparql.swisslipids.org/sparql/",
    "predicted_endpoint_equal_to_target_endpoint": true,
    "predicted_endpoint_in_federates_with": false,
    "predicted_endpoint_or_federated_endpoint": true,
    "run_id_langsmith": "3b2930d0-a85b-4c5c-a1aa-12fbdb62f199",
    "evaluation_timestamp": "2025-04-25T17:00:21.538414",
    "question_understanding_tokens": 290,
    "question_understanding_completion_tokens": 66,
    "question_understanding_total_tokens": 356,
    "sparql_construction_prompt_tokens": 2144,
    "sparql_construction_completion_tokens": 0,
    "sparql_construction_total_tokens": 2144,
    "is_valid_sparql": true,
    "sparql_syntax_error": "syntactically correct",
    "result_eval_f1_score": 0.0,
    "result_eval_precision": 0.0,
    "result_eval_recall": 0.0,
    "error_occured_at_endpoint": false,
    "predicted_query_result_is_empty": true,
    "error_occured_at_endpoint_message": "no error, but empty result"
  },
  {
    "resource": "https://sparql.swisslipids.org/.well-known/sparql-examples/34",
    "natural_language_question": "Lipids affected by human enzymes",
    "ground_truth_query": "PREFIX owl: <http://www.w3.org/2002/07/owl#>\nPREFIX rh: <http://rdf.rhea-db.org/>\nPREFIX taxon: <http://purl.uniprot.org/taxonomy/>\nPREFIX up: <http://purl.uniprot.org/core/>\n\nSELECT ?swisslipid  {\n  ?swisslipid owl:equivalentClass ?chebi .\n  SERVICE <https://sparql.rhea-db.org/sparql> {\n    ?rhea rh:side/rh:contains/rh:compound ?compound .\n\t?compound (rh:chebi|(rh:reactivePart/rh:chebi)|(rh:underlyingChebi/rh:chebi)) ?metabolite . \n  }\n  SERVICE <https://sparql.uniprot.org/sparql> {\n    ?catalyticActivityAnnotation up:catalyticActivity/up:catalyzedReaction ?rhea .\n    ?protein up:annotation ?catalyticActivityAnnotation ;\n             up:organism taxon:9606 .\n  }\n}\nLIMIT 1",
    "target_endpoint": "https://sparql.swisslipids.org/sparql/",
    "federates_with": [
      "https://sparql.uniprot.org/sparql",
      "https://sparql.rhea-db.org/sparql"
    ],
    "endpoint_set": "SwissLipids",
    "file_path": "SwissLipids/34.ttl",
    "predicted_query": "# https://sparql.uniprot.org/sparql\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX up: <http://purl.uniprot.org/core/>\nPREFIX taxon: <http://purl.uniprot.org/taxonomy/>\n\nSELECT DISTINCT ?lipidName ?enzymeName\nWHERE {\n  # Find human enzymes in UniProt\n  SERVICE <https://sparql.uniprot.org/sparql> {\n    ?enzyme a up:Protein .\n    ?enzyme up:organism taxon:9606 .  # 9606 is the NCBI taxonomy ID for Homo sapiens\n    ?enzyme rdfs:label ?enzymeName .\n  }\n\n  # Find lipids in SwissLipids and link them to enzymes (hypothetically through Rhea or direct interaction)\n  SERVICE <https://sparql.swisslipids.org/sparql/> {\n    ?lipid a <http://www.swisslipids.org/rdf/SwissLipids#Lipid> .\n    ?lipid rdfs:label ?lipidName .\n    # This is a placeholder.  We need a way to link the lipid to the enzyme.\n    # This might involve an intermediate property indicating that the enzyme\n    # acts on the lipid, or that the lipid is a substrate/product of a reaction\n    # catalyzed by the enzyme.  Without a specific property, this is hard to do.\n    # Example of a potential link (replace with actual property if available):\n    # ?enzyme <someProperty> ?lipid .\n    FILTER EXISTS {  # Ensure there's some kind of link (replace with actual link)\n       # This is a dummy filter to ensure the query doesn't return everything.\n       # Replace with a real link if one exists in SwissLipids.\n       # Example: ?lipid <someInteractionProperty> ?somethingRelatedToEnzyme .\n    }\n  }\n}",
    "predicted_endpoint": "https://sparql.uniprot.org/sparql",
    "predicted_endpoint_equal_to_target_endpoint": false,
    "predicted_endpoint_in_federates_with": true,
    "predicted_endpoint_or_federated_endpoint": true,
    "run_id_langsmith": "206836c6-4fa9-40ad-8e87-ddf77c3a67dc",
    "evaluation_timestamp": "2025-04-25T17:00:43.726204",
    "question_understanding_tokens": 238,
    "question_understanding_completion_tokens": 22,
    "question_understanding_total_tokens": 260,
    "sparql_construction_prompt_tokens": 1914,
    "sparql_construction_completion_tokens": 614,
    "sparql_construction_total_tokens": 2528,
    "is_valid_sparql": true,
    "sparql_syntax_error": "syntactically correct",
    "result_eval_f1_score": 0.0,
    "result_eval_precision": 0.0,
    "result_eval_recall": 0.0,
    "error_occured_at_endpoint": true,
    "predicted_query_result_is_empty": true,
    "error_occured_at_endpoint_message": "QueryBadFormed: A bad request has been sent to the endpoint: probably the SPARQL query is badly formed."
  },
  {
    "resource": "https://sparql.uniprot.org/.well-known/sparql-examples/118_biosodafrontend_rat_brain_human_cancer",
    "natural_language_question": "What are the Homo sapiens genes associated with cancer and their orthologs expressed in the Rattus norvegicus brain?",
    "ground_truth_query": "PREFIX up:<http://purl.uniprot.org/core/>\nPREFIX taxon:<http://purl.uniprot.org/taxonomy/>\nPREFIX rdfs:<http://www.w3.org/2000/01/rdf-schema#>\nPREFIX orth:<http://purl.org/net/orth#>\nPREFIX dcterms:<http://purl.org/dc/terms/>\nPREFIX obo:<http://purl.obolibrary.org/obo/>\nPREFIX lscr:<http://purl.org/lscr#>\nPREFIX genex:<http://purl.org/genex#>\nPREFIX sio: <http://semanticscience.org/resource/>\nSELECT ?gene ?orthologous_protein2 WHERE {\n  {\n    SELECT ?protein1 WHERE {\n      ?protein1 a up:Protein;\n        up:organism/up:scientificName 'Homo sapiens' ;\n        up:annotation ?annotation .\n      ?annotation rdfs:comment ?annotation_text.\n      ?annotation a up:Disease_Annotation .\n      FILTER CONTAINS (?annotation_text, \"cancer\")\n    }\n  }\n  SERVICE <https://sparql.omabrowser.org/sparql/> {\n    SELECT ?orthologous_protein2 ?protein1 ?gene WHERE {\n      ?protein_OMA a orth:Protein .\n      ?orthologous_protein2 a orth:Protein .\n      ?cluster a orth:OrthologsCluster .\n      ?cluster orth:hasHomologousMember ?node1 .\n      ?cluster orth:hasHomologousMember ?node2 .\n      ?node2 orth:hasHomologousMember* ?protein_OMA .\n      ?node1 orth:hasHomologousMember* ?orthologous_protein2 \n      .?orthologous_protein2 orth:organism/obo:RO_0002162/up:scientificName 'Rattus norvegicus' .\n      ?orthologous_protein2 sio:SIO_010079 ?gene .\n      ?protein_OMA lscr:xrefUniprot ?protein1 .\n      FILTER(?node1 != ?node2)\n    }\n  }\n  SERVICE <https://www.bgee.org/sparql/> {\n    ?gene genex:isExpressedIn ?anatEntity .\n    ?anatEntity rdfs:label 'brain' .\n    ?gene orth:organism ?org . \n    ?org obo:RO_0002162 taxon:10116 .\n  }\n}",
    "target_endpoint": "https://sparql.uniprot.org/sparql",
    "federates_with": [
      "https://sparql.omabrowser.org/sparql/",
      "https://www.bgee.org/sparql/"
    ],
    "endpoint_set": "Uniprot",
    "file_path": "UniProt/118_biosodafrontend_rat_brain_human_cancer.ttl",
    "predicted_query": "# https://sparql.uniprot.org/sparql\nPREFIX up: <http://purl.uniprot.org/core/>\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX taxon: <http://purl.uniprot.org/taxonomy/>\n\nSELECT DISTINCT ?humanGene ?ratOrtholog\nWHERE {\n  # Find human genes associated with cancer\n  ?disease a up:Disease .\n  ?disease rdfs:label ?diseaseName .\n  FILTER (CONTAINS(lcase(?diseaseName), \"cancer\")) . # Filter for cancer-related diseases\n\n  ?humanGene up:annotation ?disease .\n  ?humanGene up:organism taxon:9606 . # Homo sapiens\n\n  # Find orthologs in Rattus norvegicus\n  ?ratOrtholog up:orthologOf ?humanGene .\n  ?ratOrtholog up:organism taxon:10116 . # Rattus norvegicus\n\n  # No expression data available in UniProt, so we cannot filter for brain expression.\n  # If expression data were available, we would add a triple like:\n  # ?ratOrtholog up:expression ?brainExpression .\n  # ?brainExpression up:tissue \"brain\" .\n}",
    "predicted_endpoint": "https://sparql.uniprot.org/sparql",
    "predicted_endpoint_equal_to_target_endpoint": true,
    "predicted_endpoint_in_federates_with": false,
    "predicted_endpoint_or_federated_endpoint": true,
    "run_id_langsmith": "04e8f648-174d-4d29-9519-4fc425dd4d1f",
    "evaluation_timestamp": "2025-04-25T17:01:12.188283",
    "question_understanding_tokens": 258,
    "question_understanding_completion_tokens": 47,
    "question_understanding_total_tokens": 305,
    "sparql_construction_prompt_tokens": 2710,
    "sparql_construction_completion_tokens": 0,
    "sparql_construction_total_tokens": 2710,
    "is_valid_sparql": true,
    "sparql_syntax_error": "syntactically correct",
    "result_eval_f1_score": 0.0,
    "result_eval_precision": 0.0,
    "result_eval_recall": 0.0,
    "error_occured_at_endpoint": false,
    "predicted_query_result_is_empty": true,
    "error_occured_at_endpoint_message": "no error, but empty result"
  },
  {
    "resource": "https://sparql.uniprot.org/.well-known/sparql-examples/51",
    "natural_language_question": "Find all proteins linked to arachidonate (CHEBI:32395)",
    "ground_truth_query": "PREFIX CHEBI: <http://purl.obolibrary.org/obo/CHEBI_>\nPREFIX rh: <http://rdf.rhea-db.org/>\nPREFIX skos: <http://www.w3.org/2004/02/skos/core#>\nPREFIX up: <http://purl.uniprot.org/core/>\n\n\nSELECT \n    DISTINCT\n        ?uniprot\n        ?uniprotID\n        ?recname\n        ?gene\n        ?chebi\n        ?uniprotName\nWHERE {\n  SERVICE <https://sparql.rhea-db.org/sparql> {\n     VALUES (?chebi) { (CHEBI:32395) }\n     ?rhea rh:side/rh:contains/rh:compound ?compound .\n     ?compound rh:chebi ?chebi .\n     ?chebi up:name ?uniprotName .\n  }\n  ?uniprot up:annotation/up:catalyticActivity/up:catalyzedReaction ?rhea .\n  ?uniprot up:mnemonic ?uniprotID .\n  ?uniprot up:recommendedName/up:fullName ?recname .\n  OPTIONAL {?uniprot up:encodedBy/skos:prefLabel ?gene .}\n}",
    "target_endpoint": "https://sparql.uniprot.org/sparql/",
    "federates_with": [
      "https://sparql.rhea-db.org/sparql"
    ],
    "endpoint_set": "Uniprot",
    "file_path": "UniProt/51_all_proteins_linked_to_arachidonate.ttl",
    "predicted_query": "# https://sparql.uniprot.org/sparql\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX up: <http://purl.uniprot.org/core/>\nPREFIX chebi: <http://purl.obolibrary.org/obo/>\n\nSELECT DISTINCT ?protein ?proteinName\nWHERE {\n  # Query UniProt for proteins\n  SERVICE <https://sparql.uniprot.org/sparql> {\n    ?protein a up:Protein .\n    ?protein rdfs:label ?proteinName .\n    # Attempt to link to ChEBI via cross-references (this might not be a direct link)\n    ?protein up:database ?dbXref .\n    ?dbXref rdfs:label ?chebiId .\n    FILTER CONTAINS(STR(?chebiId), \"CHEBI:32395\")\n  }\n}",
    "predicted_endpoint": "https://sparql.uniprot.org/sparql",
    "predicted_endpoint_equal_to_target_endpoint": true,
    "predicted_endpoint_in_federates_with": false,
    "predicted_endpoint_or_federated_endpoint": true,
    "run_id_langsmith": "3673eeeb-4eb3-422e-aed0-cc6e5f3b7fc7",
    "evaluation_timestamp": "2025-04-25T17:01:29.335478",
    "question_understanding_tokens": 250,
    "question_understanding_completion_tokens": 31,
    "question_understanding_total_tokens": 281,
    "sparql_construction_prompt_tokens": 2214,
    "sparql_construction_completion_tokens": 538,
    "sparql_construction_total_tokens": 2752,
    "is_valid_sparql": true,
    "sparql_syntax_error": "syntactically correct",
    "result_eval_f1_score": 0.0,
    "result_eval_precision": 0.0,
    "result_eval_recall": 0.0,
    "error_occured_at_endpoint": false,
    "predicted_query_result_is_empty": true,
    "error_occured_at_endpoint_message": "no error, but empty result"
  },
  {
    "resource": "https://sparql.uniprot.org/.well-known/sparql-examples/40",
    "natural_language_question": "Retrieve human enzymes that metabolize sphingolipids and are annotated in ChEMBL",
    "ground_truth_query": "PREFIX CHEBI: <http://purl.obolibrary.org/obo/CHEBI_>\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX rh: <http://rdf.rhea-db.org/>\nPREFIX taxon: <http://purl.uniprot.org/taxonomy/>\nPREFIX up: <http://purl.uniprot.org/core/>\n\nSELECT DISTINCT ?protein ?chemblEntry\nWHERE {\n  SERVICE <https://sparql.rhea-db.org/sparql> {\n    ?hea rdfs:subClassOf rh:Reaction ;\n      rh:side/rh:contains/rh:compound/rh:chebi/rdfs:subClassOf+ CHEBI:26739 .\n  }\n  ?ca up:catalyzedReaction ?rhea .\n  ?protein up:annotation/up:catalyticActivity ?ca ;\n    up:organism taxon:9606 ;\n    rdfs:seeAlso ?chemblEntry .\n  ?chemblEntry up:database <http://purl.uniprot.org/database/ChEMBL> .\n}\nLIMIT 10",
    "target_endpoint": "https://sparql.uniprot.org/sparql/",
    "federates_with": [
      "https://sparql.rhea-db.org/sparql"
    ],
    "endpoint_set": "Uniprot",
    "file_path": "UniProt/40_human_enzymes_that_metabolize_sphingolipids.ttl",
    "predicted_query": "# https://sparql.uniprot.org/sparql\nPREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX up: <http://purl.uniprot.org/core/>\nPREFIX taxon: <http://purl.uniprot.org/taxonomy/>\n\nSELECT DISTINCT ?enzyme ?enzymeName ?chembldb\nWHERE {\n  # Find human enzymes in UniProt\n  ?enzyme a up:Protein .\n  ?enzyme up:organism taxon:9606 .  # 9606 is the NCBI taxonomy ID for Homo sapiens\n  ?enzyme rdfs:label ?enzymeName .\n  ?enzyme up:classifiedWith <http://purl.uniprot.org/uniprot/P07327> . # example of enzyme\n\n  # Link to SwissLipids to find enzymes involved in sphingolipid metabolism\n  SERVICE <https://sparql.swisslipids.org/sparql/> {\n    ?reaction a <http://www.swisslipids.org/rdf/SwissLipids#Reaction> .\n    ?reaction <http://www.swisslipids.org/rdf/SwissLipids#enzyme> ?swisslipidsEnzyme .\n    ?swisslipidsEnzyme rdfs:label ?enzymeName . # matching the enzyme name\n    ?reaction <http://www.swisslipids.org/rdf/SwissLipids#substrate> ?sphingolipid .\n    ?sphingolipid rdfs:label ?sphingolipidName .\n    FILTER (CONTAINS(lcase(?sphingolipidName), \"sphingolipid\"))\n  }\n  \n  # Filter for enzymes annotated in ChEMBL (cross-reference)\n  ?enzyme up:database ?chembldb .\n  FILTER CONTAINS(str(?chembldb), \"chembl\")\n}",
    "predicted_endpoint": "https://sparql.uniprot.org/sparql",
    "predicted_endpoint_equal_to_target_endpoint": true,
    "predicted_endpoint_in_federates_with": false,
    "predicted_endpoint_or_federated_endpoint": true,
    "run_id_langsmith": "25426c91-0a78-46a0-868f-c4b27f77617a",
    "evaluation_timestamp": "2025-04-25T17:02:50.444453",
    "question_understanding_tokens": 247,
    "question_understanding_completion_tokens": 33,
    "question_understanding_total_tokens": 280,
    "sparql_construction_prompt_tokens": 2321,
    "sparql_construction_completion_tokens": 663,
    "sparql_construction_total_tokens": 2984,
    "is_valid_sparql": true,
    "sparql_syntax_error": "syntactically correct",
    "result_eval_f1_score": 0.0,
    "result_eval_precision": 0.0,
    "result_eval_recall": 0.0,
    "error_occured_at_endpoint": false,
    "predicted_query_result_is_empty": true,
    "error_occured_at_endpoint_message": "no error, but empty result"
  },
  {
    "resource": "https://sparql.uniprot.org/.well-known/sparql-examples/49",
    "natural_language_question": "Retrieve the UniProtKB proteins, their catalyzed Rhea reactions, their encoding genes (Ensembl) and the anatomic entities where the genes are expressed (UBERON anatomic entites from Bgee expression data resource).",
    "ground_truth_query": "PREFIX CHEBI: <http://purl.obolibrary.org/obo/CHEBI_>\nPREFIX genex: <http://purl.org/genex#>\nPREFIX lscr: <http://purl.org/lscr#>\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX rh: <http://rdf.rhea-db.org/>\nPREFIX taxon: <http://purl.uniprot.org/taxonomy/>\nPREFIX up: <http://purl.uniprot.org/core/>\n\nSELECT DISTINCT ?protein ?ensemblGene ?reaction ?anatomicEntityLabel ?anatomicEntity\nWHERE {\n  # federated query to Rhea enadpoint\n  {\n    SELECT DISTINCT ?reaction WHERE {\n      SERVICE <https://sparql.rhea-db.org/sparql> {\n        ?reaction rdfs:subClassOf rh:Reaction ;\n          rh:equation ?reactionEquation ;\n          rh:side ?reactionSide .\n        ?reactionSide rh:contains ?participant .\n        ?participant rh:compound ?compound .\n        # compound constraint (CHEBI:16113 == cholesterol)\n        ?compound rh:chebi CHEBI:16113 .\n      }\n    }\n  }\n  # taxonomy constraint (taxon:9606 == Homo sapiens)\n  ?protein up:organism taxon:9606 ;\n    up:annotation ?a ;\n    rdfs:seeAlso / up:transcribedFrom ?ensemblGene .\n  ?a a up:Catalytic_Activity_Annotation ;\n    up:catalyticActivity ?ca .\n  ?ca up:catalyzedReaction ?reaction .\n  # federated query to Bgee (expression data)\n  BIND(IRI(REPLACE(STR(?ensemblGene), \"\\\\.[0-9]+$\", \"\")) AS ?ensemblGeneNoVersion)\n  SERVICE <https://www.bgee.org/sparql/> {\n    ?gene lscr:xrefEnsemblGene ?ensemblGeneNoVersion ;\n      genex:isExpressedIn ?anatomicEntity .\n    ?anatomicEntity rdfs:label ?anatomicEntityLabel .\n  }\n}",
    "target_endpoint": "https://sparql.uniprot.org/sparql/",
    "federates_with": [
      "https://sparql.rhea-db.org/sparql",
      "https://www.bgee.org/sparql/"
    ],
    "endpoint_set": "Uniprot",
    "file_path": "UniProt/49_tissues_where_genes_metabolizing_cholestrol_are_expressed.ttl",
    "predicted_query": "# https://sparql.uniprot.org/sparql\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX up: <http://purl.uniprot.org/core/>\nPREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>\n\nSELECT DISTINCT ?protein ?proteinName ?reaction ?gene ?anatomicalEntity\nWHERE {\n  # Get proteins from UniProtKB\n  SERVICE <https://sparql.uniprot.org/sparql> {\n    ?protein a up:Protein .\n    ?protein rdfs:label ?proteinName .\n    # Link to Rhea reactions via UniProtKB xref\n    ?protein up:databaseCrossReference ?rheaRef .\n    ?rheaRef up:database <http://purl.uniprot.org/database/Rhea> .\n    ?rheaRef rdf:value ?rheaId .\n  }\n\n  # Construct the Rhea reaction URI\n  BIND(IRI(CONCAT(\"http://rdf.rhea-db.org/\", ?rheaId)) AS ?reaction)\n\n  #Optional Ensembl Gene\n   OPTIONAL {\n    SERVICE <https://sparql.uniprot.org/sparql> {\n      ?protein up:encodedBy ?geneUniprot .\n      ?geneUniprot rdfs:label ?gene .\n    }\n  }\n  \n  #Optional Bgee and UBERON Anatomic Entity\n   OPTIONAL {\n      SERVICE <http://sparql.bgee.org/> {\n        # Assuming a link between Ensembl gene IDs and Bgee\n        ?geneBgee <http://www.w3.org/2000/01/rdf-schema#label> ?gene . # Assuming rdfs:label holds the gene name\n        ?expression <http://purl.obolibrary.org/obo/BGEE_0000060> ?geneBgee . # Gene is expressed in\n        ?expression <http://purl.obolibrary.org/obo/BGEE_0000061> ?anatomicalEntity . # Anatomic entity\n      }\n    }\n}",
    "predicted_endpoint": "https://sparql.uniprot.org/sparql",
    "predicted_endpoint_equal_to_target_endpoint": true,
    "predicted_endpoint_in_federates_with": false,
    "predicted_endpoint_or_federated_endpoint": true,
    "run_id_langsmith": "d43a3dd2-1f49-45ec-8c76-dbb41f8adc27",
    "evaluation_timestamp": "2025-04-25T17:03:31.760624",
    "question_understanding_tokens": 274,
    "question_understanding_completion_tokens": 71,
    "question_understanding_total_tokens": 345,
    "sparql_construction_prompt_tokens": 4650,
    "sparql_construction_completion_tokens": 657,
    "sparql_construction_total_tokens": 5307,
    "is_valid_sparql": true,
    "sparql_syntax_error": "syntactically correct",
    "result_eval_f1_score": 0.0,
    "result_eval_precision": 0.0,
    "result_eval_recall": 0.0,
    "error_occured_at_endpoint": false,
    "predicted_query_result_is_empty": true,
    "error_occured_at_endpoint_message": "no error, but empty result"
  },
  {
    "resource": "https://sparql.uniprot.org/.well-known/sparql-examples/53",
    "natural_language_question": "Find mouse homologs in OMABrowser of human enzymes that catalyze reactions involving sterols (CHEBI:15889). Federating with Rhea and OMABrowser.",
    "ground_truth_query": "PREFIX CHEBI: <http://purl.obolibrary.org/obo/CHEBI_>\nPREFIX lscr: <http://purl.org/lscr#>\nPREFIX orth: <http://purl.org/net/orth#>\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX rh: <http://rdf.rhea-db.org/>\nPREFIX taxon: <http://purl.uniprot.org/taxonomy/>\nPREFIX up: <http://purl.uniprot.org/core/>\n\nSELECT\n  DISTINCT\n    ?chebi\n    ?reaction\n    ?humanProtein\n    ?mouseProtein\n    ?cluster \nWHERE {\n  SERVICE <https://sparql.rhea-db.org/sparql> {\n    ?reaction rdfs:subClassOf rh:Reaction .\n    ?reaction rh:side/rh:contains/rh:compound ?compound .\n    ?compound rh:chebi ?chebi .\n    ?chebi rdfs:subClassOf* CHEBI:15889\n  }\n\n  ?humanProtein up:organism taxon:9606 .\n  ?humanProtein up:annotation ?a .\n  ?a a up:Catalytic_Activity_Annotation .\n  ?a up:catalyticActivity ?ca .\n  ?ca up:catalyzedReaction ?reaction .\n\n  SERVICE  <https://sparql.omabrowser.org/sparql> {\n    ?cluster a orth:ParalogsCluster .\n    ?cluster orth:hasHomologousMember ?node1 , ?node2 .\n    ?node1 orth:hasHomologousMember* ?orthoProtein1 .\n    ?node2 orth:hasHomologousMember* ?orthoProtein2 .\n    ?orthoProtein1 lscr:xrefUniprot ?mouseProtein .\n    ?orthoProtein2 lscr:xrefUniprot ?humanProtein .\n    # inTaxon mouse\n    ?orthoProtein1 orth:organism/<http://purl.obolibrary.org/obo/RO_0002162> taxon:10090 . \n  }\n}",
    "target_endpoint": "https://sparql.uniprot.org/sparql/",
    "federates_with": [
      "https://sparql.rhea-db.org/sparql",
      "https://sparql.omabrowser.org/sparql"
    ],
    "endpoint_set": "Uniprot",
    "file_path": "UniProt/53_mouse_homologs_of_sterol_enzymes_via_omabrowser.ttl",
    "predicted_query": "# https://sparql.rhea-db.org/sparql\nPREFIX rhea: <http://rdf.rhea-db.org/>\nPREFIX chebi: <http://purl.obolibrary.org/obo/CHEBI_>\nPREFIX uniprot: <http://purl.uniprot.org/core/>\nPREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>\nPREFIX oma: <http://purl.obolibrary.org/obo/OMA_>\n\nSELECT DISTINCT ?mouse_homolog\nWHERE {\n  # Find Rhea reactions involving sterols (CHEBI:15889)\n  ?reaction rhea: Rhea_has_reactant chebi:15889 .\n  \n  # Find the enzyme (protein) that catalyzes the reaction\n  ?reaction rhea: Rhea_has_enzyme ?enzyme .\n  \n  # Find the UniProt ID of the human enzyme using a subquery to UniProt\n  SERVICE <https://sparql.uniprot.org/sparql> {\n    ?enzyme uniprot:catalyticActivity ?reaction . # Assuming catalyticActivity links to reactions\n    ?enzyme uniprot:organism <http://purl.uniprot.org/taxonomy/9606> . # Filter for human enzymes\n    ?enzyme rdf:type uniprot:Protein .\n    ?enzyme uniprot:reviewed \"true\"^^xsd:boolean .\n    ?enzyme rdfs:seeAlso ?uniprot_protein . # Get the UniProt protein URI\n  }\n  \n  # Find mouse homologs of the human enzyme using a subquery to UniProt\n  SERVICE <https://sparql.uniprot.org/sparql> {\n    ?mouse_homolog uniprot:organism <http://purl.uniprot.org/taxonomy/10090> . # Filter for mouse\n    ?mouse_homolog rdf:type uniprot:Protein .\n    ?mouse_homolog uniprot:reviewed \"true\"^^xsd:boolean .\n    ?mouse_homolog oma:omaGroup ?oma_group .\n    ?uniprot_protein oma:omaGroup ?oma_group .\n  }\n}",
    "predicted_endpoint": "https://sparql.rhea-db.org/sparql",
    "predicted_endpoint_equal_to_target_endpoint": false,
    "predicted_endpoint_in_federates_with": true,
    "predicted_endpoint_or_federated_endpoint": true,
    "run_id_langsmith": "ddb33216-599c-48fe-a866-97bc43010c89",
    "evaluation_timestamp": "2025-04-25T17:04:01.570302",
    "question_understanding_tokens": 268,
    "question_understanding_completion_tokens": 41,
    "question_understanding_total_tokens": 309,
    "sparql_construction_prompt_tokens": 3215,
    "sparql_construction_completion_tokens": 696,
    "sparql_construction_total_tokens": 3911,
    "is_valid_sparql": false,
    "sparql_syntax_error": "Lexical error at line 11, column 36.  Encountered: '32' (32), after prefix \"Rhea_has_reactant\"",
    "result_eval_f1_score": 0.0,
    "result_eval_precision": 0.0,
    "result_eval_recall": 0.0,
    "error_occured_at_endpoint": false,
    "predicted_query_result_is_empty": true,
    "error_occured_at_endpoint_message": "syntactically not correct"
  },
  {
    "resource": "https://sparql.uniprot.org/.well-known/sparql-examples/52",
    "natural_language_question": "Retrieve drugs that target human enzymes involved in sterol metabolism (federated query with Rhea and ChEMBL via IDSM/Elixir czech republic).",
    "ground_truth_query": "PREFIX CHEBI: <http://purl.obolibrary.org/obo/CHEBI_>\nPREFIX cco: <http://rdf.ebi.ac.uk/terms/chembl#>\nPREFIX chebihash: <http://purl.obolibrary.org/obo/chebi#>\nPREFIX owl: <http://www.w3.org/2002/07/owl#>\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX rh: <http://rdf.rhea-db.org/>\nPREFIX skos: <http://www.w3.org/2004/02/skos/core#>\nPREFIX taxon: <http://purl.uniprot.org/taxonomy/>\nPREFIX up: <http://purl.uniprot.org/core/>\n\nSELECT\n        DISTINCT\n            ?protein\n            ?proteinFullName\n            ?activityType\n            ?standardActivityValue\n            ?standardActivityUnit\n            ?chemblMolecule\n            ?chemlbMoleculePrefLabel\nWHERE\n  {\n  # ChEBI: retrieve members of the ChEBI class ChEBI:15889 (sterol)\n  # Rhea: retrieve the reactions involving these ChEBI as participants\n  SERVICE <https://sparql.rhea-db.org/sparql> {\n    ?reaction rdfs:subClassOf  rh:Reaction ;\n\t      rh:status        rh:Approved ;\n\t      rh:side          ?reactionSide .\n    ?reactionSide\n\t      rh:contains      ?participant .\n    ?participant rh:compound  ?compound\n    {\n      ?compound  rh:chebi  ?chebi .\n      ?chebi (rdfs:subClassOf)+ CHEBI:15889\n    } UNION {\n      ?compound  rh:chebi           ?chebi .\n      ?chebi2   rdfs:subClassOf     ?chebiRestriction .\n      ?chebiRestriction\n\t\ta           owl:Restriction ;\n\t\towl:onProperty      chebihash:has_major_microspecies_at_pH_7_3 ;\n\t\towl:someValuesFrom  ?chebi .\n      ?chebi2 (rdfs:subClassOf)+ CHEBI:15889\n    }\n  }\n  # UniProt: retrieve the human (taxid:9606) enzymes catalyzing these Rhea reactions\n  ?ca       up:catalyzedReaction  ?reaction .\n  ?a        up:catalyticActivity  ?ca .\n  ?protein  up:annotation         ?a ;\n\t    up:organism           taxon:9606 ;\n\t    up:recommendedName    ?proteinRecName .\n  ?proteinRecName\n\t    up:fullName           ?proteinFullName .\n  # Find drugs in wikidata that interact with the UniProt Proteins\n  # ChEMBL: retrieve the corresponding targets and with drugs in clinical phase 4\n  # Via https://idsm.elixir-czech.cz/sparql/\n  SERVICE <https://idsm.elixir-czech.cz/sparql/endpoint/idsm> {\n    ?activity a cco:Activity ;\n      cco:hasMolecule ?chemblMolecule ;\n      cco:hasAssay ?assay ;\n      cco:standardType ?activityType ;\n      cco:standardValue ?standardActivityValue ;\n      cco:standardUnits ?standardActivityUnit .\n    ?chemblMolecule cco:highestDevelopmentPhase ?highestDevelopmentPhase ;\n      rdfs:label ?chemblMoleculeLabel ;\n      skos:prefLabel ?chemlbMoleculePrefLabel .\n    FILTER (?highestDevelopmentPhase > 3)\n    ?assay cco:hasTarget ?target .\n    ?target cco:hasTargetComponent/cco:targetCmptXref ?protein .\n    ?protein a cco:UniprotRef .\n  }\n}",
    "target_endpoint": "https://sparql.uniprot.org/sparql/",
    "federates_with": [
      "https://sparql.rhea-db.org/sparql",
      "https://idsm.elixir-czech.cz/sparql/endpoint/idsm"
    ],
    "endpoint_set": "Uniprot",
    "file_path": "UniProt/52_drugs_targeting_sterol_metabolism.ttl",
    "predicted_query": "# https://sparql.rhea-db.org/sparql\nPREFIX rhea: <http://rdf.rhea-db.org/>\nPREFIX chebi: <http://purl.obolibrary.org/obo/CHEBI_>\nPREFIX uniprot: <http://purl.uniprot.org/core/>\nPREFIX idsm: <https://idsm.elixir-czech.cz/sparql/endpoint/>\n\nSELECT DISTINCT ?drug ?enzymeName\nWHERE {\n  # Find reactions in Rhea related to sterol metabolism\n  ?reaction rhea: Rhea.equation ?equation .\n  ?reaction rhea: Rhea.directionalReaction ?directionalReaction .\n  ?directionalReaction rhea: Rhea.side ?leftSide .\n  ?leftSide rhea: Rhea.rheaSideHas ?chebiSterol .\n  ?chebiSterol rhea: Rhea.chebi ?sterol .\n  FILTER (?sterol = chebi:15889) # CHEBI ID for sterol\n\n  # Find the enzymes (proteins) catalyzing these reactions\n  ?directionalReaction rhea: Rhea.catalyzedBy ?protein .\n  ?protein rhea: Rhea.uniprot ?enzyme .\n\n  # Get the enzyme name from UniProt (optional, for clarity)\n  SERVICE <https://sparql.uniprot.org/sparql> {\n    ?enzyme uniprot:recommendedName ?recName .\n    ?recName uniprot:fullName ?enzymeName .\n  }\n\n  #Federate with IDSM/Elixir Czech Republic to find drugs targeting the enzymes\n  SERVICE <https://idsm.elixir-czech.cz/sparql/endpoint/> {\n    ?drug idsm:target ?enzyme .\n  }\n\n  # Filter for human enzymes (UniProt taxonomy ID for human is 9606 - not available in Rhea, so filtering on IDSM)\n  SERVICE <https://idsm.elixir-czech.cz/sparql/endpoint/> {\n     ?enzyme idsm:organism \"Homo sapiens\" . # Filter for human\n  }\n}",
    "predicted_endpoint": "https://sparql.rhea-db.org/sparql",
    "predicted_endpoint_equal_to_target_endpoint": false,
    "predicted_endpoint_in_federates_with": true,
    "predicted_endpoint_or_federated_endpoint": true,
    "run_id_langsmith": "c232eebd-93f4-4d5b-ae23-fb9ac9aac523",
    "evaluation_timestamp": "2025-04-25T17:04:18.862973",
    "question_understanding_tokens": 264,
    "question_understanding_completion_tokens": 28,
    "question_understanding_total_tokens": 292,
    "sparql_construction_prompt_tokens": 2054,
    "sparql_construction_completion_tokens": 701,
    "sparql_construction_total_tokens": 2755,
    "is_valid_sparql": false,
    "sparql_syntax_error": "Lexical error at line 10, column 32.  Encountered: '32' (32), after prefix \"Rhea.equation\"",
    "result_eval_f1_score": 0.0,
    "result_eval_precision": 0.0,
    "result_eval_recall": 0.0,
    "error_occured_at_endpoint": false,
    "predicted_query_result_is_empty": true,
    "error_occured_at_endpoint_message": "syntactically not correct"
  },
  {
    "resource": "https://sparql.uniprot.org/.well-known/sparql-examples/54",
    "natural_language_question": "Proteins with binding sites for ligands similar to heme",
    "ground_truth_query": "PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX sachem: <http://bioinfo.uochb.cas.cz/rdf/v1.0/sachem#>\nPREFIX up: <http://purl.uniprot.org/core/>\nPREFIX xsd: <http://www.w3.org/2001/XMLSchema#>\n\nSELECT \n  ?protein\n  ?mnemonic\n  ?proteinName\n  ?ligandSimilarityScore\n  ?ligand\nWHERE {\n  SERVICE <https://idsm.elixir-czech.cz/sparql/endpoint/chebi> {\n    ?ssc sachem:compound ?ligand; \n      sachem:score ?ligandSimilarityScore ;\n      sachem:similaritySearch ?sss .\n        # Smiles of Heme\n    ?sss    sachem:query \"CC1=C(CCC([O-])=O)C2=[N+]3C1=Cc1c(C)c(C=C)c4C=C5C(C)=C(C=C)C6=[N+]5[Fe-]3(n14)n1c(=C6)c(C)c(CCC([O-])=O)c1=C2\";\n      sachem:cutoff \"8e-1\"^^xsd:double ;\n      sachem:aromaticityMode sachem:aromaticityDetect ;\n      sachem:similarityRadius 1 ;\n      sachem:tautomerMode sachem:ignoreTautomers .\n  }\n  ?protein up:mnemonic ?mnemonic ;\n    up:recommendedName/up:fullName ?proteinName ;\n    up:annotation ?annotation .\n  ?annotation a up:Binding_Site_Annotation ;\n      up:ligand/rdfs:subClassOf ?ligand .\n}\nORDER BY DESC(?ligandSimilarityScore)",
    "target_endpoint": "https://sparql.uniprot.org/sparql/",
    "federates_with": [
      "https://idsm.elixir-czech.cz/sparql/endpoint/chebi"
    ],
    "endpoint_set": "Uniprot",
    "file_path": "UniProt/54_binding_sites_for_ligands_similar_to_heme_sachem.ttl",
    "predicted_query": "# https://sparql.uniprot.org/sparql\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX uniprot: <http://purl.uniprot.org/core/>\nPREFIX chebi: <http://purl.obolibrary.org/obo/>\n\nSELECT DISTINCT ?protein ?proteinName\nWHERE {\n  # Find proteins in UniProt\n  SERVICE <https://sparql.uniprot.org/sparql> {\n    ?protein a uniprot:Protein .\n    ?protein rdfs:label ?proteinName .\n    ?protein uniprot:annotation ?bindingSiteAnnotation .\n    ?bindingSiteAnnotation a uniprot:Binding_Site .\n    ?bindingSiteAnnotation rdfs:comment ?bindingSiteDescription .\n  }\n\n  # Find Heme and similar ligands in ChEBI\n  SERVICE <https://sparql.rhea-db.org/sparql> {\n    {\n      SELECT DISTINCT ?chebiEntity WHERE {\n        VALUES ?searchString { \"Heme\" } # The user's search term\n        ?chebiEntity rdfs:label ?label .\n        FILTER (CONTAINS(LCASE(?label), LCASE(?searchString)))\n      }\n    }\n  }\n  # Filter for proteins with binding sites for ligands similar to Heme.\n  FILTER (CONTAINS(LCASE(?bindingSiteDescription), \"heme\")) # A simple filter, can be improved with more sophisticated similarity measures if needed.\n}",
    "predicted_endpoint": "https://sparql.uniprot.org/sparql",
    "predicted_endpoint_equal_to_target_endpoint": true,
    "predicted_endpoint_in_federates_with": false,
    "predicted_endpoint_or_federated_endpoint": true,
    "run_id_langsmith": "6307b6dd-4c5e-464d-a872-0251a980ddc3",
    "evaluation_timestamp": "2025-04-25T17:04:41.041252",
    "question_understanding_tokens": 241,
    "question_understanding_completion_tokens": 29,
    "question_understanding_total_tokens": 270,
    "sparql_construction_prompt_tokens": 2624,
    "sparql_construction_completion_tokens": 499,
    "sparql_construction_total_tokens": 3123,
    "is_valid_sparql": true,
    "sparql_syntax_error": "syntactically correct",
    "result_eval_f1_score": 0.0,
    "result_eval_precision": 0.0,
    "result_eval_recall": 0.0,
    "error_occured_at_endpoint": true,
    "predicted_query_result_is_empty": true,
    "error_occured_at_endpoint_message": "QueryBadFormed: A bad request has been sent to the endpoint: probably the SPARQL query is badly formed."
  },
  {
    "resource": "https://sparql.uniprot.org/.well-known/sparql-examples/43",
    "natural_language_question": "Connect patents cited in UniProtKB with those in the patent database at EPO via publication number, whose grant date is more than twenty years in the past.",
    "ground_truth_query": "PREFIX patent: <http://data.epo.org/linked-data/def/patent/>\nPREFIX skos: <http://www.w3.org/2004/02/skos/core#>\nPREFIX up: <http://purl.uniprot.org/core/>\n\nSELECT ?grantDate ?patent ?application ?applicationNo\nWHERE\n{\n    ?citation a up:Patent_Citation ;\n  skos:exactMatch ?patent .\n  BIND(SUBSTR(STR(?patent), 35) AS ?applicationNo)\n  BIND(SUBSTR(STR(?patent), 33, 2) AS ?countryCode)\n  SERVICE <https://data.epo.org/linked-data/query>{\n    ?publication patent:publicationNumber ?applicationNo ;\n      patent:application ?application .\n    ?application patent:grantDate ?grantDate .\n  }\n  BIND((year(now()) - 20) AS ?thisYearMinusTwenty)\n  BIND(year(?grantDate) AS ?grantYear)\n  FILTER(?grantYear < ?thisYearMinusTwenty)\n} ORDER BY ?grantYear",
    "target_endpoint": "https://sparql.uniprot.org/sparql/",
    "federates_with": [
      "https://data.epo.org/linked-data/query"
    ],
    "endpoint_set": "Uniprot",
    "file_path": "UniProt/43_patents_used_in_uniprot_granted_twenty_years_in_the_past.ttl",
    "predicted_query": "# https://sparql.uniprot.org/sparql\nPREFIX up: <http://purl.uniprot.org/core/>\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX dcterms: <http://purl.org/dc/terms/>\nPREFIX bibo: <http://purl.org/ontology/bibo/>\nPREFIX schema: <http://schema.org/>\nPREFIX xsd: <http://www.w3.org/2001/XMLSchema#>\n\nSELECT DISTINCT ?uniprotEntry ?patentPublicationNumber ?patentGrantDate\nWHERE {\n  # Find UniProt entries that cite patents\n  ?uniprotEntry a up:Protein ;\n                rdfs:seeAlso ?patent . # Assuming rdfs:seeAlso links to patent resources\n\n  # Extract patent publication number and grant date.  We're assuming these are available directly from the UniProt entry or linked resource.\n  ?patent bibo:identifier ?patentPublicationNumber . # Assuming bibo:identifier holds the publication number\n  OPTIONAL { ?patent dcterms:issued ?patentGrantDate . }  # Assuming dcterms:issued holds the grant date\n\n  # Filter by grant date (more than 20 years ago).  This assumes the grant date is available and in xsd:date format.\n  FILTER ( (!bound(?patentGrantDate)) || (?patentGrantDate < (NOW() - xsd:duration(\"P20Y\"))) )\n}",
    "predicted_endpoint": "https://sparql.uniprot.org/sparql",
    "predicted_endpoint_equal_to_target_endpoint": true,
    "predicted_endpoint_in_federates_with": false,
    "predicted_endpoint_or_federated_endpoint": true,
    "run_id_langsmith": "b4d95903-5236-43c0-9102-cdfd8611cb1e",
    "evaluation_timestamp": "2025-04-25T17:05:33.494282",
    "question_understanding_tokens": 262,
    "question_understanding_completion_tokens": 47,
    "question_understanding_total_tokens": 309,
    "sparql_construction_prompt_tokens": 1914,
    "sparql_construction_completion_tokens": 533,
    "sparql_construction_total_tokens": 2447,
    "is_valid_sparql": true,
    "sparql_syntax_error": "syntactically correct",
    "result_eval_f1_score": 0.0,
    "result_eval_precision": 0.0,
    "result_eval_recall": 0.0,
    "error_occured_at_endpoint": false,
    "predicted_query_result_is_empty": true,
    "error_occured_at_endpoint_message": "no error, but empty result"
  },
  {
    "resource": "https://sparql.uniprot.org/.well-known/sparql-examples/45",
    "natural_language_question": "Retrieve drugs that target human enzymes involved in sterol metabolism (federated query with WikiData and Rhea).",
    "ground_truth_query": "PREFIX CHEBI: <http://purl.obolibrary.org/obo/CHEBI_>\nPREFIX chebihash: <http://purl.obolibrary.org/obo/chebi#>\nPREFIX owl: <http://www.w3.org/2002/07/owl#>\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX rh: <http://rdf.rhea-db.org/>\nPREFIX taxon: <http://purl.uniprot.org/taxonomy/>\nPREFIX uniprotkb: <http://purl.uniprot.org/uniprot/>\nPREFIX up: <http://purl.uniprot.org/core/>\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\n\nSELECT DISTINCT ?protein ?proteinFullName ?wikiChemical ?wikiChemicalLabel ?medicalConditionTreatedLabel\nWHERE {\n  # ChEBI: retrieve members of the ChEBI class ChEBI:15889 (sterol)\n  # Rhea: retrieve the reactions involving these ChEBI as participants\n  SERVICE <https://sparql.rhea-db.org/sparql> {\n    ?reaction rdfs:subClassOf rh:Reaction ;\n      rh:status rh:Approved ;\n      rh:side ?reactionSide .\n    ?reactionSide\n      rh:contains ?participant .\n    ?participant rh:compound ?compound\n    {\n      ?compound rh:chebi ?chebi .\n      ?chebi (rdfs:subClassOf)+ CHEBI:15889\n    } UNION {\n      ?compound rh:chebi ?chebi .\n      ?chebi2 rdfs:subClassOf ?chebiRestriction .\n      ?chebiRestriction\n\t\ta owl:Restriction ;\n\t\towl:onProperty chebihash:has_major_microspecies_at_pH_7_3 ;\n\t\towl:someValuesFrom ?chebi .\n      ?chebi2 (rdfs:subClassOf)+ CHEBI:15889\n    }\n  }\n  # UniProt: retrieve the human (taxid:9606) enzymes catalyzing these Rhea reactions\n  ?ca up:catalyzedReaction  ?reaction .\n  ?a up:catalyticActivity  ?ca .\n  ?proteinIRI  up:annotation ?a ;\n    up:organism taxon:9606 ;\n    up:recommendedName ?proteinRecName .\n  ?proteinRecName up:fullName ?proteinFullName .\n  # Find drugs in wikidata that interact with the UniProt Proteins\n  BIND (SUBSTR(STR(?proteinIRI), STRLEN(STR(uniprotkb:))+1) AS ?protein)\n  SERVICE <https://query.wikidata.org/sparql> {\n    ?wp wdt:P352  ?protein .\n    ?wikiChemical wdt:P129 ?wp . # Physically interacts with\n    ?wikiChemical rdfs:label ?wikiChemicalLabel .\n    ?wikiChemical wdt:P2175 ?wmc . # Medical conndition treated\n    ?wmc rdfs:label ?medicalConditionTreatedLabel .\n    FILTER(lang(?medicalConditionTreatedLabel) = 'en')\n    FILTER(lang(?wikiChemicalLabel) = 'en')\n  }\n}",
    "target_endpoint": "https://sparql.uniprot.org/sparql/",
    "federates_with": [
      "https://query.wikidata.org/sparql",
      "https://sparql.rhea-db.org/sparql"
    ],
    "endpoint_set": "Uniprot",
    "file_path": "UniProt/45_drugs_targeting_human_sterol_metabolism_enzymes.ttl",
    "predicted_query": "# https://sparql.rhea-db.org/sparql\nPREFIX rhea: <http://rdf.rhea-db.org/>\nPREFIX chebi: <http://purl.obolibrary.org/obo/CHEBI_>\nPREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>\nPREFIX uniprot: <http://purl.uniprot.org/core/>\nPREFIX taxon: <http://purl.uniprot.org/taxonomy/>\nPREFIX wd: <http://www.wikidata.org/entity/>\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\n\nSELECT DISTINCT ?drug ?enzymeLabel ?reaction\nWHERE {\n  # Find reactions in Rhea involving sterols\n  SERVICE <https://sparql.rhea-db.org/sparql> {\n    ?reaction rhea: Rhea_has_participant ?sterol .\n    ?sterol rdf:type chebi:CHEBI_15889 .  # sterol\n    ?reaction rhea: Rhea_has_participant ?enzyme .\n  }\n\n  # Get the UniProt ID of the enzyme from Rhea\n  SERVICE <https://sparql.uniprot.org/sparql> {\n    ?enzyme uniprot:xref ?uniprotEnzyme .\n    ?uniprotEnzyme rdf:type uniprot:Protein .\n    ?uniprotEnzyme uniprot:organism taxon:9606 . # Homo sapiens\n    ?uniprotEnzyme rdfs:label ?enzymeLabel .\n  }\n\n  # Find drugs that target the human enzyme in Wikidata\n  SERVICE <https://query.wikidata.org/sparql> {\n    ?drug wdt:P2175 ?uniprotEnzyme .  # Target\n    ?drug wdt:P31 wd:Q12140 . # Drug\n  }\n}",
    "predicted_endpoint": "https://sparql.rhea-db.org/sparql",
    "predicted_endpoint_equal_to_target_endpoint": false,
    "predicted_endpoint_in_federates_with": true,
    "predicted_endpoint_or_federated_endpoint": true,
    "run_id_langsmith": "37576a13-1f8b-4c90-8292-edc4047b727d",
    "evaluation_timestamp": "2025-04-25T17:05:47.809176",
    "question_understanding_tokens": 251,
    "question_understanding_completion_tokens": 28,
    "question_understanding_total_tokens": 279,
    "sparql_construction_prompt_tokens": 2410,
    "sparql_construction_completion_tokens": 528,
    "sparql_construction_total_tokens": 2938,
    "is_valid_sparql": false,
    "sparql_syntax_error": "Lexical error at line 14, column 41.  Encountered: '32' (32), after prefix \"Rhea_has_participant\"",
    "result_eval_f1_score": 0.0,
    "result_eval_precision": 0.0,
    "result_eval_recall": 0.0,
    "error_occured_at_endpoint": false,
    "predicted_query_result_is_empty": true,
    "error_occured_at_endpoint_message": "syntactically not correct"
  },
  {
    "resource": "https://sparql.uniprot.org/.well-known/sparql-examples/42",
    "natural_language_question": "Connect patents cited in UniProtKB with those in the patent database at EPO via publication number.",
    "ground_truth_query": "PREFIX patent: <http://data.epo.org/linked-data/def/patent/>\nPREFIX skos: <http://www.w3.org/2004/02/skos/core#>\nPREFIX up: <http://purl.uniprot.org/core/>\n\nSELECT ?citation ?patent ?application ?applicationNo\nWHERE\n{\n  ?citation a up:Patent_Citation ;\n    skos:exactMatch ?patent .\n  FILTER(CONTAINS(STR(?patent), 'EP'))\n  BIND(SUBSTR(STR(?patent), 35) AS ?applicationNo)\n  SERVICE <https://data.epo.org/linked-data/query>{\n    ?application patent:publicationNumber ?applicationNo\n  }\n}",
    "target_endpoint": "https://sparql.uniprot.org/sparql/",
    "federates_with": [
      "https://data.epo.org/linked-data/query"
    ],
    "endpoint_set": "Uniprot",
    "file_path": "UniProt/42_connect_patents_to_epo.ttl",
    "predicted_query": "# https://sparql.uniprot.org/sparql\nPREFIX up: <http://purl.uniprot.org/core/>\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\n\n# Retrieve UniProtKB entries and their associated patent identifiers.\nSELECT DISTINCT ?uniprotEntry ?patentIdentifier\nWHERE {\n  ?uniprotEntry a up:Protein .  # Focus on UniProtKB entries that are proteins.\n  ?uniprotEntry up:citation ?citation . # Access the citation information.\n  ?citation up:publication ?publication . # Get the publication associated with the citation.\n  ?publication a up:Patent ; # Filter for publications that are patents.\n               rdfs:label ?patentIdentifier . # Retrieve the patent identifier (e.g., patent number).\n}\n# The query retrieves UniProt entries and their patent identifiers.\n# It assumes that patents are linked via the 'up:citation', 'up:publication' and 'rdfs:label' properties.",
    "predicted_endpoint": "https://sparql.uniprot.org/sparql",
    "predicted_endpoint_equal_to_target_endpoint": true,
    "predicted_endpoint_in_federates_with": false,
    "predicted_endpoint_or_federated_endpoint": true,
    "run_id_langsmith": "4cae09e2-b5ba-434f-bb86-5218966f7c86",
    "evaluation_timestamp": "2025-04-25T17:05:59.484556",
    "question_understanding_tokens": 249,
    "question_understanding_completion_tokens": 35,
    "question_understanding_total_tokens": 284,
    "sparql_construction_prompt_tokens": 1902,
    "sparql_construction_completion_tokens": 320,
    "sparql_construction_total_tokens": 2222,
    "is_valid_sparql": true,
    "sparql_syntax_error": "syntactically correct",
    "result_eval_f1_score": 0.0,
    "result_eval_precision": 0.0,
    "result_eval_recall": 0.0,
    "error_occured_at_endpoint": true,
    "predicted_query_result_is_empty": true,
    "error_occured_at_endpoint_message": "QueryBadFormed: A bad request has been sent to the endpoint: probably the SPARQL query is badly formed."
  },
  {
    "resource": "https://sparql.uniprot.org/.well-known/sparql-examples/67_draft_human_metabolome",
    "natural_language_question": "Generate a draft human metabolome",
    "ground_truth_query": "PREFIX chebislash: <http://purl.obolibrary.org/obo/chebi/>\nPREFIX rh: <http://rdf.rhea-db.org/>\nPREFIX taxon: <http://purl.uniprot.org/taxonomy/>\nPREFIX up: <http://purl.uniprot.org/core/>\n\nSELECT\n?uniprot ?mnemonic ?rhea ?chebi ?smiles ?inchiKey\nWHERE\n{\n  ?uniprot up:annotation/up:catalyticActivity/up:catalyzedReaction ?rhea ;\n        up:organism taxon:9606 ;\n        up:mnemonic ?mnemonic .\n  SERVICE <https://sparql.rhea-db.org/sparql> {\n\t?rhea rh:side/rh:contains/rh:compound ?compound .\n    ?compound (rh:chebi|(rh:reactivePart/rh:chebi)|(rh:underlyingChebi/rh:chebi)) ?chebi .\n   }\n   ?chebi chebislash:smiles ?smiles ;\n          chebislash:inchikey ?inchiKey .\n}",
    "target_endpoint": "https://sparql.uniprot.org/sparql/",
    "federates_with": [
      "https://sparql.rhea-db.org/sparql"
    ],
    "endpoint_set": "Uniprot",
    "file_path": "UniProt/67_draft_human_metabolome.ttl",
    "predicted_query": "# https://sparql.uniprot.org/sparql\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX up: <http://purl.uniprot.org/core/>\nPREFIX taxon: <http://purl.uniprot.org/taxonomy/>\n\nSELECT DISTINCT ?metabolite ?metaboliteName\nWHERE {\n  # Find proteins associated with Homo sapiens in UniProt\n  SERVICE <https://sparql.uniprot.org/sparql> {\n    ?protein a up:Protein .\n    ?protein up:organism taxon:9606 .  # Homo sapiens\n    ?protein rdfs:seeAlso ?rheaReaction . # Link to Rhea\n  }\n\n  # Query Rhea for metabolites involved in the reactions\n  SERVICE <https://sparql.rhea-db.org/sparql> {\n    ?rheaReaction a <http://rdf.rhea-db.org/ontology/RHEA_Reaction> .\n    ?rheaReaction <http://rdf.rhea-db.org/ontology/equation> ?equation .\n    ?equation <http://rdf.rhea-db.org/ontology/contains> ?participant .\n    ?participant <http://rdf.rhea-db.org/ontology/compound> ?metabolite .\n    ?metabolite rdfs:label ?metaboliteName .\n  }\n  \n  #Optionaly query SwissLipids to include lipid metabolites\n  #SERVICE <https://sparql.swisslipids.org/sparql/> {\n  #  ?lipid a <http://www.swisslipids.org/rdf/SwissLipids#Lipid> .\n  #  ?lipid rdfs:label ?lipidName .\n  #  FILTER (CONTAINS(lcase(?lipidName), lcase(?metaboliteName)))\n  #}\n}",
    "predicted_endpoint": "https://sparql.uniprot.org/sparql",
    "predicted_endpoint_equal_to_target_endpoint": true,
    "predicted_endpoint_in_federates_with": false,
    "predicted_endpoint_or_federated_endpoint": true,
    "run_id_langsmith": "8dce3a1b-1035-43da-95f5-9a17bf2e94e8",
    "evaluation_timestamp": "2025-04-25T17:06:10.647998",
    "question_understanding_tokens": 240,
    "question_understanding_completion_tokens": 20,
    "question_understanding_total_tokens": 260,
    "sparql_construction_prompt_tokens": 1451,
    "sparql_construction_completion_tokens": 644,
    "sparql_construction_total_tokens": 2095,
    "is_valid_sparql": true,
    "sparql_syntax_error": "syntactically correct",
    "result_eval_f1_score": 0.0,
    "result_eval_precision": 0.0,
    "result_eval_recall": 0.0,
    "error_occured_at_endpoint": true,
    "predicted_query_result_is_empty": true,
    "error_occured_at_endpoint_message": "QueryBadFormed: A bad request has been sent to the endpoint: probably the SPARQL query is badly formed."
  },
  {
    "resource": "https://sparql.uniprot.org/.well-known/sparql-examples/36",
    "natural_language_question": "Find the orthologous proteins for UniProtKB entry P05067 using the <a href=\"http://www.orthod.org\">OrthoDB database</a>",
    "ground_truth_query": "PREFIX orthodb: <http://purl.orthodb.org/>\nPREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX skos: <http://www.w3.org/2004/02/skos/core#>\nPREFIX uniprotkb: <http://purl.uniprot.org/uniprot/>\nPREFIX up: <http://purl.uniprot.org/core/>\n\nSELECT\n  ?protein\n  ?orthoGroup\n  ?scientificName\n  ?functionComment\n  ?prefferedGeneName\n  ((STRLEN(?value) - ?medianLength) as ?deviationFromMedianLength)\nWHERE\n{\n  uniprotkb:P05067 a up:Protein ;\n        up:organism/up:scientificName ?scientificName ;\n        rdfs:seeAlso ?orthoGroup ;\n        up:encodedBy/skos:prefLabel ?prefferedGeneName ;\n          up:sequence/rdf:value ?value .\n  OPTIONAL {\n    ?protein up:annotation ?functionAnnotation .\n    ?functionAnnotation a up:Function_Annotation ;\n      rdfs:comment ?functionComment .\n  }\n  SERVICE <https://sparql.orthodb.org/sparql>{\n    ?orthoGroup orthodb:ogMedianProteinLength ?medianLength .\n    ?orthoGroup orthodb:hasMember ?xref .\n    ?xref orthodb:xref/orthodb:xrefResource uniprotkb:P05067 .\n  }\n}\nLIMIT 985915",
    "target_endpoint": "https://sparql.uniprot.org/sparql/",
    "federates_with": [
      "https://sparql.orthodb.org/sparql"
    ],
    "endpoint_set": "Uniprot",
    "file_path": "UniProt/36_orthologous_proteins_via_orthodb.ttl",
    "predicted_query": "# https://sparql.uniprot.org/sparql\n# Find orthologous proteins for UniProtKB entry P05067\n\nPREFIX up: <http://purl.uniprot.org/core/>\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\n\nSELECT ?protein ?gene ?organism\nWHERE {\n  # Find the UniProt entry for P05067\n  ?protein a up:Protein ;\n           up:accession \"P05067\" .\n  \n  # Get the gene name\n  ?protein up:gene ?gene .\n  \n  # Get the organism\n  ?protein up:organism ?organism .\n  \n  #No public OrthoDB endpoint available, skipping federation.\n  #Assuming orthologs are linked within UniProt (this is a simplification)\n  #This part would ideally query OrthoDB for orthologs based on a shared identifier\n  #SERVICE <OrthoDB_Endpoint> {\n  #  ?ortholog orthodb:orthologousTo ?protein .\n  #  ?ortholog rdfs:label ?orthologLabel .\n  #}\n}",
    "predicted_endpoint": "https://sparql.uniprot.org/sparql",
    "predicted_endpoint_equal_to_target_endpoint": true,
    "predicted_endpoint_in_federates_with": false,
    "predicted_endpoint_or_federated_endpoint": true,
    "run_id_langsmith": "6f6953d5-0167-4788-a9a8-1ed978b4d1d7",
    "evaluation_timestamp": "2025-04-25T17:06:26.763563",
    "question_understanding_tokens": 265,
    "question_understanding_completion_tokens": 41,
    "question_understanding_total_tokens": 306,
    "sparql_construction_prompt_tokens": 2175,
    "sparql_construction_completion_tokens": 557,
    "sparql_construction_total_tokens": 2732,
    "is_valid_sparql": true,
    "sparql_syntax_error": "syntactically correct",
    "result_eval_f1_score": 0.0,
    "result_eval_precision": 0.0,
    "result_eval_recall": 0.0,
    "error_occured_at_endpoint": false,
    "predicted_query_result_is_empty": true,
    "error_occured_at_endpoint_message": "no error, but empty result"
  },
  {
    "resource": "https://sparql.uniprot.org/.well-known/sparql-examples/60",
    "natural_language_question": "Find human proteins that catalyze reactions where substrates or product have a <a href=\"https://www.ebi.ac.uk/chebi/searchId.do?chebiId=CHEBI:35516\">Cholestane skeleton</a>",
    "ground_truth_query": "PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX rh: <http://rdf.rhea-db.org/>\nPREFIX sachem: <http://bioinfo.uochb.cas.cz/rdf/v1.0/sachem#>\nPREFIX taxon: <http://purl.uniprot.org/taxonomy/>\nPREFIX up: <http://purl.uniprot.org/core/>\n\nSELECT\n  DISTINCT\n    ?protein\n    ?disease\n    ?rhea\n    ?chebi\n    ?omim\nWHERE {\n    # Find complete ChEBIs with a Cholestane skeleton, via the Czech Elixir node IDSM Sachem chemical substructure search.\n    SERVICE <https://idsm.elixir-czech.cz/sparql/endpoint/chebi> {\n      ?chebi sachem:substructureSearch [\n        sachem:query\n\"[C@]12(CCC3CCCC[C@]3(C)[C@@]1([H])CC[C@]1(C)[C@@]([H])([C@@](C)([H])CCCC(C)C)CC[C@@]21[H])[H]\"\n].\n   }\n   # Use the fact that UniProt catalytic activities are annotated using Rhea \n   # Mapping the found ChEBIs to Rhea reactions\n   SERVICE <https://sparql.rhea-db.org/sparql>{\n     ?rhea rh:side/rh:contains/rh:compound/rdfs:subClassOf ?chebi .\n   }\n   # Match the found Rhea reactions with human UniProtKB proteins\n   ?protein up:annotation/up:catalyticActivity/up:catalyzedReaction ?rhea .\n   ?protein up:organism taxon:9606 .\n   # Find only those human entries that have an annotated related disease, and optionaly map these to OMIM\n   ?protein up:annotation/up:disease ?disease .\n   OPTIONAL {\n     ?disease rdfs:seeAlso ?omim .\n     ?omim up:database <http://purl.uniprot.org/database/MIM>\n   }\n}",
    "target_endpoint": "https://sparql.uniprot.org/sparql/",
    "federates_with": [
      "https://idsm.elixir-czech.cz/sparql/endpoint/chebi",
      "https://sparql.rhea-db.org/sparql"
    ],
    "endpoint_set": "Uniprot",
    "file_path": "UniProt/60_enzymes_working_on_substrate_with_Cholestene_backbone.ttl",
    "predicted_query": "# https://sparql.uniprot.org/sparql\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX up: <http://purl.uniprot.org/core/>\nPREFIX taxon: <http://purl.uniprot.org/taxonomy/>\nPREFIX chebi: <http://purl.obolibrary.org/obo/>\n\nSELECT DISTINCT ?protein ?proteinName ?reaction\nWHERE {\n  # Find human proteins in UniProt\n  SERVICE <https://sparql.uniprot.org/sparql> {\n    ?protein a up:Protein .\n    ?protein up:organism taxon:9606 .  # 9606 is the NCBI taxonomy ID for Homo sapiens (human)\n    ?protein rdfs:label ?proteinName .\n  }\n\n  # Find reactions in Rhea that involve the Cholestane skeleton\n  SERVICE <https://sparql.rhea-db.org/sparql> {\n    ?reaction rdfs:label ?reactionName .\n    {\n      ?reaction rhea:equation ?equation .\n      FILTER (CONTAINS(STR(?equation), \"CHEBI:35516\")) # Filter reactions containing CHEBI:35516 in their equation\n    }\n    UNION\n    {\n      ?reaction rhea:right ?rightParticipant .\n      ?rightParticipant rdfs:label ?rightParticipantLabel .\n      FILTER (CONTAINS(STR(?rightParticipantLabel), \"CHEBI:35516\")) # Filter reactions where the right participant contains CHEBI:35516\n    }\n    UNION\n    {\n      ?reaction rhea:left ?leftParticipant .\n      ?leftParticipant rdfs:label ?leftParticipantLabel .\n      FILTER (CONTAINS(STR(?leftParticipantLabel), \"CHEBI:35516\")) # Filter reactions where the left participant contains CHEBI:35516\n    }\n  }\n\n  # Attempt to link UniProt proteins to Rhea reactions.  This is the tricky part.\n  # We'll assume that there might be a link via a common name or identifier.\n  # This is a simplification and might not be accurate. A better approach would\n  # involve a database that explicitly links proteins to reactions (e.g., BRENDA, KEGG).\n  # However, given the available endpoints, this is the best we can do.\n  FILTER (CONTAINS(STR(?proteinName), STR(?reactionName))) # Filter proteins whose names contain the reaction name\n}",
    "predicted_endpoint": "https://sparql.uniprot.org/sparql",
    "predicted_endpoint_equal_to_target_endpoint": true,
    "predicted_endpoint_in_federates_with": false,
    "predicted_endpoint_or_federated_endpoint": true,
    "run_id_langsmith": "0a10beee-9bc1-47a5-a05e-075f45930701",
    "evaluation_timestamp": "2025-04-25T17:08:14.250854",
    "question_understanding_tokens": 285,
    "question_understanding_completion_tokens": 38,
    "question_understanding_total_tokens": 323,
    "sparql_construction_prompt_tokens": 3496,
    "sparql_construction_completion_tokens": 899,
    "sparql_construction_total_tokens": 4395,
    "is_valid_sparql": false,
    "sparql_syntax_error": "Line 20, column 17: Unresolved prefixed name: rhea:equation",
    "result_eval_f1_score": 0.0,
    "result_eval_precision": 0.0,
    "result_eval_recall": 0.0,
    "error_occured_at_endpoint": false,
    "predicted_query_result_is_empty": true,
    "error_occured_at_endpoint_message": "syntactically not correct"
  },
  {
    "resource": "https://sparql.uniprot.org/.well-known/sparql-examples/70_enzymes_interacting_with_molecules_similar_to_dopamine",
    "natural_language_question": "Look for enzymes catalyzing reactions with molecules similar to dopamine.",
    "ground_truth_query": "PREFIX CHEBI: <http://purl.obolibrary.org/obo/CHEBI_>\nPREFIX rh: <http://rdf.rhea-db.org/>\nPREFIX sachem: <http://bioinfo.uochb.cas.cz/rdf/v1.0/sachem#>\nPREFIX up: <http://purl.uniprot.org/core/>\n\nSELECT\n  ?protein\n  ?rhea\n  ?chebi\nWHERE {\n  # Use the smiles of dopamine CHEBI:18243\n  SERVICE <https://idsm.elixir-czech.cz/sparql/endpoint/chebi>{\n    ?chebi sachem:similarCompoundSearch [\n      sachem:query \"NCCc1ccc(O)c(O)c1\" ] .\n  }\n  GRAPH<https://sparql.rhea-db.org/rhea>{\n    ?rhea rh:side/rh:contains/rh:compound ?compound .\n    ?compound (rh:chebi|(rh:reactivePart/rh:chebi)|(rh:underlyingChebi/rh:chebi)) ?chebi .\n  }\n  ?protein up:reviewed true ;\n    up:annotation ?caa .\n  ?caa up:catalyticActivity/up:catalyzedReaction ?rhea .\n}",
    "target_endpoint": "https://sparql.uniprot.org/sparql/",
    "federates_with": [
      "https://idsm.elixir-czech.cz/sparql/endpoint/chebi"
    ],
    "endpoint_set": "Uniprot",
    "file_path": "UniProt/70_enzymes_interacting_with_molecules_similar_to_dopamine.ttl",
    "predicted_query": "# https://sparql.rhea-db.org/sparql\nPREFIX rhea: <http://rdf.rhea-db.org/>\nPREFIX chebi: <http://purl.obolibrary.org/obo/CHEBI_>\nPREFIX uniprot: <http://purl.uniprot.org/core/>\n\nSELECT DISTINCT ?enzyme ?reaction ?enzymeName\nWHERE {\n  # Find reactions in Rhea involving dopamine\n  SERVICE <https://sparql.rhea-db.org/sparql> {\n    ?reaction rhea: Rhea-has-participant chebi:16708 .  # dopamine\n  }\n\n  # Find enzymes in UniProt that catalyze these reactions\n  SERVICE <https://sparql.uniprot.org/sparql> {\n    ?enzyme uniprot:catalyticActivity ?reaction .\n    ?enzyme rdfs:label ?enzymeName .\n  }\n}",
    "predicted_endpoint": "https://sparql.rhea-db.org/sparql",
    "predicted_endpoint_equal_to_target_endpoint": false,
    "predicted_endpoint_in_federates_with": false,
    "predicted_endpoint_or_federated_endpoint": false,
    "run_id_langsmith": "523979e4-62e1-4a90-8d9f-15724eda74eb",
    "evaluation_timestamp": "2025-04-25T17:08:46.228434",
    "question_understanding_tokens": 241,
    "question_understanding_completion_tokens": 26,
    "question_understanding_total_tokens": 267,
    "sparql_construction_prompt_tokens": 2104,
    "sparql_construction_completion_tokens": 0,
    "sparql_construction_total_tokens": 2104,
    "is_valid_sparql": false,
    "sparql_syntax_error": "Lexical error at line 10, column 41.  Encountered: '32' (32), after prefix \"Rhea-has-participant\"",
    "result_eval_f1_score": 0.0,
    "result_eval_precision": 0.0,
    "result_eval_recall": 0.0,
    "error_occured_at_endpoint": false,
    "predicted_query_result_is_empty": true,
    "error_occured_at_endpoint_message": "syntactically not correct"
  },
  {
    "resource": "https://sparql.uniprot.org/.well-known/sparql-examples/38",
    "natural_language_question": "For the human entry P05067 (Amyloid-beta precursor protein) find the gene start ends in WikiData",
    "ground_truth_query": "PREFIX p: <http://www.wikidata.org/prop/>\nPREFIX pq: <http://www.wikidata.org/prop/qualifier/>\nPREFIX ps: <http://www.wikidata.org/prop/statement/>\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX uniprotkb: <http://purl.uniprot.org/uniprot/>\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\n\n\nSELECT \n\t?protein \n\t?begin\n\t?end\n\t?chromosome\n\t?assembly\nWHERE {\n    {\n        BIND(uniprotkb:P05067 AS ?proteinIRI)\n        BIND (SUBSTR(STR(?proteinIRI), STRLEN(STR(uniprotkb:))+1) AS ?protein)\n    }\n    SERVICE <https://query.wikidata.org/sparql> {\n        ?wp wdt:P352 ?protein ;\n            wdt:P702 ?wg . \n        ?wg p:P644   ?wgss .\n        ?wgss ps:P644        ?begin ;\n          pq:P1057/wdt:P1813 ?chromosome ;\n          pq:P659/rdfs:label ?assembly .\n        ?wg p:P645 ?wgse .\n        ?wgse ps:P645        ?end ;\n          pq:P1057/wdt:P1813 ?chromosome ;\n          pq:P659/rdfs:label ?assembly .\n        FILTER(lang(?assembly) = \"en\")\n  } \n}",
    "target_endpoint": "https://sparql.uniprot.org/sparql/",
    "federates_with": [
      "https://query.wikidata.org/sparql"
    ],
    "endpoint_set": "Uniprot",
    "file_path": "UniProt/38_find_gene_region_in_wikidata_for_known_entry.ttl",
    "predicted_query": "# https://sparql.uniprot.org/sparql\nPREFIX up: <http://purl.uniprot.org/core/>\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX wd: <http://www.wikidata.org/entity/>\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\n\nSELECT ?geneStart ?geneEnd\nWHERE {\n  # Find the UniProt entry for human Amyloid-beta precursor protein (P05067)\n  SERVICE <https://sparql.uniprot.org/sparql> {\n    ?protein a up:Protein ;\n             up:database <http://purl.uniprot.org/database/UniProtKB> ;\n             up:entry <http://purl.uniprot.org/uniprot/P05067> ;\n             up:organism <http://purl.uniprot.org/taxonomy/9606> . # Homo sapiens\n  }\n  \n  # Link to the corresponding Wikidata entry using UniProt ID\n  SERVICE <https://query.wikidata.org/sparql> {\n    OPTIONAL {\n      ?gene wdt:P352 ?uniprotID .  # P352 is the UniProt ID property in Wikidata\n      FILTER (?uniprotID = \"P05067\")\n      \n      # Get the gene start and end positions from Wikidata (if available)\n      OPTIONAL { ?gene wdt:P5845 ?geneStart . } # Gene start position on chromosome\n      OPTIONAL { ?gene wdt:P5846 ?geneEnd . }   # Gene end position on chromosome\n    }\n  }\n}",
    "predicted_endpoint": "https://sparql.uniprot.org/sparql",
    "predicted_endpoint_equal_to_target_endpoint": true,
    "predicted_endpoint_in_federates_with": false,
    "predicted_endpoint_or_federated_endpoint": true,
    "run_id_langsmith": "dd936aa3-6496-42ef-b7a2-3ee05af04a85",
    "evaluation_timestamp": "2025-04-25T17:09:22.829895",
    "question_understanding_tokens": 256,
    "question_understanding_completion_tokens": 53,
    "question_understanding_total_tokens": 309,
    "sparql_construction_prompt_tokens": 2815,
    "sparql_construction_completion_tokens": 517,
    "sparql_construction_total_tokens": 3332,
    "is_valid_sparql": true,
    "sparql_syntax_error": "syntactically correct",
    "result_eval_f1_score": 0.0,
    "result_eval_precision": 0.0,
    "result_eval_recall": 0.0,
    "error_occured_at_endpoint": true,
    "predicted_query_result_is_empty": true,
    "error_occured_at_endpoint_message": "QueryBadFormed: A bad request has been sent to the endpoint: probably the SPARQL query is badly formed."
  },
  {
    "resource": "https://sparql.uniprot.org/.well-known/sparql-examples/117_biosodafrontend_glioblastoma_orthologs_rat",
    "natural_language_question": "Which are the proteins associated with glioblastoma and the orthologs expressed in the rat brain?",
    "ground_truth_query": "PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX obo: <http://purl.obolibrary.org/obo/>\nPREFIX orth: <http://purl.org/net/orth#>\nPREFIX sio: <http://semanticscience.org/resource/>\nPREFIX taxon: <http://purl.uniprot.org/taxonomy/>\nPREFIX up: <http://purl.uniprot.org/core/>\nPREFIX lscr: <http://purl.org/lscr#>\nPREFIX genex: <http://purl.org/genex#>\nSELECT DISTINCT ?protein ?orthologous_protein ?gene ?annotation_text WHERE {\n  {\n  \tSELECT ?protein ?annotation_text WHERE {\n      ?protein a up:Protein ;\n          up:organism taxon:9606 ;\n          up:annotation ?annotation .\n      ?annotation rdfs:comment ?annotation_text .\n      ?annotation a up:Disease_Annotation .\n      FILTER CONTAINS (?annotation_text, \"glioblastoma\")\n    }\n  }\n  SERVICE <https://sparql.omabrowser.org/sparql/> {\n    SELECT ?orthologous_protein ?protein ?gene WHERE {\n    ?protein_OMA a orth:Protein .\n    ?orthologous_protein a orth:Protein .\n    ?cluster a orth:OrthologsCluster .\n    ?cluster orth:hasHomologousMember ?node1 .\n    ?cluster\n    orth:hasHomologousMember ?node2 .\n    ?node2 orth:hasHomologousMember* ?protein_OMA .\n    ?node1 orth:hasHomologousMember* ?orthologous_protein .\n    ?orthologous_protein orth:organism/obo:RO_0002162 taxon:10116 . # rattus norvegicus\n    ?orthologous_protein sio:SIO_010079 ?gene .\n    ?protein_OMA lscr:xrefUniprot ?protein .\n    FILTER(?node1 != ?node2)\n\t\t}\n\t}\n  SERVICE <https://www.bgee.org/sparql/> {\n    ?gene genex:isExpressedIn ?a .\n    ?a rdfs:label \"brain\" .\n    ?gene orth:organism ?s . \n    ?s obo:RO_0002162 taxon:10116.\n\t}\n}",
    "target_endpoint": "https://sparql.uniprot.org/sparql",
    "federates_with": [
      "https://sparql.omabrowser.org/sparql/",
      "https://www.bgee.org/sparql/"
    ],
    "endpoint_set": "Uniprot",
    "file_path": "UniProt/117_biosodafrontend_glioblastoma_orthologs_rat.ttl",
    "predicted_query": "# https://sparql.uniprot.org/sparql\nPREFIX up: <http://purl.uniprot.org/core/>\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX taxon: <http://purl.uniprot.org/taxonomy/>\n\nSELECT DISTINCT ?protein ?proteinName ?ortholog ?orthologName\nWHERE {\n  # Find proteins associated with glioblastoma\n  ?disease a up:Disease .\n  ?disease rdfs:label \"Glioma\" . #Match the label of the disease\n  ?protein up:annotation ?disease .\n  ?protein a up:Protein .\n  ?protein rdfs:label ?proteinName .\n\n  # Find orthologs of the proteins expressed in rat brain\n  SERVICE <https://sparql.uniprot.org/sparql> {\n    ?ortholog up:sequence ?protein . # Assuming sequence similarity implies orthology\n    ?ortholog a up:Protein .\n    ?ortholog rdfs:label ?orthologName .\n    ?ortholog up:organism taxon:10116 .  #Rat taxonomy ID\n  }\n}",
    "predicted_endpoint": "https://sparql.uniprot.org/sparql",
    "predicted_endpoint_equal_to_target_endpoint": true,
    "predicted_endpoint_in_federates_with": false,
    "predicted_endpoint_or_federated_endpoint": true,
    "run_id_langsmith": "ff1a1526-4f62-44c2-b800-0984c774959f",
    "evaluation_timestamp": "2025-04-25T17:10:11.383920",
    "question_understanding_tokens": 248,
    "question_understanding_completion_tokens": 37,
    "question_understanding_total_tokens": 285,
    "sparql_construction_prompt_tokens": 2546,
    "sparql_construction_completion_tokens": 431,
    "sparql_construction_total_tokens": 2977,
    "is_valid_sparql": true,
    "sparql_syntax_error": "syntactically correct",
    "result_eval_f1_score": 0.0,
    "result_eval_precision": 0.0,
    "result_eval_recall": 0.0,
    "error_occured_at_endpoint": false,
    "predicted_query_result_is_empty": true,
    "error_occured_at_endpoint_message": "no error, but empty result"
  },
  {
    "resource": "https://sparql.uniprot.org/.well-known/sparql-examples/116_biosodafrontend_rabit_mouse_orthologs",
    "natural_language_question": "Rabbit's proteins encoded by genes that are orthologous to Mouse's HBB-Y gene and their cross reference links to Uniprot",
    "ground_truth_query": "PREFIX lscr: <http://purl.org/lscr#>\nPREFIX orth: <http://purl.org/net/orth#>\nPREFIX up: <http://purl.uniprot.org/core/>\nPREFIX obo: <http://purl.obolibrary.org/obo/>\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nSELECT DISTINCT ?PROTEIN_1 ?PROTEIN_2 ?UNIPROT_XREF_1 ?UNIPROT_XREF_2 WHERE {\n\t?taxon_1 up:commonName 'Mouse' .\n\t?taxon_2 up:commonName 'Rabbit' .\n\tSERVICE <https://sparql.omabrowser.org/sparql/> {\n\t\t?cluster a orth:OrthologsCluster .\n\t\t?cluster orth:hasHomologousMember ?node1 .\n\t\t?cluster orth:hasHomologousMember ?node2 .\n\t\t?node2 orth:hasHomologousMember* ?PROTEIN_2 .\n\t\t?node1 orth:hasHomologousMember* ?PROTEIN_1 .\n\t\t?PROTEIN_1 a orth:Protein .\n\t\t?PROTEIN_1 orth:organism/obo:RO_0002162 ?taxon_1 ;\n\t\t\trdfs:label 'HBB-Y' ;\n\t\t\tlscr:xrefUniprot ?UNIPROT_XREF_1 .\n\t\t?PROTEIN_2 a orth:Protein .\n\t\t?PROTEIN_2 orth:organism/obo:RO_0002162 ?taxon_2 .\n\t\t?PROTEIN_2 lscr:xrefUniprot ?UNIPROT_XREF_2 .\n\t\tFILTER ( ?node1 != ?node2 )\n\t}\n}",
    "target_endpoint": "https://sparql.uniprot.org/sparql",
    "federates_with": [
      "https://sparql.omabrowser.org/sparql/"
    ],
    "endpoint_set": "Uniprot",
    "file_path": "UniProt/116_biosodafrontend_rabit_mouse_orthologs.ttl",
    "predicted_query": "# https://sparql.uniprot.org/sparql\nPREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX up: <http://purl.uniprot.org/core/>\nPREFIX taxon: <http://purl.uniprot.org/taxonomy/>\n\nSELECT ?rabbitProtein ?uniprotCrossReference\nWHERE {\n  # Find the UniProt ID for the Mouse HBB-Y gene.  We'll use a subquery for clarity.\n  SERVICE <https://sparql.uniprot.org/sparql> {\n    VALUES ?mouseTaxon { taxon:10090 } # Mouse Taxon ID\n    ?mouseGene a up:Protein .\n    ?mouseGene up:organism ?mouseTaxon .\n    FILTER (CONTAINS(STR(?mouseGene), \"HBB-Y\")) # Filter for HBB-Y gene.  This is an approximation, ideally we'd have a precise identifier.\n  }\n\n  # Find Rabbit proteins orthologous to the Mouse HBB-Y gene\n  SERVICE <https://sparql.uniprot.org/sparql> {\n    VALUES ?rabbitTaxon { taxon:9986 } # Rabbit Taxon ID\n    ?rabbitProtein a up:Protein .\n    ?rabbitProtein up:organism ?rabbitTaxon .\n    ?rabbitProtein up:gene ?rabbitGene .\n    ?rabbitGene up:orthologousTo ?mouseGene . # Find orthologs to the mouse gene.\n    OPTIONAL { ?rabbitProtein rdfs:seeAlso ?uniprotCrossReference . } # Get cross-references.\n  }\n}",
    "predicted_endpoint": "https://sparql.uniprot.org/sparql",
    "predicted_endpoint_equal_to_target_endpoint": true,
    "predicted_endpoint_in_federates_with": false,
    "predicted_endpoint_or_federated_endpoint": true,
    "run_id_langsmith": "3c546bb6-0742-4c70-b30c-299405010be2",
    "evaluation_timestamp": "2025-04-25T17:10:54.057041",
    "question_understanding_tokens": 260,
    "question_understanding_completion_tokens": 49,
    "question_understanding_total_tokens": 309,
    "sparql_construction_prompt_tokens": 3427,
    "sparql_construction_completion_tokens": 632,
    "sparql_construction_total_tokens": 4059,
    "is_valid_sparql": true,
    "sparql_syntax_error": "syntactically correct",
    "result_eval_f1_score": 0.0,
    "result_eval_precision": 0.0,
    "result_eval_recall": 0.0,
    "error_occured_at_endpoint": true,
    "predicted_query_result_is_empty": true,
    "error_occured_at_endpoint_message": "QueryBadFormed: A bad request has been sent to the endpoint: probably the SPARQL query is badly formed."
  },
  {
    "resource": "https://sparql.uniprot.org/.well-known/sparql-examples/29",
    "natural_language_question": "Use <a href=\"http://allie.dbcls.jp/\">ALLIE</a> a service for Abbreviation / Long Form in Japanese and English to search in UniProt using Japanese.",
    "ground_truth_query": "PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX up: <http://purl.uniprot.org/core/>\n\nSELECT ?protein ?englishLabelStr\nWHERE {\n    SERVICE <https://data.allie.dbcls.jp/sparql>{\n        ?x rdfs:label \"アミロイド前駆体タンパク質\"@ja ;\n            rdfs:label ?englishLabel .\n        FILTER(lang(?englishLabel) = \"en\")\n    }\n    BIND (STR(?englishLabel) AS ?englishLabelStr)\n    ?protein a up:Protein .\n    {\n        ?protein (up:recommendedName|up:alternativeName) ?structuredName .\n    }\n    UNION\n    {\n        VALUES(?partType){(up:domain) (up:component)}\n            ?protein ?partType ?part .\n        ?part (up:recommendedName|up:alternativeName) ?structuredName .\n    }\n    ?structuredName ?anyKindOfName  ?englishLabelStr .\n    ?anyKindOfName rdfs:subPropertyOf up:structuredNameType .\n}",
    "target_endpoint": "https://sparql.uniprot.org/sparql/",
    "federates_with": [
      "https://data.allie.dbcls.jp/sparql"
    ],
    "endpoint_set": "Uniprot",
    "file_path": "UniProt/29_search_uniprot_in_japanese_with_allie.ttl",
    "predicted_query": "# https://sparql.uniprot.org/sparql\n# This query assumes the user has already used ALLIE to translate their Japanese abbreviation/long form into an English term.\n# The query searches UniProt for proteins whose names or keywords contain the translated term.\n\nPREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX up: <http://purl.uniprot.org/core/>\n\nSELECT ?protein ?proteinName ?keyword\nWHERE {\n  ?protein a up:Protein .\n  ?protein rdfs:label ?proteinName . # Protein name\n\n  # Search for the translated term in the protein name (replace \"TRANSLATED_TERM\" with the actual translated term from ALLIE)\n  FILTER (CONTAINS(LCASE(?proteinName), LCASE(\"TRANSLATED_TERM\")))\n\n  OPTIONAL {\n    ?protein up:keyword ?keywordResource .\n    ?keywordResource rdfs:label ?keyword .\n  }\n}",
    "predicted_endpoint": "https://sparql.uniprot.org/sparql",
    "predicted_endpoint_equal_to_target_endpoint": true,
    "predicted_endpoint_in_federates_with": false,
    "predicted_endpoint_or_federated_endpoint": true,
    "run_id_langsmith": "6fef65fe-a107-4b04-81cd-66c1ade8526d",
    "evaluation_timestamp": "2025-04-25T17:11:14.558312",
    "question_understanding_tokens": 269,
    "question_understanding_completion_tokens": 22,
    "question_understanding_total_tokens": 291,
    "sparql_construction_prompt_tokens": 1953,
    "sparql_construction_completion_tokens": 594,
    "sparql_construction_total_tokens": 2547,
    "is_valid_sparql": true,
    "sparql_syntax_error": "syntactically correct",
    "result_eval_f1_score": 0.0,
    "result_eval_precision": 0.0,
    "result_eval_recall": 0.0,
    "error_occured_at_endpoint": true,
    "predicted_query_result_is_empty": true,
    "error_occured_at_endpoint_message": "The read operation timed out"
  },
  {
    "resource": "https://sparql.rhea-db.org/.well-known/sparql-examples/94_Select_all_approved_reactions_with_CHEBI_or_one_of_its_descendant_optional_UniProtKB_reviewed_EC",
    "natural_language_question": "Select all approved reactions with CHEBI:17815 (a 1,2-diacyl-sn-glycerol) or one of its descendant. Display links to UniProtKB/Swiss-Prot entries via EC numbers if the link rhea-ec exists.",
    "ground_truth_query": "PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX rh:<http://rdf.rhea-db.org/>\nPREFIX CHEBI:<http://purl.obolibrary.org/obo/CHEBI_>\nPREFIX up:<http://purl.uniprot.org/core/>\n\nSELECT\n  distinct\n    ?reaction\n    ?enzyme\n    (count(distinct ?protein) as ?proteinCount)\nWHERE {\n  ?reaction rdfs:subClassOf rh:Reaction .\n  ?reaction rh:status rh:Approved .\n  ?reaction rh:side ?reactionSide .\n\n  OPTIONAL {?reaction rh:ec ?enzyme .\n    SERVICE <https://sparql.uniprot.org/sparql> {\n      ?protein up:reviewed true .\n      ?protein up:enzyme ?enzyme.\n    }\n  }.\n  ?reactionSide rh:contains ?participant .\n  ?participant rh:compound ?compound .\n  ?compound rh:chebi ?chebi .\n  ?chebi rdfs:subClassOf* CHEBI:17815 .\n}\nGROUP BY ?reaction ?enzyme\nORDER BY ?reaction\nLIMIT 10",
    "target_endpoint": "https://sparql.rhea-db.org/sparql",
    "federates_with": [
      "https://sparql.uniprot.org/sparql"
    ],
    "endpoint_set": "Rhea",
    "file_path": "Rhea/94_Select_all_approved_reactions_with_CHEBI_or_one_of_its_descendant_optional_UniProtKB_reviewed_EC.ttl",
    "predicted_query": "# https://sparql.rhea-db.org/sparql\nPREFIX rhea: <http://rdf.rhea-db.org/>\nPREFIX chebi: <http://purl.obolibrary.org/obo/CHEBI_>\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>\n\nSELECT DISTINCT ?reaction ?uniprotEntry\nWHERE {\n  # Find CHEBI:17815 and its descendants\n  {\n    BIND(chebi:17815 AS ?chebiEntity)\n  }\n  UNION\n  {\n    ?chebiEntity rdfs:subClassOf chebi:17815 .\n  }\n\n  # Find reactions that have ?chebiEntity as a participant\n  ?reaction rhea:has_participant ?chebiEntity .\n  ?reaction rhea:status \"approved\" . # Filter for approved reactions\n\n  # OPTIONAL: Find EC numbers associated with the reaction and link to UniProt\n  OPTIONAL {\n    ?reaction rhea:ec ?ecNumber .\n    SERVICE <https://sparql.uniprot.org/sparql> {\n      ?uniprotEntry <http://purl.uniprot.org/core/annotation> ?annotation .\n      ?annotation <http://purl.uniprot.org/core/classifiedWith> ?ecNumber .\n    }\n  }\n}",
    "predicted_endpoint": "https://sparql.rhea-db.org/sparql",
    "predicted_endpoint_equal_to_target_endpoint": true,
    "predicted_endpoint_in_federates_with": false,
    "predicted_endpoint_or_federated_endpoint": true,
    "run_id_langsmith": "1cace183-bd72-422d-b41d-4d4d18d7577c",
    "evaluation_timestamp": "2025-04-25T17:16:30.785310",
    "question_understanding_tokens": 283,
    "question_understanding_completion_tokens": 71,
    "question_understanding_total_tokens": 354,
    "sparql_construction_prompt_tokens": 2099,
    "sparql_construction_completion_tokens": 616,
    "sparql_construction_total_tokens": 2715,
    "is_valid_sparql": true,
    "sparql_syntax_error": "syntactically correct",
    "result_eval_f1_score": 0.0,
    "result_eval_precision": 0.0,
    "result_eval_recall": 0.0,
    "error_occured_at_endpoint": false,
    "predicted_query_result_is_empty": true,
    "error_occured_at_endpoint_message": "no error, but empty result"
  },
  {
    "resource": "https://sparql.rhea-db.org/.well-known/sparql-examples/11",
    "natural_language_question": "Distribution of reactions according to the first class of the enzyme classification (federated query)",
    "ground_truth_query": "PREFIX ec: <http://purl.uniprot.org/enzyme/>\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX rh: <http://rdf.rhea-db.org/>\nPREFIX skos: <http://www.w3.org/2004/02/skos/core#>\n\n# Query 11\n# Retrieve the count of reactions mapped to each level (main class) of the enzyme classification\n#\n# This query mimics the Filter section of the Rhea website (Browse all reactions)\n# https://www.rhea-db.org/rhea?query=\nSELECT ?ecClass (STR(?ecName) AS ?ecClassName) (COUNT(?rhea) AS ?rheaCount)\nWHERE {\n  SERVICE <https://sparql.uniprot.org/sparql> {\n    VALUES (?ecClass) { (ec:1.-.-.-)(ec:2.-.-.-)(ec:3.-.-.-)(ec:4.-.-.-)(ec:5.-.-.-) (ec:6.-.-.-) (ec:7.-.-.-)}\n    ?ecNumber rdfs:subClassOf ?ecClass .\n    ?ecClass skos:prefLabel ?ecName .\n  }\n  ?rhea rdfs:subClassOf rh:Reaction .\n  ?rhea rh:ec ?ecNumber .\n} GROUP BY ?ecClass ?ecName",
    "target_endpoint": "https://sparql.rhea-db.org/sparql",
    "federates_with": [
      "https://sparql.uniprot.org/sparql"
    ],
    "endpoint_set": "Rhea",
    "file_path": "Rhea/11.ttl",
    "predicted_query": "# https://sparql.uniprot.org/sparql\nPREFIX rhea: <http://rdf.rhea-db.org/>\nPREFIX uniprot: <http://purl.uniprot.org/core/>\n\nSELECT ?firstEnzymeClass (COUNT(DISTINCT ?reaction) AS ?reactionCount)\nWHERE {\n  # Query UniProt for enzymes and their EC numbers\n  SERVICE <https://sparql.uniprot.org/sparql> {\n    ?enzyme a uniprot:Protein .\n    ?enzyme uniprot:ecNumber ?ecNumber .\n    BIND(SUBSTR(STR(?ecNumber), 1, 1) AS ?firstEnzymeClass) # Extract the first digit of the EC number\n  }\n  \n  # Query Rhea for reactions associated with the EC numbers\n  SERVICE <https://sparql.rhea-db.org/sparql> {\n    ?reaction rhea:ec ?ecNumber .\n  }\n}\nGROUP BY ?firstEnzymeClass\nORDER BY ?firstEnzymeClass",
    "predicted_endpoint": "https://sparql.uniprot.org/sparql",
    "predicted_endpoint_equal_to_target_endpoint": false,
    "predicted_endpoint_in_federates_with": true,
    "predicted_endpoint_or_federated_endpoint": true,
    "run_id_langsmith": "b3d9ed61-df60-40e0-8de0-a4431c559229",
    "evaluation_timestamp": "2025-04-25T17:16:48.224250",
    "question_understanding_tokens": 249,
    "question_understanding_completion_tokens": 27,
    "question_understanding_total_tokens": 276,
    "sparql_construction_prompt_tokens": 1962,
    "sparql_construction_completion_tokens": 422,
    "sparql_construction_total_tokens": 2384,
    "is_valid_sparql": true,
    "sparql_syntax_error": "syntactically correct",
    "result_eval_f1_score": 0.0,
    "result_eval_precision": 0.0,
    "result_eval_recall": 0.0,
    "error_occured_at_endpoint": true,
    "predicted_query_result_is_empty": true,
    "error_occured_at_endpoint_message": "QueryBadFormed: A bad request has been sent to the endpoint: probably the SPARQL query is badly formed."
  },
  {
    "resource": "https://sparql.rhea-db.org/.well-known/sparql-examples/109_Distribution_of_reactions_according_to_the_first_level_of_enzyme_classification",
    "natural_language_question": "Distribution of reactions according to the first level of enzyme classification",
    "ground_truth_query": "\nPREFIX rh:<http://rdf.rhea-db.org/>\nPREFIX ec:<http://purl.uniprot.org/enzyme/>\nPREFIX rdfs:<http://www.w3.org/2000/01/rdf-schema#>\nPREFIX skos:<http://www.w3.org/2004/02/skos/core#>\n\nSELECT\n  ?ecClass\n  (str(?ecName) as ?ecClassName)\n  (count(?reaction) as ?reactionCount)\nWHERE\n{\n  SERVICE <http://sparql.uniprot.org/sparql> {\n    VALUES (?ecClass) { (ec:1.-.-.-)(ec:2.-.-.-)(ec:3.-.-.-)(ec:4.-.-.-)(ec:5.-.-.-) (ec:6.-.-.-) (ec:7.-.-.-) }\n    ?ecNumber rdfs:subClassOf ?ecClass .\n    ?ecClass skos:prefLabel ?ecName .\n  }\n  ?reaction rdfs:subClassOf rh:Reaction .\n  ?reaction rh:ec ?ecNumber .\n}\nGROUP BY ?ecClass ?ecName\n",
    "target_endpoint": "https://sparql.rhea-db.org/sparql",
    "federates_with": [
      "http://sparql.uniprot.org/sparql"
    ],
    "endpoint_set": "Rhea",
    "file_path": "Rhea/109_Distribution_of_reactions_according_to_the_first_level_of_enzyme_classification.ttl",
    "predicted_query": "# https://sparql.rhea-db.org/sparql\nPREFIX rhea: <http://rdf.rhea-db.org/>\nPREFIX uniprot: <http://purl.uniprot.org/core/>\nPREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\n\nSELECT ?firstLevelEC (COUNT(DISTINCT ?reaction) AS ?reactionCount)\nWHERE {\n  # Get reactions and their associated UniProt IDs from Rhea\n  ?reaction a rhea:Reaction .\n  ?reaction rhea:enzyme ?enzyme .\n  ?enzyme rdfs:seeAlso ?uniprotURI .\n  \n  # Extract UniProt ID from the URI\n  BIND(REPLACE(str(?uniprotURI), \"http://purl.uniprot.org/uniprot/\", \"\") AS ?uniprotID)\n\n  # Query UniProt for EC number based on UniProt ID\n  SERVICE <https://sparql.uniprot.org/sparql> {\n    ?enzymeUniProt a uniprot:Protein ;\n                   uniprot:ecNumber ?ecNumber .\n    FILTER regex(str(?enzymeUniProt), ?uniprotID, \"i\") # Filter to match the uniprot ID from Rhea\n  }\n  \n  # Extract the first level EC number\n  BIND(SUBSTR(str(?ecNumber), 1, 1) AS ?firstLevelEC)\n}\nGROUP BY ?firstLevelEC\nORDER BY ?firstLevelEC",
    "predicted_endpoint": "https://sparql.rhea-db.org/sparql",
    "predicted_endpoint_equal_to_target_endpoint": true,
    "predicted_endpoint_in_federates_with": false,
    "predicted_endpoint_or_federated_endpoint": true,
    "run_id_langsmith": "54f20ec0-3e62-482f-a022-bec70ba36892",
    "evaluation_timestamp": "2025-04-25T17:16:57.713974",
    "question_understanding_tokens": 239,
    "question_understanding_completion_tokens": 24,
    "question_understanding_total_tokens": 263,
    "sparql_construction_prompt_tokens": 1542,
    "sparql_construction_completion_tokens": 587,
    "sparql_construction_total_tokens": 2129,
    "is_valid_sparql": true,
    "sparql_syntax_error": "syntactically correct",
    "result_eval_f1_score": 0.0,
    "result_eval_precision": 0.0,
    "result_eval_recall": 0.0,
    "error_occured_at_endpoint": false,
    "predicted_query_result_is_empty": true,
    "error_occured_at_endpoint_message": "no error, but empty result"
  },
  {
    "resource": "https://sparql.rhea-db.org/.well-known/sparql-examples/12",
    "natural_language_question": "Select all Rhea reactions linked to protein sequences (enzymes and transporters) in UniProtKB",
    "ground_truth_query": "PREFIX rh: <http://rdf.rhea-db.org/>\nPREFIX up: <http://purl.uniprot.org/core/>\n\n# Query 12\n# Select all Rhea reactions used to annotate enzyme sequences in UniProtKB\n# return the number of UniProtKB entries\n# Federated query using a service to UniProt SPARQL endpoint\n#\n# This query corresponds to the Rhea website query:\n# https://www.rhea-db.org/rhea?query=uniprot:*\n#\nSELECT ?uniprotCount ?rhea ?accession ?equation \nWHERE {\n  SERVICE <https://sparql.uniprot.org/sparql> { \n  \tSELECT ?rhea (count(?uniprot) as ?uniprotCount) {\n      ?uniprot up:annotation/up:catalyticActivity/up:catalyzedReaction ?rhea . \n  \t}\n  \tGROUP BY ?rhea\n  }\n  ?rhea rh:accession ?accession .\n  ?rhea rh:equation ?equation .\n}",
    "target_endpoint": "https://sparql.rhea-db.org/sparql",
    "federates_with": [
      "https://sparql.uniprot.org/sparql"
    ],
    "endpoint_set": "Rhea",
    "file_path": "Rhea/12.ttl",
    "predicted_query": "# https://sparql.rhea-db.org/sparql\nPREFIX rhea: <http://rdf.rhea-db.org/>\nPREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>\n\nSELECT DISTINCT ?rheaReaction\nWHERE {\n  # Query Rhea reactions from Rhea DB\n  SERVICE <https://sparql.rhea-db.org/sparql> {\n    ?rheaReaction rdf:type rhea:Reaction .\n    # Assuming there's a property linking reactions to enzymes (proteins).  This might need adjustment based on the actual Rhea schema.\n    ?rheaReaction rhea:enzyme ?enzyme .\n  }\n\n  # Query UniProt for protein sequences linked to the enzymes\n  SERVICE <https://sparql.uniprot.org/sparql> {\n    ?protein a <http://purl.uniprot.org/core/Protein> . # Filter for protein sequences\n    # Assuming there's a way to link the Rhea enzyme identifier to a UniProt protein identifier. This is a crucial linking step.\n    # This might involve using a cross-reference property or a shared identifier.\n    # Example: FILTER (STR(?enzyme) = STR(?protein))  # Simple string comparison (adjust as needed)\n    FILTER (CONTAINS(STR(?protein), STR(?enzyme))) # Another possible filter\n  }\n}",
    "predicted_endpoint": "https://sparql.rhea-db.org/sparql",
    "predicted_endpoint_equal_to_target_endpoint": true,
    "predicted_endpoint_in_federates_with": false,
    "predicted_endpoint_or_federated_endpoint": true,
    "run_id_langsmith": "f1912cc9-03e4-43f7-bec2-3670bdc72501",
    "evaluation_timestamp": "2025-04-25T17:17:15.122744",
    "question_understanding_tokens": 248,
    "question_understanding_completion_tokens": 30,
    "question_understanding_total_tokens": 278,
    "sparql_construction_prompt_tokens": 1793,
    "sparql_construction_completion_tokens": 0,
    "sparql_construction_total_tokens": 1793,
    "is_valid_sparql": true,
    "sparql_syntax_error": "syntactically correct",
    "result_eval_f1_score": 0.0,
    "result_eval_precision": 0.0,
    "result_eval_recall": 0.0,
    "error_occured_at_endpoint": false,
    "predicted_query_result_is_empty": true,
    "error_occured_at_endpoint_message": "no error, but empty result"
  },
  {
    "resource": "https://sparql.rhea-db.org/.well-known/sparql-examples/112_Total_number_of_reaction_ec_protein_links",
    "natural_language_question": "Total number of <reaction> <ec> <protein> links",
    "ground_truth_query": "PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX rh:<http://rdf.rhea-db.org/>\nPREFIX ec:<http://purl.uniprot.org/enzyme/>\nPREFIX up:<http://purl.uniprot.org/core/>\n\nSELECT\n  (count(?reaction) as ?reactionEcProteinLinkCount)\nWHERE {\n  ?reaction rdfs:subClassOf rh:Reaction .\n  ?reaction rh:ec ?enzyme\n  SERVICE <http://sparql.uniprot.org/sparql> {\n    ?protein up:reviewed true .\n    ?protein up:enzyme ?enzyme.\n  }\n}",
    "target_endpoint": "https://sparql.rhea-db.org/sparql",
    "federates_with": [
      "http://sparql.uniprot.org/sparql"
    ],
    "endpoint_set": "Rhea",
    "file_path": "Rhea/112_Total_number_of_reaction_ec_protein_links.ttl",
    "predicted_query": "# https://sparql.rhea-db.org/sparql\nPREFIX rhea: <http://rdf.rhea-db.org/>\nPREFIX chebi: <http://purl.obolibrary.org/obo/CHEBI_>\n\nSELECT (COUNT(DISTINCT ?reaction) AS ?totalLinks)\nWHERE {\n  # Find reactions in RheaDB\n  ?reaction a rhea:Reaction .\n\n  # Optionally link reactions to EC numbers. Not all reactions have EC numbers.\n  OPTIONAL { ?reaction rhea:ec ?ec . }\n\n  # Use the UniProt SPARQL endpoint to find proteins associated with the EC number\n  SERVICE <https://sparql.uniprot.org/sparql> {\n    ?protein rdfs:label ?proteinLabel . # Added to ensure ?protein is bound and avoid errors\n    ?proteinUniProt skos:exactMatch ?ec . # Link UniProt proteins to the EC number\n    FILTER STRSTARTS(str(?ec), \"http://purl.uniprot.org/enzyme/\") # Ensure ?ec is an EC number in UniProt\n  }\n}",
    "predicted_endpoint": "https://sparql.rhea-db.org/sparql",
    "predicted_endpoint_equal_to_target_endpoint": true,
    "predicted_endpoint_in_federates_with": false,
    "predicted_endpoint_or_federated_endpoint": true,
    "run_id_langsmith": "584abe6d-9738-477c-85d3-ad4cdccd3d14",
    "evaluation_timestamp": "2025-04-25T17:17:29.563095",
    "question_understanding_tokens": 245,
    "question_understanding_completion_tokens": 21,
    "question_understanding_total_tokens": 266,
    "sparql_construction_prompt_tokens": 2170,
    "sparql_construction_completion_tokens": 380,
    "sparql_construction_total_tokens": 2550,
    "is_valid_sparql": false,
    "sparql_syntax_error": "Line 15, column 14: Unresolved prefixed name: rdfs:label",
    "result_eval_f1_score": 0.0,
    "result_eval_precision": 0.0,
    "result_eval_recall": 0.0,
    "error_occured_at_endpoint": false,
    "predicted_query_result_is_empty": true,
    "error_occured_at_endpoint_message": "syntactically not correct"
  },
  {
    "resource": "https://sparql.rhea-db.org/.well-known/sparql-examples/19_draft_human_metabolome",
    "natural_language_question": "Generate a draft human metabolome",
    "ground_truth_query": "PREFIX chebislash: <http://purl.obolibrary.org/obo/chebi/>\nPREFIX rh: <http://rdf.rhea-db.org/>\nPREFIX taxon: <http://purl.uniprot.org/taxonomy/>\nPREFIX up: <http://purl.uniprot.org/core/>\n\nSELECT\n  ?uniprot ?mnemonic ?rhea ?chebi ?smiles ?inchiKey\nWHERE\n{\n  ?rhea rh:side/rh:contains/rh:compound ?compound .\n  ?compound (rh:chebi|(rh:reactivePart/rh:chebi)|(rh:underlyingChebi/rh:chebi)) ?chebi .\n  ?chebi chebislash:smiles ?smiles ;\n          chebislash:inchikey ?inchiKey .\n  SERVICE <https://sparql.uniprot.org/sparql> {\n     ?uniprot up:annotation/up:catalyticActivity/up:catalyzedReaction ?rhea ;\n                                             up:organism taxon:9606 ;\n                                             up:mnemonic ?mnemonic .\n\n   }\n}",
    "target_endpoint": "https://sparql.rhea-db.org/sparql/",
    "federates_with": [
      "https://sparql.uniprot.org/sparql"
    ],
    "endpoint_set": "Rhea",
    "file_path": "Rhea/19_draft_human_metabolome.ttl",
    "predicted_query": "# https://sparql.uniprot.org/sparql\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX up: <http://purl.uniprot.org/core/>\nPREFIX taxon: <http://purl.uniprot.org/taxonomy/>\nPREFIX rhea: <http://rdf.rhea-db.org/>\nPREFIX chebi: <http://purl.obolibrary.org/obo/CHEBI_>\nPREFIX sl: <http://swisslipids.org/rdf#>\n\nSELECT DISTINCT ?metabolite ?metaboliteName\nWHERE {\n  { # Metabolites from UniProt and Rhea\n    SERVICE <https://sparql.uniprot.org/sparql> {\n      # Find human proteins\n      ?protein a up:Protein ;\n               up:organism taxon:9606 .  # 9606 is the NCBI taxonomy ID for Homo sapiens\n\n      # Link to Rhea reactions via UniProt's cross-references (if available) - this might be sparse\n      OPTIONAL { ?protein up:xref ?rheaXref .\n                 ?rheaXref a up:Resource ;\n                          rdfs:label ?rheaId .\n                 FILTER CONTAINS(STR(?rheaId), \"RHEA:\")\n                 BIND(IRI(REPLACE(STR(?rheaId), \"RHEA:(.*)\", \"http://rdf.rhea-db.org/\\\\1\")) AS ?rheaReaction)\n        }\n    }\n    OPTIONAL {\n      SERVICE <https://sparql.rhea-db.org/sparql> {\n        # If we found a Rhea reaction, extract reactants and products\n        VALUES ?relation { rhea:reactant rhea:product }\n        ?rheaReaction ?relation ?chebiEntity .\n        ?chebiEntity rdfs:seeAlso ?chebi . #chebi ID\n        SERVICE <https://sparql.uniprot.org/sparql>{\n          ?chebi rdfs:label ?metaboliteName .\n          BIND(STR(?chebi) AS ?metabolite)\n        }\n      }\n    }\n  }\n  UNION\n  { #Lipids from SwissLipids\n    SERVICE <https://sparql.swisslipids.org/sparql/> {\n      ?lipid a sl:Lipid ;\n             sl:species \"Homo sapiens\" ; # Filter for human lipids\n             rdfs:label ?metaboliteName .\n      BIND(STR(?lipid) AS ?metabolite)\n    }\n  }\n}",
    "predicted_endpoint": "https://sparql.uniprot.org/sparql",
    "predicted_endpoint_equal_to_target_endpoint": false,
    "predicted_endpoint_in_federates_with": true,
    "predicted_endpoint_or_federated_endpoint": true,
    "run_id_langsmith": "524caff7-5615-499f-8b5f-3c40a5f40014",
    "evaluation_timestamp": "2025-04-25T17:17:42.461859",
    "question_understanding_tokens": 236,
    "question_understanding_completion_tokens": 20,
    "question_understanding_total_tokens": 256,
    "sparql_construction_prompt_tokens": 1451,
    "sparql_construction_completion_tokens": 790,
    "sparql_construction_total_tokens": 2241,
    "is_valid_sparql": true,
    "sparql_syntax_error": "syntactically correct",
    "result_eval_f1_score": 0.0,
    "result_eval_precision": 0.0,
    "result_eval_recall": 0.0,
    "error_occured_at_endpoint": true,
    "predicted_query_result_is_empty": true,
    "error_occured_at_endpoint_message": "QueryBadFormed: A bad request has been sent to the endpoint: probably the SPARQL query is badly formed."
  },
  {
    "resource": "https://sparql.rhea-db.org/.well-known/sparql-examples/20_search_chemical_names_in_japanese",
    "natural_language_question": "Search for Chemical names starting in Japanese, translated to english using allie",
    "ground_truth_query": "PREFIX oboInOwl: <http://www.geneontology.org/formats/oboInOwl#>\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\n\nSELECT\n*\nWHERE {\nSERVICE <https://data.allie.dbcls.jp/sparql>{\n        ?x rdfs:label \"1,2,4-トリクロロベンゼン\"@ja ;\n            rdfs:label ?englishLabel .\n        FILTER(lang(?englishLabel) = \"en\")\n    }\n  BIND(STR(?englishLabel) AS ?englishLabelStr)\n  ?chebi rdfs:label|oboInOwl:hasSynonym ?englishLabelStr .\n}",
    "target_endpoint": "https://sparql.rhea-db.org/sparql/",
    "federates_with": [
      "https://data.allie.dbcls.jp/sparql"
    ],
    "endpoint_set": "Rhea",
    "file_path": "Rhea/20_search_chemical_names_in_japanese.ttl",
    "predicted_query": "# https://sparql.rhea-db.org/sparql\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX chebi: <http://purl.obolibrary.org/obo/CHEBI_>\n\nSELECT DISTINCT ?chebiNameEn\nWHERE {\n  # Find ChEBI entities with names starting with \"Japanese\"\n  ?chebiEntity rdfs:label ?chebiName .\n  FILTER (STRSTARTS(LCASE(?chebiName), \"japanese\"))\n\n  # Attempt to retrieve the English label for the ChEBI entity.\n  # This assumes there's a direct rdfs:label in English.\n  # If the data model is different, this part needs adjustment.\n  OPTIONAL {\n    ?chebiEntity rdfs:label ?chebiNameEn .\n    FILTER (LANG(?chebiNameEn) = \"en\")\n  }\n\n  #If no english label is found, return the original label\n  BIND(IF(!BOUND(?chebiNameEn), ?chebiName, ?chebiNameEn) AS ?chebiNameEn)\n}",
    "predicted_endpoint": "https://sparql.rhea-db.org/sparql",
    "predicted_endpoint_equal_to_target_endpoint": true,
    "predicted_endpoint_in_federates_with": false,
    "predicted_endpoint_or_federated_endpoint": true,
    "run_id_langsmith": "db35c54f-130c-4fc2-959a-2808c1b903e2",
    "evaluation_timestamp": "2025-04-25T17:18:02.674168",
    "question_understanding_tokens": 248,
    "question_understanding_completion_tokens": 23,
    "question_understanding_total_tokens": 271,
    "sparql_construction_prompt_tokens": 1480,
    "sparql_construction_completion_tokens": 412,
    "sparql_construction_total_tokens": 1892,
    "is_valid_sparql": false,
    "sparql_syntax_error": "BIND: Variable used when already in-scope: ?chebiNameEn in BIND(if(( ! bound(?chebiNameEn) ), ?chebiName, ?chebiNameEn) AS ?chebiNameEn)",
    "result_eval_f1_score": 0.0,
    "result_eval_precision": 0.0,
    "result_eval_recall": 0.0,
    "error_occured_at_endpoint": false,
    "predicted_query_result_is_empty": true,
    "error_occured_at_endpoint_message": "syntactically not correct"
  },
  {
    "resource": "https://sparql.rhea-db.org/.well-known/sparql-examples/117_Retrieve_parent_reactions_and_their_catalyzing_enzymes_for_a_metabolite_that_is_not_directly_involved_in_a_reaction",
    "natural_language_question": "Retrieve parent reactions (and their catalyzing enzymes) for a metabolite that is not directly involved in a reaction (ex: CHEBI:83137).",
    "ground_truth_query": "PREFIX CHEBI: <http://purl.obolibrary.org/obo/CHEBI_>\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX rh:<http://rdf.rhea-db.org/>\nPREFIX ec:<http://purl.uniprot.org/enzyme/>\nPREFIX up:<http://purl.uniprot.org/core/>\nPREFIX taxon:<http://purl.uniprot.org/taxonomy/>\nPREFIX keywords:<http://purl.uniprot.org/keywords/>\n\nSELECT\n  ?chebi\n  ?ecNumber\n  (count(?protein) as ?proteinCount)\n  ?reaction\n  ?equation\nWHERE {\n  ?reaction rdfs:subClassOf rh:Reaction .\n  ?reaction rh:status rh:Approved .\n  ?reaction rh:equation ?equation .\n  ?reaction rh:ec ?ecNumber .\n  ?reaction rh:side ?reactionSide .\n  ?reactionSide rh:contains ?participant .\n  ?participant rh:compound ?compound .\n  ?compound rh:chebi ?chebi .\n  CHEBI:83137 rdfs:subClassOf+ ?chebi.\n\n  SERVICE <https://sparql.uniprot.org/sparql> {\n  ?protein a up:Protein .\n  ?protein up:reviewed true .\n    {?protein up:enzyme ?ecNumber}\n  UNION\n    {?protein up:domain/up:enzyme ?ecNumber}\n  UNION\n    {?protein up:component/up:enzyme ?ecNumber} .\n  }\n} \nGROUP BY ?chebi ?ecNumber ?reaction ?equation",
    "target_endpoint": "https://sparql.rhea-db.org/sparql",
    "federates_with": [
      "https://sparql.uniprot.org/sparql"
    ],
    "endpoint_set": "Rhea",
    "file_path": "Rhea/117_Retrieve_parent_reactions_and_their_catalyzing_enzymes_for_a_metabolite_that_is_not_directly_involved_in_a_reaction.ttl",
    "predicted_query": "# https://sparql.rhea-db.org/sparql\nPREFIX rhea: <http://rdf.rhea-db.org/>\nPREFIX chebi: <http://purl.obolibrary.org/obo/CHEBI_>\nPREFIX uniprot: <http://purl.uniprot.org/core/>\n\nSELECT DISTINCT ?parentReaction ?enzyme ?enzymeName WHERE {\n  # Find reactions where CHEBI:83137 is involved\n  {\n    SELECT DISTINCT ?reaction WHERE {\n      VALUES ?metabolite { chebi:83137 }\n      {\n        ?reaction rhea: Rhea_has_reactant ?metabolite .\n      }\n      UNION\n      {\n        ?reaction rhea: Rhea_has_product ?metabolite .\n      }\n    }\n  }\n\n  # Find parent reactions that use the products or produce the reactants of the initial reactions\n  {\n    SELECT DISTINCT ?parentReaction ?intermediate {\n      {\n        ?parentReaction rhea: Rhea_has_reactant ?intermediate .\n        ?reaction rhea: Rhea_has_product ?intermediate .\n      }\n      UNION\n      {\n        ?parentReaction rhea: Rhea_has_product ?intermediate .\n        ?reaction rhea: Rhea_has_reactant ?intermediate .\n      }\n    }\n  }\n\n  # Find the enzyme that catalyzes the parent reaction.  Try Rhea first.\n  OPTIONAL {\n    ?parentReaction rhea: Rhea_has_proteolytic_enzyme ?enzymeRhea .\n    BIND (?enzymeRhea AS ?enzyme)\n  }\n  OPTIONAL {\n    ?parentReaction rhea: Rhea_has_cofactor ?enzymeRhea .\n    BIND (?enzymeRhea AS ?enzyme)\n  }\n\n  # If no enzyme in Rhea, try UniProt\n  OPTIONAL {\n    SERVICE <https://sparql.uniprot.org/sparql> {\n      ?enzyme uniprot:catalyticActivity ?parentReaction .\n      ?enzyme rdfs:label ?enzymeName .\n    }\n  }\n}",
    "predicted_endpoint": "https://sparql.rhea-db.org/sparql",
    "predicted_endpoint_equal_to_target_endpoint": true,
    "predicted_endpoint_in_federates_with": false,
    "predicted_endpoint_or_federated_endpoint": true,
    "run_id_langsmith": "45294379-8fe8-48c5-b309-03efe979d438",
    "evaluation_timestamp": "2025-04-25T17:18:18.716890",
    "question_understanding_tokens": 266,
    "question_understanding_completion_tokens": 37,
    "question_understanding_total_tokens": 303,
    "sparql_construction_prompt_tokens": 2486,
    "sparql_construction_completion_tokens": 683,
    "sparql_construction_total_tokens": 3169,
    "is_valid_sparql": false,
    "sparql_syntax_error": "Lexical error at line 12, column 42.  Encountered: '32' (32), after prefix \"Rhea_has_reactant\"",
    "result_eval_f1_score": 0.0,
    "result_eval_precision": 0.0,
    "result_eval_recall": 0.0,
    "error_occured_at_endpoint": false,
    "predicted_query_result_is_empty": true,
    "error_occured_at_endpoint_message": "syntactically not correct"
  },
  {
    "resource": "https://sparql.rhea-db.org/.well-known/sparql-examples/18",
    "natural_language_question": "Use <a href=\"https://idsm.elixir-czech.cz/sparql\">IDSM Sachem</a> to find ChEBIs with a a <a href=\"https://www.ebi.ac.uk/chebi/searchId.do?chebiId=CHEBI:35516\">Cholestane</a> skeleton (in SMILES). Then match returned ChEBIs to Rhea undirected reactions.",
    "ground_truth_query": "PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX rh: <http://rdf.rhea-db.org/>\nPREFIX sachem: <http://bioinfo.uochb.cas.cz/rdf/v1.0/sachem#>\n\n\nSELECT \n  ?rhea \n  ?chebi\nWHERE {\n  SERVICE <https://idsm.elixir-czech.cz/sparql/endpoint/chebi> {\n    ?chebi sachem:substructureSearch [\n        sachem:query \"[C@]12(CCC3CCCC[C@]3(C)[C@@]1([H])CC[C@]1(C)[C@@]([H])([C@@](C)([H])CCCC(C)C)CC[C@@]21[H])[H]\" ].\n  }\n  ?rhea rh:side/rh:contains/rh:compound/rdfs:subClassOf ?chebi .\n}",
    "target_endpoint": "https://sparql.rhea-db.org/sparql",
    "federates_with": [
      "https://idsm.elixir-czech.cz/sparql/endpoint/chebi"
    ],
    "endpoint_set": "Rhea",
    "file_path": "Rhea/18.ttl",
    "predicted_query": "# https://sparql.rhea-db.org/sparql\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX chebi: <http://purl.obolibrary.org/obo/CHEBI_>\n\nSELECT DISTINCT ?rheaReaction\nWHERE {\n  # Subquery to get ChEBI IDs from IDSM Sachem that contain the Cholestane skeleton\n  SERVICE <https://idsm.elixir-czech.cz/sparql> {\n    SELECT DISTINCT ?chebiID WHERE {\n      ?compound a <http://www.w3.org/2002/07/owl#Class> . # Assuming compounds are defined as classes\n      ?compound <http://www.w3.org/2000/01/rdf-schema#subClassOf>* ?skeleton . # Assuming subclass relation indicates substructure\n      ?skeleton <http://www.w3.org/2000/01/rdf-schema#label> \"Cholestane skeleton\" . # Assuming labels are used\n      BIND(SUBSTR(STR(?compound), 32) AS ?chebiID) # Extract ChEBI ID from URI\n    }\n  }\n  \n  # Query Rhea DB to find reactions involving the ChEBI IDs\n  SERVICE <https://sparql.rhea-db.org/sparql> {\n    ?rheaReaction a <http://rdf.rhea-db.org/Reaction> .\n    {\n      ?rheaReaction rdfs:label ?label .\n      FILTER (CONTAINS(?label, ?chebiID))\n    }\n    UNION\n    {\n      ?rheaReaction <http://purl.obolibrary.org/obo/BFO_0000051> ?input .\n      ?input <http://purl.obolibrary.org/obo/BFO_0000051> ?chebi .\n      FILTER (STRSTARTS(str(?chebi), \"http://purl.obolibrary.org/obo/CHEBI_\"))\n      BIND(SUBSTR(STR(?chebi), 32) AS ?chebiID_rhea)\n      FILTER (?chebiID_rhea = ?chebiID)\n    }\n    UNION\n    {\n      ?rheaReaction <http://purl.obolibrary.org/obo/BFO_0000051> ?output .\n      ?output <http://purl.obolibrary.org/obo/BFO_0000051> ?chebi .\n      FILTER (STRSTARTS(str(?chebi), \"http://purl.obolibrary.org/obo/CHEBI_\"))\n      BIND(SUBSTR(STR(?chebi), 32) AS ?chebiID_rhea)\n      FILTER (?chebiID_rhea = ?chebiID)\n    }\n  }\n}",
    "predicted_endpoint": "https://sparql.rhea-db.org/sparql",
    "predicted_endpoint_equal_to_target_endpoint": true,
    "predicted_endpoint_in_federates_with": false,
    "predicted_endpoint_or_federated_endpoint": true,
    "run_id_langsmith": "4784bfb1-4d33-43cc-90c3-818854674444",
    "evaluation_timestamp": "2025-04-25T17:18:38.376188",
    "question_understanding_tokens": 327,
    "question_understanding_completion_tokens": 52,
    "question_understanding_total_tokens": 379,
    "sparql_construction_prompt_tokens": 2258,
    "sparql_construction_completion_tokens": 0,
    "sparql_construction_total_tokens": 2258,
    "is_valid_sparql": true,
    "sparql_syntax_error": "syntactically correct",
    "result_eval_f1_score": 0.0,
    "result_eval_precision": 0.0,
    "result_eval_recall": 0.0,
    "error_occured_at_endpoint": true,
    "predicted_query_result_is_empty": true,
    "error_occured_at_endpoint_message": "QueryBadFormed: A bad request has been sent to the endpoint: probably the SPARQL query is badly formed."
  },
  {
    "resource": "https://sparql.rhea-db.org/.well-known/sparql-examples/115_Retrieve_the_set_of_metabolites_involved_in_reactions_catalyzed_by_human_genes_HUMAN_reference_proteome",
    "natural_language_question": "Retrieve the set of metabolites involved in reactions catalyzed by human genes (HUMAN reference proteome)",
    "ground_truth_query": "\nPREFIX rh:<http://rdf.rhea-db.org/>\nPREFIX taxon:<http://purl.uniprot.org/taxonomy/>\nPREFIX ec:<http://purl.uniprot.org/enzyme/>\nPREFIX rdfs:<http://www.w3.org/2000/01/rdf-schema#>\nPREFIX up:<http://purl.uniprot.org/core/>\nPREFIX keywords:<http://purl.uniprot.org/keywords/>\n\nSELECT\n  ?chebi\n  ?reaction\n  ?ecNumber\n  ?protein\n  ?ensemblTranscript\n  ?ensemblGene\nWHERE {\n  SERVICE <https://sparql.uniprot.org/sparql> {\n    ?protein a up:Protein .\n    ?protein up:reviewed true .\n    ?protein up:organism taxon:9606 .\n    ?protein up:classifiedWith keywords:1185 .\n\n    ?protein rdfs:seeAlso ?ensemblTranscript .\n    ?ensemblTranscript a up:Transcript_Resource .\n    ?ensemblTranscript up:database <http://purl.uniprot.org/database/Ensembl> .\n    ?ensemblTranscript up:transcribedFrom ?ensemblGene .\n\n      {?protein up:enzyme ?ecNumber .}\n    UNION\n      {?protein up:domain/up:enzyme ?ecNumber .}\n    UNION\n      {?protein up:component/up:enzyme ?ecNumber .}\n  }\n\n  ?reaction rdfs:subClassOf rh:Reaction .\n  ?reaction rh:status rh:Approved .\n  ?reaction rh:ec ?ecNumber .\n  ?reaction rh:side ?reactionSide .\n  ?reactionSide rh:contains ?participant .\n  ?participant rh:compound ?compound .\n  ?compound rh:chebi ?chebi . # only considering small molecules participants\n}",
    "target_endpoint": "https://sparql.rhea-db.org/sparql",
    "federates_with": [
      "https://sparql.uniprot.org/sparql"
    ],
    "endpoint_set": "Rhea",
    "file_path": "Rhea/115_Retrieve_the_set_of_metabolites_involved_in_reactions_catalyzed_by_human_genes_HUMAN_reference_proteome.ttl",
    "predicted_query": "# https://sparql.uniprot.org/sparql\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX up: <http://purl.uniprot.org/core/>\nPREFIX uniprot: <http://purl.uniprot.org/uniprot/>\n\nSELECT DISTINCT ?metabolite ?reaction\nWHERE {\n  # Find human proteins (from UniProt)\n  SERVICE <https://sparql.uniprot.org/sparql> {\n    ?protein a up:Protein ;\n             up:organism uniprot:9606 .  # 9606 is the NCBI Taxonomy ID for Homo sapiens\n    ?gene up:encodedBy ?protein .\n  }\n\n  # Find reactions in Rhea associated with these proteins\n  SERVICE <https://sparql.rhea-db.org/sparql> {\n    ?reaction rdfs:label ?reactionLabel ;\n              <http://purl.rhea-db.org/vocabulary/master-reaction> ?masterReaction .\n    ?masterReaction <http://purl.rhea-db.org/vocabulary/directionalReaction> ?directionalReaction .\n    {\n      ?directionalReaction <http://purl.rhea-db.org/vocabulary/left> ?metabolite .\n    }\n    UNION {\n      ?directionalReaction <http://purl.rhea-db.org/vocabulary/right> ?metabolite .\n    }\n    ?reaction <http://purl.rhea-db.org/vocabulary/enzyme> ?uniprotProtein .\n    FILTER (STR(?uniprotProtein) = STR(?protein)) # Link to UniProt protein\n  }\n}",
    "predicted_endpoint": "https://sparql.uniprot.org/sparql",
    "predicted_endpoint_equal_to_target_endpoint": false,
    "predicted_endpoint_in_federates_with": true,
    "predicted_endpoint_or_federated_endpoint": true,
    "run_id_langsmith": "e9743a04-36bc-4894-a06f-06887ce06e39",
    "evaluation_timestamp": "2025-04-25T17:18:55.300493",
    "question_understanding_tokens": 249,
    "question_understanding_completion_tokens": 28,
    "question_understanding_total_tokens": 277,
    "sparql_construction_prompt_tokens": 2401,
    "sparql_construction_completion_tokens": 562,
    "sparql_construction_total_tokens": 2963,
    "is_valid_sparql": true,
    "sparql_syntax_error": "syntactically correct",
    "result_eval_f1_score": 0.0,
    "result_eval_precision": 0.0,
    "result_eval_recall": 0.0,
    "error_occured_at_endpoint": false,
    "predicted_query_result_is_empty": true,
    "error_occured_at_endpoint_message": "no error, but empty result"
  }
]